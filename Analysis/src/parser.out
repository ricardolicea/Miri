Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    NUMBER
    MULTP
    DOT
    LESSEQ
    COLON
    GRTREQ
    CYCLE
    DIVIDE
    SPACE
    newline
    TYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM createDirProc ID altaPrograma SEMICOLON program2 cuerpo END SEMICOLON
Rule 2     createDirProc -> <empty>
Rule 3     altaPrograma -> empty
Rule 4     program2 -> declare program3
Rule 5     declare -> DECLARE declareRecursivo
Rule 6     declareRecursivo -> type ID altaVarGlobal declare2 declare3 SEMICOLON declareRecursivo
Rule 7     declare2 -> array
Rule 8     declare3 -> COMMA ID altaVarGlobal declare3
Rule 9     program3 -> funct program3
Rule 10    funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
Rule 11    altaModulo -> <empty>
Rule 12    funct2 -> type ID funct3
Rule 13    funct3 -> COMMA funct type ID funct3
Rule 14    funct2 -> empty
Rule 15    funct3 -> empty
Rule 16    program3 -> empty
Rule 17    altaVarGlobal -> <empty>
Rule 18    declareRecursivo -> empty
Rule 19    declare -> empty
Rule 20    declare3 -> empty
Rule 21    array -> LEFTBRACK exp RIGHTBRACK array
Rule 22    array -> empty
Rule 23    type -> type2
Rule 24    type2 -> INT
Rule 25    type2 -> FLOAT
Rule 26    type2 -> STRING
Rule 27    type2 -> BOOL
Rule 28    type2 -> VOID
Rule 29    cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY
Rule 30    altaModuloMain -> <empty>
Rule 31    est -> conditional
Rule 32    est -> declareLocal
Rule 33    declareLocal -> DECLARE declareRecursivoLocal
Rule 34    declareRecursivoLocal -> type ID altaVarLocal declare2Local declare3Local SEMICOLON declareRecursivoLocal
Rule 35    declare2Local -> array
Rule 36    declare3Local -> COMMA ID altaVarLocal declare3Local
Rule 37    declareRecursivoLocal -> empty
Rule 38    declareLocal -> empty
Rule 39    declare2Local -> empty
Rule 40    declare3Local -> empty
Rule 41    altaVarLocal -> <empty>
Rule 42    est -> cycles
Rule 43    est -> input
Rule 44    est -> output
Rule 45    est -> assignment
Rule 46    est -> funct
Rule 47    est -> empty
Rule 48    assignment -> ID ASSGN ID SEMICOLON
Rule 49    conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
Rule 50    conditional2 -> exp conditional2
Rule 51    conditional2 -> empty
Rule 52    cycles -> while
Rule 53    cycles -> for
Rule 54    cycles -> do-while
Rule 55    do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR
Rule 56    while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
Rule 57    while2 -> exp while2
Rule 58    while2 -> empty
Rule 59    for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
Rule 60    arithmeticOp -> SUM
Rule 61    arithmeticOp -> MINUS
Rule 62    for2 -> ID ASSGN ID for2
Rule 63    for2 -> empty
Rule 64    for3 -> exp for3
Rule 65    for3 -> empty
Rule 66    exp -> ID array exp2 SEMICOLON
Rule 67    exp2 -> LESS
Rule 68    exp2 -> GRTR
Rule 69    exp2 -> EQ
Rule 70    exp2 -> NOTEQ
Rule 71    exp2 -> AND
Rule 72    exp2 -> OR
Rule 73    exp2 -> arithmeticExp
Rule 74    arithmeticExp -> ID EQ ID arithmeticOp ID arithmeticExp
Rule 75    arithmeticExp -> empty
Rule 76    output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
Rule 77    output2 -> ID output2
Rule 78    output2 -> empty
Rule 79    input -> READ LEFTPAR ID RIGHTPAR SEMICOLON
Rule 80    empty -> <empty>

Terminals, with rules where they appear

AND                  : 71
ASSGN                : 48 62
BOOL                 : 27
COLON                : 
COMMA                : 8 13 36
CYCLE                : 
DECLARE              : 5 33
DIVIDE               : 
DO                   : 55
DOT                  : 
ELSE                 : 49
END                  : 1
EQ                   : 69 74
FLOAT                : 25
FOR                  : 59
FUNCTION             : 10
GRTR                 : 68
GRTREQ               : 
ID                   : 1 6 8 10 12 13 34 36 48 48 59 62 62 66 74 74 74 77 79
IF                   : 49
INT                  : 24
LEFTBRACK            : 21
LEFTKEY              : 10 29 49 55 56 59
LEFTPAR              : 10 29 49 55 56 59 76 79
LESS                 : 67
LESSEQ               : 
MAIN                 : 29
MINUS                : 61
MULTP                : 
NOTEQ                : 70
NUMBER               : 
OR                   : 72
PROGRAM              : 1
QUOTE                : 76 76
READ                 : 79
RIGHTBRACK           : 21
RIGHTKEY             : 10 29 49 49 55 56 59
RIGHTPAR             : 10 29 49 55 56 59 76 79
SEMICOLON            : 1 1 6 34 48 59 59 66 76 79
SPACE                : 
STRING               : 26
SUM                  : 60
TYPE                 : 
VOID                 : 28
WHILE                : 55 56 56
WRITE                : 76
error                : 
newline              : 

Nonterminals, with rules where they appear

altaModulo           : 10
altaModuloMain       : 29
altaPrograma         : 1
altaVarGlobal        : 6 8
altaVarLocal         : 34 36
arithmeticExp        : 73 74
arithmeticOp         : 59 59 74
array                : 7 21 35 66
assignment           : 45
conditional          : 31
conditional2         : 49 50
createDirProc        : 1
cuerpo               : 1
cycles               : 42
declare              : 4
declare2             : 6
declare2Local        : 34
declare3             : 6 8
declare3Local        : 34 36
declareLocal         : 32
declareRecursivo     : 5 6
declareRecursivoLocal : 33 34
do-while             : 54
empty                : 3 14 15 16 18 19 20 22 37 38 39 40 47 51 58 63 65 75 78
est                  : 10 29 49 49 55 56 59
exp                  : 21 50 57 64 76
exp2                 : 66
for                  : 53
for2                 : 59 62
for3                 : 59 64
funct                : 9 13 46
funct2               : 10
funct3               : 12 13
input                : 43
output               : 44
output2              : 76 77
program              : 0
program2             : 1
program3             : 4 9
type                 : 6 10 12 13 34
type2                : 23
while                : 52
while2               : 55 56 57

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM createDirProc ID altaPrograma SEMICOLON program2 cuerpo END SEMICOLON

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . createDirProc ID altaPrograma SEMICOLON program2 cuerpo END SEMICOLON
    (2) createDirProc -> .

    ID              reduce using rule 2 (createDirProc -> .)

    createDirProc                  shift and go to state 3

state 3

    (1) program -> PROGRAM createDirProc . ID altaPrograma SEMICOLON program2 cuerpo END SEMICOLON

    ID              shift and go to state 4


state 4

    (1) program -> PROGRAM createDirProc ID . altaPrograma SEMICOLON program2 cuerpo END SEMICOLON
    (3) altaPrograma -> . empty
    (80) empty -> .

    SEMICOLON       reduce using rule 80 (empty -> .)

    altaPrograma                   shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) program -> PROGRAM createDirProc ID altaPrograma . SEMICOLON program2 cuerpo END SEMICOLON

    SEMICOLON       shift and go to state 7


state 6

    (3) altaPrograma -> empty .

    SEMICOLON       reduce using rule 3 (altaPrograma -> empty .)


state 7

    (1) program -> PROGRAM createDirProc ID altaPrograma SEMICOLON . program2 cuerpo END SEMICOLON
    (4) program2 -> . declare program3
    (5) declare -> . DECLARE declareRecursivo
    (19) declare -> . empty
    (80) empty -> .

    DECLARE         shift and go to state 9
    FUNCTION        reduce using rule 80 (empty -> .)
    MAIN            reduce using rule 80 (empty -> .)

    program2                       shift and go to state 8
    declare                        shift and go to state 10
    empty                          shift and go to state 11

state 8

    (1) program -> PROGRAM createDirProc ID altaPrograma SEMICOLON program2 . cuerpo END SEMICOLON
    (29) cuerpo -> . MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY

    MAIN            shift and go to state 13

    cuerpo                         shift and go to state 12

state 9

    (5) declare -> DECLARE . declareRecursivo
    (6) declareRecursivo -> . type ID altaVarGlobal declare2 declare3 SEMICOLON declareRecursivo
    (18) declareRecursivo -> . empty
    (23) type -> . type2
    (80) empty -> .
    (24) type2 -> . INT
    (25) type2 -> . FLOAT
    (26) type2 -> . STRING
    (27) type2 -> . BOOL
    (28) type2 -> . VOID

    FUNCTION        reduce using rule 80 (empty -> .)
    MAIN            reduce using rule 80 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18
    VOID            shift and go to state 16

    declareRecursivo               shift and go to state 19
    type                           shift and go to state 20
    empty                          shift and go to state 21
    type2                          shift and go to state 22

state 10

    (4) program2 -> declare . program3
    (9) program3 -> . funct program3
    (16) program3 -> . empty
    (10) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (80) empty -> .

    FUNCTION        shift and go to state 23
    MAIN            reduce using rule 80 (empty -> .)

    funct                          shift and go to state 24
    program3                       shift and go to state 25
    empty                          shift and go to state 26

state 11

    (19) declare -> empty .

    FUNCTION        reduce using rule 19 (declare -> empty .)
    MAIN            reduce using rule 19 (declare -> empty .)


state 12

    (1) program -> PROGRAM createDirProc ID altaPrograma SEMICOLON program2 cuerpo . END SEMICOLON

    END             shift and go to state 27


state 13

    (29) cuerpo -> MAIN . LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY

    LEFTPAR         shift and go to state 28


state 14

    (26) type2 -> STRING .

    ID              reduce using rule 26 (type2 -> STRING .)


state 15

    (24) type2 -> INT .

    ID              reduce using rule 24 (type2 -> INT .)


state 16

    (28) type2 -> VOID .

    ID              reduce using rule 28 (type2 -> VOID .)


state 17

    (25) type2 -> FLOAT .

    ID              reduce using rule 25 (type2 -> FLOAT .)


state 18

    (27) type2 -> BOOL .

    ID              reduce using rule 27 (type2 -> BOOL .)


state 19

    (5) declare -> DECLARE declareRecursivo .

    FUNCTION        reduce using rule 5 (declare -> DECLARE declareRecursivo .)
    MAIN            reduce using rule 5 (declare -> DECLARE declareRecursivo .)


state 20

    (6) declareRecursivo -> type . ID altaVarGlobal declare2 declare3 SEMICOLON declareRecursivo

    ID              shift and go to state 29


state 21

    (18) declareRecursivo -> empty .

    FUNCTION        reduce using rule 18 (declareRecursivo -> empty .)
    MAIN            reduce using rule 18 (declareRecursivo -> empty .)


state 22

    (23) type -> type2 .

    ID              reduce using rule 23 (type -> type2 .)


state 23

    (10) funct -> FUNCTION . type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (23) type -> . type2
    (24) type2 -> . INT
    (25) type2 -> . FLOAT
    (26) type2 -> . STRING
    (27) type2 -> . BOOL
    (28) type2 -> . VOID

    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18
    VOID            shift and go to state 16

    type                           shift and go to state 30
    type2                          shift and go to state 22

state 24

    (9) program3 -> funct . program3
    (9) program3 -> . funct program3
    (16) program3 -> . empty
    (10) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (80) empty -> .

    FUNCTION        shift and go to state 23
    MAIN            reduce using rule 80 (empty -> .)

    program3                       shift and go to state 31
    funct                          shift and go to state 24
    empty                          shift and go to state 26

state 25

    (4) program2 -> declare program3 .

    MAIN            reduce using rule 4 (program2 -> declare program3 .)


state 26

    (16) program3 -> empty .

    MAIN            reduce using rule 16 (program3 -> empty .)


state 27

    (1) program -> PROGRAM createDirProc ID altaPrograma SEMICOLON program2 cuerpo END . SEMICOLON

    SEMICOLON       shift and go to state 32


state 28

    (29) cuerpo -> MAIN LEFTPAR . RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY

    RIGHTPAR        shift and go to state 33


state 29

    (6) declareRecursivo -> type ID . altaVarGlobal declare2 declare3 SEMICOLON declareRecursivo
    (17) altaVarGlobal -> .

    LEFTBRACK       reduce using rule 17 (altaVarGlobal -> .)
    COMMA           reduce using rule 17 (altaVarGlobal -> .)
    SEMICOLON       reduce using rule 17 (altaVarGlobal -> .)

    altaVarGlobal                  shift and go to state 34

state 30

    (10) funct -> FUNCTION type . ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY

    ID              shift and go to state 35


state 31

    (9) program3 -> funct program3 .

    MAIN            reduce using rule 9 (program3 -> funct program3 .)


state 32

    (1) program -> PROGRAM createDirProc ID altaPrograma SEMICOLON program2 cuerpo END SEMICOLON .

    $end            reduce using rule 1 (program -> PROGRAM createDirProc ID altaPrograma SEMICOLON program2 cuerpo END SEMICOLON .)


state 33

    (29) cuerpo -> MAIN LEFTPAR RIGHTPAR . LEFTKEY altaModuloMain est RIGHTKEY

    LEFTKEY         shift and go to state 36


state 34

    (6) declareRecursivo -> type ID altaVarGlobal . declare2 declare3 SEMICOLON declareRecursivo
    (7) declare2 -> . array
    (21) array -> . LEFTBRACK exp RIGHTBRACK array
    (22) array -> . empty
    (80) empty -> .

    LEFTBRACK       shift and go to state 37
    COMMA           reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)

    declare2                       shift and go to state 38
    array                          shift and go to state 39
    empty                          shift and go to state 40

state 35

    (10) funct -> FUNCTION type ID . altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (11) altaModulo -> .

    LEFTPAR         reduce using rule 11 (altaModulo -> .)

    altaModulo                     shift and go to state 41

state 36

    (29) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY . altaModuloMain est RIGHTKEY
    (30) altaModuloMain -> .

    IF              reduce using rule 30 (altaModuloMain -> .)
    DECLARE         reduce using rule 30 (altaModuloMain -> .)
    READ            reduce using rule 30 (altaModuloMain -> .)
    WRITE           reduce using rule 30 (altaModuloMain -> .)
    ID              reduce using rule 30 (altaModuloMain -> .)
    FUNCTION        reduce using rule 30 (altaModuloMain -> .)
    WHILE           reduce using rule 30 (altaModuloMain -> .)
    FOR             reduce using rule 30 (altaModuloMain -> .)
    DO              reduce using rule 30 (altaModuloMain -> .)
    RIGHTKEY        reduce using rule 30 (altaModuloMain -> .)

    altaModuloMain                 shift and go to state 42

state 37

    (21) array -> LEFTBRACK . exp RIGHTBRACK array
    (66) exp -> . ID array exp2 SEMICOLON

    ID              shift and go to state 44

    exp                            shift and go to state 43

state 38

    (6) declareRecursivo -> type ID altaVarGlobal declare2 . declare3 SEMICOLON declareRecursivo
    (8) declare3 -> . COMMA ID altaVarGlobal declare3
    (20) declare3 -> . empty
    (80) empty -> .

    COMMA           shift and go to state 46
    SEMICOLON       reduce using rule 80 (empty -> .)

    declare3                       shift and go to state 45
    empty                          shift and go to state 47

state 39

    (7) declare2 -> array .

    COMMA           reduce using rule 7 (declare2 -> array .)
    SEMICOLON       reduce using rule 7 (declare2 -> array .)


state 40

    (22) array -> empty .

    LESS            reduce using rule 22 (array -> empty .)
    GRTR            reduce using rule 22 (array -> empty .)
    EQ              reduce using rule 22 (array -> empty .)
    NOTEQ           reduce using rule 22 (array -> empty .)
    AND             reduce using rule 22 (array -> empty .)
    OR              reduce using rule 22 (array -> empty .)
    ID              reduce using rule 22 (array -> empty .)
    SEMICOLON       reduce using rule 22 (array -> empty .)
    COMMA           reduce using rule 22 (array -> empty .)


state 41

    (10) funct -> FUNCTION type ID altaModulo . LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY

    LEFTPAR         shift and go to state 48


state 42

    (29) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain . est RIGHTKEY
    (31) est -> . conditional
    (32) est -> . declareLocal
    (42) est -> . cycles
    (43) est -> . input
    (44) est -> . output
    (45) est -> . assignment
    (46) est -> . funct
    (47) est -> . empty
    (49) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (33) declareLocal -> . DECLARE declareRecursivoLocal
    (38) declareLocal -> . empty
    (52) cycles -> . while
    (53) cycles -> . for
    (54) cycles -> . do-while
    (79) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (76) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (48) assignment -> . ID ASSGN ID SEMICOLON
    (10) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (80) empty -> .
    (56) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (59) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (55) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 63
    DECLARE         shift and go to state 62
    READ            shift and go to state 51
    WRITE           shift and go to state 60
    ID              shift and go to state 61
    FUNCTION        shift and go to state 23
    RIGHTKEY        reduce using rule 80 (empty -> .)
    WHILE           shift and go to state 53
    FOR             shift and go to state 58
    DO              shift and go to state 49

    funct                          shift and go to state 50
    conditional                    shift and go to state 52
    do-while                       shift and go to state 54
    est                            shift and go to state 55
    for                            shift and go to state 56
    input                          shift and go to state 57
    assignment                     shift and go to state 59
    cycles                         shift and go to state 64
    while                          shift and go to state 65
    empty                          shift and go to state 66
    output                         shift and go to state 67
    declareLocal                   shift and go to state 68

state 43

    (21) array -> LEFTBRACK exp . RIGHTBRACK array

    RIGHTBRACK      shift and go to state 69


state 44

    (66) exp -> ID . array exp2 SEMICOLON
    (21) array -> . LEFTBRACK exp RIGHTBRACK array
    (22) array -> . empty
    (80) empty -> .

    LEFTBRACK       shift and go to state 37
    LESS            reduce using rule 80 (empty -> .)
    GRTR            reduce using rule 80 (empty -> .)
    EQ              reduce using rule 80 (empty -> .)
    NOTEQ           reduce using rule 80 (empty -> .)
    AND             reduce using rule 80 (empty -> .)
    OR              reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)

    array                          shift and go to state 70
    empty                          shift and go to state 40

state 45

    (6) declareRecursivo -> type ID altaVarGlobal declare2 declare3 . SEMICOLON declareRecursivo

    SEMICOLON       shift and go to state 71


state 46

    (8) declare3 -> COMMA . ID altaVarGlobal declare3

    ID              shift and go to state 72


state 47

    (20) declare3 -> empty .

    SEMICOLON       reduce using rule 20 (declare3 -> empty .)


state 48

    (10) funct -> FUNCTION type ID altaModulo LEFTPAR . funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (12) funct2 -> . type ID funct3
    (14) funct2 -> . empty
    (23) type -> . type2
    (80) empty -> .
    (24) type2 -> . INT
    (25) type2 -> . FLOAT
    (26) type2 -> . STRING
    (27) type2 -> . BOOL
    (28) type2 -> . VOID

    RIGHTPAR        reduce using rule 80 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18
    VOID            shift and go to state 16

    funct2                         shift and go to state 73
    type                           shift and go to state 74
    empty                          shift and go to state 75
    type2                          shift and go to state 22

state 49

    (55) do-while -> DO . LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    LEFTKEY         shift and go to state 76


state 50

    (46) est -> funct .

    RIGHTKEY        reduce using rule 46 (est -> funct .)


state 51

    (79) input -> READ . LEFTPAR ID RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 77


state 52

    (31) est -> conditional .

    RIGHTKEY        reduce using rule 31 (est -> conditional .)


state 53

    (56) while -> WHILE . LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY

    LEFTPAR         shift and go to state 78


state 54

    (54) cycles -> do-while .

    RIGHTKEY        reduce using rule 54 (cycles -> do-while .)


state 55

    (29) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est . RIGHTKEY

    RIGHTKEY        shift and go to state 79


state 56

    (53) cycles -> for .

    RIGHTKEY        reduce using rule 53 (cycles -> for .)


state 57

    (43) est -> input .

    RIGHTKEY        reduce using rule 43 (est -> input .)


state 58

    (59) for -> FOR . LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY

    LEFTPAR         shift and go to state 80


state 59

    (45) est -> assignment .

    RIGHTKEY        reduce using rule 45 (est -> assignment .)


state 60

    (76) output -> WRITE . LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 81


state 61

    (48) assignment -> ID . ASSGN ID SEMICOLON

    ASSGN           shift and go to state 82


state 62

    (33) declareLocal -> DECLARE . declareRecursivoLocal
    (34) declareRecursivoLocal -> . type ID altaVarLocal declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (37) declareRecursivoLocal -> . empty
    (23) type -> . type2
    (80) empty -> .
    (24) type2 -> . INT
    (25) type2 -> . FLOAT
    (26) type2 -> . STRING
    (27) type2 -> . BOOL
    (28) type2 -> . VOID

    RIGHTKEY        reduce using rule 80 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18
    VOID            shift and go to state 16

    declareRecursivoLocal          shift and go to state 83
    type2                          shift and go to state 22
    type                           shift and go to state 84
    empty                          shift and go to state 85

state 63

    (49) conditional -> IF . LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY

    LEFTPAR         shift and go to state 86


state 64

    (42) est -> cycles .

    RIGHTKEY        reduce using rule 42 (est -> cycles .)


state 65

    (52) cycles -> while .

    RIGHTKEY        reduce using rule 52 (cycles -> while .)


state 66

    (47) est -> empty .
    (38) declareLocal -> empty .

  ! reduce/reduce conflict for RIGHTKEY resolved using rule 38 (declareLocal -> empty .)
    RIGHTKEY        reduce using rule 38 (declareLocal -> empty .)

  ! RIGHTKEY        [ reduce using rule 47 (est -> empty .) ]


state 67

    (44) est -> output .

    RIGHTKEY        reduce using rule 44 (est -> output .)


state 68

    (32) est -> declareLocal .

    RIGHTKEY        reduce using rule 32 (est -> declareLocal .)


state 69

    (21) array -> LEFTBRACK exp RIGHTBRACK . array
    (21) array -> . LEFTBRACK exp RIGHTBRACK array
    (22) array -> . empty
    (80) empty -> .

    LEFTBRACK       shift and go to state 37
    COMMA           reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)
    LESS            reduce using rule 80 (empty -> .)
    GRTR            reduce using rule 80 (empty -> .)
    EQ              reduce using rule 80 (empty -> .)
    NOTEQ           reduce using rule 80 (empty -> .)
    AND             reduce using rule 80 (empty -> .)
    OR              reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)

    array                          shift and go to state 87
    empty                          shift and go to state 40

state 70

    (66) exp -> ID array . exp2 SEMICOLON
    (67) exp2 -> . LESS
    (68) exp2 -> . GRTR
    (69) exp2 -> . EQ
    (70) exp2 -> . NOTEQ
    (71) exp2 -> . AND
    (72) exp2 -> . OR
    (73) exp2 -> . arithmeticExp
    (74) arithmeticExp -> . ID EQ ID arithmeticOp ID arithmeticExp
    (75) arithmeticExp -> . empty
    (80) empty -> .

    LESS            shift and go to state 90
    GRTR            shift and go to state 94
    EQ              shift and go to state 95
    NOTEQ           shift and go to state 91
    AND             shift and go to state 88
    OR              shift and go to state 93
    ID              shift and go to state 96
    SEMICOLON       reduce using rule 80 (empty -> .)

    exp2                           shift and go to state 92
    arithmeticExp                  shift and go to state 89
    empty                          shift and go to state 97

state 71

    (6) declareRecursivo -> type ID altaVarGlobal declare2 declare3 SEMICOLON . declareRecursivo
    (6) declareRecursivo -> . type ID altaVarGlobal declare2 declare3 SEMICOLON declareRecursivo
    (18) declareRecursivo -> . empty
    (23) type -> . type2
    (80) empty -> .
    (24) type2 -> . INT
    (25) type2 -> . FLOAT
    (26) type2 -> . STRING
    (27) type2 -> . BOOL
    (28) type2 -> . VOID

    FUNCTION        reduce using rule 80 (empty -> .)
    MAIN            reduce using rule 80 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18
    VOID            shift and go to state 16

    declareRecursivo               shift and go to state 98
    type                           shift and go to state 20
    empty                          shift and go to state 21
    type2                          shift and go to state 22

state 72

    (8) declare3 -> COMMA ID . altaVarGlobal declare3
    (17) altaVarGlobal -> .

    COMMA           reduce using rule 17 (altaVarGlobal -> .)
    SEMICOLON       reduce using rule 17 (altaVarGlobal -> .)

    altaVarGlobal                  shift and go to state 99

state 73

    (10) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 . RIGHTPAR LEFTKEY est RIGHTKEY

    RIGHTPAR        shift and go to state 100


state 74

    (12) funct2 -> type . ID funct3

    ID              shift and go to state 101


state 75

    (14) funct2 -> empty .

    RIGHTPAR        reduce using rule 14 (funct2 -> empty .)


state 76

    (55) do-while -> DO LEFTKEY . est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR
    (31) est -> . conditional
    (32) est -> . declareLocal
    (42) est -> . cycles
    (43) est -> . input
    (44) est -> . output
    (45) est -> . assignment
    (46) est -> . funct
    (47) est -> . empty
    (49) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (33) declareLocal -> . DECLARE declareRecursivoLocal
    (38) declareLocal -> . empty
    (52) cycles -> . while
    (53) cycles -> . for
    (54) cycles -> . do-while
    (79) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (76) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (48) assignment -> . ID ASSGN ID SEMICOLON
    (10) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (80) empty -> .
    (56) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (59) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (55) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 63
    DECLARE         shift and go to state 62
    READ            shift and go to state 51
    WRITE           shift and go to state 60
    ID              shift and go to state 61
    FUNCTION        shift and go to state 23
    RIGHTKEY        reduce using rule 80 (empty -> .)
    WHILE           shift and go to state 53
    FOR             shift and go to state 58
    DO              shift and go to state 49

    funct                          shift and go to state 50
    conditional                    shift and go to state 52
    do-while                       shift and go to state 54
    est                            shift and go to state 102
    for                            shift and go to state 56
    input                          shift and go to state 57
    assignment                     shift and go to state 59
    cycles                         shift and go to state 64
    while                          shift and go to state 65
    empty                          shift and go to state 66
    output                         shift and go to state 67
    declareLocal                   shift and go to state 68

state 77

    (79) input -> READ LEFTPAR . ID RIGHTPAR SEMICOLON

    ID              shift and go to state 103


state 78

    (56) while -> WHILE LEFTPAR . while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (57) while2 -> . exp while2
    (58) while2 -> . empty
    (66) exp -> . ID array exp2 SEMICOLON
    (80) empty -> .

    ID              shift and go to state 44
    RIGHTPAR        reduce using rule 80 (empty -> .)

    while2                         shift and go to state 104
    exp                            shift and go to state 105
    empty                          shift and go to state 106

state 79

    (29) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY .

    END             reduce using rule 29 (cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY .)


state 80

    (59) for -> FOR LEFTPAR . for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (62) for2 -> . ID ASSGN ID for2
    (63) for2 -> . empty
    (80) empty -> .

    ID              shift and go to state 108
    SEMICOLON       reduce using rule 80 (empty -> .)

    for2                           shift and go to state 107
    empty                          shift and go to state 109

state 81

    (76) output -> WRITE LEFTPAR . output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (77) output2 -> . ID output2
    (78) output2 -> . empty
    (80) empty -> .

    ID              shift and go to state 111
    QUOTE           reduce using rule 80 (empty -> .)

    output2                        shift and go to state 110
    empty                          shift and go to state 112

state 82

    (48) assignment -> ID ASSGN . ID SEMICOLON

    ID              shift and go to state 113


state 83

    (33) declareLocal -> DECLARE declareRecursivoLocal .

    RIGHTKEY        reduce using rule 33 (declareLocal -> DECLARE declareRecursivoLocal .)


state 84

    (34) declareRecursivoLocal -> type . ID altaVarLocal declare2Local declare3Local SEMICOLON declareRecursivoLocal

    ID              shift and go to state 114


state 85

    (37) declareRecursivoLocal -> empty .

    RIGHTKEY        reduce using rule 37 (declareRecursivoLocal -> empty .)


state 86

    (49) conditional -> IF LEFTPAR . conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (50) conditional2 -> . exp conditional2
    (51) conditional2 -> . empty
    (66) exp -> . ID array exp2 SEMICOLON
    (80) empty -> .

    ID              shift and go to state 44
    RIGHTPAR        reduce using rule 80 (empty -> .)

    conditional2                   shift and go to state 117
    exp                            shift and go to state 116
    empty                          shift and go to state 115

state 87

    (21) array -> LEFTBRACK exp RIGHTBRACK array .

    LESS            reduce using rule 21 (array -> LEFTBRACK exp RIGHTBRACK array .)
    GRTR            reduce using rule 21 (array -> LEFTBRACK exp RIGHTBRACK array .)
    EQ              reduce using rule 21 (array -> LEFTBRACK exp RIGHTBRACK array .)
    NOTEQ           reduce using rule 21 (array -> LEFTBRACK exp RIGHTBRACK array .)
    AND             reduce using rule 21 (array -> LEFTBRACK exp RIGHTBRACK array .)
    OR              reduce using rule 21 (array -> LEFTBRACK exp RIGHTBRACK array .)
    ID              reduce using rule 21 (array -> LEFTBRACK exp RIGHTBRACK array .)
    SEMICOLON       reduce using rule 21 (array -> LEFTBRACK exp RIGHTBRACK array .)
    COMMA           reduce using rule 21 (array -> LEFTBRACK exp RIGHTBRACK array .)


state 88

    (71) exp2 -> AND .

    SEMICOLON       reduce using rule 71 (exp2 -> AND .)


state 89

    (73) exp2 -> arithmeticExp .

    SEMICOLON       reduce using rule 73 (exp2 -> arithmeticExp .)


state 90

    (67) exp2 -> LESS .

    SEMICOLON       reduce using rule 67 (exp2 -> LESS .)


state 91

    (70) exp2 -> NOTEQ .

    SEMICOLON       reduce using rule 70 (exp2 -> NOTEQ .)


state 92

    (66) exp -> ID array exp2 . SEMICOLON

    SEMICOLON       shift and go to state 118


state 93

    (72) exp2 -> OR .

    SEMICOLON       reduce using rule 72 (exp2 -> OR .)


state 94

    (68) exp2 -> GRTR .

    SEMICOLON       reduce using rule 68 (exp2 -> GRTR .)


state 95

    (69) exp2 -> EQ .

    SEMICOLON       reduce using rule 69 (exp2 -> EQ .)


state 96

    (74) arithmeticExp -> ID . EQ ID arithmeticOp ID arithmeticExp

    EQ              shift and go to state 119


state 97

    (75) arithmeticExp -> empty .

    SEMICOLON       reduce using rule 75 (arithmeticExp -> empty .)


state 98

    (6) declareRecursivo -> type ID altaVarGlobal declare2 declare3 SEMICOLON declareRecursivo .

    FUNCTION        reduce using rule 6 (declareRecursivo -> type ID altaVarGlobal declare2 declare3 SEMICOLON declareRecursivo .)
    MAIN            reduce using rule 6 (declareRecursivo -> type ID altaVarGlobal declare2 declare3 SEMICOLON declareRecursivo .)


state 99

    (8) declare3 -> COMMA ID altaVarGlobal . declare3
    (8) declare3 -> . COMMA ID altaVarGlobal declare3
    (20) declare3 -> . empty
    (80) empty -> .

    COMMA           shift and go to state 46
    SEMICOLON       reduce using rule 80 (empty -> .)

    empty                          shift and go to state 47
    declare3                       shift and go to state 120

state 100

    (10) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR . LEFTKEY est RIGHTKEY

    LEFTKEY         shift and go to state 121


state 101

    (12) funct2 -> type ID . funct3
    (13) funct3 -> . COMMA funct type ID funct3
    (15) funct3 -> . empty
    (80) empty -> .

    COMMA           shift and go to state 123
    RIGHTPAR        reduce using rule 80 (empty -> .)

    funct3                         shift and go to state 122
    empty                          shift and go to state 124

state 102

    (55) do-while -> DO LEFTKEY est . RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    RIGHTKEY        shift and go to state 125


state 103

    (79) input -> READ LEFTPAR ID . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 126


state 104

    (56) while -> WHILE LEFTPAR while2 . RIGHTPAR WHILE LEFTKEY est RIGHTKEY

    RIGHTPAR        shift and go to state 127


state 105

    (57) while2 -> exp . while2
    (57) while2 -> . exp while2
    (58) while2 -> . empty
    (66) exp -> . ID array exp2 SEMICOLON
    (80) empty -> .

    ID              shift and go to state 44
    RIGHTPAR        reduce using rule 80 (empty -> .)

    while2                         shift and go to state 128
    empty                          shift and go to state 106
    exp                            shift and go to state 105

state 106

    (58) while2 -> empty .

    RIGHTPAR        reduce using rule 58 (while2 -> empty .)


state 107

    (59) for -> FOR LEFTPAR for2 . SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY

    SEMICOLON       shift and go to state 129


state 108

    (62) for2 -> ID . ASSGN ID for2

    ASSGN           shift and go to state 130


state 109

    (63) for2 -> empty .

    SEMICOLON       reduce using rule 63 (for2 -> empty .)


state 110

    (76) output -> WRITE LEFTPAR output2 . QUOTE exp QUOTE RIGHTPAR SEMICOLON

    QUOTE           shift and go to state 131


state 111

    (77) output2 -> ID . output2
    (77) output2 -> . ID output2
    (78) output2 -> . empty
    (80) empty -> .

    ID              shift and go to state 111
    QUOTE           reduce using rule 80 (empty -> .)

    output2                        shift and go to state 132
    empty                          shift and go to state 112

state 112

    (78) output2 -> empty .

    QUOTE           reduce using rule 78 (output2 -> empty .)


state 113

    (48) assignment -> ID ASSGN ID . SEMICOLON

    SEMICOLON       shift and go to state 133


state 114

    (34) declareRecursivoLocal -> type ID . altaVarLocal declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (41) altaVarLocal -> .

    LEFTBRACK       reduce using rule 41 (altaVarLocal -> .)
    COMMA           reduce using rule 41 (altaVarLocal -> .)
    SEMICOLON       reduce using rule 41 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 134

state 115

    (51) conditional2 -> empty .

    RIGHTPAR        reduce using rule 51 (conditional2 -> empty .)


state 116

    (50) conditional2 -> exp . conditional2
    (50) conditional2 -> . exp conditional2
    (51) conditional2 -> . empty
    (66) exp -> . ID array exp2 SEMICOLON
    (80) empty -> .

    ID              shift and go to state 44
    RIGHTPAR        reduce using rule 80 (empty -> .)

    empty                          shift and go to state 115
    conditional2                   shift and go to state 135
    exp                            shift and go to state 116

state 117

    (49) conditional -> IF LEFTPAR conditional2 . RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY

    RIGHTPAR        shift and go to state 136


state 118

    (66) exp -> ID array exp2 SEMICOLON .

    ID              reduce using rule 66 (exp -> ID array exp2 SEMICOLON .)
    RIGHTPAR        reduce using rule 66 (exp -> ID array exp2 SEMICOLON .)
    SEMICOLON       reduce using rule 66 (exp -> ID array exp2 SEMICOLON .)
    QUOTE           reduce using rule 66 (exp -> ID array exp2 SEMICOLON .)
    RIGHTBRACK      reduce using rule 66 (exp -> ID array exp2 SEMICOLON .)


state 119

    (74) arithmeticExp -> ID EQ . ID arithmeticOp ID arithmeticExp

    ID              shift and go to state 137


state 120

    (8) declare3 -> COMMA ID altaVarGlobal declare3 .

    SEMICOLON       reduce using rule 8 (declare3 -> COMMA ID altaVarGlobal declare3 .)


state 121

    (10) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY . est RIGHTKEY
    (31) est -> . conditional
    (32) est -> . declareLocal
    (42) est -> . cycles
    (43) est -> . input
    (44) est -> . output
    (45) est -> . assignment
    (46) est -> . funct
    (47) est -> . empty
    (49) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (33) declareLocal -> . DECLARE declareRecursivoLocal
    (38) declareLocal -> . empty
    (52) cycles -> . while
    (53) cycles -> . for
    (54) cycles -> . do-while
    (79) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (76) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (48) assignment -> . ID ASSGN ID SEMICOLON
    (10) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (80) empty -> .
    (56) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (59) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (55) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 63
    DECLARE         shift and go to state 62
    READ            shift and go to state 51
    WRITE           shift and go to state 60
    ID              shift and go to state 61
    FUNCTION        shift and go to state 23
    RIGHTKEY        reduce using rule 80 (empty -> .)
    WHILE           shift and go to state 53
    FOR             shift and go to state 58
    DO              shift and go to state 49

    funct                          shift and go to state 50
    conditional                    shift and go to state 52
    do-while                       shift and go to state 54
    est                            shift and go to state 138
    for                            shift and go to state 56
    input                          shift and go to state 57
    assignment                     shift and go to state 59
    declareLocal                   shift and go to state 68
    while                          shift and go to state 65
    empty                          shift and go to state 66
    output                         shift and go to state 67
    cycles                         shift and go to state 64

state 122

    (12) funct2 -> type ID funct3 .

    RIGHTPAR        reduce using rule 12 (funct2 -> type ID funct3 .)


state 123

    (13) funct3 -> COMMA . funct type ID funct3
    (10) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY

    FUNCTION        shift and go to state 23

    funct                          shift and go to state 139

state 124

    (15) funct3 -> empty .

    RIGHTPAR        reduce using rule 15 (funct3 -> empty .)


state 125

    (55) do-while -> DO LEFTKEY est RIGHTKEY . WHILE LEFTPAR while2 RIGHTPAR

    WHILE           shift and go to state 140


state 126

    (79) input -> READ LEFTPAR ID RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 141


state 127

    (56) while -> WHILE LEFTPAR while2 RIGHTPAR . WHILE LEFTKEY est RIGHTKEY

    WHILE           shift and go to state 142


state 128

    (57) while2 -> exp while2 .

    RIGHTPAR        reduce using rule 57 (while2 -> exp while2 .)


state 129

    (59) for -> FOR LEFTPAR for2 SEMICOLON . for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (64) for3 -> . exp for3
    (65) for3 -> . empty
    (66) exp -> . ID array exp2 SEMICOLON
    (80) empty -> .

    ID              shift and go to state 44
    SEMICOLON       reduce using rule 80 (empty -> .)

    exp                            shift and go to state 143
    for3                           shift and go to state 144
    empty                          shift and go to state 145

state 130

    (62) for2 -> ID ASSGN . ID for2

    ID              shift and go to state 146


state 131

    (76) output -> WRITE LEFTPAR output2 QUOTE . exp QUOTE RIGHTPAR SEMICOLON
    (66) exp -> . ID array exp2 SEMICOLON

    ID              shift and go to state 44

    exp                            shift and go to state 147

state 132

    (77) output2 -> ID output2 .

    QUOTE           reduce using rule 77 (output2 -> ID output2 .)


state 133

    (48) assignment -> ID ASSGN ID SEMICOLON .

    RIGHTKEY        reduce using rule 48 (assignment -> ID ASSGN ID SEMICOLON .)


state 134

    (34) declareRecursivoLocal -> type ID altaVarLocal . declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (35) declare2Local -> . array
    (39) declare2Local -> . empty
    (21) array -> . LEFTBRACK exp RIGHTBRACK array
    (22) array -> . empty
    (80) empty -> .

    LEFTBRACK       shift and go to state 37
    COMMA           reduce using rule 80 (empty -> .)
    SEMICOLON       reduce using rule 80 (empty -> .)

    declare2Local                  shift and go to state 148
    array                          shift and go to state 149
    empty                          shift and go to state 150

state 135

    (50) conditional2 -> exp conditional2 .

    RIGHTPAR        reduce using rule 50 (conditional2 -> exp conditional2 .)


state 136

    (49) conditional -> IF LEFTPAR conditional2 RIGHTPAR . LEFTKEY est RIGHTKEY ELSE est RIGHTKEY

    LEFTKEY         shift and go to state 151


state 137

    (74) arithmeticExp -> ID EQ ID . arithmeticOp ID arithmeticExp
    (60) arithmeticOp -> . SUM
    (61) arithmeticOp -> . MINUS

    SUM             shift and go to state 153
    MINUS           shift and go to state 154

    arithmeticOp                   shift and go to state 152

state 138

    (10) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 155


state 139

    (13) funct3 -> COMMA funct . type ID funct3
    (23) type -> . type2
    (24) type2 -> . INT
    (25) type2 -> . FLOAT
    (26) type2 -> . STRING
    (27) type2 -> . BOOL
    (28) type2 -> . VOID

    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18
    VOID            shift and go to state 16

    type                           shift and go to state 156
    type2                          shift and go to state 22

state 140

    (55) do-while -> DO LEFTKEY est RIGHTKEY WHILE . LEFTPAR while2 RIGHTPAR

    LEFTPAR         shift and go to state 157


state 141

    (79) input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .

    RIGHTKEY        reduce using rule 79 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)


state 142

    (56) while -> WHILE LEFTPAR while2 RIGHTPAR WHILE . LEFTKEY est RIGHTKEY

    LEFTKEY         shift and go to state 158


state 143

    (64) for3 -> exp . for3
    (64) for3 -> . exp for3
    (65) for3 -> . empty
    (66) exp -> . ID array exp2 SEMICOLON
    (80) empty -> .

    ID              shift and go to state 44
    SEMICOLON       reduce using rule 80 (empty -> .)

    for3                           shift and go to state 159
    empty                          shift and go to state 145
    exp                            shift and go to state 143

state 144

    (59) for -> FOR LEFTPAR for2 SEMICOLON for3 . SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY

    SEMICOLON       shift and go to state 160


state 145

    (65) for3 -> empty .

    SEMICOLON       reduce using rule 65 (for3 -> empty .)


state 146

    (62) for2 -> ID ASSGN ID . for2
    (62) for2 -> . ID ASSGN ID for2
    (63) for2 -> . empty
    (80) empty -> .

    ID              shift and go to state 108
    SEMICOLON       reduce using rule 80 (empty -> .)

    for2                           shift and go to state 161
    empty                          shift and go to state 109

state 147

    (76) output -> WRITE LEFTPAR output2 QUOTE exp . QUOTE RIGHTPAR SEMICOLON

    QUOTE           shift and go to state 162


state 148

    (34) declareRecursivoLocal -> type ID altaVarLocal declare2Local . declare3Local SEMICOLON declareRecursivoLocal
    (36) declare3Local -> . COMMA ID altaVarLocal declare3Local
    (40) declare3Local -> . empty
    (80) empty -> .

    COMMA           shift and go to state 163
    SEMICOLON       reduce using rule 80 (empty -> .)

    empty                          shift and go to state 164
    declare3Local                  shift and go to state 165

state 149

    (35) declare2Local -> array .

    COMMA           reduce using rule 35 (declare2Local -> array .)
    SEMICOLON       reduce using rule 35 (declare2Local -> array .)


state 150

    (39) declare2Local -> empty .
    (22) array -> empty .

  ! reduce/reduce conflict for COMMA resolved using rule 22 (array -> empty .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 22 (array -> empty .)
    COMMA           reduce using rule 22 (array -> empty .)
    SEMICOLON       reduce using rule 22 (array -> empty .)

  ! COMMA           [ reduce using rule 39 (declare2Local -> empty .) ]
  ! SEMICOLON       [ reduce using rule 39 (declare2Local -> empty .) ]


state 151

    (49) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY . est RIGHTKEY ELSE est RIGHTKEY
    (31) est -> . conditional
    (32) est -> . declareLocal
    (42) est -> . cycles
    (43) est -> . input
    (44) est -> . output
    (45) est -> . assignment
    (46) est -> . funct
    (47) est -> . empty
    (49) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (33) declareLocal -> . DECLARE declareRecursivoLocal
    (38) declareLocal -> . empty
    (52) cycles -> . while
    (53) cycles -> . for
    (54) cycles -> . do-while
    (79) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (76) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (48) assignment -> . ID ASSGN ID SEMICOLON
    (10) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (80) empty -> .
    (56) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (59) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (55) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 63
    DECLARE         shift and go to state 62
    READ            shift and go to state 51
    WRITE           shift and go to state 60
    ID              shift and go to state 61
    FUNCTION        shift and go to state 23
    RIGHTKEY        reduce using rule 80 (empty -> .)
    WHILE           shift and go to state 53
    FOR             shift and go to state 58
    DO              shift and go to state 49

    funct                          shift and go to state 50
    conditional                    shift and go to state 52
    do-while                       shift and go to state 54
    est                            shift and go to state 166
    for                            shift and go to state 56
    input                          shift and go to state 57
    empty                          shift and go to state 66
    assignment                     shift and go to state 59
    cycles                         shift and go to state 64
    while                          shift and go to state 65
    output                         shift and go to state 67
    declareLocal                   shift and go to state 68

state 152

    (74) arithmeticExp -> ID EQ ID arithmeticOp . ID arithmeticExp

    ID              shift and go to state 167


state 153

    (60) arithmeticOp -> SUM .

    ID              reduce using rule 60 (arithmeticOp -> SUM .)
    SUM             reduce using rule 60 (arithmeticOp -> SUM .)
    MINUS           reduce using rule 60 (arithmeticOp -> SUM .)
    RIGHTPAR        reduce using rule 60 (arithmeticOp -> SUM .)


state 154

    (61) arithmeticOp -> MINUS .

    ID              reduce using rule 61 (arithmeticOp -> MINUS .)
    SUM             reduce using rule 61 (arithmeticOp -> MINUS .)
    MINUS           reduce using rule 61 (arithmeticOp -> MINUS .)
    RIGHTPAR        reduce using rule 61 (arithmeticOp -> MINUS .)


state 155

    (10) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .

    FUNCTION        reduce using rule 10 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    MAIN            reduce using rule 10 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    RIGHTKEY        reduce using rule 10 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    INT             reduce using rule 10 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    FLOAT           reduce using rule 10 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    STRING          reduce using rule 10 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    BOOL            reduce using rule 10 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    VOID            reduce using rule 10 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)


state 156

    (13) funct3 -> COMMA funct type . ID funct3

    ID              shift and go to state 168


state 157

    (55) do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR . while2 RIGHTPAR
    (57) while2 -> . exp while2
    (58) while2 -> . empty
    (66) exp -> . ID array exp2 SEMICOLON
    (80) empty -> .

    ID              shift and go to state 44
    RIGHTPAR        reduce using rule 80 (empty -> .)

    while2                         shift and go to state 169
    exp                            shift and go to state 105
    empty                          shift and go to state 106

state 158

    (56) while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY . est RIGHTKEY
    (31) est -> . conditional
    (32) est -> . declareLocal
    (42) est -> . cycles
    (43) est -> . input
    (44) est -> . output
    (45) est -> . assignment
    (46) est -> . funct
    (47) est -> . empty
    (49) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (33) declareLocal -> . DECLARE declareRecursivoLocal
    (38) declareLocal -> . empty
    (52) cycles -> . while
    (53) cycles -> . for
    (54) cycles -> . do-while
    (79) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (76) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (48) assignment -> . ID ASSGN ID SEMICOLON
    (10) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (80) empty -> .
    (56) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (59) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (55) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 63
    DECLARE         shift and go to state 62
    READ            shift and go to state 51
    WRITE           shift and go to state 60
    ID              shift and go to state 61
    FUNCTION        shift and go to state 23
    RIGHTKEY        reduce using rule 80 (empty -> .)
    WHILE           shift and go to state 53
    FOR             shift and go to state 58
    DO              shift and go to state 49

    funct                          shift and go to state 50
    conditional                    shift and go to state 52
    do-while                       shift and go to state 54
    est                            shift and go to state 170
    for                            shift and go to state 56
    input                          shift and go to state 57
    assignment                     shift and go to state 59
    cycles                         shift and go to state 64
    while                          shift and go to state 65
    empty                          shift and go to state 66
    output                         shift and go to state 67
    declareLocal                   shift and go to state 68

state 159

    (64) for3 -> exp for3 .

    SEMICOLON       reduce using rule 64 (for3 -> exp for3 .)


state 160

    (59) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON . ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY

    ID              shift and go to state 171


state 161

    (62) for2 -> ID ASSGN ID for2 .

    SEMICOLON       reduce using rule 62 (for2 -> ID ASSGN ID for2 .)


state 162

    (76) output -> WRITE LEFTPAR output2 QUOTE exp QUOTE . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 172


state 163

    (36) declare3Local -> COMMA . ID altaVarLocal declare3Local

    ID              shift and go to state 173


state 164

    (40) declare3Local -> empty .

    SEMICOLON       reduce using rule 40 (declare3Local -> empty .)


state 165

    (34) declareRecursivoLocal -> type ID altaVarLocal declare2Local declare3Local . SEMICOLON declareRecursivoLocal

    SEMICOLON       shift and go to state 174


state 166

    (49) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est . RIGHTKEY ELSE est RIGHTKEY

    RIGHTKEY        shift and go to state 175


state 167

    (74) arithmeticExp -> ID EQ ID arithmeticOp ID . arithmeticExp
    (74) arithmeticExp -> . ID EQ ID arithmeticOp ID arithmeticExp
    (75) arithmeticExp -> . empty
    (80) empty -> .

    ID              shift and go to state 96
    SEMICOLON       reduce using rule 80 (empty -> .)

    arithmeticExp                  shift and go to state 176
    empty                          shift and go to state 97

state 168

    (13) funct3 -> COMMA funct type ID . funct3
    (13) funct3 -> . COMMA funct type ID funct3
    (15) funct3 -> . empty
    (80) empty -> .

    COMMA           shift and go to state 123
    RIGHTPAR        reduce using rule 80 (empty -> .)

    funct3                         shift and go to state 177
    empty                          shift and go to state 124

state 169

    (55) do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 . RIGHTPAR

    RIGHTPAR        shift and go to state 178


state 170

    (56) while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 179


state 171

    (59) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID . arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (60) arithmeticOp -> . SUM
    (61) arithmeticOp -> . MINUS

    SUM             shift and go to state 153
    MINUS           shift and go to state 154

    arithmeticOp                   shift and go to state 180

state 172

    (76) output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 181


state 173

    (36) declare3Local -> COMMA ID . altaVarLocal declare3Local
    (41) altaVarLocal -> .

    COMMA           reduce using rule 41 (altaVarLocal -> .)
    SEMICOLON       reduce using rule 41 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 182

state 174

    (34) declareRecursivoLocal -> type ID altaVarLocal declare2Local declare3Local SEMICOLON . declareRecursivoLocal
    (34) declareRecursivoLocal -> . type ID altaVarLocal declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (37) declareRecursivoLocal -> . empty
    (23) type -> . type2
    (80) empty -> .
    (24) type2 -> . INT
    (25) type2 -> . FLOAT
    (26) type2 -> . STRING
    (27) type2 -> . BOOL
    (28) type2 -> . VOID

    RIGHTKEY        reduce using rule 80 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18
    VOID            shift and go to state 16

    declareRecursivoLocal          shift and go to state 183
    type2                          shift and go to state 22
    type                           shift and go to state 84
    empty                          shift and go to state 85

state 175

    (49) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY . ELSE est RIGHTKEY

    ELSE            shift and go to state 184


state 176

    (74) arithmeticExp -> ID EQ ID arithmeticOp ID arithmeticExp .

    SEMICOLON       reduce using rule 74 (arithmeticExp -> ID EQ ID arithmeticOp ID arithmeticExp .)


state 177

    (13) funct3 -> COMMA funct type ID funct3 .

    RIGHTPAR        reduce using rule 13 (funct3 -> COMMA funct type ID funct3 .)


state 178

    (55) do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .

    RIGHTKEY        reduce using rule 55 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)


state 179

    (56) while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY .

    RIGHTKEY        reduce using rule 56 (while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY .)


state 180

    (59) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp . arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (60) arithmeticOp -> . SUM
    (61) arithmeticOp -> . MINUS

    SUM             shift and go to state 153
    MINUS           shift and go to state 154

    arithmeticOp                   shift and go to state 185

state 181

    (76) output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON .

    RIGHTKEY        reduce using rule 76 (output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON .)


state 182

    (36) declare3Local -> COMMA ID altaVarLocal . declare3Local
    (36) declare3Local -> . COMMA ID altaVarLocal declare3Local
    (40) declare3Local -> . empty
    (80) empty -> .

    COMMA           shift and go to state 163
    SEMICOLON       reduce using rule 80 (empty -> .)

    empty                          shift and go to state 164
    declare3Local                  shift and go to state 186

state 183

    (34) declareRecursivoLocal -> type ID altaVarLocal declare2Local declare3Local SEMICOLON declareRecursivoLocal .

    RIGHTKEY        reduce using rule 34 (declareRecursivoLocal -> type ID altaVarLocal declare2Local declare3Local SEMICOLON declareRecursivoLocal .)


state 184

    (49) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE . est RIGHTKEY
    (31) est -> . conditional
    (32) est -> . declareLocal
    (42) est -> . cycles
    (43) est -> . input
    (44) est -> . output
    (45) est -> . assignment
    (46) est -> . funct
    (47) est -> . empty
    (49) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (33) declareLocal -> . DECLARE declareRecursivoLocal
    (38) declareLocal -> . empty
    (52) cycles -> . while
    (53) cycles -> . for
    (54) cycles -> . do-while
    (79) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (76) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (48) assignment -> . ID ASSGN ID SEMICOLON
    (10) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (80) empty -> .
    (56) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (59) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (55) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 63
    DECLARE         shift and go to state 62
    READ            shift and go to state 51
    WRITE           shift and go to state 60
    ID              shift and go to state 61
    FUNCTION        shift and go to state 23
    RIGHTKEY        reduce using rule 80 (empty -> .)
    WHILE           shift and go to state 53
    FOR             shift and go to state 58
    DO              shift and go to state 49

    funct                          shift and go to state 50
    conditional                    shift and go to state 52
    do-while                       shift and go to state 54
    est                            shift and go to state 187
    for                            shift and go to state 56
    input                          shift and go to state 57
    empty                          shift and go to state 66
    assignment                     shift and go to state 59
    cycles                         shift and go to state 64
    while                          shift and go to state 65
    output                         shift and go to state 67
    declareLocal                   shift and go to state 68

state 185

    (59) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp . RIGHTPAR LEFTKEY est RIGHTKEY

    RIGHTPAR        shift and go to state 188


state 186

    (36) declare3Local -> COMMA ID altaVarLocal declare3Local .

    SEMICOLON       reduce using rule 36 (declare3Local -> COMMA ID altaVarLocal declare3Local .)


state 187

    (49) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est . RIGHTKEY

    RIGHTKEY        shift and go to state 189


state 188

    (59) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR . LEFTKEY est RIGHTKEY

    LEFTKEY         shift and go to state 190


state 189

    (49) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY .

    RIGHTKEY        reduce using rule 49 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY .)


state 190

    (59) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY . est RIGHTKEY
    (31) est -> . conditional
    (32) est -> . declareLocal
    (42) est -> . cycles
    (43) est -> . input
    (44) est -> . output
    (45) est -> . assignment
    (46) est -> . funct
    (47) est -> . empty
    (49) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (33) declareLocal -> . DECLARE declareRecursivoLocal
    (38) declareLocal -> . empty
    (52) cycles -> . while
    (53) cycles -> . for
    (54) cycles -> . do-while
    (79) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (76) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (48) assignment -> . ID ASSGN ID SEMICOLON
    (10) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (80) empty -> .
    (56) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (59) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (55) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 63
    DECLARE         shift and go to state 62
    READ            shift and go to state 51
    WRITE           shift and go to state 60
    ID              shift and go to state 61
    FUNCTION        shift and go to state 23
    RIGHTKEY        reduce using rule 80 (empty -> .)
    WHILE           shift and go to state 53
    FOR             shift and go to state 58
    DO              shift and go to state 49

    funct                          shift and go to state 50
    conditional                    shift and go to state 52
    do-while                       shift and go to state 54
    est                            shift and go to state 191
    for                            shift and go to state 56
    input                          shift and go to state 57
    assignment                     shift and go to state 59
    declareLocal                   shift and go to state 68
    while                          shift and go to state 65
    empty                          shift and go to state 66
    output                         shift and go to state 67
    cycles                         shift and go to state 64

state 191

    (59) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 192


state 192

    (59) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY .

    RIGHTKEY        reduce using rule 59 (for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 66 resolved using rule (declareLocal -> empty)
WARNING: rejected rule (est -> empty) in state 66
WARNING: reduce/reduce conflict in state 150 resolved using rule (array -> empty)
WARNING: rejected rule (declare2Local -> empty) in state 150
WARNING: Rule (est -> empty) is never reduced
WARNING: Rule (declare2Local -> empty) is never reduced
