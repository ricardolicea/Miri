Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ACTINCR
    ACTDECR
    DOT
    ACTINCRVALOR
    ACTDECRVALOR
    LESSEQ
    COLON
    GRTREQ
    CYCLE
    FOR
    SPACE
    newline
    FLOATNUMB
    TYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON
Rule 2     goToMainQuad -> <empty>
Rule 3     altaPrograma -> <empty>
Rule 4     program2 -> declare program3
Rule 5     program2 -> empty
Rule 6     declare -> DECLARE declareRecursivo
Rule 7     declare -> empty
Rule 8     declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
Rule 9     declare2 -> array
Rule 10    declare3 -> COMMA ID altaVarGlobal declare3
Rule 11    program3 -> funct program3
Rule 12    funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
Rule 13    functReturn -> RETURN NUMBER SEMICOLON
Rule 14    functReturn -> RETURN ID SEMICOLON
Rule 15    functReturn -> empty
Rule 16    altaModulo -> <empty>
Rule 17    funct2 -> type ID altaVarLocal funct3
Rule 18    funct3 -> COMMA type ID altaVarLocal funct3
Rule 19    funct2 -> empty
Rule 20    funct3 -> empty
Rule 21    program3 -> empty
Rule 22    altaVarGlobal -> <empty>
Rule 23    declareRecursivo -> empty
Rule 24    declare3 -> empty
Rule 25    array -> LEFTBRACK exp RIGHTBRACK array
Rule 26    array -> empty
Rule 27    type -> type2
Rule 28    type2 -> INT
Rule 29    type2 -> FLOAT
Rule 30    type2 -> STRING
Rule 31    type2 -> BOOL
Rule 32    type2 -> VOID
Rule 33    cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY llenaMain altaModuloMain est RIGHTKEY
Rule 34    llenaMain -> <empty>
Rule 35    altaModuloMain -> <empty>
Rule 36    est -> conditional est
Rule 37    est -> declareLocal est
Rule 38    est -> cycles est
Rule 39    est -> input est
Rule 40    est -> output est
Rule 41    est -> assignment est
Rule 42    est -> llamadaAFunct est
Rule 43    est -> empty
Rule 44    llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR
Rule 45    llamadaAFunct -> empty
Rule 46    llamadaAFunct2 -> ID llamadaAFunct3
Rule 47    llamadaAFunct3 -> COMMA ID
Rule 48    llamadaAFunct3 -> empty
Rule 49    llamadaAFunct2 -> empty
Rule 50    declareLocal -> DECLARE declareRecursivoLocal
Rule 51    declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
Rule 52    assignmentDecl -> ASSGN exp
Rule 53    number -> INTEGER meteNum
Rule 54    number -> FLOAT meteNum
Rule 55    number -> empty
Rule 56    assignmentDecl -> empty
Rule 57    declare2Local -> array
Rule 58    declare3Local -> COMMA ID altaVarLocal assignmentDecl declare3Local
Rule 59    declareRecursivoLocal -> empty
Rule 60    declareLocal -> empty
Rule 61    declare2Local -> empty
Rule 62    declare3Local -> empty
Rule 63    altaVarLocal -> <empty>
Rule 64    assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON
Rule 65    assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON
Rule 66    meteVar -> <empty>
Rule 67    assignment -> empty
Rule 68    conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
Rule 69    gotoFCuad -> <empty>
Rule 70    gotoCuad -> <empty>
Rule 71    conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto
Rule 72    llenaGoto -> <empty>
Rule 73    conditionalElse -> empty
Rule 74    conditional2 -> exp conditional2
Rule 75    conditional2 -> empty
Rule 76    cycles -> while
Rule 77    cycles -> empty
Rule 78    cycles -> do-while
Rule 79    do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad
Rule 80    gotoVCuad -> <empty>
Rule 81    meteSalto -> <empty>
Rule 82    while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
Rule 83    llenaCuadF -> <empty>
Rule 84    while2 -> exp while2
Rule 85    while2 -> empty
Rule 86    exp -> ID meteExp exp2
Rule 87    exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
Rule 88    metePar -> <empty>
Rule 89    sacaPar -> <empty>
Rule 90    meteExp -> <empty>
Rule 91    generaCuad -> <empty>
Rule 92    exp -> number exp2
Rule 93    meteNum -> <empty>
Rule 94    exp -> empty
Rule 95    exp2 -> LESS meteOper exp
Rule 96    exp2 -> GRTR meteOper exp
Rule 97    exp2 -> EQ meteOper exp
Rule 98    exp2 -> NOTEQ meteOper exp
Rule 99    exp2 -> AND meteOper exp
Rule 100   exp2 -> OR meteOper exp
Rule 101   exp2 -> SUM meteOper exp
Rule 102   meteOper -> <empty>
Rule 103   exp2 -> MINUS meteOper exp
Rule 104   exp2 -> MULTP meteOper exp
Rule 105   exp2 -> DIVIDE meteOper exp
Rule 106   exp2 -> empty
Rule 107   output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
Rule 108   output2 -> ID output2
Rule 109   output2 -> QUOTE ID QUOTE output2
Rule 110   output2 -> empty
Rule 111   input -> READ LEFTPAR ID RIGHTPAR SEMICOLON
Rule 112   empty -> <empty>
Rule 113   circulo -> LEFTPAR INTEGER COMMA STRING COMMA BOOL COMMA INTEGER COMMA INTEGER RIGHTPAR SEMICOLON
Rule 114   cuadro -> LEFTPAR INTEGER COMMA STRING COMMA BOOL COMMA INTEGER COMMA INTEGER RIGHTPAR SEMICOLON
Rule 115   triangulo -> LEFTPAR INTEGER COMMA INTEGER COMMA INTEGER COMMA STRING COMMA BOOL COMMA INTEGER COMMA INTEGER COMMA INTEGER RIGHTPAR SEMICOLON
Rule 116   linea -> LEFTPAR INTEGER COMMA STRING COMMA INTEGER COMMA INTEGER COMMA INTEGER COMMA INTEGER RIGHTPAR SEMICOLON
Rule 117   rectangulo -> LEFTPAR INTEGER COMMA INTEGER COMMA STRING COMMA BOOL COMMA INTEGER COMMA INTEGER COMMA INTEGER RIGHTPAR SEMICOLON

Terminals, with rules where they appear

ACTDECR              : 
ACTDECRVALOR         : 
ACTINCR              : 
ACTINCRVALOR         : 
AND                  : 99
ASSGN                : 52 64 65
BOOL                 : 31 113 114 115 117
COLON                : 
COMMA                : 10 18 47 58 113 113 113 113 114 114 114 114 115 115 115 115 115 115 115 116 116 116 116 116 117 117 117 117 117 117
CYCLE                : 
DECLARE              : 6 50
DIVIDE               : 105
DO                   : 79
DOT                  : 
ELSE                 : 71
END                  : 1
EQ                   : 97
FLOAT                : 29 54
FLOATNUMB            : 
FOR                  : 
FUNCTION             : 12
GRTR                 : 96
GRTREQ               : 
ID                   : 1 8 10 12 14 17 18 44 46 47 51 58 64 65 86 108 109 111
IF                   : 68
INT                  : 28
INTEGER              : 53 113 113 113 114 114 114 115 115 115 115 115 115 116 116 116 116 116 117 117 117 117 117
LEFTBRACK            : 25
LEFTKEY              : 12 33 68 71 79 82
LEFTPAR              : 12 33 44 68 79 82 87 107 111 113 114 115 116 117
LESS                 : 95
LESSEQ               : 
MAIN                 : 33
MINUS                : 103
MULTP                : 104
NOTEQ                : 98
NUMBER               : 13
OR                   : 100
PROGRAM              : 1
QUOTE                : 109 109
READ                 : 111
RETURN               : 13 14
RIGHTBRACK           : 25
RIGHTKEY             : 12 33 68 71 79 82
RIGHTPAR             : 12 33 44 68 79 82 87 107 111 113 114 115 116 117
SEMICOLON            : 1 1 8 13 14 51 64 65 107 111 113 114 115 116 117
SPACE                : 
STRING               : 30 113 114 115 116 117
SUM                  : 101
TYPE                 : 
VOID                 : 32
WHILE                : 79 82
WRITE                : 107
error                : 
newline              : 

Nonterminals, with rules where they appear

altaModulo           : 12
altaModuloMain       : 33
altaPrograma         : 1
altaVarGlobal        : 8 10
altaVarLocal         : 17 18 51 58
array                : 9 25 57
assignment           : 41
assignmentDecl       : 8 51 58
circulo              : 
conditional          : 36
conditional2         : 68 74
conditionalElse      : 68
cuadro               : 
cuerpo               : 1
cycles               : 38
declare              : 4
declare2             : 8
declare2Local        : 51
declare3             : 8 10
declare3Local        : 51 58
declareLocal         : 37
declareRecursivo     : 6 8
declareRecursivoLocal : 50 51
do-while             : 78
empty                : 5 7 15 19 20 21 23 24 26 43 45 48 49 55 56 59 60 61 62 67 73 75 77 85 94 106 110
est                  : 12 33 36 37 38 39 40 41 42 68 71 79 82
exp                  : 25 52 64 74 84 87 95 96 97 98 99 100 101 103 104 105
exp2                 : 86 87 92
funct                : 11
funct2               : 12
funct3               : 17 18
functReturn          : 12
generaCuad           : 64 87
goToMainQuad         : 1
gotoCuad             : 68
gotoFCuad            : 68 82
gotoVCuad            : 79
input                : 39
linea                : 
llamadaAFunct        : 42 65
llamadaAFunct2       : 44
llamadaAFunct3       : 46
llenaCuadF           : 82
llenaGoto            : 71
llenaMain            : 33
meteExp              : 86
meteNum              : 53 54
meteOper             : 95 96 97 98 99 100 101 103 104 105
metePar              : 87
meteSalto            : 79
meteVar              : 64 65
number               : 92
output               : 40
output2              : 107 108 109
program              : 0
program2             : 1
program3             : 4 11
rectangulo           : 
sacaPar              : 87
triangulo            : 
type                 : 8 12 17 18 51
type2                : 27
while                : 76
while2               : 79 82 84

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON
    (3) altaPrograma -> .

    SEMICOLON       reduce using rule 3 (altaPrograma -> .)

    altaPrograma                   shift and go to state 4

state 4

    (1) program -> PROGRAM ID altaPrograma . SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON

    SEMICOLON       shift and go to state 5


state 5

    (1) program -> PROGRAM ID altaPrograma SEMICOLON . program2 goToMainQuad cuerpo END SEMICOLON
    (4) program2 -> . declare program3
    (5) program2 -> . empty
    (6) declare -> . DECLARE declareRecursivo
    (7) declare -> . empty
    (112) empty -> .

    DECLARE         shift and go to state 7
    MAIN            reduce using rule 112 (empty -> .)
    FUNCTION        reduce using rule 112 (empty -> .)

    program2                       shift and go to state 6
    declare                        shift and go to state 8
    empty                          shift and go to state 9

state 6

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 . goToMainQuad cuerpo END SEMICOLON
    (2) goToMainQuad -> .

    MAIN            reduce using rule 2 (goToMainQuad -> .)

    goToMainQuad                   shift and go to state 10

state 7

    (6) declare -> DECLARE . declareRecursivo
    (8) declareRecursivo -> . type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
    (23) declareRecursivo -> . empty
    (27) type -> . type2
    (112) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    FUNCTION        reduce using rule 112 (empty -> .)
    MAIN            reduce using rule 112 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    declareRecursivo               shift and go to state 16
    type                           shift and go to state 17
    empty                          shift and go to state 18
    type2                          shift and go to state 19

state 8

    (4) program2 -> declare . program3
    (11) program3 -> . funct program3
    (21) program3 -> . empty
    (12) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (112) empty -> .

    FUNCTION        shift and go to state 20
    MAIN            reduce using rule 112 (empty -> .)

    funct                          shift and go to state 21
    program3                       shift and go to state 22
    empty                          shift and go to state 23

state 9

    (5) program2 -> empty .
    (7) declare -> empty .

  ! reduce/reduce conflict for MAIN resolved using rule 5 (program2 -> empty .)
    MAIN            reduce using rule 5 (program2 -> empty .)
    FUNCTION        reduce using rule 7 (declare -> empty .)

  ! MAIN            [ reduce using rule 7 (declare -> empty .) ]


state 10

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad . cuerpo END SEMICOLON
    (33) cuerpo -> . MAIN LEFTPAR RIGHTPAR LEFTKEY llenaMain altaModuloMain est RIGHTKEY

    MAIN            shift and go to state 25

    cuerpo                         shift and go to state 24

state 11

    (30) type2 -> STRING .

    ID              reduce using rule 30 (type2 -> STRING .)


state 12

    (28) type2 -> INT .

    ID              reduce using rule 28 (type2 -> INT .)


state 13

    (32) type2 -> VOID .

    ID              reduce using rule 32 (type2 -> VOID .)


state 14

    (29) type2 -> FLOAT .

    ID              reduce using rule 29 (type2 -> FLOAT .)


state 15

    (31) type2 -> BOOL .

    ID              reduce using rule 31 (type2 -> BOOL .)


state 16

    (6) declare -> DECLARE declareRecursivo .

    FUNCTION        reduce using rule 6 (declare -> DECLARE declareRecursivo .)
    MAIN            reduce using rule 6 (declare -> DECLARE declareRecursivo .)


state 17

    (8) declareRecursivo -> type . ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo

    ID              shift and go to state 26


state 18

    (23) declareRecursivo -> empty .

    FUNCTION        reduce using rule 23 (declareRecursivo -> empty .)
    MAIN            reduce using rule 23 (declareRecursivo -> empty .)


state 19

    (27) type -> type2 .

    ID              reduce using rule 27 (type -> type2 .)


state 20

    (12) funct -> FUNCTION . type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (27) type -> . type2
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    type                           shift and go to state 27
    type2                          shift and go to state 19

state 21

    (11) program3 -> funct . program3
    (11) program3 -> . funct program3
    (21) program3 -> . empty
    (12) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (112) empty -> .

    FUNCTION        shift and go to state 20
    MAIN            reduce using rule 112 (empty -> .)

    program3                       shift and go to state 28
    funct                          shift and go to state 21
    empty                          shift and go to state 23

state 22

    (4) program2 -> declare program3 .

    MAIN            reduce using rule 4 (program2 -> declare program3 .)


state 23

    (21) program3 -> empty .

    MAIN            reduce using rule 21 (program3 -> empty .)


state 24

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo . END SEMICOLON

    END             shift and go to state 29


state 25

    (33) cuerpo -> MAIN . LEFTPAR RIGHTPAR LEFTKEY llenaMain altaModuloMain est RIGHTKEY

    LEFTPAR         shift and go to state 30


state 26

    (8) declareRecursivo -> type ID . altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
    (22) altaVarGlobal -> .

    ASSGN           reduce using rule 22 (altaVarGlobal -> .)
    LEFTBRACK       reduce using rule 22 (altaVarGlobal -> .)
    COMMA           reduce using rule 22 (altaVarGlobal -> .)
    SEMICOLON       reduce using rule 22 (altaVarGlobal -> .)

    altaVarGlobal                  shift and go to state 31

state 27

    (12) funct -> FUNCTION type . ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY

    ID              shift and go to state 32


state 28

    (11) program3 -> funct program3 .

    MAIN            reduce using rule 11 (program3 -> funct program3 .)


state 29

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END . SEMICOLON

    SEMICOLON       shift and go to state 33


state 30

    (33) cuerpo -> MAIN LEFTPAR . RIGHTPAR LEFTKEY llenaMain altaModuloMain est RIGHTKEY

    RIGHTPAR        shift and go to state 34


state 31

    (8) declareRecursivo -> type ID altaVarGlobal . assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
    (52) assignmentDecl -> . ASSGN exp
    (56) assignmentDecl -> . empty
    (112) empty -> .

    ASSGN           shift and go to state 35
    LEFTBRACK       reduce using rule 112 (empty -> .)
    COMMA           reduce using rule 112 (empty -> .)
    SEMICOLON       reduce using rule 112 (empty -> .)

    assignmentDecl                 shift and go to state 36
    empty                          shift and go to state 37

state 32

    (12) funct -> FUNCTION type ID . altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (16) altaModulo -> .

    LEFTPAR         reduce using rule 16 (altaModulo -> .)

    altaModulo                     shift and go to state 38

state 33

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON .

    $end            reduce using rule 1 (program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON .)


state 34

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR . LEFTKEY llenaMain altaModuloMain est RIGHTKEY

    LEFTKEY         shift and go to state 39


state 35

    (52) assignmentDecl -> ASSGN . exp
    (86) exp -> . ID meteExp exp2
    (87) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (92) exp -> . number exp2
    (94) exp -> . empty
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (112) empty -> .

    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    LEFTBRACK       reduce using rule 112 (empty -> .)
    COMMA           reduce using rule 112 (empty -> .)
    SEMICOLON       reduce using rule 112 (empty -> .)
    LESS            reduce using rule 112 (empty -> .)
    GRTR            reduce using rule 112 (empty -> .)
    EQ              reduce using rule 112 (empty -> .)
    NOTEQ           reduce using rule 112 (empty -> .)
    AND             reduce using rule 112 (empty -> .)
    OR              reduce using rule 112 (empty -> .)
    SUM             reduce using rule 112 (empty -> .)
    MINUS           reduce using rule 112 (empty -> .)
    MULTP           reduce using rule 112 (empty -> .)
    DIVIDE          reduce using rule 112 (empty -> .)

    number                         shift and go to state 40
    exp                            shift and go to state 43
    empty                          shift and go to state 46

state 36

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl . declare2 declare3 SEMICOLON declareRecursivo
    (9) declare2 -> . array
    (25) array -> . LEFTBRACK exp RIGHTBRACK array
    (26) array -> . empty
    (112) empty -> .

    LEFTBRACK       shift and go to state 47
    COMMA           reduce using rule 112 (empty -> .)
    SEMICOLON       reduce using rule 112 (empty -> .)

    declare2                       shift and go to state 48
    array                          shift and go to state 49
    empty                          shift and go to state 50

state 37

    (56) assignmentDecl -> empty .

    LEFTBRACK       reduce using rule 56 (assignmentDecl -> empty .)
    COMMA           reduce using rule 56 (assignmentDecl -> empty .)
    SEMICOLON       reduce using rule 56 (assignmentDecl -> empty .)


state 38

    (12) funct -> FUNCTION type ID altaModulo . LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY

    LEFTPAR         shift and go to state 51


state 39

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY . llenaMain altaModuloMain est RIGHTKEY
    (34) llenaMain -> .

    IF              reduce using rule 34 (llenaMain -> .)
    DECLARE         reduce using rule 34 (llenaMain -> .)
    READ            reduce using rule 34 (llenaMain -> .)
    WRITE           reduce using rule 34 (llenaMain -> .)
    ID              reduce using rule 34 (llenaMain -> .)
    WHILE           reduce using rule 34 (llenaMain -> .)
    DO              reduce using rule 34 (llenaMain -> .)
    RIGHTKEY        reduce using rule 34 (llenaMain -> .)

    llenaMain                      shift and go to state 52

state 40

    (92) exp -> number . exp2
    (95) exp2 -> . LESS meteOper exp
    (96) exp2 -> . GRTR meteOper exp
    (97) exp2 -> . EQ meteOper exp
    (98) exp2 -> . NOTEQ meteOper exp
    (99) exp2 -> . AND meteOper exp
    (100) exp2 -> . OR meteOper exp
    (101) exp2 -> . SUM meteOper exp
    (103) exp2 -> . MINUS meteOper exp
    (104) exp2 -> . MULTP meteOper exp
    (105) exp2 -> . DIVIDE meteOper exp
    (106) exp2 -> . empty
    (112) empty -> .

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GRTR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTP resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    LESS            shift and go to state 55
    GRTR            shift and go to state 60
    EQ              shift and go to state 62
    NOTEQ           shift and go to state 56
    AND             shift and go to state 53
    OR              shift and go to state 63
    SUM             shift and go to state 58
    MINUS           shift and go to state 59
    MULTP           shift and go to state 61
    DIVIDE          shift and go to state 54
    LEFTBRACK       reduce using rule 112 (empty -> .)
    COMMA           reduce using rule 112 (empty -> .)
    SEMICOLON       reduce using rule 112 (empty -> .)
    RIGHTBRACK      reduce using rule 112 (empty -> .)
    RIGHTPAR        reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    LEFTPAR         reduce using rule 112 (empty -> .)
    INTEGER         reduce using rule 112 (empty -> .)
    FLOAT           reduce using rule 112 (empty -> .)

  ! LESS            [ reduce using rule 112 (empty -> .) ]
  ! GRTR            [ reduce using rule 112 (empty -> .) ]
  ! EQ              [ reduce using rule 112 (empty -> .) ]
  ! NOTEQ           [ reduce using rule 112 (empty -> .) ]
  ! AND             [ reduce using rule 112 (empty -> .) ]
  ! OR              [ reduce using rule 112 (empty -> .) ]
  ! SUM             [ reduce using rule 112 (empty -> .) ]
  ! MINUS           [ reduce using rule 112 (empty -> .) ]
  ! MULTP           [ reduce using rule 112 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 112 (empty -> .) ]

    exp2                           shift and go to state 57
    empty                          shift and go to state 64

state 41

    (54) number -> FLOAT . meteNum
    (93) meteNum -> .

    LESS            reduce using rule 93 (meteNum -> .)
    GRTR            reduce using rule 93 (meteNum -> .)
    EQ              reduce using rule 93 (meteNum -> .)
    NOTEQ           reduce using rule 93 (meteNum -> .)
    AND             reduce using rule 93 (meteNum -> .)
    OR              reduce using rule 93 (meteNum -> .)
    SUM             reduce using rule 93 (meteNum -> .)
    MINUS           reduce using rule 93 (meteNum -> .)
    MULTP           reduce using rule 93 (meteNum -> .)
    DIVIDE          reduce using rule 93 (meteNum -> .)
    LEFTBRACK       reduce using rule 93 (meteNum -> .)
    COMMA           reduce using rule 93 (meteNum -> .)
    SEMICOLON       reduce using rule 93 (meteNum -> .)
    RIGHTBRACK      reduce using rule 93 (meteNum -> .)
    RIGHTPAR        reduce using rule 93 (meteNum -> .)
    ID              reduce using rule 93 (meteNum -> .)
    LEFTPAR         reduce using rule 93 (meteNum -> .)
    INTEGER         reduce using rule 93 (meteNum -> .)
    FLOAT           reduce using rule 93 (meteNum -> .)

    meteNum                        shift and go to state 65

state 42

    (87) exp -> LEFTPAR . metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (88) metePar -> .

    ID              reduce using rule 88 (metePar -> .)
    LEFTPAR         reduce using rule 88 (metePar -> .)
    INTEGER         reduce using rule 88 (metePar -> .)
    FLOAT           reduce using rule 88 (metePar -> .)
    RIGHTPAR        reduce using rule 88 (metePar -> .)
    LESS            reduce using rule 88 (metePar -> .)
    GRTR            reduce using rule 88 (metePar -> .)
    EQ              reduce using rule 88 (metePar -> .)
    NOTEQ           reduce using rule 88 (metePar -> .)
    AND             reduce using rule 88 (metePar -> .)
    OR              reduce using rule 88 (metePar -> .)
    SUM             reduce using rule 88 (metePar -> .)
    MINUS           reduce using rule 88 (metePar -> .)
    MULTP           reduce using rule 88 (metePar -> .)
    DIVIDE          reduce using rule 88 (metePar -> .)

    metePar                        shift and go to state 66

state 43

    (52) assignmentDecl -> ASSGN exp .

    LEFTBRACK       reduce using rule 52 (assignmentDecl -> ASSGN exp .)
    COMMA           reduce using rule 52 (assignmentDecl -> ASSGN exp .)
    SEMICOLON       reduce using rule 52 (assignmentDecl -> ASSGN exp .)


state 44

    (53) number -> INTEGER . meteNum
    (93) meteNum -> .

    LESS            reduce using rule 93 (meteNum -> .)
    GRTR            reduce using rule 93 (meteNum -> .)
    EQ              reduce using rule 93 (meteNum -> .)
    NOTEQ           reduce using rule 93 (meteNum -> .)
    AND             reduce using rule 93 (meteNum -> .)
    OR              reduce using rule 93 (meteNum -> .)
    SUM             reduce using rule 93 (meteNum -> .)
    MINUS           reduce using rule 93 (meteNum -> .)
    MULTP           reduce using rule 93 (meteNum -> .)
    DIVIDE          reduce using rule 93 (meteNum -> .)
    LEFTBRACK       reduce using rule 93 (meteNum -> .)
    COMMA           reduce using rule 93 (meteNum -> .)
    SEMICOLON       reduce using rule 93 (meteNum -> .)
    RIGHTBRACK      reduce using rule 93 (meteNum -> .)
    RIGHTPAR        reduce using rule 93 (meteNum -> .)
    ID              reduce using rule 93 (meteNum -> .)
    LEFTPAR         reduce using rule 93 (meteNum -> .)
    INTEGER         reduce using rule 93 (meteNum -> .)
    FLOAT           reduce using rule 93 (meteNum -> .)

    meteNum                        shift and go to state 67

state 45

    (86) exp -> ID . meteExp exp2
    (90) meteExp -> .

    LESS            reduce using rule 90 (meteExp -> .)
    GRTR            reduce using rule 90 (meteExp -> .)
    EQ              reduce using rule 90 (meteExp -> .)
    NOTEQ           reduce using rule 90 (meteExp -> .)
    AND             reduce using rule 90 (meteExp -> .)
    OR              reduce using rule 90 (meteExp -> .)
    SUM             reduce using rule 90 (meteExp -> .)
    MINUS           reduce using rule 90 (meteExp -> .)
    MULTP           reduce using rule 90 (meteExp -> .)
    DIVIDE          reduce using rule 90 (meteExp -> .)
    LEFTBRACK       reduce using rule 90 (meteExp -> .)
    COMMA           reduce using rule 90 (meteExp -> .)
    SEMICOLON       reduce using rule 90 (meteExp -> .)
    RIGHTBRACK      reduce using rule 90 (meteExp -> .)
    RIGHTPAR        reduce using rule 90 (meteExp -> .)
    ID              reduce using rule 90 (meteExp -> .)
    LEFTPAR         reduce using rule 90 (meteExp -> .)
    INTEGER         reduce using rule 90 (meteExp -> .)
    FLOAT           reduce using rule 90 (meteExp -> .)

    meteExp                        shift and go to state 68

state 46

    (94) exp -> empty .
    (55) number -> empty .

  ! reduce/reduce conflict for LESS resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for GRTR resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for EQ resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for NOTEQ resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for AND resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for OR resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for SUM resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for MINUS resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for MULTP resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for LEFTBRACK resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for COMMA resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for RIGHTBRACK resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for RIGHTPAR resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for LEFTPAR resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for INTEGER resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for FLOAT resolved using rule 55 (number -> empty .)
    LESS            reduce using rule 55 (number -> empty .)
    GRTR            reduce using rule 55 (number -> empty .)
    EQ              reduce using rule 55 (number -> empty .)
    NOTEQ           reduce using rule 55 (number -> empty .)
    AND             reduce using rule 55 (number -> empty .)
    OR              reduce using rule 55 (number -> empty .)
    SUM             reduce using rule 55 (number -> empty .)
    MINUS           reduce using rule 55 (number -> empty .)
    MULTP           reduce using rule 55 (number -> empty .)
    DIVIDE          reduce using rule 55 (number -> empty .)
    LEFTBRACK       reduce using rule 55 (number -> empty .)
    COMMA           reduce using rule 55 (number -> empty .)
    SEMICOLON       reduce using rule 55 (number -> empty .)
    RIGHTBRACK      reduce using rule 55 (number -> empty .)
    RIGHTPAR        reduce using rule 55 (number -> empty .)
    ID              reduce using rule 55 (number -> empty .)
    LEFTPAR         reduce using rule 55 (number -> empty .)
    INTEGER         reduce using rule 55 (number -> empty .)
    FLOAT           reduce using rule 55 (number -> empty .)

  ! LEFTBRACK       [ reduce using rule 94 (exp -> empty .) ]
  ! COMMA           [ reduce using rule 94 (exp -> empty .) ]
  ! SEMICOLON       [ reduce using rule 94 (exp -> empty .) ]
  ! RIGHTBRACK      [ reduce using rule 94 (exp -> empty .) ]
  ! RIGHTPAR        [ reduce using rule 94 (exp -> empty .) ]
  ! ID              [ reduce using rule 94 (exp -> empty .) ]
  ! LEFTPAR         [ reduce using rule 94 (exp -> empty .) ]
  ! INTEGER         [ reduce using rule 94 (exp -> empty .) ]
  ! FLOAT           [ reduce using rule 94 (exp -> empty .) ]
  ! LESS            [ reduce using rule 94 (exp -> empty .) ]
  ! GRTR            [ reduce using rule 94 (exp -> empty .) ]
  ! EQ              [ reduce using rule 94 (exp -> empty .) ]
  ! NOTEQ           [ reduce using rule 94 (exp -> empty .) ]
  ! AND             [ reduce using rule 94 (exp -> empty .) ]
  ! OR              [ reduce using rule 94 (exp -> empty .) ]
  ! SUM             [ reduce using rule 94 (exp -> empty .) ]
  ! MINUS           [ reduce using rule 94 (exp -> empty .) ]
  ! MULTP           [ reduce using rule 94 (exp -> empty .) ]
  ! DIVIDE          [ reduce using rule 94 (exp -> empty .) ]


state 47

    (25) array -> LEFTBRACK . exp RIGHTBRACK array
    (86) exp -> . ID meteExp exp2
    (87) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (92) exp -> . number exp2
    (94) exp -> . empty
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (112) empty -> .

    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    RIGHTBRACK      reduce using rule 112 (empty -> .)
    LESS            reduce using rule 112 (empty -> .)
    GRTR            reduce using rule 112 (empty -> .)
    EQ              reduce using rule 112 (empty -> .)
    NOTEQ           reduce using rule 112 (empty -> .)
    AND             reduce using rule 112 (empty -> .)
    OR              reduce using rule 112 (empty -> .)
    SUM             reduce using rule 112 (empty -> .)
    MINUS           reduce using rule 112 (empty -> .)
    MULTP           reduce using rule 112 (empty -> .)
    DIVIDE          reduce using rule 112 (empty -> .)

    number                         shift and go to state 40
    exp                            shift and go to state 69
    empty                          shift and go to state 46

state 48

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 . declare3 SEMICOLON declareRecursivo
    (10) declare3 -> . COMMA ID altaVarGlobal declare3
    (24) declare3 -> . empty
    (112) empty -> .

    COMMA           shift and go to state 71
    SEMICOLON       reduce using rule 112 (empty -> .)

    declare3                       shift and go to state 70
    empty                          shift and go to state 72

state 49

    (9) declare2 -> array .

    COMMA           reduce using rule 9 (declare2 -> array .)
    SEMICOLON       reduce using rule 9 (declare2 -> array .)


state 50

    (26) array -> empty .

    COMMA           reduce using rule 26 (array -> empty .)
    SEMICOLON       reduce using rule 26 (array -> empty .)


state 51

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR . funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (17) funct2 -> . type ID altaVarLocal funct3
    (19) funct2 -> . empty
    (27) type -> . type2
    (112) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    RIGHTPAR        reduce using rule 112 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    funct2                         shift and go to state 73
    type                           shift and go to state 74
    empty                          shift and go to state 75
    type2                          shift and go to state 19

state 52

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY llenaMain . altaModuloMain est RIGHTKEY
    (35) altaModuloMain -> .

    IF              reduce using rule 35 (altaModuloMain -> .)
    DECLARE         reduce using rule 35 (altaModuloMain -> .)
    READ            reduce using rule 35 (altaModuloMain -> .)
    WRITE           reduce using rule 35 (altaModuloMain -> .)
    ID              reduce using rule 35 (altaModuloMain -> .)
    WHILE           reduce using rule 35 (altaModuloMain -> .)
    DO              reduce using rule 35 (altaModuloMain -> .)
    RIGHTKEY        reduce using rule 35 (altaModuloMain -> .)

    altaModuloMain                 shift and go to state 76

state 53

    (99) exp2 -> AND . meteOper exp
    (102) meteOper -> .

    ID              reduce using rule 102 (meteOper -> .)
    LEFTPAR         reduce using rule 102 (meteOper -> .)
    INTEGER         reduce using rule 102 (meteOper -> .)
    FLOAT           reduce using rule 102 (meteOper -> .)
    LESS            reduce using rule 102 (meteOper -> .)
    GRTR            reduce using rule 102 (meteOper -> .)
    EQ              reduce using rule 102 (meteOper -> .)
    NOTEQ           reduce using rule 102 (meteOper -> .)
    AND             reduce using rule 102 (meteOper -> .)
    OR              reduce using rule 102 (meteOper -> .)
    SUM             reduce using rule 102 (meteOper -> .)
    MINUS           reduce using rule 102 (meteOper -> .)
    MULTP           reduce using rule 102 (meteOper -> .)
    DIVIDE          reduce using rule 102 (meteOper -> .)
    LEFTBRACK       reduce using rule 102 (meteOper -> .)
    COMMA           reduce using rule 102 (meteOper -> .)
    SEMICOLON       reduce using rule 102 (meteOper -> .)
    RIGHTBRACK      reduce using rule 102 (meteOper -> .)
    RIGHTPAR        reduce using rule 102 (meteOper -> .)

    meteOper                       shift and go to state 77

state 54

    (105) exp2 -> DIVIDE . meteOper exp
    (102) meteOper -> .

    ID              reduce using rule 102 (meteOper -> .)
    LEFTPAR         reduce using rule 102 (meteOper -> .)
    INTEGER         reduce using rule 102 (meteOper -> .)
    FLOAT           reduce using rule 102 (meteOper -> .)
    LESS            reduce using rule 102 (meteOper -> .)
    GRTR            reduce using rule 102 (meteOper -> .)
    EQ              reduce using rule 102 (meteOper -> .)
    NOTEQ           reduce using rule 102 (meteOper -> .)
    AND             reduce using rule 102 (meteOper -> .)
    OR              reduce using rule 102 (meteOper -> .)
    SUM             reduce using rule 102 (meteOper -> .)
    MINUS           reduce using rule 102 (meteOper -> .)
    MULTP           reduce using rule 102 (meteOper -> .)
    DIVIDE          reduce using rule 102 (meteOper -> .)
    LEFTBRACK       reduce using rule 102 (meteOper -> .)
    COMMA           reduce using rule 102 (meteOper -> .)
    SEMICOLON       reduce using rule 102 (meteOper -> .)
    RIGHTBRACK      reduce using rule 102 (meteOper -> .)
    RIGHTPAR        reduce using rule 102 (meteOper -> .)

    meteOper                       shift and go to state 78

state 55

    (95) exp2 -> LESS . meteOper exp
    (102) meteOper -> .

    ID              reduce using rule 102 (meteOper -> .)
    LEFTPAR         reduce using rule 102 (meteOper -> .)
    INTEGER         reduce using rule 102 (meteOper -> .)
    FLOAT           reduce using rule 102 (meteOper -> .)
    LESS            reduce using rule 102 (meteOper -> .)
    GRTR            reduce using rule 102 (meteOper -> .)
    EQ              reduce using rule 102 (meteOper -> .)
    NOTEQ           reduce using rule 102 (meteOper -> .)
    AND             reduce using rule 102 (meteOper -> .)
    OR              reduce using rule 102 (meteOper -> .)
    SUM             reduce using rule 102 (meteOper -> .)
    MINUS           reduce using rule 102 (meteOper -> .)
    MULTP           reduce using rule 102 (meteOper -> .)
    DIVIDE          reduce using rule 102 (meteOper -> .)
    LEFTBRACK       reduce using rule 102 (meteOper -> .)
    COMMA           reduce using rule 102 (meteOper -> .)
    SEMICOLON       reduce using rule 102 (meteOper -> .)
    RIGHTBRACK      reduce using rule 102 (meteOper -> .)
    RIGHTPAR        reduce using rule 102 (meteOper -> .)

    meteOper                       shift and go to state 79

state 56

    (98) exp2 -> NOTEQ . meteOper exp
    (102) meteOper -> .

    ID              reduce using rule 102 (meteOper -> .)
    LEFTPAR         reduce using rule 102 (meteOper -> .)
    INTEGER         reduce using rule 102 (meteOper -> .)
    FLOAT           reduce using rule 102 (meteOper -> .)
    LESS            reduce using rule 102 (meteOper -> .)
    GRTR            reduce using rule 102 (meteOper -> .)
    EQ              reduce using rule 102 (meteOper -> .)
    NOTEQ           reduce using rule 102 (meteOper -> .)
    AND             reduce using rule 102 (meteOper -> .)
    OR              reduce using rule 102 (meteOper -> .)
    SUM             reduce using rule 102 (meteOper -> .)
    MINUS           reduce using rule 102 (meteOper -> .)
    MULTP           reduce using rule 102 (meteOper -> .)
    DIVIDE          reduce using rule 102 (meteOper -> .)
    LEFTBRACK       reduce using rule 102 (meteOper -> .)
    COMMA           reduce using rule 102 (meteOper -> .)
    SEMICOLON       reduce using rule 102 (meteOper -> .)
    RIGHTBRACK      reduce using rule 102 (meteOper -> .)
    RIGHTPAR        reduce using rule 102 (meteOper -> .)

    meteOper                       shift and go to state 80

state 57

    (92) exp -> number exp2 .

    LEFTBRACK       reduce using rule 92 (exp -> number exp2 .)
    COMMA           reduce using rule 92 (exp -> number exp2 .)
    SEMICOLON       reduce using rule 92 (exp -> number exp2 .)
    RIGHTBRACK      reduce using rule 92 (exp -> number exp2 .)
    RIGHTPAR        reduce using rule 92 (exp -> number exp2 .)
    ID              reduce using rule 92 (exp -> number exp2 .)
    LEFTPAR         reduce using rule 92 (exp -> number exp2 .)
    INTEGER         reduce using rule 92 (exp -> number exp2 .)
    FLOAT           reduce using rule 92 (exp -> number exp2 .)
    LESS            reduce using rule 92 (exp -> number exp2 .)
    GRTR            reduce using rule 92 (exp -> number exp2 .)
    EQ              reduce using rule 92 (exp -> number exp2 .)
    NOTEQ           reduce using rule 92 (exp -> number exp2 .)
    AND             reduce using rule 92 (exp -> number exp2 .)
    OR              reduce using rule 92 (exp -> number exp2 .)
    SUM             reduce using rule 92 (exp -> number exp2 .)
    MINUS           reduce using rule 92 (exp -> number exp2 .)
    MULTP           reduce using rule 92 (exp -> number exp2 .)
    DIVIDE          reduce using rule 92 (exp -> number exp2 .)


state 58

    (101) exp2 -> SUM . meteOper exp
    (102) meteOper -> .

    ID              reduce using rule 102 (meteOper -> .)
    LEFTPAR         reduce using rule 102 (meteOper -> .)
    INTEGER         reduce using rule 102 (meteOper -> .)
    FLOAT           reduce using rule 102 (meteOper -> .)
    LESS            reduce using rule 102 (meteOper -> .)
    GRTR            reduce using rule 102 (meteOper -> .)
    EQ              reduce using rule 102 (meteOper -> .)
    NOTEQ           reduce using rule 102 (meteOper -> .)
    AND             reduce using rule 102 (meteOper -> .)
    OR              reduce using rule 102 (meteOper -> .)
    SUM             reduce using rule 102 (meteOper -> .)
    MINUS           reduce using rule 102 (meteOper -> .)
    MULTP           reduce using rule 102 (meteOper -> .)
    DIVIDE          reduce using rule 102 (meteOper -> .)
    LEFTBRACK       reduce using rule 102 (meteOper -> .)
    COMMA           reduce using rule 102 (meteOper -> .)
    SEMICOLON       reduce using rule 102 (meteOper -> .)
    RIGHTBRACK      reduce using rule 102 (meteOper -> .)
    RIGHTPAR        reduce using rule 102 (meteOper -> .)

    meteOper                       shift and go to state 81

state 59

    (103) exp2 -> MINUS . meteOper exp
    (102) meteOper -> .

    ID              reduce using rule 102 (meteOper -> .)
    LEFTPAR         reduce using rule 102 (meteOper -> .)
    INTEGER         reduce using rule 102 (meteOper -> .)
    FLOAT           reduce using rule 102 (meteOper -> .)
    LESS            reduce using rule 102 (meteOper -> .)
    GRTR            reduce using rule 102 (meteOper -> .)
    EQ              reduce using rule 102 (meteOper -> .)
    NOTEQ           reduce using rule 102 (meteOper -> .)
    AND             reduce using rule 102 (meteOper -> .)
    OR              reduce using rule 102 (meteOper -> .)
    SUM             reduce using rule 102 (meteOper -> .)
    MINUS           reduce using rule 102 (meteOper -> .)
    MULTP           reduce using rule 102 (meteOper -> .)
    DIVIDE          reduce using rule 102 (meteOper -> .)
    LEFTBRACK       reduce using rule 102 (meteOper -> .)
    COMMA           reduce using rule 102 (meteOper -> .)
    SEMICOLON       reduce using rule 102 (meteOper -> .)
    RIGHTBRACK      reduce using rule 102 (meteOper -> .)
    RIGHTPAR        reduce using rule 102 (meteOper -> .)

    meteOper                       shift and go to state 82

state 60

    (96) exp2 -> GRTR . meteOper exp
    (102) meteOper -> .

    ID              reduce using rule 102 (meteOper -> .)
    LEFTPAR         reduce using rule 102 (meteOper -> .)
    INTEGER         reduce using rule 102 (meteOper -> .)
    FLOAT           reduce using rule 102 (meteOper -> .)
    LESS            reduce using rule 102 (meteOper -> .)
    GRTR            reduce using rule 102 (meteOper -> .)
    EQ              reduce using rule 102 (meteOper -> .)
    NOTEQ           reduce using rule 102 (meteOper -> .)
    AND             reduce using rule 102 (meteOper -> .)
    OR              reduce using rule 102 (meteOper -> .)
    SUM             reduce using rule 102 (meteOper -> .)
    MINUS           reduce using rule 102 (meteOper -> .)
    MULTP           reduce using rule 102 (meteOper -> .)
    DIVIDE          reduce using rule 102 (meteOper -> .)
    LEFTBRACK       reduce using rule 102 (meteOper -> .)
    COMMA           reduce using rule 102 (meteOper -> .)
    SEMICOLON       reduce using rule 102 (meteOper -> .)
    RIGHTBRACK      reduce using rule 102 (meteOper -> .)
    RIGHTPAR        reduce using rule 102 (meteOper -> .)

    meteOper                       shift and go to state 83

state 61

    (104) exp2 -> MULTP . meteOper exp
    (102) meteOper -> .

    ID              reduce using rule 102 (meteOper -> .)
    LEFTPAR         reduce using rule 102 (meteOper -> .)
    INTEGER         reduce using rule 102 (meteOper -> .)
    FLOAT           reduce using rule 102 (meteOper -> .)
    LESS            reduce using rule 102 (meteOper -> .)
    GRTR            reduce using rule 102 (meteOper -> .)
    EQ              reduce using rule 102 (meteOper -> .)
    NOTEQ           reduce using rule 102 (meteOper -> .)
    AND             reduce using rule 102 (meteOper -> .)
    OR              reduce using rule 102 (meteOper -> .)
    SUM             reduce using rule 102 (meteOper -> .)
    MINUS           reduce using rule 102 (meteOper -> .)
    MULTP           reduce using rule 102 (meteOper -> .)
    DIVIDE          reduce using rule 102 (meteOper -> .)
    LEFTBRACK       reduce using rule 102 (meteOper -> .)
    COMMA           reduce using rule 102 (meteOper -> .)
    SEMICOLON       reduce using rule 102 (meteOper -> .)
    RIGHTBRACK      reduce using rule 102 (meteOper -> .)
    RIGHTPAR        reduce using rule 102 (meteOper -> .)

    meteOper                       shift and go to state 84

state 62

    (97) exp2 -> EQ . meteOper exp
    (102) meteOper -> .

    ID              reduce using rule 102 (meteOper -> .)
    LEFTPAR         reduce using rule 102 (meteOper -> .)
    INTEGER         reduce using rule 102 (meteOper -> .)
    FLOAT           reduce using rule 102 (meteOper -> .)
    LESS            reduce using rule 102 (meteOper -> .)
    GRTR            reduce using rule 102 (meteOper -> .)
    EQ              reduce using rule 102 (meteOper -> .)
    NOTEQ           reduce using rule 102 (meteOper -> .)
    AND             reduce using rule 102 (meteOper -> .)
    OR              reduce using rule 102 (meteOper -> .)
    SUM             reduce using rule 102 (meteOper -> .)
    MINUS           reduce using rule 102 (meteOper -> .)
    MULTP           reduce using rule 102 (meteOper -> .)
    DIVIDE          reduce using rule 102 (meteOper -> .)
    LEFTBRACK       reduce using rule 102 (meteOper -> .)
    COMMA           reduce using rule 102 (meteOper -> .)
    SEMICOLON       reduce using rule 102 (meteOper -> .)
    RIGHTBRACK      reduce using rule 102 (meteOper -> .)
    RIGHTPAR        reduce using rule 102 (meteOper -> .)

    meteOper                       shift and go to state 85

state 63

    (100) exp2 -> OR . meteOper exp
    (102) meteOper -> .

    ID              reduce using rule 102 (meteOper -> .)
    LEFTPAR         reduce using rule 102 (meteOper -> .)
    INTEGER         reduce using rule 102 (meteOper -> .)
    FLOAT           reduce using rule 102 (meteOper -> .)
    LESS            reduce using rule 102 (meteOper -> .)
    GRTR            reduce using rule 102 (meteOper -> .)
    EQ              reduce using rule 102 (meteOper -> .)
    NOTEQ           reduce using rule 102 (meteOper -> .)
    AND             reduce using rule 102 (meteOper -> .)
    OR              reduce using rule 102 (meteOper -> .)
    SUM             reduce using rule 102 (meteOper -> .)
    MINUS           reduce using rule 102 (meteOper -> .)
    MULTP           reduce using rule 102 (meteOper -> .)
    DIVIDE          reduce using rule 102 (meteOper -> .)
    LEFTBRACK       reduce using rule 102 (meteOper -> .)
    COMMA           reduce using rule 102 (meteOper -> .)
    SEMICOLON       reduce using rule 102 (meteOper -> .)
    RIGHTBRACK      reduce using rule 102 (meteOper -> .)
    RIGHTPAR        reduce using rule 102 (meteOper -> .)

    meteOper                       shift and go to state 86

state 64

    (106) exp2 -> empty .

    LEFTBRACK       reduce using rule 106 (exp2 -> empty .)
    COMMA           reduce using rule 106 (exp2 -> empty .)
    SEMICOLON       reduce using rule 106 (exp2 -> empty .)
    RIGHTBRACK      reduce using rule 106 (exp2 -> empty .)
    RIGHTPAR        reduce using rule 106 (exp2 -> empty .)
    ID              reduce using rule 106 (exp2 -> empty .)
    LEFTPAR         reduce using rule 106 (exp2 -> empty .)
    INTEGER         reduce using rule 106 (exp2 -> empty .)
    FLOAT           reduce using rule 106 (exp2 -> empty .)
    LESS            reduce using rule 106 (exp2 -> empty .)
    GRTR            reduce using rule 106 (exp2 -> empty .)
    EQ              reduce using rule 106 (exp2 -> empty .)
    NOTEQ           reduce using rule 106 (exp2 -> empty .)
    AND             reduce using rule 106 (exp2 -> empty .)
    OR              reduce using rule 106 (exp2 -> empty .)
    SUM             reduce using rule 106 (exp2 -> empty .)
    MINUS           reduce using rule 106 (exp2 -> empty .)
    MULTP           reduce using rule 106 (exp2 -> empty .)
    DIVIDE          reduce using rule 106 (exp2 -> empty .)


state 65

    (54) number -> FLOAT meteNum .

    LESS            reduce using rule 54 (number -> FLOAT meteNum .)
    GRTR            reduce using rule 54 (number -> FLOAT meteNum .)
    EQ              reduce using rule 54 (number -> FLOAT meteNum .)
    NOTEQ           reduce using rule 54 (number -> FLOAT meteNum .)
    AND             reduce using rule 54 (number -> FLOAT meteNum .)
    OR              reduce using rule 54 (number -> FLOAT meteNum .)
    SUM             reduce using rule 54 (number -> FLOAT meteNum .)
    MINUS           reduce using rule 54 (number -> FLOAT meteNum .)
    MULTP           reduce using rule 54 (number -> FLOAT meteNum .)
    DIVIDE          reduce using rule 54 (number -> FLOAT meteNum .)
    ID              reduce using rule 54 (number -> FLOAT meteNum .)
    LEFTPAR         reduce using rule 54 (number -> FLOAT meteNum .)
    INTEGER         reduce using rule 54 (number -> FLOAT meteNum .)
    FLOAT           reduce using rule 54 (number -> FLOAT meteNum .)
    RIGHTPAR        reduce using rule 54 (number -> FLOAT meteNum .)
    LEFTBRACK       reduce using rule 54 (number -> FLOAT meteNum .)
    COMMA           reduce using rule 54 (number -> FLOAT meteNum .)
    SEMICOLON       reduce using rule 54 (number -> FLOAT meteNum .)
    RIGHTBRACK      reduce using rule 54 (number -> FLOAT meteNum .)


state 66

    (87) exp -> LEFTPAR metePar . exp RIGHTPAR sacaPar exp2 generaCuad
    (86) exp -> . ID meteExp exp2
    (87) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (92) exp -> . number exp2
    (94) exp -> . empty
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (112) empty -> .

    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    RIGHTPAR        reduce using rule 112 (empty -> .)
    LESS            reduce using rule 112 (empty -> .)
    GRTR            reduce using rule 112 (empty -> .)
    EQ              reduce using rule 112 (empty -> .)
    NOTEQ           reduce using rule 112 (empty -> .)
    AND             reduce using rule 112 (empty -> .)
    OR              reduce using rule 112 (empty -> .)
    SUM             reduce using rule 112 (empty -> .)
    MINUS           reduce using rule 112 (empty -> .)
    MULTP           reduce using rule 112 (empty -> .)
    DIVIDE          reduce using rule 112 (empty -> .)

    number                         shift and go to state 40
    exp                            shift and go to state 87
    empty                          shift and go to state 46

state 67

    (53) number -> INTEGER meteNum .

    LESS            reduce using rule 53 (number -> INTEGER meteNum .)
    GRTR            reduce using rule 53 (number -> INTEGER meteNum .)
    EQ              reduce using rule 53 (number -> INTEGER meteNum .)
    NOTEQ           reduce using rule 53 (number -> INTEGER meteNum .)
    AND             reduce using rule 53 (number -> INTEGER meteNum .)
    OR              reduce using rule 53 (number -> INTEGER meteNum .)
    SUM             reduce using rule 53 (number -> INTEGER meteNum .)
    MINUS           reduce using rule 53 (number -> INTEGER meteNum .)
    MULTP           reduce using rule 53 (number -> INTEGER meteNum .)
    DIVIDE          reduce using rule 53 (number -> INTEGER meteNum .)
    ID              reduce using rule 53 (number -> INTEGER meteNum .)
    LEFTPAR         reduce using rule 53 (number -> INTEGER meteNum .)
    INTEGER         reduce using rule 53 (number -> INTEGER meteNum .)
    FLOAT           reduce using rule 53 (number -> INTEGER meteNum .)
    RIGHTPAR        reduce using rule 53 (number -> INTEGER meteNum .)
    LEFTBRACK       reduce using rule 53 (number -> INTEGER meteNum .)
    COMMA           reduce using rule 53 (number -> INTEGER meteNum .)
    SEMICOLON       reduce using rule 53 (number -> INTEGER meteNum .)
    RIGHTBRACK      reduce using rule 53 (number -> INTEGER meteNum .)


state 68

    (86) exp -> ID meteExp . exp2
    (95) exp2 -> . LESS meteOper exp
    (96) exp2 -> . GRTR meteOper exp
    (97) exp2 -> . EQ meteOper exp
    (98) exp2 -> . NOTEQ meteOper exp
    (99) exp2 -> . AND meteOper exp
    (100) exp2 -> . OR meteOper exp
    (101) exp2 -> . SUM meteOper exp
    (103) exp2 -> . MINUS meteOper exp
    (104) exp2 -> . MULTP meteOper exp
    (105) exp2 -> . DIVIDE meteOper exp
    (106) exp2 -> . empty
    (112) empty -> .

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GRTR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTP resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    LESS            shift and go to state 55
    GRTR            shift and go to state 60
    EQ              shift and go to state 62
    NOTEQ           shift and go to state 56
    AND             shift and go to state 53
    OR              shift and go to state 63
    SUM             shift and go to state 58
    MINUS           shift and go to state 59
    MULTP           shift and go to state 61
    DIVIDE          shift and go to state 54
    LEFTBRACK       reduce using rule 112 (empty -> .)
    COMMA           reduce using rule 112 (empty -> .)
    SEMICOLON       reduce using rule 112 (empty -> .)
    RIGHTBRACK      reduce using rule 112 (empty -> .)
    RIGHTPAR        reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    LEFTPAR         reduce using rule 112 (empty -> .)
    INTEGER         reduce using rule 112 (empty -> .)
    FLOAT           reduce using rule 112 (empty -> .)

  ! LESS            [ reduce using rule 112 (empty -> .) ]
  ! GRTR            [ reduce using rule 112 (empty -> .) ]
  ! EQ              [ reduce using rule 112 (empty -> .) ]
  ! NOTEQ           [ reduce using rule 112 (empty -> .) ]
  ! AND             [ reduce using rule 112 (empty -> .) ]
  ! OR              [ reduce using rule 112 (empty -> .) ]
  ! SUM             [ reduce using rule 112 (empty -> .) ]
  ! MINUS           [ reduce using rule 112 (empty -> .) ]
  ! MULTP           [ reduce using rule 112 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 112 (empty -> .) ]

    exp2                           shift and go to state 88
    empty                          shift and go to state 64

state 69

    (25) array -> LEFTBRACK exp . RIGHTBRACK array

    RIGHTBRACK      shift and go to state 89


state 70

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 . SEMICOLON declareRecursivo

    SEMICOLON       shift and go to state 90


state 71

    (10) declare3 -> COMMA . ID altaVarGlobal declare3

    ID              shift and go to state 91


state 72

    (24) declare3 -> empty .

    SEMICOLON       reduce using rule 24 (declare3 -> empty .)


state 73

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 . RIGHTPAR LEFTKEY est functReturn RIGHTKEY

    RIGHTPAR        shift and go to state 92


state 74

    (17) funct2 -> type . ID altaVarLocal funct3

    ID              shift and go to state 93


state 75

    (19) funct2 -> empty .

    RIGHTPAR        reduce using rule 19 (funct2 -> empty .)


state 76

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY llenaMain altaModuloMain . est RIGHTKEY
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . do-while
    (111) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (107) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (112) empty -> .
    (82) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (79) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 106
    DECLARE         shift and go to state 105
    READ            shift and go to state 95
    WRITE           shift and go to state 103
    ID              shift and go to state 104
    RIGHTKEY        reduce using rule 112 (empty -> .)
    WHILE           shift and go to state 97
    DO              shift and go to state 94

  ! IF              [ reduce using rule 112 (empty -> .) ]
  ! DECLARE         [ reduce using rule 112 (empty -> .) ]
  ! READ            [ reduce using rule 112 (empty -> .) ]
  ! WRITE           [ reduce using rule 112 (empty -> .) ]
  ! ID              [ reduce using rule 112 (empty -> .) ]
  ! WHILE           [ reduce using rule 112 (empty -> .) ]
  ! DO              [ reduce using rule 112 (empty -> .) ]

    conditional                    shift and go to state 96
    do-while                       shift and go to state 98
    est                            shift and go to state 99
    llamadaAFunct                  shift and go to state 100
    input                          shift and go to state 101
    assignment                     shift and go to state 102
    cycles                         shift and go to state 107
    while                          shift and go to state 108
    empty                          shift and go to state 109
    output                         shift and go to state 110
    declareLocal                   shift and go to state 111

state 77

    (99) exp2 -> AND meteOper . exp
    (86) exp -> . ID meteExp exp2
    (87) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (92) exp -> . number exp2
    (94) exp -> . empty
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (112) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    LEFTBRACK       reduce using rule 112 (empty -> .)
    COMMA           reduce using rule 112 (empty -> .)
    SEMICOLON       reduce using rule 112 (empty -> .)
    RIGHTBRACK      reduce using rule 112 (empty -> .)
    RIGHTPAR        reduce using rule 112 (empty -> .)
    LESS            reduce using rule 112 (empty -> .)
    GRTR            reduce using rule 112 (empty -> .)
    EQ              reduce using rule 112 (empty -> .)
    NOTEQ           reduce using rule 112 (empty -> .)
    AND             reduce using rule 112 (empty -> .)
    OR              reduce using rule 112 (empty -> .)
    SUM             reduce using rule 112 (empty -> .)
    MINUS           reduce using rule 112 (empty -> .)
    MULTP           reduce using rule 112 (empty -> .)
    DIVIDE          reduce using rule 112 (empty -> .)

  ! ID              [ reduce using rule 112 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 112 (empty -> .) ]
  ! INTEGER         [ reduce using rule 112 (empty -> .) ]
  ! FLOAT           [ reduce using rule 112 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 112
    empty                          shift and go to state 46

state 78

    (105) exp2 -> DIVIDE meteOper . exp
    (86) exp -> . ID meteExp exp2
    (87) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (92) exp -> . number exp2
    (94) exp -> . empty
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (112) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    LEFTBRACK       reduce using rule 112 (empty -> .)
    COMMA           reduce using rule 112 (empty -> .)
    SEMICOLON       reduce using rule 112 (empty -> .)
    RIGHTBRACK      reduce using rule 112 (empty -> .)
    RIGHTPAR        reduce using rule 112 (empty -> .)
    LESS            reduce using rule 112 (empty -> .)
    GRTR            reduce using rule 112 (empty -> .)
    EQ              reduce using rule 112 (empty -> .)
    NOTEQ           reduce using rule 112 (empty -> .)
    AND             reduce using rule 112 (empty -> .)
    OR              reduce using rule 112 (empty -> .)
    SUM             reduce using rule 112 (empty -> .)
    MINUS           reduce using rule 112 (empty -> .)
    MULTP           reduce using rule 112 (empty -> .)
    DIVIDE          reduce using rule 112 (empty -> .)

  ! ID              [ reduce using rule 112 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 112 (empty -> .) ]
  ! INTEGER         [ reduce using rule 112 (empty -> .) ]
  ! FLOAT           [ reduce using rule 112 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 113
    empty                          shift and go to state 46

state 79

    (95) exp2 -> LESS meteOper . exp
    (86) exp -> . ID meteExp exp2
    (87) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (92) exp -> . number exp2
    (94) exp -> . empty
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (112) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    LEFTBRACK       reduce using rule 112 (empty -> .)
    COMMA           reduce using rule 112 (empty -> .)
    SEMICOLON       reduce using rule 112 (empty -> .)
    RIGHTBRACK      reduce using rule 112 (empty -> .)
    RIGHTPAR        reduce using rule 112 (empty -> .)
    LESS            reduce using rule 112 (empty -> .)
    GRTR            reduce using rule 112 (empty -> .)
    EQ              reduce using rule 112 (empty -> .)
    NOTEQ           reduce using rule 112 (empty -> .)
    AND             reduce using rule 112 (empty -> .)
    OR              reduce using rule 112 (empty -> .)
    SUM             reduce using rule 112 (empty -> .)
    MINUS           reduce using rule 112 (empty -> .)
    MULTP           reduce using rule 112 (empty -> .)
    DIVIDE          reduce using rule 112 (empty -> .)

  ! ID              [ reduce using rule 112 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 112 (empty -> .) ]
  ! INTEGER         [ reduce using rule 112 (empty -> .) ]
  ! FLOAT           [ reduce using rule 112 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 114
    empty                          shift and go to state 46

state 80

    (98) exp2 -> NOTEQ meteOper . exp
    (86) exp -> . ID meteExp exp2
    (87) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (92) exp -> . number exp2
    (94) exp -> . empty
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (112) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    LEFTBRACK       reduce using rule 112 (empty -> .)
    COMMA           reduce using rule 112 (empty -> .)
    SEMICOLON       reduce using rule 112 (empty -> .)
    RIGHTBRACK      reduce using rule 112 (empty -> .)
    RIGHTPAR        reduce using rule 112 (empty -> .)
    LESS            reduce using rule 112 (empty -> .)
    GRTR            reduce using rule 112 (empty -> .)
    EQ              reduce using rule 112 (empty -> .)
    NOTEQ           reduce using rule 112 (empty -> .)
    AND             reduce using rule 112 (empty -> .)
    OR              reduce using rule 112 (empty -> .)
    SUM             reduce using rule 112 (empty -> .)
    MINUS           reduce using rule 112 (empty -> .)
    MULTP           reduce using rule 112 (empty -> .)
    DIVIDE          reduce using rule 112 (empty -> .)

  ! ID              [ reduce using rule 112 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 112 (empty -> .) ]
  ! INTEGER         [ reduce using rule 112 (empty -> .) ]
  ! FLOAT           [ reduce using rule 112 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 115
    empty                          shift and go to state 46

state 81

    (101) exp2 -> SUM meteOper . exp
    (86) exp -> . ID meteExp exp2
    (87) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (92) exp -> . number exp2
    (94) exp -> . empty
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (112) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    LEFTBRACK       reduce using rule 112 (empty -> .)
    COMMA           reduce using rule 112 (empty -> .)
    SEMICOLON       reduce using rule 112 (empty -> .)
    RIGHTBRACK      reduce using rule 112 (empty -> .)
    RIGHTPAR        reduce using rule 112 (empty -> .)
    LESS            reduce using rule 112 (empty -> .)
    GRTR            reduce using rule 112 (empty -> .)
    EQ              reduce using rule 112 (empty -> .)
    NOTEQ           reduce using rule 112 (empty -> .)
    AND             reduce using rule 112 (empty -> .)
    OR              reduce using rule 112 (empty -> .)
    SUM             reduce using rule 112 (empty -> .)
    MINUS           reduce using rule 112 (empty -> .)
    MULTP           reduce using rule 112 (empty -> .)
    DIVIDE          reduce using rule 112 (empty -> .)

  ! ID              [ reduce using rule 112 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 112 (empty -> .) ]
  ! INTEGER         [ reduce using rule 112 (empty -> .) ]
  ! FLOAT           [ reduce using rule 112 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 116
    empty                          shift and go to state 46

state 82

    (103) exp2 -> MINUS meteOper . exp
    (86) exp -> . ID meteExp exp2
    (87) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (92) exp -> . number exp2
    (94) exp -> . empty
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (112) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    LEFTBRACK       reduce using rule 112 (empty -> .)
    COMMA           reduce using rule 112 (empty -> .)
    SEMICOLON       reduce using rule 112 (empty -> .)
    RIGHTBRACK      reduce using rule 112 (empty -> .)
    RIGHTPAR        reduce using rule 112 (empty -> .)
    LESS            reduce using rule 112 (empty -> .)
    GRTR            reduce using rule 112 (empty -> .)
    EQ              reduce using rule 112 (empty -> .)
    NOTEQ           reduce using rule 112 (empty -> .)
    AND             reduce using rule 112 (empty -> .)
    OR              reduce using rule 112 (empty -> .)
    SUM             reduce using rule 112 (empty -> .)
    MINUS           reduce using rule 112 (empty -> .)
    MULTP           reduce using rule 112 (empty -> .)
    DIVIDE          reduce using rule 112 (empty -> .)

  ! ID              [ reduce using rule 112 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 112 (empty -> .) ]
  ! INTEGER         [ reduce using rule 112 (empty -> .) ]
  ! FLOAT           [ reduce using rule 112 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 117
    empty                          shift and go to state 46

state 83

    (96) exp2 -> GRTR meteOper . exp
    (86) exp -> . ID meteExp exp2
    (87) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (92) exp -> . number exp2
    (94) exp -> . empty
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (112) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    LEFTBRACK       reduce using rule 112 (empty -> .)
    COMMA           reduce using rule 112 (empty -> .)
    SEMICOLON       reduce using rule 112 (empty -> .)
    RIGHTBRACK      reduce using rule 112 (empty -> .)
    RIGHTPAR        reduce using rule 112 (empty -> .)
    LESS            reduce using rule 112 (empty -> .)
    GRTR            reduce using rule 112 (empty -> .)
    EQ              reduce using rule 112 (empty -> .)
    NOTEQ           reduce using rule 112 (empty -> .)
    AND             reduce using rule 112 (empty -> .)
    OR              reduce using rule 112 (empty -> .)
    SUM             reduce using rule 112 (empty -> .)
    MINUS           reduce using rule 112 (empty -> .)
    MULTP           reduce using rule 112 (empty -> .)
    DIVIDE          reduce using rule 112 (empty -> .)

  ! ID              [ reduce using rule 112 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 112 (empty -> .) ]
  ! INTEGER         [ reduce using rule 112 (empty -> .) ]
  ! FLOAT           [ reduce using rule 112 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 118
    empty                          shift and go to state 46

state 84

    (104) exp2 -> MULTP meteOper . exp
    (86) exp -> . ID meteExp exp2
    (87) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (92) exp -> . number exp2
    (94) exp -> . empty
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (112) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    LEFTBRACK       reduce using rule 112 (empty -> .)
    COMMA           reduce using rule 112 (empty -> .)
    SEMICOLON       reduce using rule 112 (empty -> .)
    RIGHTBRACK      reduce using rule 112 (empty -> .)
    RIGHTPAR        reduce using rule 112 (empty -> .)
    LESS            reduce using rule 112 (empty -> .)
    GRTR            reduce using rule 112 (empty -> .)
    EQ              reduce using rule 112 (empty -> .)
    NOTEQ           reduce using rule 112 (empty -> .)
    AND             reduce using rule 112 (empty -> .)
    OR              reduce using rule 112 (empty -> .)
    SUM             reduce using rule 112 (empty -> .)
    MINUS           reduce using rule 112 (empty -> .)
    MULTP           reduce using rule 112 (empty -> .)
    DIVIDE          reduce using rule 112 (empty -> .)

  ! ID              [ reduce using rule 112 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 112 (empty -> .) ]
  ! INTEGER         [ reduce using rule 112 (empty -> .) ]
  ! FLOAT           [ reduce using rule 112 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 119
    empty                          shift and go to state 46

state 85

    (97) exp2 -> EQ meteOper . exp
    (86) exp -> . ID meteExp exp2
    (87) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (92) exp -> . number exp2
    (94) exp -> . empty
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (112) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    LEFTBRACK       reduce using rule 112 (empty -> .)
    COMMA           reduce using rule 112 (empty -> .)
    SEMICOLON       reduce using rule 112 (empty -> .)
    RIGHTBRACK      reduce using rule 112 (empty -> .)
    RIGHTPAR        reduce using rule 112 (empty -> .)
    LESS            reduce using rule 112 (empty -> .)
    GRTR            reduce using rule 112 (empty -> .)
    EQ              reduce using rule 112 (empty -> .)
    NOTEQ           reduce using rule 112 (empty -> .)
    AND             reduce using rule 112 (empty -> .)
    OR              reduce using rule 112 (empty -> .)
    SUM             reduce using rule 112 (empty -> .)
    MINUS           reduce using rule 112 (empty -> .)
    MULTP           reduce using rule 112 (empty -> .)
    DIVIDE          reduce using rule 112 (empty -> .)

  ! ID              [ reduce using rule 112 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 112 (empty -> .) ]
  ! INTEGER         [ reduce using rule 112 (empty -> .) ]
  ! FLOAT           [ reduce using rule 112 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 120
    empty                          shift and go to state 46

state 86

    (100) exp2 -> OR meteOper . exp
    (86) exp -> . ID meteExp exp2
    (87) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (92) exp -> . number exp2
    (94) exp -> . empty
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (112) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    LEFTBRACK       reduce using rule 112 (empty -> .)
    COMMA           reduce using rule 112 (empty -> .)
    SEMICOLON       reduce using rule 112 (empty -> .)
    RIGHTBRACK      reduce using rule 112 (empty -> .)
    RIGHTPAR        reduce using rule 112 (empty -> .)
    LESS            reduce using rule 112 (empty -> .)
    GRTR            reduce using rule 112 (empty -> .)
    EQ              reduce using rule 112 (empty -> .)
    NOTEQ           reduce using rule 112 (empty -> .)
    AND             reduce using rule 112 (empty -> .)
    OR              reduce using rule 112 (empty -> .)
    SUM             reduce using rule 112 (empty -> .)
    MINUS           reduce using rule 112 (empty -> .)
    MULTP           reduce using rule 112 (empty -> .)
    DIVIDE          reduce using rule 112 (empty -> .)

  ! ID              [ reduce using rule 112 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 112 (empty -> .) ]
  ! INTEGER         [ reduce using rule 112 (empty -> .) ]
  ! FLOAT           [ reduce using rule 112 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 121
    empty                          shift and go to state 46

state 87

    (87) exp -> LEFTPAR metePar exp . RIGHTPAR sacaPar exp2 generaCuad

    RIGHTPAR        shift and go to state 122


state 88

    (86) exp -> ID meteExp exp2 .

    LEFTBRACK       reduce using rule 86 (exp -> ID meteExp exp2 .)
    COMMA           reduce using rule 86 (exp -> ID meteExp exp2 .)
    SEMICOLON       reduce using rule 86 (exp -> ID meteExp exp2 .)
    RIGHTBRACK      reduce using rule 86 (exp -> ID meteExp exp2 .)
    RIGHTPAR        reduce using rule 86 (exp -> ID meteExp exp2 .)
    ID              reduce using rule 86 (exp -> ID meteExp exp2 .)
    LEFTPAR         reduce using rule 86 (exp -> ID meteExp exp2 .)
    INTEGER         reduce using rule 86 (exp -> ID meteExp exp2 .)
    FLOAT           reduce using rule 86 (exp -> ID meteExp exp2 .)
    LESS            reduce using rule 86 (exp -> ID meteExp exp2 .)
    GRTR            reduce using rule 86 (exp -> ID meteExp exp2 .)
    EQ              reduce using rule 86 (exp -> ID meteExp exp2 .)
    NOTEQ           reduce using rule 86 (exp -> ID meteExp exp2 .)
    AND             reduce using rule 86 (exp -> ID meteExp exp2 .)
    OR              reduce using rule 86 (exp -> ID meteExp exp2 .)
    SUM             reduce using rule 86 (exp -> ID meteExp exp2 .)
    MINUS           reduce using rule 86 (exp -> ID meteExp exp2 .)
    MULTP           reduce using rule 86 (exp -> ID meteExp exp2 .)
    DIVIDE          reduce using rule 86 (exp -> ID meteExp exp2 .)


state 89

    (25) array -> LEFTBRACK exp RIGHTBRACK . array
    (25) array -> . LEFTBRACK exp RIGHTBRACK array
    (26) array -> . empty
    (112) empty -> .

    LEFTBRACK       shift and go to state 47
    COMMA           reduce using rule 112 (empty -> .)
    SEMICOLON       reduce using rule 112 (empty -> .)

    array                          shift and go to state 123
    empty                          shift and go to state 50

state 90

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON . declareRecursivo
    (8) declareRecursivo -> . type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
    (23) declareRecursivo -> . empty
    (27) type -> . type2
    (112) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    FUNCTION        reduce using rule 112 (empty -> .)
    MAIN            reduce using rule 112 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    declareRecursivo               shift and go to state 124
    type                           shift and go to state 17
    empty                          shift and go to state 18
    type2                          shift and go to state 19

state 91

    (10) declare3 -> COMMA ID . altaVarGlobal declare3
    (22) altaVarGlobal -> .

    COMMA           reduce using rule 22 (altaVarGlobal -> .)
    SEMICOLON       reduce using rule 22 (altaVarGlobal -> .)

    altaVarGlobal                  shift and go to state 125

state 92

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR . LEFTKEY est functReturn RIGHTKEY

    LEFTKEY         shift and go to state 126


state 93

    (17) funct2 -> type ID . altaVarLocal funct3
    (63) altaVarLocal -> .

    COMMA           reduce using rule 63 (altaVarLocal -> .)
    RIGHTPAR        reduce using rule 63 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 127

state 94

    (79) do-while -> DO . meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad
    (81) meteSalto -> .

    LEFTKEY         reduce using rule 81 (meteSalto -> .)

    meteSalto                      shift and go to state 128

state 95

    (111) input -> READ . LEFTPAR ID RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 129


state 96

    (36) est -> conditional . est
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . do-while
    (111) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (107) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (112) empty -> .
    (82) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (79) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 106
    DECLARE         shift and go to state 105
    READ            shift and go to state 95
    WRITE           shift and go to state 103
    ID              shift and go to state 104
    RIGHTKEY        reduce using rule 112 (empty -> .)
    RETURN          reduce using rule 112 (empty -> .)
    WHILE           shift and go to state 97
    DO              shift and go to state 94

  ! IF              [ reduce using rule 112 (empty -> .) ]
  ! DECLARE         [ reduce using rule 112 (empty -> .) ]
  ! READ            [ reduce using rule 112 (empty -> .) ]
  ! WRITE           [ reduce using rule 112 (empty -> .) ]
  ! ID              [ reduce using rule 112 (empty -> .) ]
  ! WHILE           [ reduce using rule 112 (empty -> .) ]
  ! DO              [ reduce using rule 112 (empty -> .) ]

    conditional                    shift and go to state 96
    do-while                       shift and go to state 98
    est                            shift and go to state 130
    llamadaAFunct                  shift and go to state 100
    input                          shift and go to state 101
    assignment                     shift and go to state 102
    cycles                         shift and go to state 107
    while                          shift and go to state 108
    empty                          shift and go to state 109
    output                         shift and go to state 110
    declareLocal                   shift and go to state 111

state 97

    (82) while -> WHILE . LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF

    LEFTPAR         shift and go to state 131


state 98

    (78) cycles -> do-while .

    IF              reduce using rule 78 (cycles -> do-while .)
    DECLARE         reduce using rule 78 (cycles -> do-while .)
    READ            reduce using rule 78 (cycles -> do-while .)
    WRITE           reduce using rule 78 (cycles -> do-while .)
    ID              reduce using rule 78 (cycles -> do-while .)
    WHILE           reduce using rule 78 (cycles -> do-while .)
    DO              reduce using rule 78 (cycles -> do-while .)
    RIGHTKEY        reduce using rule 78 (cycles -> do-while .)
    RETURN          reduce using rule 78 (cycles -> do-while .)


state 99

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY llenaMain altaModuloMain est . RIGHTKEY

    RIGHTKEY        shift and go to state 132


state 100

    (42) est -> llamadaAFunct . est
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . do-while
    (111) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (107) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (112) empty -> .
    (82) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (79) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 106
    DECLARE         shift and go to state 105
    READ            shift and go to state 95
    WRITE           shift and go to state 103
    ID              shift and go to state 104
    RIGHTKEY        reduce using rule 112 (empty -> .)
    RETURN          reduce using rule 112 (empty -> .)
    WHILE           shift and go to state 97
    DO              shift and go to state 94

  ! IF              [ reduce using rule 112 (empty -> .) ]
  ! DECLARE         [ reduce using rule 112 (empty -> .) ]
  ! READ            [ reduce using rule 112 (empty -> .) ]
  ! WRITE           [ reduce using rule 112 (empty -> .) ]
  ! ID              [ reduce using rule 112 (empty -> .) ]
  ! WHILE           [ reduce using rule 112 (empty -> .) ]
  ! DO              [ reduce using rule 112 (empty -> .) ]

    conditional                    shift and go to state 96
    do-while                       shift and go to state 98
    est                            shift and go to state 133
    llamadaAFunct                  shift and go to state 100
    input                          shift and go to state 101
    assignment                     shift and go to state 102
    cycles                         shift and go to state 107
    while                          shift and go to state 108
    empty                          shift and go to state 109
    output                         shift and go to state 110
    declareLocal                   shift and go to state 111

state 101

    (39) est -> input . est
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . do-while
    (111) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (107) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (112) empty -> .
    (82) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (79) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 106
    DECLARE         shift and go to state 105
    READ            shift and go to state 95
    WRITE           shift and go to state 103
    ID              shift and go to state 104
    RIGHTKEY        reduce using rule 112 (empty -> .)
    RETURN          reduce using rule 112 (empty -> .)
    WHILE           shift and go to state 97
    DO              shift and go to state 94

  ! IF              [ reduce using rule 112 (empty -> .) ]
  ! DECLARE         [ reduce using rule 112 (empty -> .) ]
  ! READ            [ reduce using rule 112 (empty -> .) ]
  ! WRITE           [ reduce using rule 112 (empty -> .) ]
  ! ID              [ reduce using rule 112 (empty -> .) ]
  ! WHILE           [ reduce using rule 112 (empty -> .) ]
  ! DO              [ reduce using rule 112 (empty -> .) ]

    conditional                    shift and go to state 96
    do-while                       shift and go to state 98
    est                            shift and go to state 134
    llamadaAFunct                  shift and go to state 100
    input                          shift and go to state 101
    assignment                     shift and go to state 102
    cycles                         shift and go to state 107
    while                          shift and go to state 108
    empty                          shift and go to state 109
    output                         shift and go to state 110
    declareLocal                   shift and go to state 111

state 102

    (41) est -> assignment . est
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . do-while
    (111) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (107) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (112) empty -> .
    (82) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (79) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 106
    DECLARE         shift and go to state 105
    READ            shift and go to state 95
    WRITE           shift and go to state 103
    ID              shift and go to state 104
    RIGHTKEY        reduce using rule 112 (empty -> .)
    RETURN          reduce using rule 112 (empty -> .)
    WHILE           shift and go to state 97
    DO              shift and go to state 94

  ! IF              [ reduce using rule 112 (empty -> .) ]
  ! DECLARE         [ reduce using rule 112 (empty -> .) ]
  ! READ            [ reduce using rule 112 (empty -> .) ]
  ! WRITE           [ reduce using rule 112 (empty -> .) ]
  ! ID              [ reduce using rule 112 (empty -> .) ]
  ! WHILE           [ reduce using rule 112 (empty -> .) ]
  ! DO              [ reduce using rule 112 (empty -> .) ]

    conditional                    shift and go to state 96
    do-while                       shift and go to state 98
    est                            shift and go to state 135
    llamadaAFunct                  shift and go to state 100
    input                          shift and go to state 101
    assignment                     shift and go to state 102
    cycles                         shift and go to state 107
    while                          shift and go to state 108
    empty                          shift and go to state 109
    output                         shift and go to state 110
    declareLocal                   shift and go to state 111

state 103

    (107) output -> WRITE . LEFTPAR output2 RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 136


state 104

    (64) assignment -> ID . ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> ID . ASSGN meteVar llamadaAFunct SEMICOLON
    (44) llamadaAFunct -> ID . LEFTPAR llamadaAFunct2 RIGHTPAR

    ASSGN           shift and go to state 137
    LEFTPAR         shift and go to state 138


state 105

    (50) declareLocal -> DECLARE . declareRecursivoLocal
    (51) declareRecursivoLocal -> . type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (59) declareRecursivoLocal -> . empty
    (27) type -> . type2
    (112) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    IF              reduce using rule 112 (empty -> .)
    DECLARE         reduce using rule 112 (empty -> .)
    READ            reduce using rule 112 (empty -> .)
    WRITE           reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    WHILE           reduce using rule 112 (empty -> .)
    DO              reduce using rule 112 (empty -> .)
    RIGHTKEY        reduce using rule 112 (empty -> .)
    RETURN          reduce using rule 112 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    declareRecursivoLocal          shift and go to state 139
    type2                          shift and go to state 19
    type                           shift and go to state 140
    empty                          shift and go to state 141

state 106

    (68) conditional -> IF . LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse

    LEFTPAR         shift and go to state 142


state 107

    (38) est -> cycles . est
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . do-while
    (111) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (107) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (112) empty -> .
    (82) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (79) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 106
    DECLARE         shift and go to state 105
    READ            shift and go to state 95
    WRITE           shift and go to state 103
    ID              shift and go to state 104
    RIGHTKEY        reduce using rule 112 (empty -> .)
    RETURN          reduce using rule 112 (empty -> .)
    WHILE           shift and go to state 97
    DO              shift and go to state 94

  ! IF              [ reduce using rule 112 (empty -> .) ]
  ! DECLARE         [ reduce using rule 112 (empty -> .) ]
  ! READ            [ reduce using rule 112 (empty -> .) ]
  ! WRITE           [ reduce using rule 112 (empty -> .) ]
  ! ID              [ reduce using rule 112 (empty -> .) ]
  ! WHILE           [ reduce using rule 112 (empty -> .) ]
  ! DO              [ reduce using rule 112 (empty -> .) ]

    conditional                    shift and go to state 96
    do-while                       shift and go to state 98
    est                            shift and go to state 143
    llamadaAFunct                  shift and go to state 100
    input                          shift and go to state 101
    assignment                     shift and go to state 102
    cycles                         shift and go to state 107
    while                          shift and go to state 108
    empty                          shift and go to state 109
    output                         shift and go to state 110
    declareLocal                   shift and go to state 111

state 108

    (76) cycles -> while .

    IF              reduce using rule 76 (cycles -> while .)
    DECLARE         reduce using rule 76 (cycles -> while .)
    READ            reduce using rule 76 (cycles -> while .)
    WRITE           reduce using rule 76 (cycles -> while .)
    ID              reduce using rule 76 (cycles -> while .)
    WHILE           reduce using rule 76 (cycles -> while .)
    DO              reduce using rule 76 (cycles -> while .)
    RIGHTKEY        reduce using rule 76 (cycles -> while .)
    RETURN          reduce using rule 76 (cycles -> while .)


state 109

    (43) est -> empty .
    (60) declareLocal -> empty .
    (77) cycles -> empty .
    (67) assignment -> empty .
    (45) llamadaAFunct -> empty .

  ! reduce/reduce conflict for RIGHTKEY resolved using rule 43 (est -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 43 (est -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for DECLARE resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for READ resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for WRITE resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for DO resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 43 (est -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 43 (est -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for DECLARE resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for READ resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for WRITE resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for DO resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 43 (est -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 43 (est -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 45 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for DECLARE resolved using rule 45 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for READ resolved using rule 45 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for WRITE resolved using rule 45 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 45 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 45 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for DO resolved using rule 45 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 43 (est -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 43 (est -> empty .)
    RETURN          reduce using rule 43 (est -> empty .)
    RIGHTKEY        reduce using rule 43 (est -> empty .)
    IF              reduce using rule 45 (llamadaAFunct -> empty .)
    DECLARE         reduce using rule 45 (llamadaAFunct -> empty .)
    READ            reduce using rule 45 (llamadaAFunct -> empty .)
    WRITE           reduce using rule 45 (llamadaAFunct -> empty .)
    ID              reduce using rule 45 (llamadaAFunct -> empty .)
    WHILE           reduce using rule 45 (llamadaAFunct -> empty .)
    DO              reduce using rule 45 (llamadaAFunct -> empty .)

  ! IF              [ reduce using rule 60 (declareLocal -> empty .) ]
  ! DECLARE         [ reduce using rule 60 (declareLocal -> empty .) ]
  ! READ            [ reduce using rule 60 (declareLocal -> empty .) ]
  ! WRITE           [ reduce using rule 60 (declareLocal -> empty .) ]
  ! ID              [ reduce using rule 60 (declareLocal -> empty .) ]
  ! WHILE           [ reduce using rule 60 (declareLocal -> empty .) ]
  ! DO              [ reduce using rule 60 (declareLocal -> empty .) ]
  ! RIGHTKEY        [ reduce using rule 60 (declareLocal -> empty .) ]
  ! RETURN          [ reduce using rule 60 (declareLocal -> empty .) ]
  ! IF              [ reduce using rule 77 (cycles -> empty .) ]
  ! DECLARE         [ reduce using rule 77 (cycles -> empty .) ]
  ! READ            [ reduce using rule 77 (cycles -> empty .) ]
  ! WRITE           [ reduce using rule 77 (cycles -> empty .) ]
  ! ID              [ reduce using rule 77 (cycles -> empty .) ]
  ! WHILE           [ reduce using rule 77 (cycles -> empty .) ]
  ! DO              [ reduce using rule 77 (cycles -> empty .) ]
  ! RIGHTKEY        [ reduce using rule 77 (cycles -> empty .) ]
  ! RETURN          [ reduce using rule 77 (cycles -> empty .) ]
  ! IF              [ reduce using rule 67 (assignment -> empty .) ]
  ! DECLARE         [ reduce using rule 67 (assignment -> empty .) ]
  ! READ            [ reduce using rule 67 (assignment -> empty .) ]
  ! WRITE           [ reduce using rule 67 (assignment -> empty .) ]
  ! ID              [ reduce using rule 67 (assignment -> empty .) ]
  ! WHILE           [ reduce using rule 67 (assignment -> empty .) ]
  ! DO              [ reduce using rule 67 (assignment -> empty .) ]
  ! RIGHTKEY        [ reduce using rule 67 (assignment -> empty .) ]
  ! RETURN          [ reduce using rule 67 (assignment -> empty .) ]
  ! RIGHTKEY        [ reduce using rule 45 (llamadaAFunct -> empty .) ]
  ! RETURN          [ reduce using rule 45 (llamadaAFunct -> empty .) ]


state 110

    (40) est -> output . est
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . do-while
    (111) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (107) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (112) empty -> .
    (82) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (79) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 106
    DECLARE         shift and go to state 105
    READ            shift and go to state 95
    WRITE           shift and go to state 103
    ID              shift and go to state 104
    RIGHTKEY        reduce using rule 112 (empty -> .)
    RETURN          reduce using rule 112 (empty -> .)
    WHILE           shift and go to state 97
    DO              shift and go to state 94

  ! IF              [ reduce using rule 112 (empty -> .) ]
  ! DECLARE         [ reduce using rule 112 (empty -> .) ]
  ! READ            [ reduce using rule 112 (empty -> .) ]
  ! WRITE           [ reduce using rule 112 (empty -> .) ]
  ! ID              [ reduce using rule 112 (empty -> .) ]
  ! WHILE           [ reduce using rule 112 (empty -> .) ]
  ! DO              [ reduce using rule 112 (empty -> .) ]

    conditional                    shift and go to state 96
    do-while                       shift and go to state 98
    est                            shift and go to state 144
    llamadaAFunct                  shift and go to state 100
    input                          shift and go to state 101
    assignment                     shift and go to state 102
    cycles                         shift and go to state 107
    while                          shift and go to state 108
    empty                          shift and go to state 109
    output                         shift and go to state 110
    declareLocal                   shift and go to state 111

state 111

    (37) est -> declareLocal . est
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . do-while
    (111) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (107) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (112) empty -> .
    (82) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (79) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 106
    DECLARE         shift and go to state 105
    READ            shift and go to state 95
    WRITE           shift and go to state 103
    ID              shift and go to state 104
    RIGHTKEY        reduce using rule 112 (empty -> .)
    RETURN          reduce using rule 112 (empty -> .)
    WHILE           shift and go to state 97
    DO              shift and go to state 94

  ! IF              [ reduce using rule 112 (empty -> .) ]
  ! DECLARE         [ reduce using rule 112 (empty -> .) ]
  ! READ            [ reduce using rule 112 (empty -> .) ]
  ! WRITE           [ reduce using rule 112 (empty -> .) ]
  ! ID              [ reduce using rule 112 (empty -> .) ]
  ! WHILE           [ reduce using rule 112 (empty -> .) ]
  ! DO              [ reduce using rule 112 (empty -> .) ]

    conditional                    shift and go to state 96
    do-while                       shift and go to state 98
    est                            shift and go to state 145
    llamadaAFunct                  shift and go to state 100
    input                          shift and go to state 101
    assignment                     shift and go to state 102
    declareLocal                   shift and go to state 111
    while                          shift and go to state 108
    empty                          shift and go to state 109
    output                         shift and go to state 110
    cycles                         shift and go to state 107

state 112

    (99) exp2 -> AND meteOper exp .

    LEFTBRACK       reduce using rule 99 (exp2 -> AND meteOper exp .)
    COMMA           reduce using rule 99 (exp2 -> AND meteOper exp .)
    SEMICOLON       reduce using rule 99 (exp2 -> AND meteOper exp .)
    RIGHTBRACK      reduce using rule 99 (exp2 -> AND meteOper exp .)
    RIGHTPAR        reduce using rule 99 (exp2 -> AND meteOper exp .)
    ID              reduce using rule 99 (exp2 -> AND meteOper exp .)
    LEFTPAR         reduce using rule 99 (exp2 -> AND meteOper exp .)
    INTEGER         reduce using rule 99 (exp2 -> AND meteOper exp .)
    FLOAT           reduce using rule 99 (exp2 -> AND meteOper exp .)
    LESS            reduce using rule 99 (exp2 -> AND meteOper exp .)
    GRTR            reduce using rule 99 (exp2 -> AND meteOper exp .)
    EQ              reduce using rule 99 (exp2 -> AND meteOper exp .)
    NOTEQ           reduce using rule 99 (exp2 -> AND meteOper exp .)
    AND             reduce using rule 99 (exp2 -> AND meteOper exp .)
    OR              reduce using rule 99 (exp2 -> AND meteOper exp .)
    SUM             reduce using rule 99 (exp2 -> AND meteOper exp .)
    MINUS           reduce using rule 99 (exp2 -> AND meteOper exp .)
    MULTP           reduce using rule 99 (exp2 -> AND meteOper exp .)
    DIVIDE          reduce using rule 99 (exp2 -> AND meteOper exp .)


state 113

    (105) exp2 -> DIVIDE meteOper exp .

    LEFTBRACK       reduce using rule 105 (exp2 -> DIVIDE meteOper exp .)
    COMMA           reduce using rule 105 (exp2 -> DIVIDE meteOper exp .)
    SEMICOLON       reduce using rule 105 (exp2 -> DIVIDE meteOper exp .)
    RIGHTBRACK      reduce using rule 105 (exp2 -> DIVIDE meteOper exp .)
    RIGHTPAR        reduce using rule 105 (exp2 -> DIVIDE meteOper exp .)
    ID              reduce using rule 105 (exp2 -> DIVIDE meteOper exp .)
    LEFTPAR         reduce using rule 105 (exp2 -> DIVIDE meteOper exp .)
    INTEGER         reduce using rule 105 (exp2 -> DIVIDE meteOper exp .)
    FLOAT           reduce using rule 105 (exp2 -> DIVIDE meteOper exp .)
    LESS            reduce using rule 105 (exp2 -> DIVIDE meteOper exp .)
    GRTR            reduce using rule 105 (exp2 -> DIVIDE meteOper exp .)
    EQ              reduce using rule 105 (exp2 -> DIVIDE meteOper exp .)
    NOTEQ           reduce using rule 105 (exp2 -> DIVIDE meteOper exp .)
    AND             reduce using rule 105 (exp2 -> DIVIDE meteOper exp .)
    OR              reduce using rule 105 (exp2 -> DIVIDE meteOper exp .)
    SUM             reduce using rule 105 (exp2 -> DIVIDE meteOper exp .)
    MINUS           reduce using rule 105 (exp2 -> DIVIDE meteOper exp .)
    MULTP           reduce using rule 105 (exp2 -> DIVIDE meteOper exp .)
    DIVIDE          reduce using rule 105 (exp2 -> DIVIDE meteOper exp .)


state 114

    (95) exp2 -> LESS meteOper exp .

    LEFTBRACK       reduce using rule 95 (exp2 -> LESS meteOper exp .)
    COMMA           reduce using rule 95 (exp2 -> LESS meteOper exp .)
    SEMICOLON       reduce using rule 95 (exp2 -> LESS meteOper exp .)
    RIGHTBRACK      reduce using rule 95 (exp2 -> LESS meteOper exp .)
    RIGHTPAR        reduce using rule 95 (exp2 -> LESS meteOper exp .)
    ID              reduce using rule 95 (exp2 -> LESS meteOper exp .)
    LEFTPAR         reduce using rule 95 (exp2 -> LESS meteOper exp .)
    INTEGER         reduce using rule 95 (exp2 -> LESS meteOper exp .)
    FLOAT           reduce using rule 95 (exp2 -> LESS meteOper exp .)
    LESS            reduce using rule 95 (exp2 -> LESS meteOper exp .)
    GRTR            reduce using rule 95 (exp2 -> LESS meteOper exp .)
    EQ              reduce using rule 95 (exp2 -> LESS meteOper exp .)
    NOTEQ           reduce using rule 95 (exp2 -> LESS meteOper exp .)
    AND             reduce using rule 95 (exp2 -> LESS meteOper exp .)
    OR              reduce using rule 95 (exp2 -> LESS meteOper exp .)
    SUM             reduce using rule 95 (exp2 -> LESS meteOper exp .)
    MINUS           reduce using rule 95 (exp2 -> LESS meteOper exp .)
    MULTP           reduce using rule 95 (exp2 -> LESS meteOper exp .)
    DIVIDE          reduce using rule 95 (exp2 -> LESS meteOper exp .)


state 115

    (98) exp2 -> NOTEQ meteOper exp .

    LEFTBRACK       reduce using rule 98 (exp2 -> NOTEQ meteOper exp .)
    COMMA           reduce using rule 98 (exp2 -> NOTEQ meteOper exp .)
    SEMICOLON       reduce using rule 98 (exp2 -> NOTEQ meteOper exp .)
    RIGHTBRACK      reduce using rule 98 (exp2 -> NOTEQ meteOper exp .)
    RIGHTPAR        reduce using rule 98 (exp2 -> NOTEQ meteOper exp .)
    ID              reduce using rule 98 (exp2 -> NOTEQ meteOper exp .)
    LEFTPAR         reduce using rule 98 (exp2 -> NOTEQ meteOper exp .)
    INTEGER         reduce using rule 98 (exp2 -> NOTEQ meteOper exp .)
    FLOAT           reduce using rule 98 (exp2 -> NOTEQ meteOper exp .)
    LESS            reduce using rule 98 (exp2 -> NOTEQ meteOper exp .)
    GRTR            reduce using rule 98 (exp2 -> NOTEQ meteOper exp .)
    EQ              reduce using rule 98 (exp2 -> NOTEQ meteOper exp .)
    NOTEQ           reduce using rule 98 (exp2 -> NOTEQ meteOper exp .)
    AND             reduce using rule 98 (exp2 -> NOTEQ meteOper exp .)
    OR              reduce using rule 98 (exp2 -> NOTEQ meteOper exp .)
    SUM             reduce using rule 98 (exp2 -> NOTEQ meteOper exp .)
    MINUS           reduce using rule 98 (exp2 -> NOTEQ meteOper exp .)
    MULTP           reduce using rule 98 (exp2 -> NOTEQ meteOper exp .)
    DIVIDE          reduce using rule 98 (exp2 -> NOTEQ meteOper exp .)


state 116

    (101) exp2 -> SUM meteOper exp .

    LEFTBRACK       reduce using rule 101 (exp2 -> SUM meteOper exp .)
    COMMA           reduce using rule 101 (exp2 -> SUM meteOper exp .)
    SEMICOLON       reduce using rule 101 (exp2 -> SUM meteOper exp .)
    RIGHTBRACK      reduce using rule 101 (exp2 -> SUM meteOper exp .)
    RIGHTPAR        reduce using rule 101 (exp2 -> SUM meteOper exp .)
    ID              reduce using rule 101 (exp2 -> SUM meteOper exp .)
    LEFTPAR         reduce using rule 101 (exp2 -> SUM meteOper exp .)
    INTEGER         reduce using rule 101 (exp2 -> SUM meteOper exp .)
    FLOAT           reduce using rule 101 (exp2 -> SUM meteOper exp .)
    LESS            reduce using rule 101 (exp2 -> SUM meteOper exp .)
    GRTR            reduce using rule 101 (exp2 -> SUM meteOper exp .)
    EQ              reduce using rule 101 (exp2 -> SUM meteOper exp .)
    NOTEQ           reduce using rule 101 (exp2 -> SUM meteOper exp .)
    AND             reduce using rule 101 (exp2 -> SUM meteOper exp .)
    OR              reduce using rule 101 (exp2 -> SUM meteOper exp .)
    SUM             reduce using rule 101 (exp2 -> SUM meteOper exp .)
    MINUS           reduce using rule 101 (exp2 -> SUM meteOper exp .)
    MULTP           reduce using rule 101 (exp2 -> SUM meteOper exp .)
    DIVIDE          reduce using rule 101 (exp2 -> SUM meteOper exp .)


state 117

    (103) exp2 -> MINUS meteOper exp .

    LEFTBRACK       reduce using rule 103 (exp2 -> MINUS meteOper exp .)
    COMMA           reduce using rule 103 (exp2 -> MINUS meteOper exp .)
    SEMICOLON       reduce using rule 103 (exp2 -> MINUS meteOper exp .)
    RIGHTBRACK      reduce using rule 103 (exp2 -> MINUS meteOper exp .)
    RIGHTPAR        reduce using rule 103 (exp2 -> MINUS meteOper exp .)
    ID              reduce using rule 103 (exp2 -> MINUS meteOper exp .)
    LEFTPAR         reduce using rule 103 (exp2 -> MINUS meteOper exp .)
    INTEGER         reduce using rule 103 (exp2 -> MINUS meteOper exp .)
    FLOAT           reduce using rule 103 (exp2 -> MINUS meteOper exp .)
    LESS            reduce using rule 103 (exp2 -> MINUS meteOper exp .)
    GRTR            reduce using rule 103 (exp2 -> MINUS meteOper exp .)
    EQ              reduce using rule 103 (exp2 -> MINUS meteOper exp .)
    NOTEQ           reduce using rule 103 (exp2 -> MINUS meteOper exp .)
    AND             reduce using rule 103 (exp2 -> MINUS meteOper exp .)
    OR              reduce using rule 103 (exp2 -> MINUS meteOper exp .)
    SUM             reduce using rule 103 (exp2 -> MINUS meteOper exp .)
    MINUS           reduce using rule 103 (exp2 -> MINUS meteOper exp .)
    MULTP           reduce using rule 103 (exp2 -> MINUS meteOper exp .)
    DIVIDE          reduce using rule 103 (exp2 -> MINUS meteOper exp .)


state 118

    (96) exp2 -> GRTR meteOper exp .

    LEFTBRACK       reduce using rule 96 (exp2 -> GRTR meteOper exp .)
    COMMA           reduce using rule 96 (exp2 -> GRTR meteOper exp .)
    SEMICOLON       reduce using rule 96 (exp2 -> GRTR meteOper exp .)
    RIGHTBRACK      reduce using rule 96 (exp2 -> GRTR meteOper exp .)
    RIGHTPAR        reduce using rule 96 (exp2 -> GRTR meteOper exp .)
    ID              reduce using rule 96 (exp2 -> GRTR meteOper exp .)
    LEFTPAR         reduce using rule 96 (exp2 -> GRTR meteOper exp .)
    INTEGER         reduce using rule 96 (exp2 -> GRTR meteOper exp .)
    FLOAT           reduce using rule 96 (exp2 -> GRTR meteOper exp .)
    LESS            reduce using rule 96 (exp2 -> GRTR meteOper exp .)
    GRTR            reduce using rule 96 (exp2 -> GRTR meteOper exp .)
    EQ              reduce using rule 96 (exp2 -> GRTR meteOper exp .)
    NOTEQ           reduce using rule 96 (exp2 -> GRTR meteOper exp .)
    AND             reduce using rule 96 (exp2 -> GRTR meteOper exp .)
    OR              reduce using rule 96 (exp2 -> GRTR meteOper exp .)
    SUM             reduce using rule 96 (exp2 -> GRTR meteOper exp .)
    MINUS           reduce using rule 96 (exp2 -> GRTR meteOper exp .)
    MULTP           reduce using rule 96 (exp2 -> GRTR meteOper exp .)
    DIVIDE          reduce using rule 96 (exp2 -> GRTR meteOper exp .)


state 119

    (104) exp2 -> MULTP meteOper exp .

    LEFTBRACK       reduce using rule 104 (exp2 -> MULTP meteOper exp .)
    COMMA           reduce using rule 104 (exp2 -> MULTP meteOper exp .)
    SEMICOLON       reduce using rule 104 (exp2 -> MULTP meteOper exp .)
    RIGHTBRACK      reduce using rule 104 (exp2 -> MULTP meteOper exp .)
    RIGHTPAR        reduce using rule 104 (exp2 -> MULTP meteOper exp .)
    ID              reduce using rule 104 (exp2 -> MULTP meteOper exp .)
    LEFTPAR         reduce using rule 104 (exp2 -> MULTP meteOper exp .)
    INTEGER         reduce using rule 104 (exp2 -> MULTP meteOper exp .)
    FLOAT           reduce using rule 104 (exp2 -> MULTP meteOper exp .)
    LESS            reduce using rule 104 (exp2 -> MULTP meteOper exp .)
    GRTR            reduce using rule 104 (exp2 -> MULTP meteOper exp .)
    EQ              reduce using rule 104 (exp2 -> MULTP meteOper exp .)
    NOTEQ           reduce using rule 104 (exp2 -> MULTP meteOper exp .)
    AND             reduce using rule 104 (exp2 -> MULTP meteOper exp .)
    OR              reduce using rule 104 (exp2 -> MULTP meteOper exp .)
    SUM             reduce using rule 104 (exp2 -> MULTP meteOper exp .)
    MINUS           reduce using rule 104 (exp2 -> MULTP meteOper exp .)
    MULTP           reduce using rule 104 (exp2 -> MULTP meteOper exp .)
    DIVIDE          reduce using rule 104 (exp2 -> MULTP meteOper exp .)


state 120

    (97) exp2 -> EQ meteOper exp .

    LEFTBRACK       reduce using rule 97 (exp2 -> EQ meteOper exp .)
    COMMA           reduce using rule 97 (exp2 -> EQ meteOper exp .)
    SEMICOLON       reduce using rule 97 (exp2 -> EQ meteOper exp .)
    RIGHTBRACK      reduce using rule 97 (exp2 -> EQ meteOper exp .)
    RIGHTPAR        reduce using rule 97 (exp2 -> EQ meteOper exp .)
    ID              reduce using rule 97 (exp2 -> EQ meteOper exp .)
    LEFTPAR         reduce using rule 97 (exp2 -> EQ meteOper exp .)
    INTEGER         reduce using rule 97 (exp2 -> EQ meteOper exp .)
    FLOAT           reduce using rule 97 (exp2 -> EQ meteOper exp .)
    LESS            reduce using rule 97 (exp2 -> EQ meteOper exp .)
    GRTR            reduce using rule 97 (exp2 -> EQ meteOper exp .)
    EQ              reduce using rule 97 (exp2 -> EQ meteOper exp .)
    NOTEQ           reduce using rule 97 (exp2 -> EQ meteOper exp .)
    AND             reduce using rule 97 (exp2 -> EQ meteOper exp .)
    OR              reduce using rule 97 (exp2 -> EQ meteOper exp .)
    SUM             reduce using rule 97 (exp2 -> EQ meteOper exp .)
    MINUS           reduce using rule 97 (exp2 -> EQ meteOper exp .)
    MULTP           reduce using rule 97 (exp2 -> EQ meteOper exp .)
    DIVIDE          reduce using rule 97 (exp2 -> EQ meteOper exp .)


state 121

    (100) exp2 -> OR meteOper exp .

    LEFTBRACK       reduce using rule 100 (exp2 -> OR meteOper exp .)
    COMMA           reduce using rule 100 (exp2 -> OR meteOper exp .)
    SEMICOLON       reduce using rule 100 (exp2 -> OR meteOper exp .)
    RIGHTBRACK      reduce using rule 100 (exp2 -> OR meteOper exp .)
    RIGHTPAR        reduce using rule 100 (exp2 -> OR meteOper exp .)
    ID              reduce using rule 100 (exp2 -> OR meteOper exp .)
    LEFTPAR         reduce using rule 100 (exp2 -> OR meteOper exp .)
    INTEGER         reduce using rule 100 (exp2 -> OR meteOper exp .)
    FLOAT           reduce using rule 100 (exp2 -> OR meteOper exp .)
    LESS            reduce using rule 100 (exp2 -> OR meteOper exp .)
    GRTR            reduce using rule 100 (exp2 -> OR meteOper exp .)
    EQ              reduce using rule 100 (exp2 -> OR meteOper exp .)
    NOTEQ           reduce using rule 100 (exp2 -> OR meteOper exp .)
    AND             reduce using rule 100 (exp2 -> OR meteOper exp .)
    OR              reduce using rule 100 (exp2 -> OR meteOper exp .)
    SUM             reduce using rule 100 (exp2 -> OR meteOper exp .)
    MINUS           reduce using rule 100 (exp2 -> OR meteOper exp .)
    MULTP           reduce using rule 100 (exp2 -> OR meteOper exp .)
    DIVIDE          reduce using rule 100 (exp2 -> OR meteOper exp .)


state 122

    (87) exp -> LEFTPAR metePar exp RIGHTPAR . sacaPar exp2 generaCuad
    (89) sacaPar -> .

    LESS            reduce using rule 89 (sacaPar -> .)
    GRTR            reduce using rule 89 (sacaPar -> .)
    EQ              reduce using rule 89 (sacaPar -> .)
    NOTEQ           reduce using rule 89 (sacaPar -> .)
    AND             reduce using rule 89 (sacaPar -> .)
    OR              reduce using rule 89 (sacaPar -> .)
    SUM             reduce using rule 89 (sacaPar -> .)
    MINUS           reduce using rule 89 (sacaPar -> .)
    MULTP           reduce using rule 89 (sacaPar -> .)
    DIVIDE          reduce using rule 89 (sacaPar -> .)
    LEFTBRACK       reduce using rule 89 (sacaPar -> .)
    COMMA           reduce using rule 89 (sacaPar -> .)
    SEMICOLON       reduce using rule 89 (sacaPar -> .)
    RIGHTBRACK      reduce using rule 89 (sacaPar -> .)
    RIGHTPAR        reduce using rule 89 (sacaPar -> .)
    ID              reduce using rule 89 (sacaPar -> .)
    LEFTPAR         reduce using rule 89 (sacaPar -> .)
    INTEGER         reduce using rule 89 (sacaPar -> .)
    FLOAT           reduce using rule 89 (sacaPar -> .)

    sacaPar                        shift and go to state 146

state 123

    (25) array -> LEFTBRACK exp RIGHTBRACK array .

    COMMA           reduce using rule 25 (array -> LEFTBRACK exp RIGHTBRACK array .)
    SEMICOLON       reduce using rule 25 (array -> LEFTBRACK exp RIGHTBRACK array .)


state 124

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo .

    FUNCTION        reduce using rule 8 (declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo .)
    MAIN            reduce using rule 8 (declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo .)


state 125

    (10) declare3 -> COMMA ID altaVarGlobal . declare3
    (10) declare3 -> . COMMA ID altaVarGlobal declare3
    (24) declare3 -> . empty
    (112) empty -> .

    COMMA           shift and go to state 71
    SEMICOLON       reduce using rule 112 (empty -> .)

    empty                          shift and go to state 72
    declare3                       shift and go to state 147

state 126

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY . est functReturn RIGHTKEY
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . do-while
    (111) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (107) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (112) empty -> .
    (82) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (79) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 106
    DECLARE         shift and go to state 105
    READ            shift and go to state 95
    WRITE           shift and go to state 103
    ID              shift and go to state 104
    RETURN          reduce using rule 112 (empty -> .)
    RIGHTKEY        reduce using rule 112 (empty -> .)
    WHILE           shift and go to state 97
    DO              shift and go to state 94

  ! IF              [ reduce using rule 112 (empty -> .) ]
  ! DECLARE         [ reduce using rule 112 (empty -> .) ]
  ! READ            [ reduce using rule 112 (empty -> .) ]
  ! WRITE           [ reduce using rule 112 (empty -> .) ]
  ! ID              [ reduce using rule 112 (empty -> .) ]
  ! WHILE           [ reduce using rule 112 (empty -> .) ]
  ! DO              [ reduce using rule 112 (empty -> .) ]

    conditional                    shift and go to state 96
    do-while                       shift and go to state 98
    est                            shift and go to state 148
    llamadaAFunct                  shift and go to state 100
    input                          shift and go to state 101
    assignment                     shift and go to state 102
    cycles                         shift and go to state 107
    while                          shift and go to state 108
    empty                          shift and go to state 109
    output                         shift and go to state 110
    declareLocal                   shift and go to state 111

state 127

    (17) funct2 -> type ID altaVarLocal . funct3
    (18) funct3 -> . COMMA type ID altaVarLocal funct3
    (20) funct3 -> . empty
    (112) empty -> .

    COMMA           shift and go to state 150
    RIGHTPAR        reduce using rule 112 (empty -> .)

    funct3                         shift and go to state 149
    empty                          shift and go to state 151

state 128

    (79) do-while -> DO meteSalto . LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

    LEFTKEY         shift and go to state 152


state 129

    (111) input -> READ LEFTPAR . ID RIGHTPAR SEMICOLON

    ID              shift and go to state 153


state 130

    (36) est -> conditional est .

    RETURN          reduce using rule 36 (est -> conditional est .)
    RIGHTKEY        reduce using rule 36 (est -> conditional est .)


state 131

    (82) while -> WHILE LEFTPAR . while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (84) while2 -> . exp while2
    (85) while2 -> . empty
    (86) exp -> . ID meteExp exp2
    (87) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (92) exp -> . number exp2
    (94) exp -> . empty
    (112) empty -> .
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    RIGHTPAR        reduce using rule 112 (empty -> .)
    LESS            reduce using rule 112 (empty -> .)
    GRTR            reduce using rule 112 (empty -> .)
    EQ              reduce using rule 112 (empty -> .)
    NOTEQ           reduce using rule 112 (empty -> .)
    AND             reduce using rule 112 (empty -> .)
    OR              reduce using rule 112 (empty -> .)
    SUM             reduce using rule 112 (empty -> .)
    MINUS           reduce using rule 112 (empty -> .)
    MULTP           reduce using rule 112 (empty -> .)
    DIVIDE          reduce using rule 112 (empty -> .)
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41

  ! ID              [ reduce using rule 112 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 112 (empty -> .) ]
  ! INTEGER         [ reduce using rule 112 (empty -> .) ]
  ! FLOAT           [ reduce using rule 112 (empty -> .) ]

    number                         shift and go to state 40
    while2                         shift and go to state 154
    exp                            shift and go to state 155
    empty                          shift and go to state 156

state 132

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY llenaMain altaModuloMain est RIGHTKEY .

    END             reduce using rule 33 (cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY llenaMain altaModuloMain est RIGHTKEY .)


state 133

    (42) est -> llamadaAFunct est .

    RETURN          reduce using rule 42 (est -> llamadaAFunct est .)
    RIGHTKEY        reduce using rule 42 (est -> llamadaAFunct est .)


state 134

    (39) est -> input est .

    RETURN          reduce using rule 39 (est -> input est .)
    RIGHTKEY        reduce using rule 39 (est -> input est .)


state 135

    (41) est -> assignment est .

    RETURN          reduce using rule 41 (est -> assignment est .)
    RIGHTKEY        reduce using rule 41 (est -> assignment est .)


state 136

    (107) output -> WRITE LEFTPAR . output2 RIGHTPAR SEMICOLON
    (108) output2 -> . ID output2
    (109) output2 -> . QUOTE ID QUOTE output2
    (110) output2 -> . empty
    (112) empty -> .

    ID              shift and go to state 159
    QUOTE           shift and go to state 158
    RIGHTPAR        reduce using rule 112 (empty -> .)

    output2                        shift and go to state 157
    empty                          shift and go to state 160

state 137

    (64) assignment -> ID ASSGN . meteVar exp generaCuad SEMICOLON
    (65) assignment -> ID ASSGN . meteVar llamadaAFunct SEMICOLON
    (66) meteVar -> .

    ID              reduce using rule 66 (meteVar -> .)
    LEFTPAR         reduce using rule 66 (meteVar -> .)
    INTEGER         reduce using rule 66 (meteVar -> .)
    FLOAT           reduce using rule 66 (meteVar -> .)
    SEMICOLON       reduce using rule 66 (meteVar -> .)
    LESS            reduce using rule 66 (meteVar -> .)
    GRTR            reduce using rule 66 (meteVar -> .)
    EQ              reduce using rule 66 (meteVar -> .)
    NOTEQ           reduce using rule 66 (meteVar -> .)
    AND             reduce using rule 66 (meteVar -> .)
    OR              reduce using rule 66 (meteVar -> .)
    SUM             reduce using rule 66 (meteVar -> .)
    MINUS           reduce using rule 66 (meteVar -> .)
    MULTP           reduce using rule 66 (meteVar -> .)
    DIVIDE          reduce using rule 66 (meteVar -> .)

    meteVar                        shift and go to state 161

state 138

    (44) llamadaAFunct -> ID LEFTPAR . llamadaAFunct2 RIGHTPAR
    (46) llamadaAFunct2 -> . ID llamadaAFunct3
    (49) llamadaAFunct2 -> . empty
    (112) empty -> .

    ID              shift and go to state 163
    RIGHTPAR        reduce using rule 112 (empty -> .)

    llamadaAFunct2                 shift and go to state 162
    empty                          shift and go to state 164

state 139

    (50) declareLocal -> DECLARE declareRecursivoLocal .

    IF              reduce using rule 50 (declareLocal -> DECLARE declareRecursivoLocal .)
    DECLARE         reduce using rule 50 (declareLocal -> DECLARE declareRecursivoLocal .)
    READ            reduce using rule 50 (declareLocal -> DECLARE declareRecursivoLocal .)
    WRITE           reduce using rule 50 (declareLocal -> DECLARE declareRecursivoLocal .)
    ID              reduce using rule 50 (declareLocal -> DECLARE declareRecursivoLocal .)
    WHILE           reduce using rule 50 (declareLocal -> DECLARE declareRecursivoLocal .)
    DO              reduce using rule 50 (declareLocal -> DECLARE declareRecursivoLocal .)
    RIGHTKEY        reduce using rule 50 (declareLocal -> DECLARE declareRecursivoLocal .)
    RETURN          reduce using rule 50 (declareLocal -> DECLARE declareRecursivoLocal .)


state 140

    (51) declareRecursivoLocal -> type . ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal

    ID              shift and go to state 165


state 141

    (59) declareRecursivoLocal -> empty .

    IF              reduce using rule 59 (declareRecursivoLocal -> empty .)
    DECLARE         reduce using rule 59 (declareRecursivoLocal -> empty .)
    READ            reduce using rule 59 (declareRecursivoLocal -> empty .)
    WRITE           reduce using rule 59 (declareRecursivoLocal -> empty .)
    ID              reduce using rule 59 (declareRecursivoLocal -> empty .)
    WHILE           reduce using rule 59 (declareRecursivoLocal -> empty .)
    DO              reduce using rule 59 (declareRecursivoLocal -> empty .)
    RIGHTKEY        reduce using rule 59 (declareRecursivoLocal -> empty .)
    RETURN          reduce using rule 59 (declareRecursivoLocal -> empty .)


state 142

    (68) conditional -> IF LEFTPAR . conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (74) conditional2 -> . exp conditional2
    (75) conditional2 -> . empty
    (86) exp -> . ID meteExp exp2
    (87) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (92) exp -> . number exp2
    (94) exp -> . empty
    (112) empty -> .
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    RIGHTPAR        reduce using rule 112 (empty -> .)
    LESS            reduce using rule 112 (empty -> .)
    GRTR            reduce using rule 112 (empty -> .)
    EQ              reduce using rule 112 (empty -> .)
    NOTEQ           reduce using rule 112 (empty -> .)
    AND             reduce using rule 112 (empty -> .)
    OR              reduce using rule 112 (empty -> .)
    SUM             reduce using rule 112 (empty -> .)
    MINUS           reduce using rule 112 (empty -> .)
    MULTP           reduce using rule 112 (empty -> .)
    DIVIDE          reduce using rule 112 (empty -> .)
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41

  ! ID              [ reduce using rule 112 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 112 (empty -> .) ]
  ! INTEGER         [ reduce using rule 112 (empty -> .) ]
  ! FLOAT           [ reduce using rule 112 (empty -> .) ]

    exp                            shift and go to state 168
    number                         shift and go to state 40
    empty                          shift and go to state 166
    conditional2                   shift and go to state 167

state 143

    (38) est -> cycles est .

    RETURN          reduce using rule 38 (est -> cycles est .)
    RIGHTKEY        reduce using rule 38 (est -> cycles est .)


state 144

    (40) est -> output est .

    RETURN          reduce using rule 40 (est -> output est .)
    RIGHTKEY        reduce using rule 40 (est -> output est .)


state 145

    (37) est -> declareLocal est .

    RETURN          reduce using rule 37 (est -> declareLocal est .)
    RIGHTKEY        reduce using rule 37 (est -> declareLocal est .)


state 146

    (87) exp -> LEFTPAR metePar exp RIGHTPAR sacaPar . exp2 generaCuad
    (95) exp2 -> . LESS meteOper exp
    (96) exp2 -> . GRTR meteOper exp
    (97) exp2 -> . EQ meteOper exp
    (98) exp2 -> . NOTEQ meteOper exp
    (99) exp2 -> . AND meteOper exp
    (100) exp2 -> . OR meteOper exp
    (101) exp2 -> . SUM meteOper exp
    (103) exp2 -> . MINUS meteOper exp
    (104) exp2 -> . MULTP meteOper exp
    (105) exp2 -> . DIVIDE meteOper exp
    (106) exp2 -> . empty
    (112) empty -> .

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GRTR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTP resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    LESS            shift and go to state 55
    GRTR            shift and go to state 60
    EQ              shift and go to state 62
    NOTEQ           shift and go to state 56
    AND             shift and go to state 53
    OR              shift and go to state 63
    SUM             shift and go to state 58
    MINUS           shift and go to state 59
    MULTP           shift and go to state 61
    DIVIDE          shift and go to state 54
    LEFTBRACK       reduce using rule 112 (empty -> .)
    COMMA           reduce using rule 112 (empty -> .)
    SEMICOLON       reduce using rule 112 (empty -> .)
    RIGHTBRACK      reduce using rule 112 (empty -> .)
    RIGHTPAR        reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    LEFTPAR         reduce using rule 112 (empty -> .)
    INTEGER         reduce using rule 112 (empty -> .)
    FLOAT           reduce using rule 112 (empty -> .)

  ! LESS            [ reduce using rule 112 (empty -> .) ]
  ! GRTR            [ reduce using rule 112 (empty -> .) ]
  ! EQ              [ reduce using rule 112 (empty -> .) ]
  ! NOTEQ           [ reduce using rule 112 (empty -> .) ]
  ! AND             [ reduce using rule 112 (empty -> .) ]
  ! OR              [ reduce using rule 112 (empty -> .) ]
  ! SUM             [ reduce using rule 112 (empty -> .) ]
  ! MINUS           [ reduce using rule 112 (empty -> .) ]
  ! MULTP           [ reduce using rule 112 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 112 (empty -> .) ]

    exp2                           shift and go to state 169
    empty                          shift and go to state 64

state 147

    (10) declare3 -> COMMA ID altaVarGlobal declare3 .

    SEMICOLON       reduce using rule 10 (declare3 -> COMMA ID altaVarGlobal declare3 .)


state 148

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est . functReturn RIGHTKEY
    (13) functReturn -> . RETURN NUMBER SEMICOLON
    (14) functReturn -> . RETURN ID SEMICOLON
    (15) functReturn -> . empty
    (112) empty -> .

    RETURN          shift and go to state 170
    RIGHTKEY        reduce using rule 112 (empty -> .)

    functReturn                    shift and go to state 171
    empty                          shift and go to state 172

state 149

    (17) funct2 -> type ID altaVarLocal funct3 .

    RIGHTPAR        reduce using rule 17 (funct2 -> type ID altaVarLocal funct3 .)


state 150

    (18) funct3 -> COMMA . type ID altaVarLocal funct3
    (27) type -> . type2
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    type                           shift and go to state 173
    type2                          shift and go to state 19

state 151

    (20) funct3 -> empty .

    RIGHTPAR        reduce using rule 20 (funct3 -> empty .)


state 152

    (79) do-while -> DO meteSalto LEFTKEY . est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . do-while
    (111) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (107) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (112) empty -> .
    (82) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (79) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 106
    DECLARE         shift and go to state 105
    READ            shift and go to state 95
    WRITE           shift and go to state 103
    ID              shift and go to state 104
    RIGHTKEY        reduce using rule 112 (empty -> .)
    WHILE           shift and go to state 97
    DO              shift and go to state 94

  ! IF              [ reduce using rule 112 (empty -> .) ]
  ! DECLARE         [ reduce using rule 112 (empty -> .) ]
  ! READ            [ reduce using rule 112 (empty -> .) ]
  ! WRITE           [ reduce using rule 112 (empty -> .) ]
  ! ID              [ reduce using rule 112 (empty -> .) ]
  ! WHILE           [ reduce using rule 112 (empty -> .) ]
  ! DO              [ reduce using rule 112 (empty -> .) ]

    conditional                    shift and go to state 96
    do-while                       shift and go to state 98
    est                            shift and go to state 174
    llamadaAFunct                  shift and go to state 100
    input                          shift and go to state 101
    assignment                     shift and go to state 102
    declareLocal                   shift and go to state 111
    while                          shift and go to state 108
    empty                          shift and go to state 109
    output                         shift and go to state 110
    cycles                         shift and go to state 107

state 153

    (111) input -> READ LEFTPAR ID . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 175


state 154

    (82) while -> WHILE LEFTPAR while2 . RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF

    RIGHTPAR        shift and go to state 176


state 155

    (84) while2 -> exp . while2
    (84) while2 -> . exp while2
    (85) while2 -> . empty
    (86) exp -> . ID meteExp exp2
    (87) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (92) exp -> . number exp2
    (94) exp -> . empty
    (112) empty -> .
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    RIGHTPAR        reduce using rule 112 (empty -> .)
    LESS            reduce using rule 112 (empty -> .)
    GRTR            reduce using rule 112 (empty -> .)
    EQ              reduce using rule 112 (empty -> .)
    NOTEQ           reduce using rule 112 (empty -> .)
    AND             reduce using rule 112 (empty -> .)
    OR              reduce using rule 112 (empty -> .)
    SUM             reduce using rule 112 (empty -> .)
    MINUS           reduce using rule 112 (empty -> .)
    MULTP           reduce using rule 112 (empty -> .)
    DIVIDE          reduce using rule 112 (empty -> .)
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41

  ! ID              [ reduce using rule 112 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 112 (empty -> .) ]
  ! INTEGER         [ reduce using rule 112 (empty -> .) ]
  ! FLOAT           [ reduce using rule 112 (empty -> .) ]

    number                         shift and go to state 40
    while2                         shift and go to state 177
    exp                            shift and go to state 155
    empty                          shift and go to state 156

state 156

    (85) while2 -> empty .
    (94) exp -> empty .
    (55) number -> empty .

  ! reduce/reduce conflict for RIGHTPAR resolved using rule 85 (while2 -> empty .)
  ! reduce/reduce conflict for LESS resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for GRTR resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for EQ resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for NOTEQ resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for AND resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for OR resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for SUM resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for MINUS resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for MULTP resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for LEFTPAR resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for INTEGER resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for FLOAT resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for RIGHTPAR resolved using rule 55 (number -> empty .)
    LESS            reduce using rule 55 (number -> empty .)
    GRTR            reduce using rule 55 (number -> empty .)
    EQ              reduce using rule 55 (number -> empty .)
    NOTEQ           reduce using rule 55 (number -> empty .)
    AND             reduce using rule 55 (number -> empty .)
    OR              reduce using rule 55 (number -> empty .)
    SUM             reduce using rule 55 (number -> empty .)
    MINUS           reduce using rule 55 (number -> empty .)
    MULTP           reduce using rule 55 (number -> empty .)
    DIVIDE          reduce using rule 55 (number -> empty .)
    ID              reduce using rule 55 (number -> empty .)
    LEFTPAR         reduce using rule 55 (number -> empty .)
    INTEGER         reduce using rule 55 (number -> empty .)
    FLOAT           reduce using rule 55 (number -> empty .)
    RIGHTPAR        reduce using rule 55 (number -> empty .)

  ! RIGHTPAR        [ reduce using rule 85 (while2 -> empty .) ]
  ! ID              [ reduce using rule 94 (exp -> empty .) ]
  ! LEFTPAR         [ reduce using rule 94 (exp -> empty .) ]
  ! INTEGER         [ reduce using rule 94 (exp -> empty .) ]
  ! FLOAT           [ reduce using rule 94 (exp -> empty .) ]
  ! LESS            [ reduce using rule 94 (exp -> empty .) ]
  ! GRTR            [ reduce using rule 94 (exp -> empty .) ]
  ! EQ              [ reduce using rule 94 (exp -> empty .) ]
  ! NOTEQ           [ reduce using rule 94 (exp -> empty .) ]
  ! AND             [ reduce using rule 94 (exp -> empty .) ]
  ! OR              [ reduce using rule 94 (exp -> empty .) ]
  ! SUM             [ reduce using rule 94 (exp -> empty .) ]
  ! MINUS           [ reduce using rule 94 (exp -> empty .) ]
  ! MULTP           [ reduce using rule 94 (exp -> empty .) ]
  ! DIVIDE          [ reduce using rule 94 (exp -> empty .) ]
  ! RIGHTPAR        [ reduce using rule 94 (exp -> empty .) ]


state 157

    (107) output -> WRITE LEFTPAR output2 . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 178


state 158

    (109) output2 -> QUOTE . ID QUOTE output2

    ID              shift and go to state 179


state 159

    (108) output2 -> ID . output2
    (108) output2 -> . ID output2
    (109) output2 -> . QUOTE ID QUOTE output2
    (110) output2 -> . empty
    (112) empty -> .

    ID              shift and go to state 159
    QUOTE           shift and go to state 158
    RIGHTPAR        reduce using rule 112 (empty -> .)

    output2                        shift and go to state 180
    empty                          shift and go to state 160

state 160

    (110) output2 -> empty .

    RIGHTPAR        reduce using rule 110 (output2 -> empty .)


state 161

    (64) assignment -> ID ASSGN meteVar . exp generaCuad SEMICOLON
    (65) assignment -> ID ASSGN meteVar . llamadaAFunct SEMICOLON
    (86) exp -> . ID meteExp exp2
    (87) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (92) exp -> . number exp2
    (94) exp -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (112) empty -> .

    ID              shift and go to state 183
    LEFTPAR         shift and go to state 42
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    SEMICOLON       reduce using rule 112 (empty -> .)
    LESS            reduce using rule 112 (empty -> .)
    GRTR            reduce using rule 112 (empty -> .)
    EQ              reduce using rule 112 (empty -> .)
    NOTEQ           reduce using rule 112 (empty -> .)
    AND             reduce using rule 112 (empty -> .)
    OR              reduce using rule 112 (empty -> .)
    SUM             reduce using rule 112 (empty -> .)
    MINUS           reduce using rule 112 (empty -> .)
    MULTP           reduce using rule 112 (empty -> .)
    DIVIDE          reduce using rule 112 (empty -> .)

    llamadaAFunct                  shift and go to state 181
    number                         shift and go to state 40
    exp                            shift and go to state 182
    empty                          shift and go to state 184

state 162

    (44) llamadaAFunct -> ID LEFTPAR llamadaAFunct2 . RIGHTPAR

    RIGHTPAR        shift and go to state 185


state 163

    (46) llamadaAFunct2 -> ID . llamadaAFunct3
    (47) llamadaAFunct3 -> . COMMA ID
    (48) llamadaAFunct3 -> . empty
    (112) empty -> .

    COMMA           shift and go to state 187
    RIGHTPAR        reduce using rule 112 (empty -> .)

    llamadaAFunct3                 shift and go to state 186
    empty                          shift and go to state 188

state 164

    (49) llamadaAFunct2 -> empty .

    RIGHTPAR        reduce using rule 49 (llamadaAFunct2 -> empty .)


state 165

    (51) declareRecursivoLocal -> type ID . altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (63) altaVarLocal -> .

    ASSGN           reduce using rule 63 (altaVarLocal -> .)
    LEFTBRACK       reduce using rule 63 (altaVarLocal -> .)
    COMMA           reduce using rule 63 (altaVarLocal -> .)
    SEMICOLON       reduce using rule 63 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 189

state 166

    (75) conditional2 -> empty .
    (94) exp -> empty .
    (55) number -> empty .

  ! reduce/reduce conflict for RIGHTPAR resolved using rule 75 (conditional2 -> empty .)
  ! reduce/reduce conflict for LESS resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for GRTR resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for EQ resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for NOTEQ resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for AND resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for OR resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for SUM resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for MINUS resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for MULTP resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for LEFTPAR resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for INTEGER resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for FLOAT resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for RIGHTPAR resolved using rule 55 (number -> empty .)
    LESS            reduce using rule 55 (number -> empty .)
    GRTR            reduce using rule 55 (number -> empty .)
    EQ              reduce using rule 55 (number -> empty .)
    NOTEQ           reduce using rule 55 (number -> empty .)
    AND             reduce using rule 55 (number -> empty .)
    OR              reduce using rule 55 (number -> empty .)
    SUM             reduce using rule 55 (number -> empty .)
    MINUS           reduce using rule 55 (number -> empty .)
    MULTP           reduce using rule 55 (number -> empty .)
    DIVIDE          reduce using rule 55 (number -> empty .)
    ID              reduce using rule 55 (number -> empty .)
    LEFTPAR         reduce using rule 55 (number -> empty .)
    INTEGER         reduce using rule 55 (number -> empty .)
    FLOAT           reduce using rule 55 (number -> empty .)
    RIGHTPAR        reduce using rule 55 (number -> empty .)

  ! RIGHTPAR        [ reduce using rule 75 (conditional2 -> empty .) ]
  ! ID              [ reduce using rule 94 (exp -> empty .) ]
  ! LEFTPAR         [ reduce using rule 94 (exp -> empty .) ]
  ! INTEGER         [ reduce using rule 94 (exp -> empty .) ]
  ! FLOAT           [ reduce using rule 94 (exp -> empty .) ]
  ! LESS            [ reduce using rule 94 (exp -> empty .) ]
  ! GRTR            [ reduce using rule 94 (exp -> empty .) ]
  ! EQ              [ reduce using rule 94 (exp -> empty .) ]
  ! NOTEQ           [ reduce using rule 94 (exp -> empty .) ]
  ! AND             [ reduce using rule 94 (exp -> empty .) ]
  ! OR              [ reduce using rule 94 (exp -> empty .) ]
  ! SUM             [ reduce using rule 94 (exp -> empty .) ]
  ! MINUS           [ reduce using rule 94 (exp -> empty .) ]
  ! MULTP           [ reduce using rule 94 (exp -> empty .) ]
  ! DIVIDE          [ reduce using rule 94 (exp -> empty .) ]
  ! RIGHTPAR        [ reduce using rule 94 (exp -> empty .) ]


state 167

    (68) conditional -> IF LEFTPAR conditional2 . RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse

    RIGHTPAR        shift and go to state 190


state 168

    (74) conditional2 -> exp . conditional2
    (74) conditional2 -> . exp conditional2
    (75) conditional2 -> . empty
    (86) exp -> . ID meteExp exp2
    (87) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (92) exp -> . number exp2
    (94) exp -> . empty
    (112) empty -> .
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    RIGHTPAR        reduce using rule 112 (empty -> .)
    LESS            reduce using rule 112 (empty -> .)
    GRTR            reduce using rule 112 (empty -> .)
    EQ              reduce using rule 112 (empty -> .)
    NOTEQ           reduce using rule 112 (empty -> .)
    AND             reduce using rule 112 (empty -> .)
    OR              reduce using rule 112 (empty -> .)
    SUM             reduce using rule 112 (empty -> .)
    MINUS           reduce using rule 112 (empty -> .)
    MULTP           reduce using rule 112 (empty -> .)
    DIVIDE          reduce using rule 112 (empty -> .)
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41

  ! ID              [ reduce using rule 112 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 112 (empty -> .) ]
  ! INTEGER         [ reduce using rule 112 (empty -> .) ]
  ! FLOAT           [ reduce using rule 112 (empty -> .) ]

    number                         shift and go to state 40
    conditional2                   shift and go to state 191
    exp                            shift and go to state 168
    empty                          shift and go to state 166

state 169

    (87) exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 . generaCuad
    (91) generaCuad -> .

    LEFTBRACK       reduce using rule 91 (generaCuad -> .)
    COMMA           reduce using rule 91 (generaCuad -> .)
    SEMICOLON       reduce using rule 91 (generaCuad -> .)
    RIGHTBRACK      reduce using rule 91 (generaCuad -> .)
    RIGHTPAR        reduce using rule 91 (generaCuad -> .)
    ID              reduce using rule 91 (generaCuad -> .)
    LEFTPAR         reduce using rule 91 (generaCuad -> .)
    INTEGER         reduce using rule 91 (generaCuad -> .)
    FLOAT           reduce using rule 91 (generaCuad -> .)
    LESS            reduce using rule 91 (generaCuad -> .)
    GRTR            reduce using rule 91 (generaCuad -> .)
    EQ              reduce using rule 91 (generaCuad -> .)
    NOTEQ           reduce using rule 91 (generaCuad -> .)
    AND             reduce using rule 91 (generaCuad -> .)
    OR              reduce using rule 91 (generaCuad -> .)
    SUM             reduce using rule 91 (generaCuad -> .)
    MINUS           reduce using rule 91 (generaCuad -> .)
    MULTP           reduce using rule 91 (generaCuad -> .)
    DIVIDE          reduce using rule 91 (generaCuad -> .)

    generaCuad                     shift and go to state 192

state 170

    (13) functReturn -> RETURN . NUMBER SEMICOLON
    (14) functReturn -> RETURN . ID SEMICOLON

    NUMBER          shift and go to state 193
    ID              shift and go to state 194


state 171

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn . RIGHTKEY

    RIGHTKEY        shift and go to state 195


state 172

    (15) functReturn -> empty .

    RIGHTKEY        reduce using rule 15 (functReturn -> empty .)


state 173

    (18) funct3 -> COMMA type . ID altaVarLocal funct3

    ID              shift and go to state 196


state 174

    (79) do-while -> DO meteSalto LEFTKEY est . RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

    RIGHTKEY        shift and go to state 197


state 175

    (111) input -> READ LEFTPAR ID RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 198


state 176

    (82) while -> WHILE LEFTPAR while2 RIGHTPAR . gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (69) gotoFCuad -> .

    LEFTKEY         reduce using rule 69 (gotoFCuad -> .)

    gotoFCuad                      shift and go to state 199

state 177

    (84) while2 -> exp while2 .

    RIGHTPAR        reduce using rule 84 (while2 -> exp while2 .)


state 178

    (107) output -> WRITE LEFTPAR output2 RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 200


state 179

    (109) output2 -> QUOTE ID . QUOTE output2

    QUOTE           shift and go to state 201


state 180

    (108) output2 -> ID output2 .

    RIGHTPAR        reduce using rule 108 (output2 -> ID output2 .)


state 181

    (65) assignment -> ID ASSGN meteVar llamadaAFunct . SEMICOLON

    SEMICOLON       shift and go to state 202


state 182

    (64) assignment -> ID ASSGN meteVar exp . generaCuad SEMICOLON
    (91) generaCuad -> .

    SEMICOLON       reduce using rule 91 (generaCuad -> .)

    generaCuad                     shift and go to state 203

state 183

    (86) exp -> ID . meteExp exp2
    (44) llamadaAFunct -> ID . LEFTPAR llamadaAFunct2 RIGHTPAR
    (90) meteExp -> .

    LEFTPAR         shift and go to state 138
    LESS            reduce using rule 90 (meteExp -> .)
    GRTR            reduce using rule 90 (meteExp -> .)
    EQ              reduce using rule 90 (meteExp -> .)
    NOTEQ           reduce using rule 90 (meteExp -> .)
    AND             reduce using rule 90 (meteExp -> .)
    OR              reduce using rule 90 (meteExp -> .)
    SUM             reduce using rule 90 (meteExp -> .)
    MINUS           reduce using rule 90 (meteExp -> .)
    MULTP           reduce using rule 90 (meteExp -> .)
    DIVIDE          reduce using rule 90 (meteExp -> .)
    SEMICOLON       reduce using rule 90 (meteExp -> .)

    meteExp                        shift and go to state 68

state 184

    (94) exp -> empty .
    (45) llamadaAFunct -> empty .
    (55) number -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 45 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 45 (llamadaAFunct -> empty .)
    SEMICOLON       reduce using rule 45 (llamadaAFunct -> empty .)
    LESS            reduce using rule 55 (number -> empty .)
    GRTR            reduce using rule 55 (number -> empty .)
    EQ              reduce using rule 55 (number -> empty .)
    NOTEQ           reduce using rule 55 (number -> empty .)
    AND             reduce using rule 55 (number -> empty .)
    OR              reduce using rule 55 (number -> empty .)
    SUM             reduce using rule 55 (number -> empty .)
    MINUS           reduce using rule 55 (number -> empty .)
    MULTP           reduce using rule 55 (number -> empty .)
    DIVIDE          reduce using rule 55 (number -> empty .)

  ! SEMICOLON       [ reduce using rule 94 (exp -> empty .) ]
  ! SEMICOLON       [ reduce using rule 55 (number -> empty .) ]


state 185

    (44) llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .

    IF              reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    DECLARE         reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    READ            reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    WRITE           reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    ID              reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    WHILE           reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    DO              reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    RIGHTKEY        reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    RETURN          reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    SEMICOLON       reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)


state 186

    (46) llamadaAFunct2 -> ID llamadaAFunct3 .

    RIGHTPAR        reduce using rule 46 (llamadaAFunct2 -> ID llamadaAFunct3 .)


state 187

    (47) llamadaAFunct3 -> COMMA . ID

    ID              shift and go to state 204


state 188

    (48) llamadaAFunct3 -> empty .

    RIGHTPAR        reduce using rule 48 (llamadaAFunct3 -> empty .)


state 189

    (51) declareRecursivoLocal -> type ID altaVarLocal . assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (52) assignmentDecl -> . ASSGN exp
    (56) assignmentDecl -> . empty
    (112) empty -> .

    ASSGN           shift and go to state 35
    LEFTBRACK       reduce using rule 112 (empty -> .)
    COMMA           reduce using rule 112 (empty -> .)
    SEMICOLON       reduce using rule 112 (empty -> .)

    assignmentDecl                 shift and go to state 205
    empty                          shift and go to state 37

state 190

    (68) conditional -> IF LEFTPAR conditional2 RIGHTPAR . gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (69) gotoFCuad -> .

    LEFTKEY         reduce using rule 69 (gotoFCuad -> .)

    gotoFCuad                      shift and go to state 206

state 191

    (74) conditional2 -> exp conditional2 .

    RIGHTPAR        reduce using rule 74 (conditional2 -> exp conditional2 .)


state 192

    (87) exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .

    LEFTBRACK       reduce using rule 87 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    COMMA           reduce using rule 87 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    SEMICOLON       reduce using rule 87 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    RIGHTBRACK      reduce using rule 87 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    RIGHTPAR        reduce using rule 87 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    ID              reduce using rule 87 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    LEFTPAR         reduce using rule 87 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    INTEGER         reduce using rule 87 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    FLOAT           reduce using rule 87 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    LESS            reduce using rule 87 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    GRTR            reduce using rule 87 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    EQ              reduce using rule 87 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    NOTEQ           reduce using rule 87 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    AND             reduce using rule 87 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    OR              reduce using rule 87 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    SUM             reduce using rule 87 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    MINUS           reduce using rule 87 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    MULTP           reduce using rule 87 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    DIVIDE          reduce using rule 87 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)


state 193

    (13) functReturn -> RETURN NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 207


state 194

    (14) functReturn -> RETURN ID . SEMICOLON

    SEMICOLON       shift and go to state 208


state 195

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY .

    FUNCTION        reduce using rule 12 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY .)
    MAIN            reduce using rule 12 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY .)


state 196

    (18) funct3 -> COMMA type ID . altaVarLocal funct3
    (63) altaVarLocal -> .

    COMMA           reduce using rule 63 (altaVarLocal -> .)
    RIGHTPAR        reduce using rule 63 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 209

state 197

    (79) do-while -> DO meteSalto LEFTKEY est RIGHTKEY . WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

    WHILE           shift and go to state 210


state 198

    (111) input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .

    IF              reduce using rule 111 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    DECLARE         reduce using rule 111 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    READ            reduce using rule 111 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    WRITE           reduce using rule 111 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    ID              reduce using rule 111 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 111 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    DO              reduce using rule 111 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    RIGHTKEY        reduce using rule 111 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    RETURN          reduce using rule 111 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)


state 199

    (82) while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad . LEFTKEY est RIGHTKEY llenaCuadF

    LEFTKEY         shift and go to state 211


state 200

    (107) output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .

    IF              reduce using rule 107 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    DECLARE         reduce using rule 107 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    READ            reduce using rule 107 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    WRITE           reduce using rule 107 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    ID              reduce using rule 107 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 107 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    DO              reduce using rule 107 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    RIGHTKEY        reduce using rule 107 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    RETURN          reduce using rule 107 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)


state 201

    (109) output2 -> QUOTE ID QUOTE . output2
    (108) output2 -> . ID output2
    (109) output2 -> . QUOTE ID QUOTE output2
    (110) output2 -> . empty
    (112) empty -> .

    ID              shift and go to state 159
    QUOTE           shift and go to state 158
    RIGHTPAR        reduce using rule 112 (empty -> .)

    output2                        shift and go to state 212
    empty                          shift and go to state 160

state 202

    (65) assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .

    IF              reduce using rule 65 (assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .)
    DECLARE         reduce using rule 65 (assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .)
    READ            reduce using rule 65 (assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .)
    WRITE           reduce using rule 65 (assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .)
    ID              reduce using rule 65 (assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .)
    WHILE           reduce using rule 65 (assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .)
    DO              reduce using rule 65 (assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .)
    RIGHTKEY        reduce using rule 65 (assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .)
    RETURN          reduce using rule 65 (assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .)


state 203

    (64) assignment -> ID ASSGN meteVar exp generaCuad . SEMICOLON

    SEMICOLON       shift and go to state 213


state 204

    (47) llamadaAFunct3 -> COMMA ID .

    RIGHTPAR        reduce using rule 47 (llamadaAFunct3 -> COMMA ID .)


state 205

    (51) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl . declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (57) declare2Local -> . array
    (61) declare2Local -> . empty
    (25) array -> . LEFTBRACK exp RIGHTBRACK array
    (26) array -> . empty
    (112) empty -> .

    LEFTBRACK       shift and go to state 47
    COMMA           reduce using rule 112 (empty -> .)
    SEMICOLON       reduce using rule 112 (empty -> .)

    declare2Local                  shift and go to state 214
    array                          shift and go to state 215
    empty                          shift and go to state 216

state 206

    (68) conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad . LEFTKEY est RIGHTKEY gotoCuad conditionalElse

    LEFTKEY         shift and go to state 217


state 207

    (13) functReturn -> RETURN NUMBER SEMICOLON .

    RIGHTKEY        reduce using rule 13 (functReturn -> RETURN NUMBER SEMICOLON .)


state 208

    (14) functReturn -> RETURN ID SEMICOLON .

    RIGHTKEY        reduce using rule 14 (functReturn -> RETURN ID SEMICOLON .)


state 209

    (18) funct3 -> COMMA type ID altaVarLocal . funct3
    (18) funct3 -> . COMMA type ID altaVarLocal funct3
    (20) funct3 -> . empty
    (112) empty -> .

    COMMA           shift and go to state 150
    RIGHTPAR        reduce using rule 112 (empty -> .)

    funct3                         shift and go to state 218
    empty                          shift and go to state 151

state 210

    (79) do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE . LEFTPAR while2 RIGHTPAR gotoVCuad

    LEFTPAR         shift and go to state 219


state 211

    (82) while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY . est RIGHTKEY llenaCuadF
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . do-while
    (111) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (107) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (112) empty -> .
    (82) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (79) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 106
    DECLARE         shift and go to state 105
    READ            shift and go to state 95
    WRITE           shift and go to state 103
    ID              shift and go to state 104
    RIGHTKEY        reduce using rule 112 (empty -> .)
    WHILE           shift and go to state 97
    DO              shift and go to state 94

  ! IF              [ reduce using rule 112 (empty -> .) ]
  ! DECLARE         [ reduce using rule 112 (empty -> .) ]
  ! READ            [ reduce using rule 112 (empty -> .) ]
  ! WRITE           [ reduce using rule 112 (empty -> .) ]
  ! ID              [ reduce using rule 112 (empty -> .) ]
  ! WHILE           [ reduce using rule 112 (empty -> .) ]
  ! DO              [ reduce using rule 112 (empty -> .) ]

    conditional                    shift and go to state 96
    do-while                       shift and go to state 98
    est                            shift and go to state 220
    llamadaAFunct                  shift and go to state 100
    input                          shift and go to state 101
    assignment                     shift and go to state 102
    declareLocal                   shift and go to state 111
    while                          shift and go to state 108
    empty                          shift and go to state 109
    output                         shift and go to state 110
    cycles                         shift and go to state 107

state 212

    (109) output2 -> QUOTE ID QUOTE output2 .

    RIGHTPAR        reduce using rule 109 (output2 -> QUOTE ID QUOTE output2 .)


state 213

    (64) assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .

    IF              reduce using rule 64 (assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .)
    DECLARE         reduce using rule 64 (assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .)
    READ            reduce using rule 64 (assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .)
    WRITE           reduce using rule 64 (assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .)
    ID              reduce using rule 64 (assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .)
    WHILE           reduce using rule 64 (assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .)
    DO              reduce using rule 64 (assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .)
    RIGHTKEY        reduce using rule 64 (assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .)
    RETURN          reduce using rule 64 (assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .)


state 214

    (51) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local . declare3Local SEMICOLON declareRecursivoLocal
    (58) declare3Local -> . COMMA ID altaVarLocal assignmentDecl declare3Local
    (62) declare3Local -> . empty
    (112) empty -> .

    COMMA           shift and go to state 221
    SEMICOLON       reduce using rule 112 (empty -> .)

    empty                          shift and go to state 222
    declare3Local                  shift and go to state 223

state 215

    (57) declare2Local -> array .

    COMMA           reduce using rule 57 (declare2Local -> array .)
    SEMICOLON       reduce using rule 57 (declare2Local -> array .)


state 216

    (61) declare2Local -> empty .
    (26) array -> empty .

  ! reduce/reduce conflict for COMMA resolved using rule 26 (array -> empty .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 26 (array -> empty .)
    COMMA           reduce using rule 26 (array -> empty .)
    SEMICOLON       reduce using rule 26 (array -> empty .)

  ! COMMA           [ reduce using rule 61 (declare2Local -> empty .) ]
  ! SEMICOLON       [ reduce using rule 61 (declare2Local -> empty .) ]


state 217

    (68) conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY . est RIGHTKEY gotoCuad conditionalElse
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . do-while
    (111) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (107) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (112) empty -> .
    (82) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (79) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 106
    DECLARE         shift and go to state 105
    READ            shift and go to state 95
    WRITE           shift and go to state 103
    ID              shift and go to state 104
    RIGHTKEY        reduce using rule 112 (empty -> .)
    WHILE           shift and go to state 97
    DO              shift and go to state 94

  ! IF              [ reduce using rule 112 (empty -> .) ]
  ! DECLARE         [ reduce using rule 112 (empty -> .) ]
  ! READ            [ reduce using rule 112 (empty -> .) ]
  ! WRITE           [ reduce using rule 112 (empty -> .) ]
  ! ID              [ reduce using rule 112 (empty -> .) ]
  ! WHILE           [ reduce using rule 112 (empty -> .) ]
  ! DO              [ reduce using rule 112 (empty -> .) ]

    conditional                    shift and go to state 96
    do-while                       shift and go to state 98
    est                            shift and go to state 224
    llamadaAFunct                  shift and go to state 100
    input                          shift and go to state 101
    empty                          shift and go to state 109
    assignment                     shift and go to state 102
    cycles                         shift and go to state 107
    while                          shift and go to state 108
    output                         shift and go to state 110
    declareLocal                   shift and go to state 111

state 218

    (18) funct3 -> COMMA type ID altaVarLocal funct3 .

    RIGHTPAR        reduce using rule 18 (funct3 -> COMMA type ID altaVarLocal funct3 .)


state 219

    (79) do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR . while2 RIGHTPAR gotoVCuad
    (84) while2 -> . exp while2
    (85) while2 -> . empty
    (86) exp -> . ID meteExp exp2
    (87) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (92) exp -> . number exp2
    (94) exp -> . empty
    (112) empty -> .
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    RIGHTPAR        reduce using rule 112 (empty -> .)
    LESS            reduce using rule 112 (empty -> .)
    GRTR            reduce using rule 112 (empty -> .)
    EQ              reduce using rule 112 (empty -> .)
    NOTEQ           reduce using rule 112 (empty -> .)
    AND             reduce using rule 112 (empty -> .)
    OR              reduce using rule 112 (empty -> .)
    SUM             reduce using rule 112 (empty -> .)
    MINUS           reduce using rule 112 (empty -> .)
    MULTP           reduce using rule 112 (empty -> .)
    DIVIDE          reduce using rule 112 (empty -> .)
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41

  ! ID              [ reduce using rule 112 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 112 (empty -> .) ]
  ! INTEGER         [ reduce using rule 112 (empty -> .) ]
  ! FLOAT           [ reduce using rule 112 (empty -> .) ]

    number                         shift and go to state 40
    while2                         shift and go to state 225
    exp                            shift and go to state 155
    empty                          shift and go to state 156

state 220

    (82) while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est . RIGHTKEY llenaCuadF

    RIGHTKEY        shift and go to state 226


state 221

    (58) declare3Local -> COMMA . ID altaVarLocal assignmentDecl declare3Local

    ID              shift and go to state 227


state 222

    (62) declare3Local -> empty .

    SEMICOLON       reduce using rule 62 (declare3Local -> empty .)


state 223

    (51) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local . SEMICOLON declareRecursivoLocal

    SEMICOLON       shift and go to state 228


state 224

    (68) conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est . RIGHTKEY gotoCuad conditionalElse

    RIGHTKEY        shift and go to state 229


state 225

    (79) do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 . RIGHTPAR gotoVCuad

    RIGHTPAR        shift and go to state 230


state 226

    (82) while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY . llenaCuadF
    (83) llenaCuadF -> .

    IF              reduce using rule 83 (llenaCuadF -> .)
    DECLARE         reduce using rule 83 (llenaCuadF -> .)
    READ            reduce using rule 83 (llenaCuadF -> .)
    WRITE           reduce using rule 83 (llenaCuadF -> .)
    ID              reduce using rule 83 (llenaCuadF -> .)
    WHILE           reduce using rule 83 (llenaCuadF -> .)
    DO              reduce using rule 83 (llenaCuadF -> .)
    RIGHTKEY        reduce using rule 83 (llenaCuadF -> .)
    RETURN          reduce using rule 83 (llenaCuadF -> .)

    llenaCuadF                     shift and go to state 231

state 227

    (58) declare3Local -> COMMA ID . altaVarLocal assignmentDecl declare3Local
    (63) altaVarLocal -> .

    ASSGN           reduce using rule 63 (altaVarLocal -> .)
    COMMA           reduce using rule 63 (altaVarLocal -> .)
    SEMICOLON       reduce using rule 63 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 232

state 228

    (51) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON . declareRecursivoLocal
    (51) declareRecursivoLocal -> . type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (59) declareRecursivoLocal -> . empty
    (27) type -> . type2
    (112) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    IF              reduce using rule 112 (empty -> .)
    DECLARE         reduce using rule 112 (empty -> .)
    READ            reduce using rule 112 (empty -> .)
    WRITE           reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    WHILE           reduce using rule 112 (empty -> .)
    DO              reduce using rule 112 (empty -> .)
    RIGHTKEY        reduce using rule 112 (empty -> .)
    RETURN          reduce using rule 112 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    declareRecursivoLocal          shift and go to state 233
    type2                          shift and go to state 19
    type                           shift and go to state 140
    empty                          shift and go to state 141

state 229

    (68) conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY . gotoCuad conditionalElse
    (70) gotoCuad -> .

    ELSE            reduce using rule 70 (gotoCuad -> .)
    IF              reduce using rule 70 (gotoCuad -> .)
    DECLARE         reduce using rule 70 (gotoCuad -> .)
    READ            reduce using rule 70 (gotoCuad -> .)
    WRITE           reduce using rule 70 (gotoCuad -> .)
    ID              reduce using rule 70 (gotoCuad -> .)
    WHILE           reduce using rule 70 (gotoCuad -> .)
    DO              reduce using rule 70 (gotoCuad -> .)
    RIGHTKEY        reduce using rule 70 (gotoCuad -> .)
    RETURN          reduce using rule 70 (gotoCuad -> .)

    gotoCuad                       shift and go to state 234

state 230

    (79) do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR . gotoVCuad
    (80) gotoVCuad -> .

    IF              reduce using rule 80 (gotoVCuad -> .)
    DECLARE         reduce using rule 80 (gotoVCuad -> .)
    READ            reduce using rule 80 (gotoVCuad -> .)
    WRITE           reduce using rule 80 (gotoVCuad -> .)
    ID              reduce using rule 80 (gotoVCuad -> .)
    WHILE           reduce using rule 80 (gotoVCuad -> .)
    DO              reduce using rule 80 (gotoVCuad -> .)
    RIGHTKEY        reduce using rule 80 (gotoVCuad -> .)
    RETURN          reduce using rule 80 (gotoVCuad -> .)

    gotoVCuad                      shift and go to state 235

state 231

    (82) while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .

    IF              reduce using rule 82 (while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .)
    DECLARE         reduce using rule 82 (while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .)
    READ            reduce using rule 82 (while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .)
    WRITE           reduce using rule 82 (while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .)
    ID              reduce using rule 82 (while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .)
    WHILE           reduce using rule 82 (while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .)
    DO              reduce using rule 82 (while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .)
    RIGHTKEY        reduce using rule 82 (while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .)
    RETURN          reduce using rule 82 (while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .)


state 232

    (58) declare3Local -> COMMA ID altaVarLocal . assignmentDecl declare3Local
    (52) assignmentDecl -> . ASSGN exp
    (56) assignmentDecl -> . empty
    (112) empty -> .

    ASSGN           shift and go to state 35
    COMMA           reduce using rule 112 (empty -> .)
    SEMICOLON       reduce using rule 112 (empty -> .)

    empty                          shift and go to state 37
    assignmentDecl                 shift and go to state 236

state 233

    (51) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .

    IF              reduce using rule 51 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    DECLARE         reduce using rule 51 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    READ            reduce using rule 51 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    WRITE           reduce using rule 51 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    ID              reduce using rule 51 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    WHILE           reduce using rule 51 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    DO              reduce using rule 51 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    RIGHTKEY        reduce using rule 51 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    RETURN          reduce using rule 51 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)


state 234

    (68) conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad . conditionalElse
    (71) conditionalElse -> . ELSE LEFTKEY est RIGHTKEY llenaGoto
    (73) conditionalElse -> . empty
    (112) empty -> .

    ELSE            shift and go to state 239
    IF              reduce using rule 112 (empty -> .)
    DECLARE         reduce using rule 112 (empty -> .)
    READ            reduce using rule 112 (empty -> .)
    WRITE           reduce using rule 112 (empty -> .)
    ID              reduce using rule 112 (empty -> .)
    WHILE           reduce using rule 112 (empty -> .)
    DO              reduce using rule 112 (empty -> .)
    RIGHTKEY        reduce using rule 112 (empty -> .)
    RETURN          reduce using rule 112 (empty -> .)

    conditionalElse                shift and go to state 237
    empty                          shift and go to state 238

state 235

    (79) do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .

    IF              reduce using rule 79 (do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .)
    DECLARE         reduce using rule 79 (do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .)
    READ            reduce using rule 79 (do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .)
    WRITE           reduce using rule 79 (do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .)
    ID              reduce using rule 79 (do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .)
    WHILE           reduce using rule 79 (do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .)
    DO              reduce using rule 79 (do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .)
    RIGHTKEY        reduce using rule 79 (do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .)
    RETURN          reduce using rule 79 (do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .)


state 236

    (58) declare3Local -> COMMA ID altaVarLocal assignmentDecl . declare3Local
    (58) declare3Local -> . COMMA ID altaVarLocal assignmentDecl declare3Local
    (62) declare3Local -> . empty
    (112) empty -> .

    COMMA           shift and go to state 221
    SEMICOLON       reduce using rule 112 (empty -> .)

    empty                          shift and go to state 222
    declare3Local                  shift and go to state 240

state 237

    (68) conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .

    IF              reduce using rule 68 (conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .)
    DECLARE         reduce using rule 68 (conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .)
    READ            reduce using rule 68 (conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .)
    WRITE           reduce using rule 68 (conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .)
    ID              reduce using rule 68 (conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .)
    WHILE           reduce using rule 68 (conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .)
    DO              reduce using rule 68 (conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .)
    RIGHTKEY        reduce using rule 68 (conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .)
    RETURN          reduce using rule 68 (conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .)


state 238

    (73) conditionalElse -> empty .

    IF              reduce using rule 73 (conditionalElse -> empty .)
    DECLARE         reduce using rule 73 (conditionalElse -> empty .)
    READ            reduce using rule 73 (conditionalElse -> empty .)
    WRITE           reduce using rule 73 (conditionalElse -> empty .)
    ID              reduce using rule 73 (conditionalElse -> empty .)
    WHILE           reduce using rule 73 (conditionalElse -> empty .)
    DO              reduce using rule 73 (conditionalElse -> empty .)
    RIGHTKEY        reduce using rule 73 (conditionalElse -> empty .)
    RETURN          reduce using rule 73 (conditionalElse -> empty .)


state 239

    (71) conditionalElse -> ELSE . LEFTKEY est RIGHTKEY llenaGoto

    LEFTKEY         shift and go to state 241


state 240

    (58) declare3Local -> COMMA ID altaVarLocal assignmentDecl declare3Local .

    SEMICOLON       reduce using rule 58 (declare3Local -> COMMA ID altaVarLocal assignmentDecl declare3Local .)


state 241

    (71) conditionalElse -> ELSE LEFTKEY . est RIGHTKEY llenaGoto
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . do-while
    (111) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (107) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (112) empty -> .
    (82) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (79) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 106
    DECLARE         shift and go to state 105
    READ            shift and go to state 95
    WRITE           shift and go to state 103
    ID              shift and go to state 104
    RIGHTKEY        reduce using rule 112 (empty -> .)
    WHILE           shift and go to state 97
    DO              shift and go to state 94

  ! IF              [ reduce using rule 112 (empty -> .) ]
  ! DECLARE         [ reduce using rule 112 (empty -> .) ]
  ! READ            [ reduce using rule 112 (empty -> .) ]
  ! WRITE           [ reduce using rule 112 (empty -> .) ]
  ! ID              [ reduce using rule 112 (empty -> .) ]
  ! WHILE           [ reduce using rule 112 (empty -> .) ]
  ! DO              [ reduce using rule 112 (empty -> .) ]

    conditional                    shift and go to state 96
    do-while                       shift and go to state 98
    est                            shift and go to state 242
    llamadaAFunct                  shift and go to state 100
    input                          shift and go to state 101
    assignment                     shift and go to state 102
    cycles                         shift and go to state 107
    while                          shift and go to state 108
    empty                          shift and go to state 109
    output                         shift and go to state 110
    declareLocal                   shift and go to state 111

state 242

    (71) conditionalElse -> ELSE LEFTKEY est . RIGHTKEY llenaGoto

    RIGHTKEY        shift and go to state 243


state 243

    (71) conditionalElse -> ELSE LEFTKEY est RIGHTKEY . llenaGoto
    (72) llenaGoto -> .

    IF              reduce using rule 72 (llenaGoto -> .)
    DECLARE         reduce using rule 72 (llenaGoto -> .)
    READ            reduce using rule 72 (llenaGoto -> .)
    WRITE           reduce using rule 72 (llenaGoto -> .)
    ID              reduce using rule 72 (llenaGoto -> .)
    WHILE           reduce using rule 72 (llenaGoto -> .)
    DO              reduce using rule 72 (llenaGoto -> .)
    RIGHTKEY        reduce using rule 72 (llenaGoto -> .)
    RETURN          reduce using rule 72 (llenaGoto -> .)

    llenaGoto                      shift and go to state 244

state 244

    (71) conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .

    IF              reduce using rule 71 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .)
    DECLARE         reduce using rule 71 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .)
    READ            reduce using rule 71 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .)
    WRITE           reduce using rule 71 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .)
    ID              reduce using rule 71 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .)
    WHILE           reduce using rule 71 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .)
    DO              reduce using rule 71 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .)
    RIGHTKEY        reduce using rule 71 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .)
    RETURN          reduce using rule 71 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LESS in state 40 resolved as shift
WARNING: shift/reduce conflict for GRTR in state 40 resolved as shift
WARNING: shift/reduce conflict for EQ in state 40 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 40 resolved as shift
WARNING: shift/reduce conflict for AND in state 40 resolved as shift
WARNING: shift/reduce conflict for OR in state 40 resolved as shift
WARNING: shift/reduce conflict for SUM in state 40 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 40 resolved as shift
WARNING: shift/reduce conflict for MULTP in state 40 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 40 resolved as shift
WARNING: shift/reduce conflict for LESS in state 68 resolved as shift
WARNING: shift/reduce conflict for GRTR in state 68 resolved as shift
WARNING: shift/reduce conflict for EQ in state 68 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 68 resolved as shift
WARNING: shift/reduce conflict for AND in state 68 resolved as shift
WARNING: shift/reduce conflict for OR in state 68 resolved as shift
WARNING: shift/reduce conflict for SUM in state 68 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 68 resolved as shift
WARNING: shift/reduce conflict for MULTP in state 68 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 68 resolved as shift
WARNING: shift/reduce conflict for IF in state 76 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 76 resolved as shift
WARNING: shift/reduce conflict for READ in state 76 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 76 resolved as shift
WARNING: shift/reduce conflict for ID in state 76 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 76 resolved as shift
WARNING: shift/reduce conflict for DO in state 76 resolved as shift
WARNING: shift/reduce conflict for ID in state 77 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 77 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 77 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 77 resolved as shift
WARNING: shift/reduce conflict for ID in state 78 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 78 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 78 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 78 resolved as shift
WARNING: shift/reduce conflict for ID in state 79 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 79 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 79 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 79 resolved as shift
WARNING: shift/reduce conflict for ID in state 80 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 80 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 80 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 80 resolved as shift
WARNING: shift/reduce conflict for ID in state 81 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 81 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 81 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 81 resolved as shift
WARNING: shift/reduce conflict for ID in state 82 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 82 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 82 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 82 resolved as shift
WARNING: shift/reduce conflict for ID in state 83 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 83 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 83 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 83 resolved as shift
WARNING: shift/reduce conflict for ID in state 84 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 84 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 84 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 84 resolved as shift
WARNING: shift/reduce conflict for ID in state 85 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 85 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 85 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 85 resolved as shift
WARNING: shift/reduce conflict for ID in state 86 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 86 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 86 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 86 resolved as shift
WARNING: shift/reduce conflict for IF in state 96 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 96 resolved as shift
WARNING: shift/reduce conflict for READ in state 96 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 96 resolved as shift
WARNING: shift/reduce conflict for ID in state 96 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 96 resolved as shift
WARNING: shift/reduce conflict for DO in state 96 resolved as shift
WARNING: shift/reduce conflict for IF in state 100 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 100 resolved as shift
WARNING: shift/reduce conflict for READ in state 100 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 100 resolved as shift
WARNING: shift/reduce conflict for ID in state 100 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 100 resolved as shift
WARNING: shift/reduce conflict for DO in state 100 resolved as shift
WARNING: shift/reduce conflict for IF in state 101 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 101 resolved as shift
WARNING: shift/reduce conflict for READ in state 101 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 101 resolved as shift
WARNING: shift/reduce conflict for ID in state 101 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 101 resolved as shift
WARNING: shift/reduce conflict for DO in state 101 resolved as shift
WARNING: shift/reduce conflict for IF in state 102 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 102 resolved as shift
WARNING: shift/reduce conflict for READ in state 102 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 102 resolved as shift
WARNING: shift/reduce conflict for ID in state 102 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 102 resolved as shift
WARNING: shift/reduce conflict for DO in state 102 resolved as shift
WARNING: shift/reduce conflict for IF in state 107 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 107 resolved as shift
WARNING: shift/reduce conflict for READ in state 107 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 107 resolved as shift
WARNING: shift/reduce conflict for ID in state 107 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 107 resolved as shift
WARNING: shift/reduce conflict for DO in state 107 resolved as shift
WARNING: shift/reduce conflict for IF in state 110 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 110 resolved as shift
WARNING: shift/reduce conflict for READ in state 110 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 110 resolved as shift
WARNING: shift/reduce conflict for ID in state 110 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 110 resolved as shift
WARNING: shift/reduce conflict for DO in state 110 resolved as shift
WARNING: shift/reduce conflict for IF in state 111 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 111 resolved as shift
WARNING: shift/reduce conflict for READ in state 111 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 111 resolved as shift
WARNING: shift/reduce conflict for ID in state 111 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 111 resolved as shift
WARNING: shift/reduce conflict for DO in state 111 resolved as shift
WARNING: shift/reduce conflict for IF in state 126 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 126 resolved as shift
WARNING: shift/reduce conflict for READ in state 126 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 126 resolved as shift
WARNING: shift/reduce conflict for ID in state 126 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 126 resolved as shift
WARNING: shift/reduce conflict for DO in state 126 resolved as shift
WARNING: shift/reduce conflict for ID in state 131 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 131 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 131 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 131 resolved as shift
WARNING: shift/reduce conflict for ID in state 142 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 142 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 142 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 142 resolved as shift
WARNING: shift/reduce conflict for LESS in state 146 resolved as shift
WARNING: shift/reduce conflict for GRTR in state 146 resolved as shift
WARNING: shift/reduce conflict for EQ in state 146 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 146 resolved as shift
WARNING: shift/reduce conflict for AND in state 146 resolved as shift
WARNING: shift/reduce conflict for OR in state 146 resolved as shift
WARNING: shift/reduce conflict for SUM in state 146 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 146 resolved as shift
WARNING: shift/reduce conflict for MULTP in state 146 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 146 resolved as shift
WARNING: shift/reduce conflict for IF in state 152 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 152 resolved as shift
WARNING: shift/reduce conflict for READ in state 152 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 152 resolved as shift
WARNING: shift/reduce conflict for ID in state 152 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 152 resolved as shift
WARNING: shift/reduce conflict for DO in state 152 resolved as shift
WARNING: shift/reduce conflict for ID in state 155 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 155 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 155 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 155 resolved as shift
WARNING: shift/reduce conflict for ID in state 168 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 168 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 168 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 168 resolved as shift
WARNING: shift/reduce conflict for IF in state 211 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 211 resolved as shift
WARNING: shift/reduce conflict for READ in state 211 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 211 resolved as shift
WARNING: shift/reduce conflict for ID in state 211 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 211 resolved as shift
WARNING: shift/reduce conflict for DO in state 211 resolved as shift
WARNING: shift/reduce conflict for IF in state 217 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 217 resolved as shift
WARNING: shift/reduce conflict for READ in state 217 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 217 resolved as shift
WARNING: shift/reduce conflict for ID in state 217 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 217 resolved as shift
WARNING: shift/reduce conflict for DO in state 217 resolved as shift
WARNING: shift/reduce conflict for ID in state 219 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 219 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 219 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 219 resolved as shift
WARNING: shift/reduce conflict for IF in state 241 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 241 resolved as shift
WARNING: shift/reduce conflict for READ in state 241 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 241 resolved as shift
WARNING: shift/reduce conflict for ID in state 241 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 241 resolved as shift
WARNING: shift/reduce conflict for DO in state 241 resolved as shift
WARNING: reduce/reduce conflict in state 9 resolved using rule (program2 -> empty)
WARNING: rejected rule (declare -> empty) in state 9
WARNING: reduce/reduce conflict in state 46 resolved using rule (number -> empty)
WARNING: rejected rule (exp -> empty) in state 46
WARNING: reduce/reduce conflict in state 109 resolved using rule (est -> empty)
WARNING: rejected rule (declareLocal -> empty) in state 109
WARNING: reduce/reduce conflict in state 109 resolved using rule (declareLocal -> empty)
WARNING: rejected rule (cycles -> empty) in state 109
WARNING: reduce/reduce conflict in state 109 resolved using rule (est -> empty)
WARNING: rejected rule (cycles -> empty) in state 109
WARNING: reduce/reduce conflict in state 109 resolved using rule (declareLocal -> empty)
WARNING: rejected rule (assignment -> empty) in state 109
WARNING: reduce/reduce conflict in state 109 resolved using rule (est -> empty)
WARNING: rejected rule (assignment -> empty) in state 109
WARNING: reduce/reduce conflict in state 109 resolved using rule (llamadaAFunct -> empty)
WARNING: rejected rule (declareLocal -> empty) in state 109
WARNING: reduce/reduce conflict in state 109 resolved using rule (est -> empty)
WARNING: rejected rule (llamadaAFunct -> empty) in state 109
WARNING: reduce/reduce conflict in state 156 resolved using rule (while2 -> empty)
WARNING: rejected rule (exp -> empty) in state 156
WARNING: reduce/reduce conflict in state 156 resolved using rule (number -> empty)
WARNING: rejected rule (exp -> empty) in state 156
WARNING: reduce/reduce conflict in state 156 resolved using rule (number -> empty)
WARNING: rejected rule (while2 -> empty) in state 156
WARNING: reduce/reduce conflict in state 166 resolved using rule (conditional2 -> empty)
WARNING: rejected rule (exp -> empty) in state 166
WARNING: reduce/reduce conflict in state 166 resolved using rule (number -> empty)
WARNING: rejected rule (exp -> empty) in state 166
WARNING: reduce/reduce conflict in state 166 resolved using rule (number -> empty)
WARNING: rejected rule (conditional2 -> empty) in state 166
WARNING: reduce/reduce conflict in state 184 resolved using rule (llamadaAFunct -> empty)
WARNING: rejected rule (exp -> empty) in state 184
WARNING: reduce/reduce conflict in state 184 resolved using rule (llamadaAFunct -> empty)
WARNING: rejected rule (number -> empty) in state 184
WARNING: reduce/reduce conflict in state 216 resolved using rule (array -> empty)
WARNING: rejected rule (declare2Local -> empty) in state 216
WARNING: Rule (exp -> empty) is never reduced
WARNING: Rule (declareLocal -> empty) is never reduced
WARNING: Rule (cycles -> empty) is never reduced
WARNING: Rule (assignment -> empty) is never reduced
WARNING: Rule (while2 -> empty) is never reduced
WARNING: Rule (conditional2 -> empty) is never reduced
WARNING: Rule (declare2Local -> empty) is never reduced
