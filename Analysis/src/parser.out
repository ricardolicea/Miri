Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    LESSEQ
    COLON
    GRTREQ
    CYCLE
    SPACE
    newline
    FLOATNUMB
    TYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON
Rule 2     goToMainQuad -> <empty>
Rule 3     altaPrograma -> <empty>
Rule 4     program2 -> declare program3
Rule 5     program2 -> empty
Rule 6     declare -> DECLARE declareRecursivo
Rule 7     declare -> empty
Rule 8     declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
Rule 9     declare2 -> array
Rule 10    declare3 -> COMMA ID altaVarGlobal declare3
Rule 11    program3 -> funct program3
Rule 12    funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
Rule 13    functReturn -> RETURN NUMBER SEMICOLON
Rule 14    functReturn -> RETURN ID SEMICOLON
Rule 15    functReturn -> empty
Rule 16    altaModulo -> <empty>
Rule 17    funct2 -> type ID altaVarLocal funct3
Rule 18    funct3 -> COMMA type ID altaVarLocal funct3
Rule 19    funct2 -> empty
Rule 20    funct3 -> empty
Rule 21    program3 -> empty
Rule 22    altaVarGlobal -> <empty>
Rule 23    declareRecursivo -> empty
Rule 24    declare3 -> empty
Rule 25    array -> LEFTBRACK exp RIGHTBRACK array
Rule 26    array -> empty
Rule 27    type -> type2
Rule 28    type2 -> INT
Rule 29    type2 -> FLOAT
Rule 30    type2 -> STRING
Rule 31    type2 -> BOOL
Rule 32    type2 -> VOID
Rule 33    cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY
Rule 34    altaModuloMain -> <empty>
Rule 35    est -> conditional est
Rule 36    est -> declareLocal est
Rule 37    est -> cycles est
Rule 38    est -> input est
Rule 39    est -> output est
Rule 40    est -> assignment est
Rule 41    est -> llamadaAFunct est
Rule 42    est -> empty
Rule 43    llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR
Rule 44    llamadaAFunct -> empty
Rule 45    llamadaAFunct2 -> ID llamadaAFunct3
Rule 46    llamadaAFunct3 -> COMMA ID
Rule 47    llamadaAFunct3 -> empty
Rule 48    llamadaAFunct2 -> empty
Rule 49    declareLocal -> DECLARE declareRecursivoLocal
Rule 50    declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
Rule 51    assignmentDecl -> ASSGN exp
Rule 52    number -> INTEGER number2
Rule 53    number2 -> DOT INTEGER
Rule 54    number2 -> empty
Rule 55    assignmentDecl -> empty
Rule 56    declare2Local -> array
Rule 57    declare3Local -> COMMA ID altaVarLocal assignmentDecl declare3Local
Rule 58    declareRecursivoLocal -> empty
Rule 59    declareLocal -> empty
Rule 60    declare2Local -> empty
Rule 61    declare3Local -> empty
Rule 62    altaVarLocal -> <empty>
Rule 63    assignment -> ID quad1 ASSGN exp SEMICOLON
Rule 64    quad1 -> <empty>
Rule 65    assignment -> ID ASSGN llamadaAFunct SEMICOLON
Rule 66    assignment -> empty
Rule 67    conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
Rule 68    conditionalElse -> ELSE LEFTKEY est RIGHTKEY
Rule 69    conditionalElse -> empty
Rule 70    conditional2 -> exp conditional2
Rule 71    conditional2 -> empty
Rule 72    cycles -> while
Rule 73    cycles -> empty
Rule 74    cycles -> for
Rule 75    cycles -> do-while
Rule 76    do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR
Rule 77    while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
Rule 78    while2 -> exp while2
Rule 79    while2 -> empty
Rule 80    for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
Rule 81    for2 -> ID ASSGN number for3
Rule 82    for3 -> COMMA for2
Rule 83    for3 -> empty
Rule 84    for4 -> expFor
Rule 85    parte3For -> ID SUM SUM
Rule 86    parte3For -> ID MINUS MINUS
Rule 87    expFor -> ID expFor2
Rule 88    expFor -> number
Rule 89    expFor2 -> LESS expFor
Rule 90    expFor2 -> GRTR expFor
Rule 91    expFor2 -> EQ expFor
Rule 92    expFor2 -> NOTEQ expFor
Rule 93    expFor2 -> AND expFor
Rule 94    expFor2 -> OR expFor
Rule 95    expFor2 -> empty
Rule 96    exp -> ID exp2
Rule 97    exp -> number exp2
Rule 98    exp -> empty
Rule 99    exp2 -> LESS exp
Rule 100   exp2 -> GRTR exp
Rule 101   exp2 -> EQ exp
Rule 102   exp2 -> NOTEQ exp
Rule 103   exp2 -> AND exp
Rule 104   exp2 -> OR exp
Rule 105   exp2 -> SUM exp
Rule 106   exp2 -> MINUS exp
Rule 107   exp2 -> MULTP exp
Rule 108   exp2 -> DIVIDE exp
Rule 109   exp2 -> empty
Rule 110   output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
Rule 111   output2 -> ID output2
Rule 112   output2 -> QUOTE ID QUOTE output2
Rule 113   output2 -> empty
Rule 114   input -> READ LEFTPAR ID RIGHTPAR SEMICOLON
Rule 115   empty -> <empty>

Terminals, with rules where they appear

AND                  : 93 103
ASSGN                : 51 63 65 81
BOOL                 : 31
COLON                : 
COMMA                : 10 18 46 57 82
CYCLE                : 
DECLARE              : 6 49
DIVIDE               : 108
DO                   : 76
DOT                  : 53
ELSE                 : 68
END                  : 1
EQ                   : 91 101
FLOAT                : 29
FLOATNUMB            : 
FOR                  : 80
FUNCTION             : 12
GRTR                 : 90 100
GRTREQ               : 
ID                   : 1 8 10 12 14 17 18 43 45 46 50 57 63 65 81 85 86 87 96 111 112 114
IF                   : 67
INT                  : 28
INTEGER              : 52 53
LEFTBRACK            : 25
LEFTKEY              : 12 33 67 68 76 77 80
LEFTPAR              : 12 33 43 67 76 77 80 110 114
LESS                 : 89 99
LESSEQ               : 
MAIN                 : 33
MINUS                : 86 86 106
MULTP                : 107
NOTEQ                : 92 102
NUMBER               : 13
OR                   : 94 104
PROGRAM              : 1
QUOTE                : 112 112
READ                 : 114
RETURN               : 13 14
RIGHTBRACK           : 25
RIGHTKEY             : 12 33 67 68 76 77 80
RIGHTPAR             : 12 33 43 67 76 77 80 110 114
SEMICOLON            : 1 1 8 13 14 50 63 65 80 80 110 114
SPACE                : 
STRING               : 30
SUM                  : 85 85 105
TYPE                 : 
VOID                 : 32
WHILE                : 76 77
WRITE                : 110
error                : 
newline              : 

Nonterminals, with rules where they appear

altaModulo           : 12
altaModuloMain       : 33
altaPrograma         : 1
altaVarGlobal        : 8 10
altaVarLocal         : 17 18 50 57
array                : 9 25 56
assignment           : 40
assignmentDecl       : 8 50 57
conditional          : 35
conditional2         : 67 70
conditionalElse      : 67
cuerpo               : 1
cycles               : 37
declare              : 4
declare2             : 8
declare2Local        : 50
declare3             : 8 10
declare3Local        : 50 57
declareLocal         : 36
declareRecursivo     : 6 8
declareRecursivoLocal : 49 50
do-while             : 75
empty                : 5 7 15 19 20 21 23 24 26 42 44 47 48 54 55 58 59 60 61 66 69 71 73 79 83 95 98 109 113
est                  : 12 33 35 36 37 38 39 40 41 67 68 76 77 80
exp                  : 25 51 63 70 78 99 100 101 102 103 104 105 106 107 108
exp2                 : 96 97
expFor               : 84 89 90 91 92 93 94
expFor2              : 87
for                  : 74
for2                 : 80 82
for3                 : 81
for4                 : 80
funct                : 11
funct2               : 12
funct3               : 17 18
functReturn          : 12
goToMainQuad         : 1
input                : 38
llamadaAFunct        : 41 65
llamadaAFunct2       : 43
llamadaAFunct3       : 45
number               : 81 88 97
number2              : 52
output               : 39
output2              : 110 111 112
parte3For            : 80
program              : 0
program2             : 1
program3             : 4 11
quad1                : 63
type                 : 8 12 17 18 50
type2                : 27
while                : 72
while2               : 76 77 78

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON
    (3) altaPrograma -> .

    SEMICOLON       reduce using rule 3 (altaPrograma -> .)

    altaPrograma                   shift and go to state 4

state 4

    (1) program -> PROGRAM ID altaPrograma . SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON

    SEMICOLON       shift and go to state 5


state 5

    (1) program -> PROGRAM ID altaPrograma SEMICOLON . program2 goToMainQuad cuerpo END SEMICOLON
    (4) program2 -> . declare program3
    (5) program2 -> . empty
    (6) declare -> . DECLARE declareRecursivo
    (7) declare -> . empty
    (115) empty -> .

    DECLARE         shift and go to state 7
    MAIN            reduce using rule 115 (empty -> .)
    FUNCTION        reduce using rule 115 (empty -> .)

    program2                       shift and go to state 6
    declare                        shift and go to state 8
    empty                          shift and go to state 9

state 6

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 . goToMainQuad cuerpo END SEMICOLON
    (2) goToMainQuad -> .

    MAIN            reduce using rule 2 (goToMainQuad -> .)

    goToMainQuad                   shift and go to state 10

state 7

    (6) declare -> DECLARE . declareRecursivo
    (8) declareRecursivo -> . type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
    (23) declareRecursivo -> . empty
    (27) type -> . type2
    (115) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    FUNCTION        reduce using rule 115 (empty -> .)
    MAIN            reduce using rule 115 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    declareRecursivo               shift and go to state 16
    type                           shift and go to state 17
    empty                          shift and go to state 18
    type2                          shift and go to state 19

state 8

    (4) program2 -> declare . program3
    (11) program3 -> . funct program3
    (21) program3 -> . empty
    (12) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (115) empty -> .

    FUNCTION        shift and go to state 20
    MAIN            reduce using rule 115 (empty -> .)

    funct                          shift and go to state 21
    program3                       shift and go to state 22
    empty                          shift and go to state 23

state 9

    (5) program2 -> empty .
    (7) declare -> empty .

  ! reduce/reduce conflict for MAIN resolved using rule 5 (program2 -> empty .)
    MAIN            reduce using rule 5 (program2 -> empty .)
    FUNCTION        reduce using rule 7 (declare -> empty .)

  ! MAIN            [ reduce using rule 7 (declare -> empty .) ]


state 10

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad . cuerpo END SEMICOLON
    (33) cuerpo -> . MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY

    MAIN            shift and go to state 25

    cuerpo                         shift and go to state 24

state 11

    (30) type2 -> STRING .

    ID              reduce using rule 30 (type2 -> STRING .)


state 12

    (28) type2 -> INT .

    ID              reduce using rule 28 (type2 -> INT .)


state 13

    (32) type2 -> VOID .

    ID              reduce using rule 32 (type2 -> VOID .)


state 14

    (29) type2 -> FLOAT .

    ID              reduce using rule 29 (type2 -> FLOAT .)


state 15

    (31) type2 -> BOOL .

    ID              reduce using rule 31 (type2 -> BOOL .)


state 16

    (6) declare -> DECLARE declareRecursivo .

    FUNCTION        reduce using rule 6 (declare -> DECLARE declareRecursivo .)
    MAIN            reduce using rule 6 (declare -> DECLARE declareRecursivo .)


state 17

    (8) declareRecursivo -> type . ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo

    ID              shift and go to state 26


state 18

    (23) declareRecursivo -> empty .

    FUNCTION        reduce using rule 23 (declareRecursivo -> empty .)
    MAIN            reduce using rule 23 (declareRecursivo -> empty .)


state 19

    (27) type -> type2 .

    ID              reduce using rule 27 (type -> type2 .)


state 20

    (12) funct -> FUNCTION . type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (27) type -> . type2
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    type                           shift and go to state 27
    type2                          shift and go to state 19

state 21

    (11) program3 -> funct . program3
    (11) program3 -> . funct program3
    (21) program3 -> . empty
    (12) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (115) empty -> .

    FUNCTION        shift and go to state 20
    MAIN            reduce using rule 115 (empty -> .)

    program3                       shift and go to state 28
    funct                          shift and go to state 21
    empty                          shift and go to state 23

state 22

    (4) program2 -> declare program3 .

    MAIN            reduce using rule 4 (program2 -> declare program3 .)


state 23

    (21) program3 -> empty .

    MAIN            reduce using rule 21 (program3 -> empty .)


state 24

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo . END SEMICOLON

    END             shift and go to state 29


state 25

    (33) cuerpo -> MAIN . LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY

    LEFTPAR         shift and go to state 30


state 26

    (8) declareRecursivo -> type ID . altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
    (22) altaVarGlobal -> .

    ASSGN           reduce using rule 22 (altaVarGlobal -> .)
    LEFTBRACK       reduce using rule 22 (altaVarGlobal -> .)
    COMMA           reduce using rule 22 (altaVarGlobal -> .)
    SEMICOLON       reduce using rule 22 (altaVarGlobal -> .)

    altaVarGlobal                  shift and go to state 31

state 27

    (12) funct -> FUNCTION type . ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY

    ID              shift and go to state 32


state 28

    (11) program3 -> funct program3 .

    MAIN            reduce using rule 11 (program3 -> funct program3 .)


state 29

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END . SEMICOLON

    SEMICOLON       shift and go to state 33


state 30

    (33) cuerpo -> MAIN LEFTPAR . RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY

    RIGHTPAR        shift and go to state 34


state 31

    (8) declareRecursivo -> type ID altaVarGlobal . assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
    (51) assignmentDecl -> . ASSGN exp
    (55) assignmentDecl -> . empty
    (115) empty -> .

    ASSGN           shift and go to state 35
    LEFTBRACK       reduce using rule 115 (empty -> .)
    COMMA           reduce using rule 115 (empty -> .)
    SEMICOLON       reduce using rule 115 (empty -> .)

    assignmentDecl                 shift and go to state 36
    empty                          shift and go to state 37

state 32

    (12) funct -> FUNCTION type ID . altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (16) altaModulo -> .

    LEFTPAR         reduce using rule 16 (altaModulo -> .)

    altaModulo                     shift and go to state 38

state 33

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON .

    $end            reduce using rule 1 (program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON .)


state 34

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR . LEFTKEY altaModuloMain est RIGHTKEY

    LEFTKEY         shift and go to state 39


state 35

    (51) assignmentDecl -> ASSGN . exp
    (96) exp -> . ID exp2
    (97) exp -> . number exp2
    (98) exp -> . empty
    (52) number -> . INTEGER number2
    (115) empty -> .

    ID              shift and go to state 43
    INTEGER         shift and go to state 42
    LEFTBRACK       reduce using rule 115 (empty -> .)
    COMMA           reduce using rule 115 (empty -> .)
    SEMICOLON       reduce using rule 115 (empty -> .)

    empty                          shift and go to state 44
    number                         shift and go to state 40
    exp                            shift and go to state 41

state 36

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl . declare2 declare3 SEMICOLON declareRecursivo
    (9) declare2 -> . array
    (25) array -> . LEFTBRACK exp RIGHTBRACK array
    (26) array -> . empty
    (115) empty -> .

    LEFTBRACK       shift and go to state 45
    COMMA           reduce using rule 115 (empty -> .)
    SEMICOLON       reduce using rule 115 (empty -> .)

    declare2                       shift and go to state 46
    array                          shift and go to state 47
    empty                          shift and go to state 48

state 37

    (55) assignmentDecl -> empty .

    LEFTBRACK       reduce using rule 55 (assignmentDecl -> empty .)
    COMMA           reduce using rule 55 (assignmentDecl -> empty .)
    SEMICOLON       reduce using rule 55 (assignmentDecl -> empty .)


state 38

    (12) funct -> FUNCTION type ID altaModulo . LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY

    LEFTPAR         shift and go to state 49


state 39

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY . altaModuloMain est RIGHTKEY
    (34) altaModuloMain -> .

    IF              reduce using rule 34 (altaModuloMain -> .)
    DECLARE         reduce using rule 34 (altaModuloMain -> .)
    READ            reduce using rule 34 (altaModuloMain -> .)
    WRITE           reduce using rule 34 (altaModuloMain -> .)
    ID              reduce using rule 34 (altaModuloMain -> .)
    WHILE           reduce using rule 34 (altaModuloMain -> .)
    FOR             reduce using rule 34 (altaModuloMain -> .)
    DO              reduce using rule 34 (altaModuloMain -> .)
    RIGHTKEY        reduce using rule 34 (altaModuloMain -> .)

    altaModuloMain                 shift and go to state 50

state 40

    (97) exp -> number . exp2
    (99) exp2 -> . LESS exp
    (100) exp2 -> . GRTR exp
    (101) exp2 -> . EQ exp
    (102) exp2 -> . NOTEQ exp
    (103) exp2 -> . AND exp
    (104) exp2 -> . OR exp
    (105) exp2 -> . SUM exp
    (106) exp2 -> . MINUS exp
    (107) exp2 -> . MULTP exp
    (108) exp2 -> . DIVIDE exp
    (109) exp2 -> . empty
    (115) empty -> .

    LESS            shift and go to state 53
    GRTR            shift and go to state 58
    EQ              shift and go to state 60
    NOTEQ           shift and go to state 54
    AND             shift and go to state 51
    OR              shift and go to state 61
    SUM             shift and go to state 56
    MINUS           shift and go to state 57
    MULTP           shift and go to state 59
    DIVIDE          shift and go to state 52
    LEFTBRACK       reduce using rule 115 (empty -> .)
    COMMA           reduce using rule 115 (empty -> .)
    SEMICOLON       reduce using rule 115 (empty -> .)
    RIGHTBRACK      reduce using rule 115 (empty -> .)
    ID              reduce using rule 115 (empty -> .)
    INTEGER         reduce using rule 115 (empty -> .)
    RIGHTPAR        reduce using rule 115 (empty -> .)

    exp2                           shift and go to state 55
    empty                          shift and go to state 62

state 41

    (51) assignmentDecl -> ASSGN exp .

    LEFTBRACK       reduce using rule 51 (assignmentDecl -> ASSGN exp .)
    COMMA           reduce using rule 51 (assignmentDecl -> ASSGN exp .)
    SEMICOLON       reduce using rule 51 (assignmentDecl -> ASSGN exp .)


state 42

    (52) number -> INTEGER . number2
    (53) number2 -> . DOT INTEGER
    (54) number2 -> . empty
    (115) empty -> .

    DOT             shift and go to state 65
    LESS            reduce using rule 115 (empty -> .)
    GRTR            reduce using rule 115 (empty -> .)
    EQ              reduce using rule 115 (empty -> .)
    NOTEQ           reduce using rule 115 (empty -> .)
    AND             reduce using rule 115 (empty -> .)
    OR              reduce using rule 115 (empty -> .)
    SUM             reduce using rule 115 (empty -> .)
    MINUS           reduce using rule 115 (empty -> .)
    MULTP           reduce using rule 115 (empty -> .)
    DIVIDE          reduce using rule 115 (empty -> .)
    LEFTBRACK       reduce using rule 115 (empty -> .)
    COMMA           reduce using rule 115 (empty -> .)
    SEMICOLON       reduce using rule 115 (empty -> .)
    RIGHTBRACK      reduce using rule 115 (empty -> .)
    ID              reduce using rule 115 (empty -> .)
    INTEGER         reduce using rule 115 (empty -> .)
    RIGHTPAR        reduce using rule 115 (empty -> .)

    number2                        shift and go to state 63
    empty                          shift and go to state 64

state 43

    (96) exp -> ID . exp2
    (99) exp2 -> . LESS exp
    (100) exp2 -> . GRTR exp
    (101) exp2 -> . EQ exp
    (102) exp2 -> . NOTEQ exp
    (103) exp2 -> . AND exp
    (104) exp2 -> . OR exp
    (105) exp2 -> . SUM exp
    (106) exp2 -> . MINUS exp
    (107) exp2 -> . MULTP exp
    (108) exp2 -> . DIVIDE exp
    (109) exp2 -> . empty
    (115) empty -> .

    LESS            shift and go to state 53
    GRTR            shift and go to state 58
    EQ              shift and go to state 60
    NOTEQ           shift and go to state 54
    AND             shift and go to state 51
    OR              shift and go to state 61
    SUM             shift and go to state 56
    MINUS           shift and go to state 57
    MULTP           shift and go to state 59
    DIVIDE          shift and go to state 52
    LEFTBRACK       reduce using rule 115 (empty -> .)
    COMMA           reduce using rule 115 (empty -> .)
    SEMICOLON       reduce using rule 115 (empty -> .)
    RIGHTBRACK      reduce using rule 115 (empty -> .)
    ID              reduce using rule 115 (empty -> .)
    INTEGER         reduce using rule 115 (empty -> .)
    RIGHTPAR        reduce using rule 115 (empty -> .)

    exp2                           shift and go to state 66
    empty                          shift and go to state 62

state 44

    (98) exp -> empty .

    LEFTBRACK       reduce using rule 98 (exp -> empty .)
    COMMA           reduce using rule 98 (exp -> empty .)
    SEMICOLON       reduce using rule 98 (exp -> empty .)
    RIGHTBRACK      reduce using rule 98 (exp -> empty .)
    ID              reduce using rule 98 (exp -> empty .)
    INTEGER         reduce using rule 98 (exp -> empty .)
    RIGHTPAR        reduce using rule 98 (exp -> empty .)


state 45

    (25) array -> LEFTBRACK . exp RIGHTBRACK array
    (96) exp -> . ID exp2
    (97) exp -> . number exp2
    (98) exp -> . empty
    (52) number -> . INTEGER number2
    (115) empty -> .

    ID              shift and go to state 43
    INTEGER         shift and go to state 42
    RIGHTBRACK      reduce using rule 115 (empty -> .)

    number                         shift and go to state 40
    exp                            shift and go to state 67
    empty                          shift and go to state 44

state 46

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 . declare3 SEMICOLON declareRecursivo
    (10) declare3 -> . COMMA ID altaVarGlobal declare3
    (24) declare3 -> . empty
    (115) empty -> .

    COMMA           shift and go to state 69
    SEMICOLON       reduce using rule 115 (empty -> .)

    declare3                       shift and go to state 68
    empty                          shift and go to state 70

state 47

    (9) declare2 -> array .

    COMMA           reduce using rule 9 (declare2 -> array .)
    SEMICOLON       reduce using rule 9 (declare2 -> array .)


state 48

    (26) array -> empty .

    COMMA           reduce using rule 26 (array -> empty .)
    SEMICOLON       reduce using rule 26 (array -> empty .)


state 49

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR . funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (17) funct2 -> . type ID altaVarLocal funct3
    (19) funct2 -> . empty
    (27) type -> . type2
    (115) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    RIGHTPAR        reduce using rule 115 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    funct2                         shift and go to state 71
    type                           shift and go to state 72
    empty                          shift and go to state 73
    type2                          shift and go to state 19

state 50

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain . est RIGHTKEY
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (67) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (72) cycles -> . while
    (73) cycles -> . empty
    (74) cycles -> . for
    (75) cycles -> . do-while
    (114) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (110) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID quad1 ASSGN exp SEMICOLON
    (65) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (66) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (115) empty -> .
    (77) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (80) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (76) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 88
    DECLARE         shift and go to state 87
    READ            shift and go to state 75
    WRITE           shift and go to state 85
    ID              shift and go to state 86
    RIGHTKEY        reduce using rule 115 (empty -> .)
    WHILE           shift and go to state 77
    FOR             shift and go to state 83
    DO              shift and go to state 74

  ! IF              [ reduce using rule 115 (empty -> .) ]
  ! DECLARE         [ reduce using rule 115 (empty -> .) ]
  ! READ            [ reduce using rule 115 (empty -> .) ]
  ! WRITE           [ reduce using rule 115 (empty -> .) ]
  ! ID              [ reduce using rule 115 (empty -> .) ]
  ! WHILE           [ reduce using rule 115 (empty -> .) ]
  ! FOR             [ reduce using rule 115 (empty -> .) ]
  ! DO              [ reduce using rule 115 (empty -> .) ]

    conditional                    shift and go to state 76
    do-while                       shift and go to state 78
    est                            shift and go to state 79
    for                            shift and go to state 80
    llamadaAFunct                  shift and go to state 81
    input                          shift and go to state 82
    assignment                     shift and go to state 84
    cycles                         shift and go to state 89
    while                          shift and go to state 90
    empty                          shift and go to state 91
    output                         shift and go to state 92
    declareLocal                   shift and go to state 93

state 51

    (103) exp2 -> AND . exp
    (96) exp -> . ID exp2
    (97) exp -> . number exp2
    (98) exp -> . empty
    (52) number -> . INTEGER number2
    (115) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    INTEGER         shift and go to state 42
    LEFTBRACK       reduce using rule 115 (empty -> .)
    COMMA           reduce using rule 115 (empty -> .)
    SEMICOLON       reduce using rule 115 (empty -> .)
    RIGHTBRACK      reduce using rule 115 (empty -> .)
    RIGHTPAR        reduce using rule 115 (empty -> .)

  ! ID              [ reduce using rule 115 (empty -> .) ]
  ! INTEGER         [ reduce using rule 115 (empty -> .) ]

    empty                          shift and go to state 44
    number                         shift and go to state 40
    exp                            shift and go to state 94

state 52

    (108) exp2 -> DIVIDE . exp
    (96) exp -> . ID exp2
    (97) exp -> . number exp2
    (98) exp -> . empty
    (52) number -> . INTEGER number2
    (115) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    INTEGER         shift and go to state 42
    LEFTBRACK       reduce using rule 115 (empty -> .)
    COMMA           reduce using rule 115 (empty -> .)
    SEMICOLON       reduce using rule 115 (empty -> .)
    RIGHTBRACK      reduce using rule 115 (empty -> .)
    RIGHTPAR        reduce using rule 115 (empty -> .)

  ! ID              [ reduce using rule 115 (empty -> .) ]
  ! INTEGER         [ reduce using rule 115 (empty -> .) ]

    empty                          shift and go to state 44
    number                         shift and go to state 40
    exp                            shift and go to state 95

state 53

    (99) exp2 -> LESS . exp
    (96) exp -> . ID exp2
    (97) exp -> . number exp2
    (98) exp -> . empty
    (52) number -> . INTEGER number2
    (115) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    INTEGER         shift and go to state 42
    LEFTBRACK       reduce using rule 115 (empty -> .)
    COMMA           reduce using rule 115 (empty -> .)
    SEMICOLON       reduce using rule 115 (empty -> .)
    RIGHTBRACK      reduce using rule 115 (empty -> .)
    RIGHTPAR        reduce using rule 115 (empty -> .)

  ! ID              [ reduce using rule 115 (empty -> .) ]
  ! INTEGER         [ reduce using rule 115 (empty -> .) ]

    empty                          shift and go to state 44
    number                         shift and go to state 40
    exp                            shift and go to state 96

state 54

    (102) exp2 -> NOTEQ . exp
    (96) exp -> . ID exp2
    (97) exp -> . number exp2
    (98) exp -> . empty
    (52) number -> . INTEGER number2
    (115) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    INTEGER         shift and go to state 42
    LEFTBRACK       reduce using rule 115 (empty -> .)
    COMMA           reduce using rule 115 (empty -> .)
    SEMICOLON       reduce using rule 115 (empty -> .)
    RIGHTBRACK      reduce using rule 115 (empty -> .)
    RIGHTPAR        reduce using rule 115 (empty -> .)

  ! ID              [ reduce using rule 115 (empty -> .) ]
  ! INTEGER         [ reduce using rule 115 (empty -> .) ]

    empty                          shift and go to state 44
    number                         shift and go to state 40
    exp                            shift and go to state 97

state 55

    (97) exp -> number exp2 .

    LEFTBRACK       reduce using rule 97 (exp -> number exp2 .)
    COMMA           reduce using rule 97 (exp -> number exp2 .)
    SEMICOLON       reduce using rule 97 (exp -> number exp2 .)
    RIGHTBRACK      reduce using rule 97 (exp -> number exp2 .)
    ID              reduce using rule 97 (exp -> number exp2 .)
    INTEGER         reduce using rule 97 (exp -> number exp2 .)
    RIGHTPAR        reduce using rule 97 (exp -> number exp2 .)


state 56

    (105) exp2 -> SUM . exp
    (96) exp -> . ID exp2
    (97) exp -> . number exp2
    (98) exp -> . empty
    (52) number -> . INTEGER number2
    (115) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    INTEGER         shift and go to state 42
    LEFTBRACK       reduce using rule 115 (empty -> .)
    COMMA           reduce using rule 115 (empty -> .)
    SEMICOLON       reduce using rule 115 (empty -> .)
    RIGHTBRACK      reduce using rule 115 (empty -> .)
    RIGHTPAR        reduce using rule 115 (empty -> .)

  ! ID              [ reduce using rule 115 (empty -> .) ]
  ! INTEGER         [ reduce using rule 115 (empty -> .) ]

    empty                          shift and go to state 44
    number                         shift and go to state 40
    exp                            shift and go to state 98

state 57

    (106) exp2 -> MINUS . exp
    (96) exp -> . ID exp2
    (97) exp -> . number exp2
    (98) exp -> . empty
    (52) number -> . INTEGER number2
    (115) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    INTEGER         shift and go to state 42
    LEFTBRACK       reduce using rule 115 (empty -> .)
    COMMA           reduce using rule 115 (empty -> .)
    SEMICOLON       reduce using rule 115 (empty -> .)
    RIGHTBRACK      reduce using rule 115 (empty -> .)
    RIGHTPAR        reduce using rule 115 (empty -> .)

  ! ID              [ reduce using rule 115 (empty -> .) ]
  ! INTEGER         [ reduce using rule 115 (empty -> .) ]

    empty                          shift and go to state 44
    number                         shift and go to state 40
    exp                            shift and go to state 99

state 58

    (100) exp2 -> GRTR . exp
    (96) exp -> . ID exp2
    (97) exp -> . number exp2
    (98) exp -> . empty
    (52) number -> . INTEGER number2
    (115) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    INTEGER         shift and go to state 42
    LEFTBRACK       reduce using rule 115 (empty -> .)
    COMMA           reduce using rule 115 (empty -> .)
    SEMICOLON       reduce using rule 115 (empty -> .)
    RIGHTBRACK      reduce using rule 115 (empty -> .)
    RIGHTPAR        reduce using rule 115 (empty -> .)

  ! ID              [ reduce using rule 115 (empty -> .) ]
  ! INTEGER         [ reduce using rule 115 (empty -> .) ]

    empty                          shift and go to state 44
    number                         shift and go to state 40
    exp                            shift and go to state 100

state 59

    (107) exp2 -> MULTP . exp
    (96) exp -> . ID exp2
    (97) exp -> . number exp2
    (98) exp -> . empty
    (52) number -> . INTEGER number2
    (115) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    INTEGER         shift and go to state 42
    LEFTBRACK       reduce using rule 115 (empty -> .)
    COMMA           reduce using rule 115 (empty -> .)
    SEMICOLON       reduce using rule 115 (empty -> .)
    RIGHTBRACK      reduce using rule 115 (empty -> .)
    RIGHTPAR        reduce using rule 115 (empty -> .)

  ! ID              [ reduce using rule 115 (empty -> .) ]
  ! INTEGER         [ reduce using rule 115 (empty -> .) ]

    empty                          shift and go to state 44
    number                         shift and go to state 40
    exp                            shift and go to state 101

state 60

    (101) exp2 -> EQ . exp
    (96) exp -> . ID exp2
    (97) exp -> . number exp2
    (98) exp -> . empty
    (52) number -> . INTEGER number2
    (115) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    INTEGER         shift and go to state 42
    LEFTBRACK       reduce using rule 115 (empty -> .)
    COMMA           reduce using rule 115 (empty -> .)
    SEMICOLON       reduce using rule 115 (empty -> .)
    RIGHTBRACK      reduce using rule 115 (empty -> .)
    RIGHTPAR        reduce using rule 115 (empty -> .)

  ! ID              [ reduce using rule 115 (empty -> .) ]
  ! INTEGER         [ reduce using rule 115 (empty -> .) ]

    empty                          shift and go to state 44
    number                         shift and go to state 40
    exp                            shift and go to state 102

state 61

    (104) exp2 -> OR . exp
    (96) exp -> . ID exp2
    (97) exp -> . number exp2
    (98) exp -> . empty
    (52) number -> . INTEGER number2
    (115) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    INTEGER         shift and go to state 42
    LEFTBRACK       reduce using rule 115 (empty -> .)
    COMMA           reduce using rule 115 (empty -> .)
    SEMICOLON       reduce using rule 115 (empty -> .)
    RIGHTBRACK      reduce using rule 115 (empty -> .)
    RIGHTPAR        reduce using rule 115 (empty -> .)

  ! ID              [ reduce using rule 115 (empty -> .) ]
  ! INTEGER         [ reduce using rule 115 (empty -> .) ]

    empty                          shift and go to state 44
    number                         shift and go to state 40
    exp                            shift and go to state 103

state 62

    (109) exp2 -> empty .

    LEFTBRACK       reduce using rule 109 (exp2 -> empty .)
    COMMA           reduce using rule 109 (exp2 -> empty .)
    SEMICOLON       reduce using rule 109 (exp2 -> empty .)
    RIGHTBRACK      reduce using rule 109 (exp2 -> empty .)
    ID              reduce using rule 109 (exp2 -> empty .)
    INTEGER         reduce using rule 109 (exp2 -> empty .)
    RIGHTPAR        reduce using rule 109 (exp2 -> empty .)


state 63

    (52) number -> INTEGER number2 .

    LESS            reduce using rule 52 (number -> INTEGER number2 .)
    GRTR            reduce using rule 52 (number -> INTEGER number2 .)
    EQ              reduce using rule 52 (number -> INTEGER number2 .)
    NOTEQ           reduce using rule 52 (number -> INTEGER number2 .)
    AND             reduce using rule 52 (number -> INTEGER number2 .)
    OR              reduce using rule 52 (number -> INTEGER number2 .)
    SUM             reduce using rule 52 (number -> INTEGER number2 .)
    MINUS           reduce using rule 52 (number -> INTEGER number2 .)
    MULTP           reduce using rule 52 (number -> INTEGER number2 .)
    DIVIDE          reduce using rule 52 (number -> INTEGER number2 .)
    SEMICOLON       reduce using rule 52 (number -> INTEGER number2 .)
    RIGHTBRACK      reduce using rule 52 (number -> INTEGER number2 .)
    ID              reduce using rule 52 (number -> INTEGER number2 .)
    INTEGER         reduce using rule 52 (number -> INTEGER number2 .)
    RIGHTPAR        reduce using rule 52 (number -> INTEGER number2 .)
    LEFTBRACK       reduce using rule 52 (number -> INTEGER number2 .)
    COMMA           reduce using rule 52 (number -> INTEGER number2 .)


state 64

    (54) number2 -> empty .

    LESS            reduce using rule 54 (number2 -> empty .)
    GRTR            reduce using rule 54 (number2 -> empty .)
    EQ              reduce using rule 54 (number2 -> empty .)
    NOTEQ           reduce using rule 54 (number2 -> empty .)
    AND             reduce using rule 54 (number2 -> empty .)
    OR              reduce using rule 54 (number2 -> empty .)
    SUM             reduce using rule 54 (number2 -> empty .)
    MINUS           reduce using rule 54 (number2 -> empty .)
    MULTP           reduce using rule 54 (number2 -> empty .)
    DIVIDE          reduce using rule 54 (number2 -> empty .)
    LEFTBRACK       reduce using rule 54 (number2 -> empty .)
    COMMA           reduce using rule 54 (number2 -> empty .)
    SEMICOLON       reduce using rule 54 (number2 -> empty .)
    RIGHTBRACK      reduce using rule 54 (number2 -> empty .)
    ID              reduce using rule 54 (number2 -> empty .)
    INTEGER         reduce using rule 54 (number2 -> empty .)
    RIGHTPAR        reduce using rule 54 (number2 -> empty .)


state 65

    (53) number2 -> DOT . INTEGER

    INTEGER         shift and go to state 104


state 66

    (96) exp -> ID exp2 .

    LEFTBRACK       reduce using rule 96 (exp -> ID exp2 .)
    COMMA           reduce using rule 96 (exp -> ID exp2 .)
    SEMICOLON       reduce using rule 96 (exp -> ID exp2 .)
    RIGHTBRACK      reduce using rule 96 (exp -> ID exp2 .)
    ID              reduce using rule 96 (exp -> ID exp2 .)
    INTEGER         reduce using rule 96 (exp -> ID exp2 .)
    RIGHTPAR        reduce using rule 96 (exp -> ID exp2 .)


state 67

    (25) array -> LEFTBRACK exp . RIGHTBRACK array

    RIGHTBRACK      shift and go to state 105


state 68

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 . SEMICOLON declareRecursivo

    SEMICOLON       shift and go to state 106


state 69

    (10) declare3 -> COMMA . ID altaVarGlobal declare3

    ID              shift and go to state 107


state 70

    (24) declare3 -> empty .

    SEMICOLON       reduce using rule 24 (declare3 -> empty .)


state 71

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 . RIGHTPAR LEFTKEY est functReturn RIGHTKEY

    RIGHTPAR        shift and go to state 108


state 72

    (17) funct2 -> type . ID altaVarLocal funct3

    ID              shift and go to state 109


state 73

    (19) funct2 -> empty .

    RIGHTPAR        reduce using rule 19 (funct2 -> empty .)


state 74

    (76) do-while -> DO . LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    LEFTKEY         shift and go to state 110


state 75

    (114) input -> READ . LEFTPAR ID RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 111


state 76

    (35) est -> conditional . est
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (67) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (72) cycles -> . while
    (73) cycles -> . empty
    (74) cycles -> . for
    (75) cycles -> . do-while
    (114) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (110) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID quad1 ASSGN exp SEMICOLON
    (65) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (66) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (115) empty -> .
    (77) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (80) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (76) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 88
    DECLARE         shift and go to state 87
    READ            shift and go to state 75
    WRITE           shift and go to state 85
    ID              shift and go to state 86
    RIGHTKEY        reduce using rule 115 (empty -> .)
    RETURN          reduce using rule 115 (empty -> .)
    WHILE           shift and go to state 77
    FOR             shift and go to state 83
    DO              shift and go to state 74

  ! IF              [ reduce using rule 115 (empty -> .) ]
  ! DECLARE         [ reduce using rule 115 (empty -> .) ]
  ! READ            [ reduce using rule 115 (empty -> .) ]
  ! WRITE           [ reduce using rule 115 (empty -> .) ]
  ! ID              [ reduce using rule 115 (empty -> .) ]
  ! WHILE           [ reduce using rule 115 (empty -> .) ]
  ! FOR             [ reduce using rule 115 (empty -> .) ]
  ! DO              [ reduce using rule 115 (empty -> .) ]

    conditional                    shift and go to state 76
    do-while                       shift and go to state 78
    est                            shift and go to state 112
    for                            shift and go to state 80
    llamadaAFunct                  shift and go to state 81
    input                          shift and go to state 82
    assignment                     shift and go to state 84
    cycles                         shift and go to state 89
    while                          shift and go to state 90
    empty                          shift and go to state 91
    output                         shift and go to state 92
    declareLocal                   shift and go to state 93

state 77

    (77) while -> WHILE . LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY

    LEFTPAR         shift and go to state 113


state 78

    (75) cycles -> do-while .

    IF              reduce using rule 75 (cycles -> do-while .)
    DECLARE         reduce using rule 75 (cycles -> do-while .)
    READ            reduce using rule 75 (cycles -> do-while .)
    WRITE           reduce using rule 75 (cycles -> do-while .)
    ID              reduce using rule 75 (cycles -> do-while .)
    WHILE           reduce using rule 75 (cycles -> do-while .)
    FOR             reduce using rule 75 (cycles -> do-while .)
    DO              reduce using rule 75 (cycles -> do-while .)
    RIGHTKEY        reduce using rule 75 (cycles -> do-while .)
    RETURN          reduce using rule 75 (cycles -> do-while .)


state 79

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est . RIGHTKEY

    RIGHTKEY        shift and go to state 114


state 80

    (74) cycles -> for .

    IF              reduce using rule 74 (cycles -> for .)
    DECLARE         reduce using rule 74 (cycles -> for .)
    READ            reduce using rule 74 (cycles -> for .)
    WRITE           reduce using rule 74 (cycles -> for .)
    ID              reduce using rule 74 (cycles -> for .)
    WHILE           reduce using rule 74 (cycles -> for .)
    FOR             reduce using rule 74 (cycles -> for .)
    DO              reduce using rule 74 (cycles -> for .)
    RIGHTKEY        reduce using rule 74 (cycles -> for .)
    RETURN          reduce using rule 74 (cycles -> for .)


state 81

    (41) est -> llamadaAFunct . est
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (67) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (72) cycles -> . while
    (73) cycles -> . empty
    (74) cycles -> . for
    (75) cycles -> . do-while
    (114) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (110) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID quad1 ASSGN exp SEMICOLON
    (65) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (66) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (115) empty -> .
    (77) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (80) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (76) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 88
    DECLARE         shift and go to state 87
    READ            shift and go to state 75
    WRITE           shift and go to state 85
    ID              shift and go to state 86
    RIGHTKEY        reduce using rule 115 (empty -> .)
    RETURN          reduce using rule 115 (empty -> .)
    WHILE           shift and go to state 77
    FOR             shift and go to state 83
    DO              shift and go to state 74

  ! IF              [ reduce using rule 115 (empty -> .) ]
  ! DECLARE         [ reduce using rule 115 (empty -> .) ]
  ! READ            [ reduce using rule 115 (empty -> .) ]
  ! WRITE           [ reduce using rule 115 (empty -> .) ]
  ! ID              [ reduce using rule 115 (empty -> .) ]
  ! WHILE           [ reduce using rule 115 (empty -> .) ]
  ! FOR             [ reduce using rule 115 (empty -> .) ]
  ! DO              [ reduce using rule 115 (empty -> .) ]

    conditional                    shift and go to state 76
    do-while                       shift and go to state 78
    est                            shift and go to state 115
    for                            shift and go to state 80
    llamadaAFunct                  shift and go to state 81
    input                          shift and go to state 82
    assignment                     shift and go to state 84
    cycles                         shift and go to state 89
    while                          shift and go to state 90
    empty                          shift and go to state 91
    output                         shift and go to state 92
    declareLocal                   shift and go to state 93

state 82

    (38) est -> input . est
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (67) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (72) cycles -> . while
    (73) cycles -> . empty
    (74) cycles -> . for
    (75) cycles -> . do-while
    (114) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (110) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID quad1 ASSGN exp SEMICOLON
    (65) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (66) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (115) empty -> .
    (77) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (80) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (76) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 88
    DECLARE         shift and go to state 87
    READ            shift and go to state 75
    WRITE           shift and go to state 85
    ID              shift and go to state 86
    RIGHTKEY        reduce using rule 115 (empty -> .)
    RETURN          reduce using rule 115 (empty -> .)
    WHILE           shift and go to state 77
    FOR             shift and go to state 83
    DO              shift and go to state 74

  ! IF              [ reduce using rule 115 (empty -> .) ]
  ! DECLARE         [ reduce using rule 115 (empty -> .) ]
  ! READ            [ reduce using rule 115 (empty -> .) ]
  ! WRITE           [ reduce using rule 115 (empty -> .) ]
  ! ID              [ reduce using rule 115 (empty -> .) ]
  ! WHILE           [ reduce using rule 115 (empty -> .) ]
  ! FOR             [ reduce using rule 115 (empty -> .) ]
  ! DO              [ reduce using rule 115 (empty -> .) ]

    conditional                    shift and go to state 76
    do-while                       shift and go to state 78
    est                            shift and go to state 116
    for                            shift and go to state 80
    llamadaAFunct                  shift and go to state 81
    input                          shift and go to state 82
    assignment                     shift and go to state 84
    cycles                         shift and go to state 89
    while                          shift and go to state 90
    empty                          shift and go to state 91
    output                         shift and go to state 92
    declareLocal                   shift and go to state 93

state 83

    (80) for -> FOR . LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY

    LEFTPAR         shift and go to state 117


state 84

    (40) est -> assignment . est
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (67) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (72) cycles -> . while
    (73) cycles -> . empty
    (74) cycles -> . for
    (75) cycles -> . do-while
    (114) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (110) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID quad1 ASSGN exp SEMICOLON
    (65) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (66) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (115) empty -> .
    (77) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (80) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (76) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 88
    DECLARE         shift and go to state 87
    READ            shift and go to state 75
    WRITE           shift and go to state 85
    ID              shift and go to state 86
    RIGHTKEY        reduce using rule 115 (empty -> .)
    RETURN          reduce using rule 115 (empty -> .)
    WHILE           shift and go to state 77
    FOR             shift and go to state 83
    DO              shift and go to state 74

  ! IF              [ reduce using rule 115 (empty -> .) ]
  ! DECLARE         [ reduce using rule 115 (empty -> .) ]
  ! READ            [ reduce using rule 115 (empty -> .) ]
  ! WRITE           [ reduce using rule 115 (empty -> .) ]
  ! ID              [ reduce using rule 115 (empty -> .) ]
  ! WHILE           [ reduce using rule 115 (empty -> .) ]
  ! FOR             [ reduce using rule 115 (empty -> .) ]
  ! DO              [ reduce using rule 115 (empty -> .) ]

    conditional                    shift and go to state 76
    do-while                       shift and go to state 78
    est                            shift and go to state 118
    for                            shift and go to state 80
    llamadaAFunct                  shift and go to state 81
    input                          shift and go to state 82
    assignment                     shift and go to state 84
    cycles                         shift and go to state 89
    while                          shift and go to state 90
    empty                          shift and go to state 91
    output                         shift and go to state 92
    declareLocal                   shift and go to state 93

state 85

    (110) output -> WRITE . LEFTPAR output2 RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 119


state 86

    (63) assignment -> ID . quad1 ASSGN exp SEMICOLON
    (65) assignment -> ID . ASSGN llamadaAFunct SEMICOLON
    (43) llamadaAFunct -> ID . LEFTPAR llamadaAFunct2 RIGHTPAR
    (64) quad1 -> .

  ! shift/reduce conflict for ASSGN resolved as shift
    ASSGN           shift and go to state 120
    LEFTPAR         shift and go to state 122

  ! ASSGN           [ reduce using rule 64 (quad1 -> .) ]

    quad1                          shift and go to state 121

state 87

    (49) declareLocal -> DECLARE . declareRecursivoLocal
    (50) declareRecursivoLocal -> . type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (58) declareRecursivoLocal -> . empty
    (27) type -> . type2
    (115) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    IF              reduce using rule 115 (empty -> .)
    DECLARE         reduce using rule 115 (empty -> .)
    READ            reduce using rule 115 (empty -> .)
    WRITE           reduce using rule 115 (empty -> .)
    ID              reduce using rule 115 (empty -> .)
    WHILE           reduce using rule 115 (empty -> .)
    FOR             reduce using rule 115 (empty -> .)
    DO              reduce using rule 115 (empty -> .)
    RIGHTKEY        reduce using rule 115 (empty -> .)
    RETURN          reduce using rule 115 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    declareRecursivoLocal          shift and go to state 123
    type2                          shift and go to state 19
    type                           shift and go to state 124
    empty                          shift and go to state 125

state 88

    (67) conditional -> IF . LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse

    LEFTPAR         shift and go to state 126


state 89

    (37) est -> cycles . est
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (67) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (72) cycles -> . while
    (73) cycles -> . empty
    (74) cycles -> . for
    (75) cycles -> . do-while
    (114) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (110) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID quad1 ASSGN exp SEMICOLON
    (65) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (66) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (115) empty -> .
    (77) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (80) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (76) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 88
    DECLARE         shift and go to state 87
    READ            shift and go to state 75
    WRITE           shift and go to state 85
    ID              shift and go to state 86
    RIGHTKEY        reduce using rule 115 (empty -> .)
    RETURN          reduce using rule 115 (empty -> .)
    WHILE           shift and go to state 77
    FOR             shift and go to state 83
    DO              shift and go to state 74

  ! IF              [ reduce using rule 115 (empty -> .) ]
  ! DECLARE         [ reduce using rule 115 (empty -> .) ]
  ! READ            [ reduce using rule 115 (empty -> .) ]
  ! WRITE           [ reduce using rule 115 (empty -> .) ]
  ! ID              [ reduce using rule 115 (empty -> .) ]
  ! WHILE           [ reduce using rule 115 (empty -> .) ]
  ! FOR             [ reduce using rule 115 (empty -> .) ]
  ! DO              [ reduce using rule 115 (empty -> .) ]

    conditional                    shift and go to state 76
    do-while                       shift and go to state 78
    est                            shift and go to state 127
    for                            shift and go to state 80
    llamadaAFunct                  shift and go to state 81
    input                          shift and go to state 82
    assignment                     shift and go to state 84
    cycles                         shift and go to state 89
    while                          shift and go to state 90
    empty                          shift and go to state 91
    output                         shift and go to state 92
    declareLocal                   shift and go to state 93

state 90

    (72) cycles -> while .

    IF              reduce using rule 72 (cycles -> while .)
    DECLARE         reduce using rule 72 (cycles -> while .)
    READ            reduce using rule 72 (cycles -> while .)
    WRITE           reduce using rule 72 (cycles -> while .)
    ID              reduce using rule 72 (cycles -> while .)
    WHILE           reduce using rule 72 (cycles -> while .)
    FOR             reduce using rule 72 (cycles -> while .)
    DO              reduce using rule 72 (cycles -> while .)
    RIGHTKEY        reduce using rule 72 (cycles -> while .)
    RETURN          reduce using rule 72 (cycles -> while .)


state 91

    (42) est -> empty .
    (59) declareLocal -> empty .
    (73) cycles -> empty .
    (66) assignment -> empty .
    (44) llamadaAFunct -> empty .

  ! reduce/reduce conflict for RIGHTKEY resolved using rule 42 (est -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 42 (est -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for DECLARE resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for READ resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for WRITE resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for DO resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 42 (est -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 42 (est -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for DECLARE resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for READ resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for WRITE resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for DO resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 42 (est -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 42 (est -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 44 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for DECLARE resolved using rule 44 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for READ resolved using rule 44 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for WRITE resolved using rule 44 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 44 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 44 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 44 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for DO resolved using rule 44 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 42 (est -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 42 (est -> empty .)
    RIGHTKEY        reduce using rule 42 (est -> empty .)
    RETURN          reduce using rule 42 (est -> empty .)
    IF              reduce using rule 44 (llamadaAFunct -> empty .)
    DECLARE         reduce using rule 44 (llamadaAFunct -> empty .)
    READ            reduce using rule 44 (llamadaAFunct -> empty .)
    WRITE           reduce using rule 44 (llamadaAFunct -> empty .)
    ID              reduce using rule 44 (llamadaAFunct -> empty .)
    WHILE           reduce using rule 44 (llamadaAFunct -> empty .)
    FOR             reduce using rule 44 (llamadaAFunct -> empty .)
    DO              reduce using rule 44 (llamadaAFunct -> empty .)

  ! IF              [ reduce using rule 59 (declareLocal -> empty .) ]
  ! DECLARE         [ reduce using rule 59 (declareLocal -> empty .) ]
  ! READ            [ reduce using rule 59 (declareLocal -> empty .) ]
  ! WRITE           [ reduce using rule 59 (declareLocal -> empty .) ]
  ! ID              [ reduce using rule 59 (declareLocal -> empty .) ]
  ! WHILE           [ reduce using rule 59 (declareLocal -> empty .) ]
  ! FOR             [ reduce using rule 59 (declareLocal -> empty .) ]
  ! DO              [ reduce using rule 59 (declareLocal -> empty .) ]
  ! RIGHTKEY        [ reduce using rule 59 (declareLocal -> empty .) ]
  ! RETURN          [ reduce using rule 59 (declareLocal -> empty .) ]
  ! IF              [ reduce using rule 73 (cycles -> empty .) ]
  ! DECLARE         [ reduce using rule 73 (cycles -> empty .) ]
  ! READ            [ reduce using rule 73 (cycles -> empty .) ]
  ! WRITE           [ reduce using rule 73 (cycles -> empty .) ]
  ! ID              [ reduce using rule 73 (cycles -> empty .) ]
  ! WHILE           [ reduce using rule 73 (cycles -> empty .) ]
  ! FOR             [ reduce using rule 73 (cycles -> empty .) ]
  ! DO              [ reduce using rule 73 (cycles -> empty .) ]
  ! RIGHTKEY        [ reduce using rule 73 (cycles -> empty .) ]
  ! RETURN          [ reduce using rule 73 (cycles -> empty .) ]
  ! IF              [ reduce using rule 66 (assignment -> empty .) ]
  ! DECLARE         [ reduce using rule 66 (assignment -> empty .) ]
  ! READ            [ reduce using rule 66 (assignment -> empty .) ]
  ! WRITE           [ reduce using rule 66 (assignment -> empty .) ]
  ! ID              [ reduce using rule 66 (assignment -> empty .) ]
  ! WHILE           [ reduce using rule 66 (assignment -> empty .) ]
  ! FOR             [ reduce using rule 66 (assignment -> empty .) ]
  ! DO              [ reduce using rule 66 (assignment -> empty .) ]
  ! RIGHTKEY        [ reduce using rule 66 (assignment -> empty .) ]
  ! RETURN          [ reduce using rule 66 (assignment -> empty .) ]
  ! RIGHTKEY        [ reduce using rule 44 (llamadaAFunct -> empty .) ]
  ! RETURN          [ reduce using rule 44 (llamadaAFunct -> empty .) ]


state 92

    (39) est -> output . est
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (67) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (72) cycles -> . while
    (73) cycles -> . empty
    (74) cycles -> . for
    (75) cycles -> . do-while
    (114) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (110) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID quad1 ASSGN exp SEMICOLON
    (65) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (66) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (115) empty -> .
    (77) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (80) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (76) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 88
    DECLARE         shift and go to state 87
    READ            shift and go to state 75
    WRITE           shift and go to state 85
    ID              shift and go to state 86
    RIGHTKEY        reduce using rule 115 (empty -> .)
    RETURN          reduce using rule 115 (empty -> .)
    WHILE           shift and go to state 77
    FOR             shift and go to state 83
    DO              shift and go to state 74

  ! IF              [ reduce using rule 115 (empty -> .) ]
  ! DECLARE         [ reduce using rule 115 (empty -> .) ]
  ! READ            [ reduce using rule 115 (empty -> .) ]
  ! WRITE           [ reduce using rule 115 (empty -> .) ]
  ! ID              [ reduce using rule 115 (empty -> .) ]
  ! WHILE           [ reduce using rule 115 (empty -> .) ]
  ! FOR             [ reduce using rule 115 (empty -> .) ]
  ! DO              [ reduce using rule 115 (empty -> .) ]

    conditional                    shift and go to state 76
    do-while                       shift and go to state 78
    est                            shift and go to state 128
    for                            shift and go to state 80
    llamadaAFunct                  shift and go to state 81
    input                          shift and go to state 82
    assignment                     shift and go to state 84
    cycles                         shift and go to state 89
    while                          shift and go to state 90
    empty                          shift and go to state 91
    output                         shift and go to state 92
    declareLocal                   shift and go to state 93

state 93

    (36) est -> declareLocal . est
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (67) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (72) cycles -> . while
    (73) cycles -> . empty
    (74) cycles -> . for
    (75) cycles -> . do-while
    (114) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (110) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID quad1 ASSGN exp SEMICOLON
    (65) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (66) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (115) empty -> .
    (77) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (80) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (76) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 88
    DECLARE         shift and go to state 87
    READ            shift and go to state 75
    WRITE           shift and go to state 85
    ID              shift and go to state 86
    RIGHTKEY        reduce using rule 115 (empty -> .)
    RETURN          reduce using rule 115 (empty -> .)
    WHILE           shift and go to state 77
    FOR             shift and go to state 83
    DO              shift and go to state 74

  ! IF              [ reduce using rule 115 (empty -> .) ]
  ! DECLARE         [ reduce using rule 115 (empty -> .) ]
  ! READ            [ reduce using rule 115 (empty -> .) ]
  ! WRITE           [ reduce using rule 115 (empty -> .) ]
  ! ID              [ reduce using rule 115 (empty -> .) ]
  ! WHILE           [ reduce using rule 115 (empty -> .) ]
  ! FOR             [ reduce using rule 115 (empty -> .) ]
  ! DO              [ reduce using rule 115 (empty -> .) ]

    conditional                    shift and go to state 76
    do-while                       shift and go to state 78
    est                            shift and go to state 129
    for                            shift and go to state 80
    llamadaAFunct                  shift and go to state 81
    input                          shift and go to state 82
    assignment                     shift and go to state 84
    declareLocal                   shift and go to state 93
    while                          shift and go to state 90
    empty                          shift and go to state 91
    output                         shift and go to state 92
    cycles                         shift and go to state 89

state 94

    (103) exp2 -> AND exp .

    LEFTBRACK       reduce using rule 103 (exp2 -> AND exp .)
    COMMA           reduce using rule 103 (exp2 -> AND exp .)
    SEMICOLON       reduce using rule 103 (exp2 -> AND exp .)
    RIGHTBRACK      reduce using rule 103 (exp2 -> AND exp .)
    ID              reduce using rule 103 (exp2 -> AND exp .)
    INTEGER         reduce using rule 103 (exp2 -> AND exp .)
    RIGHTPAR        reduce using rule 103 (exp2 -> AND exp .)


state 95

    (108) exp2 -> DIVIDE exp .

    LEFTBRACK       reduce using rule 108 (exp2 -> DIVIDE exp .)
    COMMA           reduce using rule 108 (exp2 -> DIVIDE exp .)
    SEMICOLON       reduce using rule 108 (exp2 -> DIVIDE exp .)
    RIGHTBRACK      reduce using rule 108 (exp2 -> DIVIDE exp .)
    ID              reduce using rule 108 (exp2 -> DIVIDE exp .)
    INTEGER         reduce using rule 108 (exp2 -> DIVIDE exp .)
    RIGHTPAR        reduce using rule 108 (exp2 -> DIVIDE exp .)


state 96

    (99) exp2 -> LESS exp .

    LEFTBRACK       reduce using rule 99 (exp2 -> LESS exp .)
    COMMA           reduce using rule 99 (exp2 -> LESS exp .)
    SEMICOLON       reduce using rule 99 (exp2 -> LESS exp .)
    RIGHTBRACK      reduce using rule 99 (exp2 -> LESS exp .)
    ID              reduce using rule 99 (exp2 -> LESS exp .)
    INTEGER         reduce using rule 99 (exp2 -> LESS exp .)
    RIGHTPAR        reduce using rule 99 (exp2 -> LESS exp .)


state 97

    (102) exp2 -> NOTEQ exp .

    LEFTBRACK       reduce using rule 102 (exp2 -> NOTEQ exp .)
    COMMA           reduce using rule 102 (exp2 -> NOTEQ exp .)
    SEMICOLON       reduce using rule 102 (exp2 -> NOTEQ exp .)
    RIGHTBRACK      reduce using rule 102 (exp2 -> NOTEQ exp .)
    ID              reduce using rule 102 (exp2 -> NOTEQ exp .)
    INTEGER         reduce using rule 102 (exp2 -> NOTEQ exp .)
    RIGHTPAR        reduce using rule 102 (exp2 -> NOTEQ exp .)


state 98

    (105) exp2 -> SUM exp .

    LEFTBRACK       reduce using rule 105 (exp2 -> SUM exp .)
    COMMA           reduce using rule 105 (exp2 -> SUM exp .)
    SEMICOLON       reduce using rule 105 (exp2 -> SUM exp .)
    RIGHTBRACK      reduce using rule 105 (exp2 -> SUM exp .)
    ID              reduce using rule 105 (exp2 -> SUM exp .)
    INTEGER         reduce using rule 105 (exp2 -> SUM exp .)
    RIGHTPAR        reduce using rule 105 (exp2 -> SUM exp .)


state 99

    (106) exp2 -> MINUS exp .

    LEFTBRACK       reduce using rule 106 (exp2 -> MINUS exp .)
    COMMA           reduce using rule 106 (exp2 -> MINUS exp .)
    SEMICOLON       reduce using rule 106 (exp2 -> MINUS exp .)
    RIGHTBRACK      reduce using rule 106 (exp2 -> MINUS exp .)
    ID              reduce using rule 106 (exp2 -> MINUS exp .)
    INTEGER         reduce using rule 106 (exp2 -> MINUS exp .)
    RIGHTPAR        reduce using rule 106 (exp2 -> MINUS exp .)


state 100

    (100) exp2 -> GRTR exp .

    LEFTBRACK       reduce using rule 100 (exp2 -> GRTR exp .)
    COMMA           reduce using rule 100 (exp2 -> GRTR exp .)
    SEMICOLON       reduce using rule 100 (exp2 -> GRTR exp .)
    RIGHTBRACK      reduce using rule 100 (exp2 -> GRTR exp .)
    ID              reduce using rule 100 (exp2 -> GRTR exp .)
    INTEGER         reduce using rule 100 (exp2 -> GRTR exp .)
    RIGHTPAR        reduce using rule 100 (exp2 -> GRTR exp .)


state 101

    (107) exp2 -> MULTP exp .

    LEFTBRACK       reduce using rule 107 (exp2 -> MULTP exp .)
    COMMA           reduce using rule 107 (exp2 -> MULTP exp .)
    SEMICOLON       reduce using rule 107 (exp2 -> MULTP exp .)
    RIGHTBRACK      reduce using rule 107 (exp2 -> MULTP exp .)
    ID              reduce using rule 107 (exp2 -> MULTP exp .)
    INTEGER         reduce using rule 107 (exp2 -> MULTP exp .)
    RIGHTPAR        reduce using rule 107 (exp2 -> MULTP exp .)


state 102

    (101) exp2 -> EQ exp .

    LEFTBRACK       reduce using rule 101 (exp2 -> EQ exp .)
    COMMA           reduce using rule 101 (exp2 -> EQ exp .)
    SEMICOLON       reduce using rule 101 (exp2 -> EQ exp .)
    RIGHTBRACK      reduce using rule 101 (exp2 -> EQ exp .)
    ID              reduce using rule 101 (exp2 -> EQ exp .)
    INTEGER         reduce using rule 101 (exp2 -> EQ exp .)
    RIGHTPAR        reduce using rule 101 (exp2 -> EQ exp .)


state 103

    (104) exp2 -> OR exp .

    LEFTBRACK       reduce using rule 104 (exp2 -> OR exp .)
    COMMA           reduce using rule 104 (exp2 -> OR exp .)
    SEMICOLON       reduce using rule 104 (exp2 -> OR exp .)
    RIGHTBRACK      reduce using rule 104 (exp2 -> OR exp .)
    ID              reduce using rule 104 (exp2 -> OR exp .)
    INTEGER         reduce using rule 104 (exp2 -> OR exp .)
    RIGHTPAR        reduce using rule 104 (exp2 -> OR exp .)


state 104

    (53) number2 -> DOT INTEGER .

    LESS            reduce using rule 53 (number2 -> DOT INTEGER .)
    GRTR            reduce using rule 53 (number2 -> DOT INTEGER .)
    EQ              reduce using rule 53 (number2 -> DOT INTEGER .)
    NOTEQ           reduce using rule 53 (number2 -> DOT INTEGER .)
    AND             reduce using rule 53 (number2 -> DOT INTEGER .)
    OR              reduce using rule 53 (number2 -> DOT INTEGER .)
    SUM             reduce using rule 53 (number2 -> DOT INTEGER .)
    MINUS           reduce using rule 53 (number2 -> DOT INTEGER .)
    MULTP           reduce using rule 53 (number2 -> DOT INTEGER .)
    DIVIDE          reduce using rule 53 (number2 -> DOT INTEGER .)
    LEFTBRACK       reduce using rule 53 (number2 -> DOT INTEGER .)
    COMMA           reduce using rule 53 (number2 -> DOT INTEGER .)
    SEMICOLON       reduce using rule 53 (number2 -> DOT INTEGER .)
    RIGHTBRACK      reduce using rule 53 (number2 -> DOT INTEGER .)
    ID              reduce using rule 53 (number2 -> DOT INTEGER .)
    INTEGER         reduce using rule 53 (number2 -> DOT INTEGER .)
    RIGHTPAR        reduce using rule 53 (number2 -> DOT INTEGER .)


state 105

    (25) array -> LEFTBRACK exp RIGHTBRACK . array
    (25) array -> . LEFTBRACK exp RIGHTBRACK array
    (26) array -> . empty
    (115) empty -> .

    LEFTBRACK       shift and go to state 45
    COMMA           reduce using rule 115 (empty -> .)
    SEMICOLON       reduce using rule 115 (empty -> .)

    array                          shift and go to state 130
    empty                          shift and go to state 48

state 106

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON . declareRecursivo
    (8) declareRecursivo -> . type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
    (23) declareRecursivo -> . empty
    (27) type -> . type2
    (115) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    FUNCTION        reduce using rule 115 (empty -> .)
    MAIN            reduce using rule 115 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    declareRecursivo               shift and go to state 131
    type                           shift and go to state 17
    empty                          shift and go to state 18
    type2                          shift and go to state 19

state 107

    (10) declare3 -> COMMA ID . altaVarGlobal declare3
    (22) altaVarGlobal -> .

    COMMA           reduce using rule 22 (altaVarGlobal -> .)
    SEMICOLON       reduce using rule 22 (altaVarGlobal -> .)

    altaVarGlobal                  shift and go to state 132

state 108

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR . LEFTKEY est functReturn RIGHTKEY

    LEFTKEY         shift and go to state 133


state 109

    (17) funct2 -> type ID . altaVarLocal funct3
    (62) altaVarLocal -> .

    COMMA           reduce using rule 62 (altaVarLocal -> .)
    RIGHTPAR        reduce using rule 62 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 134

state 110

    (76) do-while -> DO LEFTKEY . est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (67) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (72) cycles -> . while
    (73) cycles -> . empty
    (74) cycles -> . for
    (75) cycles -> . do-while
    (114) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (110) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID quad1 ASSGN exp SEMICOLON
    (65) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (66) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (115) empty -> .
    (77) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (80) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (76) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 88
    DECLARE         shift and go to state 87
    READ            shift and go to state 75
    WRITE           shift and go to state 85
    ID              shift and go to state 86
    RIGHTKEY        reduce using rule 115 (empty -> .)
    WHILE           shift and go to state 77
    FOR             shift and go to state 83
    DO              shift and go to state 74

  ! IF              [ reduce using rule 115 (empty -> .) ]
  ! DECLARE         [ reduce using rule 115 (empty -> .) ]
  ! READ            [ reduce using rule 115 (empty -> .) ]
  ! WRITE           [ reduce using rule 115 (empty -> .) ]
  ! ID              [ reduce using rule 115 (empty -> .) ]
  ! WHILE           [ reduce using rule 115 (empty -> .) ]
  ! FOR             [ reduce using rule 115 (empty -> .) ]
  ! DO              [ reduce using rule 115 (empty -> .) ]

    conditional                    shift and go to state 76
    do-while                       shift and go to state 78
    est                            shift and go to state 135
    for                            shift and go to state 80
    llamadaAFunct                  shift and go to state 81
    input                          shift and go to state 82
    assignment                     shift and go to state 84
    cycles                         shift and go to state 89
    while                          shift and go to state 90
    empty                          shift and go to state 91
    output                         shift and go to state 92
    declareLocal                   shift and go to state 93

state 111

    (114) input -> READ LEFTPAR . ID RIGHTPAR SEMICOLON

    ID              shift and go to state 136


state 112

    (35) est -> conditional est .

    RIGHTKEY        reduce using rule 35 (est -> conditional est .)
    RETURN          reduce using rule 35 (est -> conditional est .)


state 113

    (77) while -> WHILE LEFTPAR . while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (78) while2 -> . exp while2
    (79) while2 -> . empty
    (96) exp -> . ID exp2
    (97) exp -> . number exp2
    (98) exp -> . empty
    (115) empty -> .
    (52) number -> . INTEGER number2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    RIGHTPAR        reduce using rule 115 (empty -> .)
    INTEGER         shift and go to state 42

  ! ID              [ reduce using rule 115 (empty -> .) ]
  ! INTEGER         [ reduce using rule 115 (empty -> .) ]

    number                         shift and go to state 40
    while2                         shift and go to state 137
    exp                            shift and go to state 138
    empty                          shift and go to state 139

state 114

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY .

    END             reduce using rule 33 (cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY .)


state 115

    (41) est -> llamadaAFunct est .

    RIGHTKEY        reduce using rule 41 (est -> llamadaAFunct est .)
    RETURN          reduce using rule 41 (est -> llamadaAFunct est .)


state 116

    (38) est -> input est .

    RIGHTKEY        reduce using rule 38 (est -> input est .)
    RETURN          reduce using rule 38 (est -> input est .)


state 117

    (80) for -> FOR LEFTPAR . for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (81) for2 -> . ID ASSGN number for3

    ID              shift and go to state 141

    for2                           shift and go to state 140

state 118

    (40) est -> assignment est .

    RIGHTKEY        reduce using rule 40 (est -> assignment est .)
    RETURN          reduce using rule 40 (est -> assignment est .)


state 119

    (110) output -> WRITE LEFTPAR . output2 RIGHTPAR SEMICOLON
    (111) output2 -> . ID output2
    (112) output2 -> . QUOTE ID QUOTE output2
    (113) output2 -> . empty
    (115) empty -> .

    ID              shift and go to state 144
    QUOTE           shift and go to state 143
    RIGHTPAR        reduce using rule 115 (empty -> .)

    output2                        shift and go to state 142
    empty                          shift and go to state 145

state 120

    (65) assignment -> ID ASSGN . llamadaAFunct SEMICOLON
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (115) empty -> .

    ID              shift and go to state 147
    SEMICOLON       reduce using rule 115 (empty -> .)

    llamadaAFunct                  shift and go to state 146
    empty                          shift and go to state 148

state 121

    (63) assignment -> ID quad1 . ASSGN exp SEMICOLON

    ASSGN           shift and go to state 149


state 122

    (43) llamadaAFunct -> ID LEFTPAR . llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct2 -> . ID llamadaAFunct3
    (48) llamadaAFunct2 -> . empty
    (115) empty -> .

    ID              shift and go to state 151
    RIGHTPAR        reduce using rule 115 (empty -> .)

    llamadaAFunct2                 shift and go to state 150
    empty                          shift and go to state 152

state 123

    (49) declareLocal -> DECLARE declareRecursivoLocal .

    IF              reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)
    DECLARE         reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)
    READ            reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)
    WRITE           reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)
    ID              reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)
    WHILE           reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)
    FOR             reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)
    DO              reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)
    RIGHTKEY        reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)
    RETURN          reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)


state 124

    (50) declareRecursivoLocal -> type . ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal

    ID              shift and go to state 153


state 125

    (58) declareRecursivoLocal -> empty .

    IF              reduce using rule 58 (declareRecursivoLocal -> empty .)
    DECLARE         reduce using rule 58 (declareRecursivoLocal -> empty .)
    READ            reduce using rule 58 (declareRecursivoLocal -> empty .)
    WRITE           reduce using rule 58 (declareRecursivoLocal -> empty .)
    ID              reduce using rule 58 (declareRecursivoLocal -> empty .)
    WHILE           reduce using rule 58 (declareRecursivoLocal -> empty .)
    FOR             reduce using rule 58 (declareRecursivoLocal -> empty .)
    DO              reduce using rule 58 (declareRecursivoLocal -> empty .)
    RIGHTKEY        reduce using rule 58 (declareRecursivoLocal -> empty .)
    RETURN          reduce using rule 58 (declareRecursivoLocal -> empty .)


state 126

    (67) conditional -> IF LEFTPAR . conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (70) conditional2 -> . exp conditional2
    (71) conditional2 -> . empty
    (96) exp -> . ID exp2
    (97) exp -> . number exp2
    (98) exp -> . empty
    (115) empty -> .
    (52) number -> . INTEGER number2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    RIGHTPAR        reduce using rule 115 (empty -> .)
    INTEGER         shift and go to state 42

  ! ID              [ reduce using rule 115 (empty -> .) ]
  ! INTEGER         [ reduce using rule 115 (empty -> .) ]

    number                         shift and go to state 40
    conditional2                   shift and go to state 156
    exp                            shift and go to state 155
    empty                          shift and go to state 154

state 127

    (37) est -> cycles est .

    RIGHTKEY        reduce using rule 37 (est -> cycles est .)
    RETURN          reduce using rule 37 (est -> cycles est .)


state 128

    (39) est -> output est .

    RIGHTKEY        reduce using rule 39 (est -> output est .)
    RETURN          reduce using rule 39 (est -> output est .)


state 129

    (36) est -> declareLocal est .

    RIGHTKEY        reduce using rule 36 (est -> declareLocal est .)
    RETURN          reduce using rule 36 (est -> declareLocal est .)


state 130

    (25) array -> LEFTBRACK exp RIGHTBRACK array .

    COMMA           reduce using rule 25 (array -> LEFTBRACK exp RIGHTBRACK array .)
    SEMICOLON       reduce using rule 25 (array -> LEFTBRACK exp RIGHTBRACK array .)


state 131

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo .

    FUNCTION        reduce using rule 8 (declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo .)
    MAIN            reduce using rule 8 (declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo .)


state 132

    (10) declare3 -> COMMA ID altaVarGlobal . declare3
    (10) declare3 -> . COMMA ID altaVarGlobal declare3
    (24) declare3 -> . empty
    (115) empty -> .

    COMMA           shift and go to state 69
    SEMICOLON       reduce using rule 115 (empty -> .)

    empty                          shift and go to state 70
    declare3                       shift and go to state 157

state 133

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY . est functReturn RIGHTKEY
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (67) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (72) cycles -> . while
    (73) cycles -> . empty
    (74) cycles -> . for
    (75) cycles -> . do-while
    (114) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (110) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID quad1 ASSGN exp SEMICOLON
    (65) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (66) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (115) empty -> .
    (77) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (80) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (76) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 88
    DECLARE         shift and go to state 87
    READ            shift and go to state 75
    WRITE           shift and go to state 85
    ID              shift and go to state 86
    RETURN          reduce using rule 115 (empty -> .)
    RIGHTKEY        reduce using rule 115 (empty -> .)
    WHILE           shift and go to state 77
    FOR             shift and go to state 83
    DO              shift and go to state 74

  ! IF              [ reduce using rule 115 (empty -> .) ]
  ! DECLARE         [ reduce using rule 115 (empty -> .) ]
  ! READ            [ reduce using rule 115 (empty -> .) ]
  ! WRITE           [ reduce using rule 115 (empty -> .) ]
  ! ID              [ reduce using rule 115 (empty -> .) ]
  ! WHILE           [ reduce using rule 115 (empty -> .) ]
  ! FOR             [ reduce using rule 115 (empty -> .) ]
  ! DO              [ reduce using rule 115 (empty -> .) ]

    conditional                    shift and go to state 76
    do-while                       shift and go to state 78
    est                            shift and go to state 158
    for                            shift and go to state 80
    llamadaAFunct                  shift and go to state 81
    input                          shift and go to state 82
    assignment                     shift and go to state 84
    cycles                         shift and go to state 89
    while                          shift and go to state 90
    empty                          shift and go to state 91
    output                         shift and go to state 92
    declareLocal                   shift and go to state 93

state 134

    (17) funct2 -> type ID altaVarLocal . funct3
    (18) funct3 -> . COMMA type ID altaVarLocal funct3
    (20) funct3 -> . empty
    (115) empty -> .

    COMMA           shift and go to state 160
    RIGHTPAR        reduce using rule 115 (empty -> .)

    funct3                         shift and go to state 159
    empty                          shift and go to state 161

state 135

    (76) do-while -> DO LEFTKEY est . RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    RIGHTKEY        shift and go to state 162


state 136

    (114) input -> READ LEFTPAR ID . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 163


state 137

    (77) while -> WHILE LEFTPAR while2 . RIGHTPAR LEFTKEY est RIGHTKEY

    RIGHTPAR        shift and go to state 164


state 138

    (78) while2 -> exp . while2
    (78) while2 -> . exp while2
    (79) while2 -> . empty
    (96) exp -> . ID exp2
    (97) exp -> . number exp2
    (98) exp -> . empty
    (115) empty -> .
    (52) number -> . INTEGER number2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    RIGHTPAR        reduce using rule 115 (empty -> .)
    INTEGER         shift and go to state 42

  ! ID              [ reduce using rule 115 (empty -> .) ]
  ! INTEGER         [ reduce using rule 115 (empty -> .) ]

    number                         shift and go to state 40
    while2                         shift and go to state 165
    exp                            shift and go to state 138
    empty                          shift and go to state 139

state 139

    (79) while2 -> empty .
    (98) exp -> empty .

  ! reduce/reduce conflict for RIGHTPAR resolved using rule 79 (while2 -> empty .)
    RIGHTPAR        reduce using rule 79 (while2 -> empty .)
    ID              reduce using rule 98 (exp -> empty .)
    INTEGER         reduce using rule 98 (exp -> empty .)

  ! RIGHTPAR        [ reduce using rule 98 (exp -> empty .) ]


state 140

    (80) for -> FOR LEFTPAR for2 . SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY

    SEMICOLON       shift and go to state 166


state 141

    (81) for2 -> ID . ASSGN number for3

    ASSGN           shift and go to state 167


state 142

    (110) output -> WRITE LEFTPAR output2 . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 168


state 143

    (112) output2 -> QUOTE . ID QUOTE output2

    ID              shift and go to state 169


state 144

    (111) output2 -> ID . output2
    (111) output2 -> . ID output2
    (112) output2 -> . QUOTE ID QUOTE output2
    (113) output2 -> . empty
    (115) empty -> .

    ID              shift and go to state 144
    QUOTE           shift and go to state 143
    RIGHTPAR        reduce using rule 115 (empty -> .)

    output2                        shift and go to state 170
    empty                          shift and go to state 145

state 145

    (113) output2 -> empty .

    RIGHTPAR        reduce using rule 113 (output2 -> empty .)


state 146

    (65) assignment -> ID ASSGN llamadaAFunct . SEMICOLON

    SEMICOLON       shift and go to state 171


state 147

    (43) llamadaAFunct -> ID . LEFTPAR llamadaAFunct2 RIGHTPAR

    LEFTPAR         shift and go to state 122


state 148

    (44) llamadaAFunct -> empty .

    SEMICOLON       reduce using rule 44 (llamadaAFunct -> empty .)


state 149

    (63) assignment -> ID quad1 ASSGN . exp SEMICOLON
    (96) exp -> . ID exp2
    (97) exp -> . number exp2
    (98) exp -> . empty
    (52) number -> . INTEGER number2
    (115) empty -> .

    ID              shift and go to state 43
    INTEGER         shift and go to state 42
    SEMICOLON       reduce using rule 115 (empty -> .)

    number                         shift and go to state 40
    exp                            shift and go to state 172
    empty                          shift and go to state 44

state 150

    (43) llamadaAFunct -> ID LEFTPAR llamadaAFunct2 . RIGHTPAR

    RIGHTPAR        shift and go to state 173


state 151

    (45) llamadaAFunct2 -> ID . llamadaAFunct3
    (46) llamadaAFunct3 -> . COMMA ID
    (47) llamadaAFunct3 -> . empty
    (115) empty -> .

    COMMA           shift and go to state 175
    RIGHTPAR        reduce using rule 115 (empty -> .)

    llamadaAFunct3                 shift and go to state 174
    empty                          shift and go to state 176

state 152

    (48) llamadaAFunct2 -> empty .

    RIGHTPAR        reduce using rule 48 (llamadaAFunct2 -> empty .)


state 153

    (50) declareRecursivoLocal -> type ID . altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (62) altaVarLocal -> .

    ASSGN           reduce using rule 62 (altaVarLocal -> .)
    LEFTBRACK       reduce using rule 62 (altaVarLocal -> .)
    COMMA           reduce using rule 62 (altaVarLocal -> .)
    SEMICOLON       reduce using rule 62 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 177

state 154

    (71) conditional2 -> empty .
    (98) exp -> empty .

  ! reduce/reduce conflict for RIGHTPAR resolved using rule 71 (conditional2 -> empty .)
    RIGHTPAR        reduce using rule 71 (conditional2 -> empty .)
    ID              reduce using rule 98 (exp -> empty .)
    INTEGER         reduce using rule 98 (exp -> empty .)

  ! RIGHTPAR        [ reduce using rule 98 (exp -> empty .) ]


state 155

    (70) conditional2 -> exp . conditional2
    (70) conditional2 -> . exp conditional2
    (71) conditional2 -> . empty
    (96) exp -> . ID exp2
    (97) exp -> . number exp2
    (98) exp -> . empty
    (115) empty -> .
    (52) number -> . INTEGER number2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    RIGHTPAR        reduce using rule 115 (empty -> .)
    INTEGER         shift and go to state 42

  ! ID              [ reduce using rule 115 (empty -> .) ]
  ! INTEGER         [ reduce using rule 115 (empty -> .) ]

    number                         shift and go to state 40
    conditional2                   shift and go to state 178
    exp                            shift and go to state 155
    empty                          shift and go to state 154

state 156

    (67) conditional -> IF LEFTPAR conditional2 . RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse

    RIGHTPAR        shift and go to state 179


state 157

    (10) declare3 -> COMMA ID altaVarGlobal declare3 .

    SEMICOLON       reduce using rule 10 (declare3 -> COMMA ID altaVarGlobal declare3 .)


state 158

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est . functReturn RIGHTKEY
    (13) functReturn -> . RETURN NUMBER SEMICOLON
    (14) functReturn -> . RETURN ID SEMICOLON
    (15) functReturn -> . empty
    (115) empty -> .

    RETURN          shift and go to state 180
    RIGHTKEY        reduce using rule 115 (empty -> .)

    functReturn                    shift and go to state 181
    empty                          shift and go to state 182

state 159

    (17) funct2 -> type ID altaVarLocal funct3 .

    RIGHTPAR        reduce using rule 17 (funct2 -> type ID altaVarLocal funct3 .)


state 160

    (18) funct3 -> COMMA . type ID altaVarLocal funct3
    (27) type -> . type2
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    type                           shift and go to state 183
    type2                          shift and go to state 19

state 161

    (20) funct3 -> empty .

    RIGHTPAR        reduce using rule 20 (funct3 -> empty .)


state 162

    (76) do-while -> DO LEFTKEY est RIGHTKEY . WHILE LEFTPAR while2 RIGHTPAR

    WHILE           shift and go to state 184


state 163

    (114) input -> READ LEFTPAR ID RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 185


state 164

    (77) while -> WHILE LEFTPAR while2 RIGHTPAR . LEFTKEY est RIGHTKEY

    LEFTKEY         shift and go to state 186


state 165

    (78) while2 -> exp while2 .

    RIGHTPAR        reduce using rule 78 (while2 -> exp while2 .)


state 166

    (80) for -> FOR LEFTPAR for2 SEMICOLON . for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (84) for4 -> . expFor
    (87) expFor -> . ID expFor2
    (88) expFor -> . number
    (52) number -> . INTEGER number2

    ID              shift and go to state 189
    INTEGER         shift and go to state 42

    number                         shift and go to state 187
    expFor                         shift and go to state 188
    for4                           shift and go to state 190

state 167

    (81) for2 -> ID ASSGN . number for3
    (52) number -> . INTEGER number2

    INTEGER         shift and go to state 42

    number                         shift and go to state 191

state 168

    (110) output -> WRITE LEFTPAR output2 RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 192


state 169

    (112) output2 -> QUOTE ID . QUOTE output2

    QUOTE           shift and go to state 193


state 170

    (111) output2 -> ID output2 .

    RIGHTPAR        reduce using rule 111 (output2 -> ID output2 .)


state 171

    (65) assignment -> ID ASSGN llamadaAFunct SEMICOLON .

    IF              reduce using rule 65 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)
    DECLARE         reduce using rule 65 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)
    READ            reduce using rule 65 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)
    WRITE           reduce using rule 65 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)
    ID              reduce using rule 65 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)
    WHILE           reduce using rule 65 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)
    FOR             reduce using rule 65 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)
    DO              reduce using rule 65 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)
    RIGHTKEY        reduce using rule 65 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)
    RETURN          reduce using rule 65 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)


state 172

    (63) assignment -> ID quad1 ASSGN exp . SEMICOLON

    SEMICOLON       shift and go to state 194


state 173

    (43) llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .

    IF              reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    DECLARE         reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    READ            reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    WRITE           reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    ID              reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    WHILE           reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    FOR             reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    DO              reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    RIGHTKEY        reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    RETURN          reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    SEMICOLON       reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)


state 174

    (45) llamadaAFunct2 -> ID llamadaAFunct3 .

    RIGHTPAR        reduce using rule 45 (llamadaAFunct2 -> ID llamadaAFunct3 .)


state 175

    (46) llamadaAFunct3 -> COMMA . ID

    ID              shift and go to state 195


state 176

    (47) llamadaAFunct3 -> empty .

    RIGHTPAR        reduce using rule 47 (llamadaAFunct3 -> empty .)


state 177

    (50) declareRecursivoLocal -> type ID altaVarLocal . assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (51) assignmentDecl -> . ASSGN exp
    (55) assignmentDecl -> . empty
    (115) empty -> .

    ASSGN           shift and go to state 35
    LEFTBRACK       reduce using rule 115 (empty -> .)
    COMMA           reduce using rule 115 (empty -> .)
    SEMICOLON       reduce using rule 115 (empty -> .)

    assignmentDecl                 shift and go to state 196
    empty                          shift and go to state 37

state 178

    (70) conditional2 -> exp conditional2 .

    RIGHTPAR        reduce using rule 70 (conditional2 -> exp conditional2 .)


state 179

    (67) conditional -> IF LEFTPAR conditional2 RIGHTPAR . LEFTKEY est RIGHTKEY conditionalElse

    LEFTKEY         shift and go to state 197


state 180

    (13) functReturn -> RETURN . NUMBER SEMICOLON
    (14) functReturn -> RETURN . ID SEMICOLON

    NUMBER          shift and go to state 198
    ID              shift and go to state 199


state 181

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn . RIGHTKEY

    RIGHTKEY        shift and go to state 200


state 182

    (15) functReturn -> empty .

    RIGHTKEY        reduce using rule 15 (functReturn -> empty .)


state 183

    (18) funct3 -> COMMA type . ID altaVarLocal funct3

    ID              shift and go to state 201


state 184

    (76) do-while -> DO LEFTKEY est RIGHTKEY WHILE . LEFTPAR while2 RIGHTPAR

    LEFTPAR         shift and go to state 202


state 185

    (114) input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .

    IF              reduce using rule 114 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    DECLARE         reduce using rule 114 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    READ            reduce using rule 114 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    WRITE           reduce using rule 114 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    ID              reduce using rule 114 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 114 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    FOR             reduce using rule 114 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    DO              reduce using rule 114 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    RIGHTKEY        reduce using rule 114 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    RETURN          reduce using rule 114 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)


state 186

    (77) while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY . est RIGHTKEY
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (67) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (72) cycles -> . while
    (73) cycles -> . empty
    (74) cycles -> . for
    (75) cycles -> . do-while
    (114) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (110) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID quad1 ASSGN exp SEMICOLON
    (65) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (66) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (115) empty -> .
    (77) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (80) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (76) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 88
    DECLARE         shift and go to state 87
    READ            shift and go to state 75
    WRITE           shift and go to state 85
    ID              shift and go to state 86
    RIGHTKEY        reduce using rule 115 (empty -> .)
    WHILE           shift and go to state 77
    FOR             shift and go to state 83
    DO              shift and go to state 74

  ! IF              [ reduce using rule 115 (empty -> .) ]
  ! DECLARE         [ reduce using rule 115 (empty -> .) ]
  ! READ            [ reduce using rule 115 (empty -> .) ]
  ! WRITE           [ reduce using rule 115 (empty -> .) ]
  ! ID              [ reduce using rule 115 (empty -> .) ]
  ! WHILE           [ reduce using rule 115 (empty -> .) ]
  ! FOR             [ reduce using rule 115 (empty -> .) ]
  ! DO              [ reduce using rule 115 (empty -> .) ]

    conditional                    shift and go to state 76
    do-while                       shift and go to state 78
    est                            shift and go to state 203
    for                            shift and go to state 80
    llamadaAFunct                  shift and go to state 81
    input                          shift and go to state 82
    assignment                     shift and go to state 84
    cycles                         shift and go to state 89
    while                          shift and go to state 90
    empty                          shift and go to state 91
    output                         shift and go to state 92
    declareLocal                   shift and go to state 93

state 187

    (88) expFor -> number .

    SEMICOLON       reduce using rule 88 (expFor -> number .)


state 188

    (84) for4 -> expFor .

    SEMICOLON       reduce using rule 84 (for4 -> expFor .)


state 189

    (87) expFor -> ID . expFor2
    (89) expFor2 -> . LESS expFor
    (90) expFor2 -> . GRTR expFor
    (91) expFor2 -> . EQ expFor
    (92) expFor2 -> . NOTEQ expFor
    (93) expFor2 -> . AND expFor
    (94) expFor2 -> . OR expFor
    (95) expFor2 -> . empty
    (115) empty -> .

    LESS            shift and go to state 205
    GRTR            shift and go to state 208
    EQ              shift and go to state 209
    NOTEQ           shift and go to state 206
    AND             shift and go to state 204
    OR              shift and go to state 211
    SEMICOLON       reduce using rule 115 (empty -> .)

    empty                          shift and go to state 210
    expFor2                        shift and go to state 207

state 190

    (80) for -> FOR LEFTPAR for2 SEMICOLON for4 . SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY

    SEMICOLON       shift and go to state 212


state 191

    (81) for2 -> ID ASSGN number . for3
    (82) for3 -> . COMMA for2
    (83) for3 -> . empty
    (115) empty -> .

    COMMA           shift and go to state 213
    SEMICOLON       reduce using rule 115 (empty -> .)

    for3                           shift and go to state 214
    empty                          shift and go to state 215

state 192

    (110) output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .

    IF              reduce using rule 110 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    DECLARE         reduce using rule 110 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    READ            reduce using rule 110 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    WRITE           reduce using rule 110 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    ID              reduce using rule 110 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 110 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    FOR             reduce using rule 110 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    DO              reduce using rule 110 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    RIGHTKEY        reduce using rule 110 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    RETURN          reduce using rule 110 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)


state 193

    (112) output2 -> QUOTE ID QUOTE . output2
    (111) output2 -> . ID output2
    (112) output2 -> . QUOTE ID QUOTE output2
    (113) output2 -> . empty
    (115) empty -> .

    ID              shift and go to state 144
    QUOTE           shift and go to state 143
    RIGHTPAR        reduce using rule 115 (empty -> .)

    output2                        shift and go to state 216
    empty                          shift and go to state 145

state 194

    (63) assignment -> ID quad1 ASSGN exp SEMICOLON .

    IF              reduce using rule 63 (assignment -> ID quad1 ASSGN exp SEMICOLON .)
    DECLARE         reduce using rule 63 (assignment -> ID quad1 ASSGN exp SEMICOLON .)
    READ            reduce using rule 63 (assignment -> ID quad1 ASSGN exp SEMICOLON .)
    WRITE           reduce using rule 63 (assignment -> ID quad1 ASSGN exp SEMICOLON .)
    ID              reduce using rule 63 (assignment -> ID quad1 ASSGN exp SEMICOLON .)
    WHILE           reduce using rule 63 (assignment -> ID quad1 ASSGN exp SEMICOLON .)
    FOR             reduce using rule 63 (assignment -> ID quad1 ASSGN exp SEMICOLON .)
    DO              reduce using rule 63 (assignment -> ID quad1 ASSGN exp SEMICOLON .)
    RIGHTKEY        reduce using rule 63 (assignment -> ID quad1 ASSGN exp SEMICOLON .)
    RETURN          reduce using rule 63 (assignment -> ID quad1 ASSGN exp SEMICOLON .)


state 195

    (46) llamadaAFunct3 -> COMMA ID .

    RIGHTPAR        reduce using rule 46 (llamadaAFunct3 -> COMMA ID .)


state 196

    (50) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl . declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (56) declare2Local -> . array
    (60) declare2Local -> . empty
    (25) array -> . LEFTBRACK exp RIGHTBRACK array
    (26) array -> . empty
    (115) empty -> .

    LEFTBRACK       shift and go to state 45
    COMMA           reduce using rule 115 (empty -> .)
    SEMICOLON       reduce using rule 115 (empty -> .)

    declare2Local                  shift and go to state 217
    array                          shift and go to state 218
    empty                          shift and go to state 219

state 197

    (67) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY . est RIGHTKEY conditionalElse
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (67) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (72) cycles -> . while
    (73) cycles -> . empty
    (74) cycles -> . for
    (75) cycles -> . do-while
    (114) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (110) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID quad1 ASSGN exp SEMICOLON
    (65) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (66) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (115) empty -> .
    (77) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (80) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (76) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 88
    DECLARE         shift and go to state 87
    READ            shift and go to state 75
    WRITE           shift and go to state 85
    ID              shift and go to state 86
    RIGHTKEY        reduce using rule 115 (empty -> .)
    WHILE           shift and go to state 77
    FOR             shift and go to state 83
    DO              shift and go to state 74

  ! IF              [ reduce using rule 115 (empty -> .) ]
  ! DECLARE         [ reduce using rule 115 (empty -> .) ]
  ! READ            [ reduce using rule 115 (empty -> .) ]
  ! WRITE           [ reduce using rule 115 (empty -> .) ]
  ! ID              [ reduce using rule 115 (empty -> .) ]
  ! WHILE           [ reduce using rule 115 (empty -> .) ]
  ! FOR             [ reduce using rule 115 (empty -> .) ]
  ! DO              [ reduce using rule 115 (empty -> .) ]

    conditional                    shift and go to state 76
    do-while                       shift and go to state 78
    est                            shift and go to state 220
    for                            shift and go to state 80
    llamadaAFunct                  shift and go to state 81
    input                          shift and go to state 82
    empty                          shift and go to state 91
    assignment                     shift and go to state 84
    cycles                         shift and go to state 89
    while                          shift and go to state 90
    output                         shift and go to state 92
    declareLocal                   shift and go to state 93

state 198

    (13) functReturn -> RETURN NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 221


state 199

    (14) functReturn -> RETURN ID . SEMICOLON

    SEMICOLON       shift and go to state 222


state 200

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY .

    FUNCTION        reduce using rule 12 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY .)
    MAIN            reduce using rule 12 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY .)


state 201

    (18) funct3 -> COMMA type ID . altaVarLocal funct3
    (62) altaVarLocal -> .

    COMMA           reduce using rule 62 (altaVarLocal -> .)
    RIGHTPAR        reduce using rule 62 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 223

state 202

    (76) do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR . while2 RIGHTPAR
    (78) while2 -> . exp while2
    (79) while2 -> . empty
    (96) exp -> . ID exp2
    (97) exp -> . number exp2
    (98) exp -> . empty
    (115) empty -> .
    (52) number -> . INTEGER number2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    RIGHTPAR        reduce using rule 115 (empty -> .)
    INTEGER         shift and go to state 42

  ! ID              [ reduce using rule 115 (empty -> .) ]
  ! INTEGER         [ reduce using rule 115 (empty -> .) ]

    number                         shift and go to state 40
    while2                         shift and go to state 224
    exp                            shift and go to state 138
    empty                          shift and go to state 139

state 203

    (77) while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 225


state 204

    (93) expFor2 -> AND . expFor
    (87) expFor -> . ID expFor2
    (88) expFor -> . number
    (52) number -> . INTEGER number2

    ID              shift and go to state 189
    INTEGER         shift and go to state 42

    expFor                         shift and go to state 226
    number                         shift and go to state 187

state 205

    (89) expFor2 -> LESS . expFor
    (87) expFor -> . ID expFor2
    (88) expFor -> . number
    (52) number -> . INTEGER number2

    ID              shift and go to state 189
    INTEGER         shift and go to state 42

    expFor                         shift and go to state 227
    number                         shift and go to state 187

state 206

    (92) expFor2 -> NOTEQ . expFor
    (87) expFor -> . ID expFor2
    (88) expFor -> . number
    (52) number -> . INTEGER number2

    ID              shift and go to state 189
    INTEGER         shift and go to state 42

    expFor                         shift and go to state 228
    number                         shift and go to state 187

state 207

    (87) expFor -> ID expFor2 .

    SEMICOLON       reduce using rule 87 (expFor -> ID expFor2 .)


state 208

    (90) expFor2 -> GRTR . expFor
    (87) expFor -> . ID expFor2
    (88) expFor -> . number
    (52) number -> . INTEGER number2

    ID              shift and go to state 189
    INTEGER         shift and go to state 42

    expFor                         shift and go to state 229
    number                         shift and go to state 187

state 209

    (91) expFor2 -> EQ . expFor
    (87) expFor -> . ID expFor2
    (88) expFor -> . number
    (52) number -> . INTEGER number2

    ID              shift and go to state 189
    INTEGER         shift and go to state 42

    expFor                         shift and go to state 230
    number                         shift and go to state 187

state 210

    (95) expFor2 -> empty .

    SEMICOLON       reduce using rule 95 (expFor2 -> empty .)


state 211

    (94) expFor2 -> OR . expFor
    (87) expFor -> . ID expFor2
    (88) expFor -> . number
    (52) number -> . INTEGER number2

    ID              shift and go to state 189
    INTEGER         shift and go to state 42

    expFor                         shift and go to state 231
    number                         shift and go to state 187

state 212

    (80) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON . parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (85) parte3For -> . ID SUM SUM
    (86) parte3For -> . ID MINUS MINUS

    ID              shift and go to state 233

    parte3For                      shift and go to state 232

state 213

    (82) for3 -> COMMA . for2
    (81) for2 -> . ID ASSGN number for3

    ID              shift and go to state 141

    for2                           shift and go to state 234

state 214

    (81) for2 -> ID ASSGN number for3 .

    SEMICOLON       reduce using rule 81 (for2 -> ID ASSGN number for3 .)


state 215

    (83) for3 -> empty .

    SEMICOLON       reduce using rule 83 (for3 -> empty .)


state 216

    (112) output2 -> QUOTE ID QUOTE output2 .

    RIGHTPAR        reduce using rule 112 (output2 -> QUOTE ID QUOTE output2 .)


state 217

    (50) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local . declare3Local SEMICOLON declareRecursivoLocal
    (57) declare3Local -> . COMMA ID altaVarLocal assignmentDecl declare3Local
    (61) declare3Local -> . empty
    (115) empty -> .

    COMMA           shift and go to state 235
    SEMICOLON       reduce using rule 115 (empty -> .)

    empty                          shift and go to state 236
    declare3Local                  shift and go to state 237

state 218

    (56) declare2Local -> array .

    COMMA           reduce using rule 56 (declare2Local -> array .)
    SEMICOLON       reduce using rule 56 (declare2Local -> array .)


state 219

    (60) declare2Local -> empty .
    (26) array -> empty .

  ! reduce/reduce conflict for COMMA resolved using rule 26 (array -> empty .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 26 (array -> empty .)
    COMMA           reduce using rule 26 (array -> empty .)
    SEMICOLON       reduce using rule 26 (array -> empty .)

  ! COMMA           [ reduce using rule 60 (declare2Local -> empty .) ]
  ! SEMICOLON       [ reduce using rule 60 (declare2Local -> empty .) ]


state 220

    (67) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est . RIGHTKEY conditionalElse

    RIGHTKEY        shift and go to state 238


state 221

    (13) functReturn -> RETURN NUMBER SEMICOLON .

    RIGHTKEY        reduce using rule 13 (functReturn -> RETURN NUMBER SEMICOLON .)


state 222

    (14) functReturn -> RETURN ID SEMICOLON .

    RIGHTKEY        reduce using rule 14 (functReturn -> RETURN ID SEMICOLON .)


state 223

    (18) funct3 -> COMMA type ID altaVarLocal . funct3
    (18) funct3 -> . COMMA type ID altaVarLocal funct3
    (20) funct3 -> . empty
    (115) empty -> .

    COMMA           shift and go to state 160
    RIGHTPAR        reduce using rule 115 (empty -> .)

    funct3                         shift and go to state 239
    empty                          shift and go to state 161

state 224

    (76) do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 . RIGHTPAR

    RIGHTPAR        shift and go to state 240


state 225

    (77) while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .

    IF              reduce using rule 77 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    DECLARE         reduce using rule 77 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    READ            reduce using rule 77 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    WRITE           reduce using rule 77 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    ID              reduce using rule 77 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    WHILE           reduce using rule 77 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    FOR             reduce using rule 77 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    DO              reduce using rule 77 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    RIGHTKEY        reduce using rule 77 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    RETURN          reduce using rule 77 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)


state 226

    (93) expFor2 -> AND expFor .

    SEMICOLON       reduce using rule 93 (expFor2 -> AND expFor .)


state 227

    (89) expFor2 -> LESS expFor .

    SEMICOLON       reduce using rule 89 (expFor2 -> LESS expFor .)


state 228

    (92) expFor2 -> NOTEQ expFor .

    SEMICOLON       reduce using rule 92 (expFor2 -> NOTEQ expFor .)


state 229

    (90) expFor2 -> GRTR expFor .

    SEMICOLON       reduce using rule 90 (expFor2 -> GRTR expFor .)


state 230

    (91) expFor2 -> EQ expFor .

    SEMICOLON       reduce using rule 91 (expFor2 -> EQ expFor .)


state 231

    (94) expFor2 -> OR expFor .

    SEMICOLON       reduce using rule 94 (expFor2 -> OR expFor .)


state 232

    (80) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For . RIGHTPAR LEFTKEY est RIGHTKEY

    RIGHTPAR        shift and go to state 241


state 233

    (85) parte3For -> ID . SUM SUM
    (86) parte3For -> ID . MINUS MINUS

    SUM             shift and go to state 242
    MINUS           shift and go to state 243


state 234

    (82) for3 -> COMMA for2 .

    SEMICOLON       reduce using rule 82 (for3 -> COMMA for2 .)


state 235

    (57) declare3Local -> COMMA . ID altaVarLocal assignmentDecl declare3Local

    ID              shift and go to state 244


state 236

    (61) declare3Local -> empty .

    SEMICOLON       reduce using rule 61 (declare3Local -> empty .)


state 237

    (50) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local . SEMICOLON declareRecursivoLocal

    SEMICOLON       shift and go to state 245


state 238

    (67) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY . conditionalElse
    (68) conditionalElse -> . ELSE LEFTKEY est RIGHTKEY
    (69) conditionalElse -> . empty
    (115) empty -> .

    ELSE            shift and go to state 247
    IF              reduce using rule 115 (empty -> .)
    DECLARE         reduce using rule 115 (empty -> .)
    READ            reduce using rule 115 (empty -> .)
    WRITE           reduce using rule 115 (empty -> .)
    ID              reduce using rule 115 (empty -> .)
    WHILE           reduce using rule 115 (empty -> .)
    FOR             reduce using rule 115 (empty -> .)
    DO              reduce using rule 115 (empty -> .)
    RIGHTKEY        reduce using rule 115 (empty -> .)
    RETURN          reduce using rule 115 (empty -> .)

    conditionalElse                shift and go to state 246
    empty                          shift and go to state 248

state 239

    (18) funct3 -> COMMA type ID altaVarLocal funct3 .

    RIGHTPAR        reduce using rule 18 (funct3 -> COMMA type ID altaVarLocal funct3 .)


state 240

    (76) do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .

    IF              reduce using rule 76 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)
    DECLARE         reduce using rule 76 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)
    READ            reduce using rule 76 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)
    WRITE           reduce using rule 76 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)
    ID              reduce using rule 76 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)
    WHILE           reduce using rule 76 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)
    FOR             reduce using rule 76 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)
    DO              reduce using rule 76 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)
    RETURN          reduce using rule 76 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)
    RIGHTKEY        reduce using rule 76 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)


state 241

    (80) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR . LEFTKEY est RIGHTKEY

    LEFTKEY         shift and go to state 249


state 242

    (85) parte3For -> ID SUM . SUM

    SUM             shift and go to state 250


state 243

    (86) parte3For -> ID MINUS . MINUS

    MINUS           shift and go to state 251


state 244

    (57) declare3Local -> COMMA ID . altaVarLocal assignmentDecl declare3Local
    (62) altaVarLocal -> .

    ASSGN           reduce using rule 62 (altaVarLocal -> .)
    COMMA           reduce using rule 62 (altaVarLocal -> .)
    SEMICOLON       reduce using rule 62 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 252

state 245

    (50) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON . declareRecursivoLocal
    (50) declareRecursivoLocal -> . type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (58) declareRecursivoLocal -> . empty
    (27) type -> . type2
    (115) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    IF              reduce using rule 115 (empty -> .)
    DECLARE         reduce using rule 115 (empty -> .)
    READ            reduce using rule 115 (empty -> .)
    WRITE           reduce using rule 115 (empty -> .)
    ID              reduce using rule 115 (empty -> .)
    WHILE           reduce using rule 115 (empty -> .)
    FOR             reduce using rule 115 (empty -> .)
    DO              reduce using rule 115 (empty -> .)
    RIGHTKEY        reduce using rule 115 (empty -> .)
    RETURN          reduce using rule 115 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    declareRecursivoLocal          shift and go to state 253
    type2                          shift and go to state 19
    type                           shift and go to state 124
    empty                          shift and go to state 125

state 246

    (67) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .

    IF              reduce using rule 67 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)
    DECLARE         reduce using rule 67 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)
    READ            reduce using rule 67 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)
    WRITE           reduce using rule 67 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)
    ID              reduce using rule 67 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)
    WHILE           reduce using rule 67 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)
    FOR             reduce using rule 67 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)
    DO              reduce using rule 67 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)
    RIGHTKEY        reduce using rule 67 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)
    RETURN          reduce using rule 67 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)


state 247

    (68) conditionalElse -> ELSE . LEFTKEY est RIGHTKEY

    LEFTKEY         shift and go to state 254


state 248

    (69) conditionalElse -> empty .

    IF              reduce using rule 69 (conditionalElse -> empty .)
    DECLARE         reduce using rule 69 (conditionalElse -> empty .)
    READ            reduce using rule 69 (conditionalElse -> empty .)
    WRITE           reduce using rule 69 (conditionalElse -> empty .)
    ID              reduce using rule 69 (conditionalElse -> empty .)
    WHILE           reduce using rule 69 (conditionalElse -> empty .)
    FOR             reduce using rule 69 (conditionalElse -> empty .)
    DO              reduce using rule 69 (conditionalElse -> empty .)
    RIGHTKEY        reduce using rule 69 (conditionalElse -> empty .)
    RETURN          reduce using rule 69 (conditionalElse -> empty .)


state 249

    (80) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY . est RIGHTKEY
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (67) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (72) cycles -> . while
    (73) cycles -> . empty
    (74) cycles -> . for
    (75) cycles -> . do-while
    (114) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (110) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID quad1 ASSGN exp SEMICOLON
    (65) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (66) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (115) empty -> .
    (77) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (80) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (76) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 88
    DECLARE         shift and go to state 87
    READ            shift and go to state 75
    WRITE           shift and go to state 85
    ID              shift and go to state 86
    RIGHTKEY        reduce using rule 115 (empty -> .)
    WHILE           shift and go to state 77
    FOR             shift and go to state 83
    DO              shift and go to state 74

  ! IF              [ reduce using rule 115 (empty -> .) ]
  ! DECLARE         [ reduce using rule 115 (empty -> .) ]
  ! READ            [ reduce using rule 115 (empty -> .) ]
  ! WRITE           [ reduce using rule 115 (empty -> .) ]
  ! ID              [ reduce using rule 115 (empty -> .) ]
  ! WHILE           [ reduce using rule 115 (empty -> .) ]
  ! FOR             [ reduce using rule 115 (empty -> .) ]
  ! DO              [ reduce using rule 115 (empty -> .) ]

    conditional                    shift and go to state 76
    do-while                       shift and go to state 78
    est                            shift and go to state 255
    for                            shift and go to state 80
    llamadaAFunct                  shift and go to state 81
    input                          shift and go to state 82
    assignment                     shift and go to state 84
    declareLocal                   shift and go to state 93
    while                          shift and go to state 90
    empty                          shift and go to state 91
    output                         shift and go to state 92
    cycles                         shift and go to state 89

state 250

    (85) parte3For -> ID SUM SUM .

    RIGHTPAR        reduce using rule 85 (parte3For -> ID SUM SUM .)


state 251

    (86) parte3For -> ID MINUS MINUS .

    RIGHTPAR        reduce using rule 86 (parte3For -> ID MINUS MINUS .)


state 252

    (57) declare3Local -> COMMA ID altaVarLocal . assignmentDecl declare3Local
    (51) assignmentDecl -> . ASSGN exp
    (55) assignmentDecl -> . empty
    (115) empty -> .

    ASSGN           shift and go to state 35
    COMMA           reduce using rule 115 (empty -> .)
    SEMICOLON       reduce using rule 115 (empty -> .)

    empty                          shift and go to state 37
    assignmentDecl                 shift and go to state 256

state 253

    (50) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .

    IF              reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    DECLARE         reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    READ            reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    WRITE           reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    ID              reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    WHILE           reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    FOR             reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    DO              reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    RIGHTKEY        reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    RETURN          reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)


state 254

    (68) conditionalElse -> ELSE LEFTKEY . est RIGHTKEY
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (67) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (72) cycles -> . while
    (73) cycles -> . empty
    (74) cycles -> . for
    (75) cycles -> . do-while
    (114) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (110) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID quad1 ASSGN exp SEMICOLON
    (65) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (66) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (115) empty -> .
    (77) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (80) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (76) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 88
    DECLARE         shift and go to state 87
    READ            shift and go to state 75
    WRITE           shift and go to state 85
    ID              shift and go to state 86
    RIGHTKEY        reduce using rule 115 (empty -> .)
    WHILE           shift and go to state 77
    FOR             shift and go to state 83
    DO              shift and go to state 74

  ! IF              [ reduce using rule 115 (empty -> .) ]
  ! DECLARE         [ reduce using rule 115 (empty -> .) ]
  ! READ            [ reduce using rule 115 (empty -> .) ]
  ! WRITE           [ reduce using rule 115 (empty -> .) ]
  ! ID              [ reduce using rule 115 (empty -> .) ]
  ! WHILE           [ reduce using rule 115 (empty -> .) ]
  ! FOR             [ reduce using rule 115 (empty -> .) ]
  ! DO              [ reduce using rule 115 (empty -> .) ]

    conditional                    shift and go to state 76
    do-while                       shift and go to state 78
    est                            shift and go to state 257
    for                            shift and go to state 80
    llamadaAFunct                  shift and go to state 81
    input                          shift and go to state 82
    assignment                     shift and go to state 84
    cycles                         shift and go to state 89
    while                          shift and go to state 90
    empty                          shift and go to state 91
    output                         shift and go to state 92
    declareLocal                   shift and go to state 93

state 255

    (80) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 258


state 256

    (57) declare3Local -> COMMA ID altaVarLocal assignmentDecl . declare3Local
    (57) declare3Local -> . COMMA ID altaVarLocal assignmentDecl declare3Local
    (61) declare3Local -> . empty
    (115) empty -> .

    COMMA           shift and go to state 235
    SEMICOLON       reduce using rule 115 (empty -> .)

    empty                          shift and go to state 236
    declare3Local                  shift and go to state 259

state 257

    (68) conditionalElse -> ELSE LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 260


state 258

    (80) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .

    IF              reduce using rule 80 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    DECLARE         reduce using rule 80 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    READ            reduce using rule 80 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    WRITE           reduce using rule 80 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    ID              reduce using rule 80 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    WHILE           reduce using rule 80 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    FOR             reduce using rule 80 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    DO              reduce using rule 80 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    RIGHTKEY        reduce using rule 80 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    RETURN          reduce using rule 80 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)


state 259

    (57) declare3Local -> COMMA ID altaVarLocal assignmentDecl declare3Local .

    SEMICOLON       reduce using rule 57 (declare3Local -> COMMA ID altaVarLocal assignmentDecl declare3Local .)


state 260

    (68) conditionalElse -> ELSE LEFTKEY est RIGHTKEY .

    IF              reduce using rule 68 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)
    DECLARE         reduce using rule 68 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)
    READ            reduce using rule 68 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)
    WRITE           reduce using rule 68 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)
    ID              reduce using rule 68 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)
    WHILE           reduce using rule 68 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)
    FOR             reduce using rule 68 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)
    DO              reduce using rule 68 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)
    RIGHTKEY        reduce using rule 68 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)
    RETURN          reduce using rule 68 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 50 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 50 resolved as shift
WARNING: shift/reduce conflict for READ in state 50 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 50 resolved as shift
WARNING: shift/reduce conflict for ID in state 50 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 50 resolved as shift
WARNING: shift/reduce conflict for FOR in state 50 resolved as shift
WARNING: shift/reduce conflict for DO in state 50 resolved as shift
WARNING: shift/reduce conflict for ID in state 51 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 51 resolved as shift
WARNING: shift/reduce conflict for ID in state 52 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 52 resolved as shift
WARNING: shift/reduce conflict for ID in state 53 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 53 resolved as shift
WARNING: shift/reduce conflict for ID in state 54 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 54 resolved as shift
WARNING: shift/reduce conflict for ID in state 56 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 56 resolved as shift
WARNING: shift/reduce conflict for ID in state 57 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 57 resolved as shift
WARNING: shift/reduce conflict for ID in state 58 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 58 resolved as shift
WARNING: shift/reduce conflict for ID in state 59 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 59 resolved as shift
WARNING: shift/reduce conflict for ID in state 60 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 60 resolved as shift
WARNING: shift/reduce conflict for ID in state 61 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 61 resolved as shift
WARNING: shift/reduce conflict for IF in state 76 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 76 resolved as shift
WARNING: shift/reduce conflict for READ in state 76 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 76 resolved as shift
WARNING: shift/reduce conflict for ID in state 76 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 76 resolved as shift
WARNING: shift/reduce conflict for FOR in state 76 resolved as shift
WARNING: shift/reduce conflict for DO in state 76 resolved as shift
WARNING: shift/reduce conflict for IF in state 81 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 81 resolved as shift
WARNING: shift/reduce conflict for READ in state 81 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 81 resolved as shift
WARNING: shift/reduce conflict for ID in state 81 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 81 resolved as shift
WARNING: shift/reduce conflict for FOR in state 81 resolved as shift
WARNING: shift/reduce conflict for DO in state 81 resolved as shift
WARNING: shift/reduce conflict for IF in state 82 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 82 resolved as shift
WARNING: shift/reduce conflict for READ in state 82 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 82 resolved as shift
WARNING: shift/reduce conflict for ID in state 82 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 82 resolved as shift
WARNING: shift/reduce conflict for FOR in state 82 resolved as shift
WARNING: shift/reduce conflict for DO in state 82 resolved as shift
WARNING: shift/reduce conflict for IF in state 84 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 84 resolved as shift
WARNING: shift/reduce conflict for READ in state 84 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 84 resolved as shift
WARNING: shift/reduce conflict for ID in state 84 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 84 resolved as shift
WARNING: shift/reduce conflict for FOR in state 84 resolved as shift
WARNING: shift/reduce conflict for DO in state 84 resolved as shift
WARNING: shift/reduce conflict for ASSGN in state 86 resolved as shift
WARNING: shift/reduce conflict for IF in state 89 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 89 resolved as shift
WARNING: shift/reduce conflict for READ in state 89 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 89 resolved as shift
WARNING: shift/reduce conflict for ID in state 89 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 89 resolved as shift
WARNING: shift/reduce conflict for FOR in state 89 resolved as shift
WARNING: shift/reduce conflict for DO in state 89 resolved as shift
WARNING: shift/reduce conflict for IF in state 92 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 92 resolved as shift
WARNING: shift/reduce conflict for READ in state 92 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 92 resolved as shift
WARNING: shift/reduce conflict for ID in state 92 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 92 resolved as shift
WARNING: shift/reduce conflict for FOR in state 92 resolved as shift
WARNING: shift/reduce conflict for DO in state 92 resolved as shift
WARNING: shift/reduce conflict for IF in state 93 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 93 resolved as shift
WARNING: shift/reduce conflict for READ in state 93 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 93 resolved as shift
WARNING: shift/reduce conflict for ID in state 93 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 93 resolved as shift
WARNING: shift/reduce conflict for FOR in state 93 resolved as shift
WARNING: shift/reduce conflict for DO in state 93 resolved as shift
WARNING: shift/reduce conflict for IF in state 110 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 110 resolved as shift
WARNING: shift/reduce conflict for READ in state 110 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 110 resolved as shift
WARNING: shift/reduce conflict for ID in state 110 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 110 resolved as shift
WARNING: shift/reduce conflict for FOR in state 110 resolved as shift
WARNING: shift/reduce conflict for DO in state 110 resolved as shift
WARNING: shift/reduce conflict for ID in state 113 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 113 resolved as shift
WARNING: shift/reduce conflict for ID in state 126 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 126 resolved as shift
WARNING: shift/reduce conflict for IF in state 133 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 133 resolved as shift
WARNING: shift/reduce conflict for READ in state 133 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 133 resolved as shift
WARNING: shift/reduce conflict for ID in state 133 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 133 resolved as shift
WARNING: shift/reduce conflict for FOR in state 133 resolved as shift
WARNING: shift/reduce conflict for DO in state 133 resolved as shift
WARNING: shift/reduce conflict for ID in state 138 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 138 resolved as shift
WARNING: shift/reduce conflict for ID in state 155 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 155 resolved as shift
WARNING: shift/reduce conflict for IF in state 186 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 186 resolved as shift
WARNING: shift/reduce conflict for READ in state 186 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 186 resolved as shift
WARNING: shift/reduce conflict for ID in state 186 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 186 resolved as shift
WARNING: shift/reduce conflict for FOR in state 186 resolved as shift
WARNING: shift/reduce conflict for DO in state 186 resolved as shift
WARNING: shift/reduce conflict for IF in state 197 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 197 resolved as shift
WARNING: shift/reduce conflict for READ in state 197 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 197 resolved as shift
WARNING: shift/reduce conflict for ID in state 197 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 197 resolved as shift
WARNING: shift/reduce conflict for FOR in state 197 resolved as shift
WARNING: shift/reduce conflict for DO in state 197 resolved as shift
WARNING: shift/reduce conflict for ID in state 202 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 202 resolved as shift
WARNING: shift/reduce conflict for IF in state 249 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 249 resolved as shift
WARNING: shift/reduce conflict for READ in state 249 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 249 resolved as shift
WARNING: shift/reduce conflict for ID in state 249 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 249 resolved as shift
WARNING: shift/reduce conflict for FOR in state 249 resolved as shift
WARNING: shift/reduce conflict for DO in state 249 resolved as shift
WARNING: shift/reduce conflict for IF in state 254 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 254 resolved as shift
WARNING: shift/reduce conflict for READ in state 254 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 254 resolved as shift
WARNING: shift/reduce conflict for ID in state 254 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 254 resolved as shift
WARNING: shift/reduce conflict for FOR in state 254 resolved as shift
WARNING: shift/reduce conflict for DO in state 254 resolved as shift
WARNING: reduce/reduce conflict in state 9 resolved using rule (program2 -> empty)
WARNING: rejected rule (declare -> empty) in state 9
WARNING: reduce/reduce conflict in state 91 resolved using rule (est -> empty)
WARNING: rejected rule (declareLocal -> empty) in state 91
WARNING: reduce/reduce conflict in state 91 resolved using rule (declareLocal -> empty)
WARNING: rejected rule (cycles -> empty) in state 91
WARNING: reduce/reduce conflict in state 91 resolved using rule (est -> empty)
WARNING: rejected rule (cycles -> empty) in state 91
WARNING: reduce/reduce conflict in state 91 resolved using rule (declareLocal -> empty)
WARNING: rejected rule (assignment -> empty) in state 91
WARNING: reduce/reduce conflict in state 91 resolved using rule (est -> empty)
WARNING: rejected rule (assignment -> empty) in state 91
WARNING: reduce/reduce conflict in state 91 resolved using rule (llamadaAFunct -> empty)
WARNING: rejected rule (declareLocal -> empty) in state 91
WARNING: reduce/reduce conflict in state 91 resolved using rule (est -> empty)
WARNING: rejected rule (llamadaAFunct -> empty) in state 91
WARNING: reduce/reduce conflict in state 139 resolved using rule (while2 -> empty)
WARNING: rejected rule (exp -> empty) in state 139
WARNING: reduce/reduce conflict in state 154 resolved using rule (conditional2 -> empty)
WARNING: rejected rule (exp -> empty) in state 154
WARNING: reduce/reduce conflict in state 219 resolved using rule (array -> empty)
WARNING: rejected rule (declare2Local -> empty) in state 219
WARNING: Rule (declareLocal -> empty) is never reduced
WARNING: Rule (cycles -> empty) is never reduced
WARNING: Rule (assignment -> empty) is never reduced
WARNING: Rule (declare2Local -> empty) is never reduced
