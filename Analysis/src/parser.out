Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ACTDECR
    DOT
    LESSEQ
    COLON
    GRTREQ
    CYCLE
    SPACE
    newline
    FLOATNUMB
    TYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON
Rule 2     goToMainQuad -> <empty>
Rule 3     altaPrograma -> <empty>
Rule 4     program2 -> declare program3
Rule 5     program2 -> empty
Rule 6     declare -> DECLARE declareRecursivo
Rule 7     declare -> empty
Rule 8     declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
Rule 9     declare2 -> array
Rule 10    declare3 -> COMMA ID altaVarGlobal declare3
Rule 11    program3 -> funct program3
Rule 12    funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
Rule 13    functReturn -> RETURN NUMBER SEMICOLON
Rule 14    functReturn -> RETURN ID SEMICOLON
Rule 15    functReturn -> empty
Rule 16    altaModulo -> <empty>
Rule 17    funct2 -> type ID altaVarLocal funct3
Rule 18    funct3 -> COMMA type ID altaVarLocal funct3
Rule 19    funct2 -> empty
Rule 20    funct3 -> empty
Rule 21    program3 -> empty
Rule 22    altaVarGlobal -> <empty>
Rule 23    declareRecursivo -> empty
Rule 24    declare3 -> empty
Rule 25    array -> LEFTBRACK exp RIGHTBRACK array
Rule 26    array -> empty
Rule 27    type -> type2
Rule 28    type2 -> INT
Rule 29    type2 -> FLOAT
Rule 30    type2 -> STRING
Rule 31    type2 -> BOOL
Rule 32    type2 -> VOID
Rule 33    cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY llenaMain altaModuloMain est RIGHTKEY
Rule 34    llenaMain -> <empty>
Rule 35    altaModuloMain -> <empty>
Rule 36    est -> conditional est
Rule 37    est -> declareLocal est
Rule 38    est -> cycles est
Rule 39    est -> input est
Rule 40    est -> output est
Rule 41    est -> assignment est
Rule 42    est -> llamadaAFunct est
Rule 43    est -> empty
Rule 44    llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR
Rule 45    llamadaAFunct -> empty
Rule 46    llamadaAFunct2 -> ID llamadaAFunct3
Rule 47    llamadaAFunct3 -> COMMA ID
Rule 48    llamadaAFunct3 -> empty
Rule 49    llamadaAFunct2 -> empty
Rule 50    declareLocal -> DECLARE declareRecursivoLocal
Rule 51    declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
Rule 52    assignmentDecl -> ASSGN exp
Rule 53    number -> INTEGER meteNum
Rule 54    number -> FLOAT meteNum
Rule 55    number -> empty
Rule 56    assignmentDecl -> empty
Rule 57    declare2Local -> array
Rule 58    declare3Local -> COMMA ID altaVarLocal assignmentDecl declare3Local
Rule 59    declareRecursivoLocal -> empty
Rule 60    declareLocal -> empty
Rule 61    declare2Local -> empty
Rule 62    declare3Local -> empty
Rule 63    altaVarLocal -> <empty>
Rule 64    assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON
Rule 65    assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON
Rule 66    meteVar -> <empty>
Rule 67    assignment -> empty
Rule 68    conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
Rule 69    gotoFCuad -> <empty>
Rule 70    gotoCuad -> <empty>
Rule 71    conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto
Rule 72    llenaGoto -> <empty>
Rule 73    conditionalElse -> empty
Rule 74    conditional2 -> exp conditional2
Rule 75    conditional2 -> empty
Rule 76    cycles -> while
Rule 77    cycles -> empty
Rule 78    cycles -> for
Rule 79    cycles -> do-while
Rule 80    do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad
Rule 81    gotoVCuad -> <empty>
Rule 82    meteSalto -> <empty>
Rule 83    while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
Rule 84    llenaCuadF -> <empty>
Rule 85    while2 -> exp while2
Rule 86    while2 -> empty
Rule 87    for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
Rule 88    for2 -> ID ASSGN cuadFor number generaCuad for3
Rule 89    cuadFor -> <empty>
Rule 90    for3 -> COMMA for2
Rule 91    for3 -> empty
Rule 92    for4 -> expFor
Rule 93    parte3For -> ID meteID ACTINCR meteOper
Rule 94    meteID -> <empty>
Rule 95    parte3For -> ID meteID ACTINCRVALOR meteOper
Rule 96    parte3For -> ID meteID ACTDECRVALOR meteOper
Rule 97    expFor -> ID meteExp expFor2
Rule 98    expFor -> number
Rule 99    expFor2 -> LESS meteOper expFor
Rule 100   expFor2 -> GRTR meteOper expFor
Rule 101   expFor2 -> EQ meteOper expFor
Rule 102   expFor2 -> NOTEQ meteOper expFor
Rule 103   expFor2 -> AND meteOper expFor
Rule 104   expFor2 -> OR meteOper expFor
Rule 105   expFor2 -> <empty>
Rule 106   expFor2 -> empty
Rule 107   exp -> ID meteExp exp2
Rule 108   exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
Rule 109   metePar -> <empty>
Rule 110   sacaPar -> <empty>
Rule 111   meteExp -> <empty>
Rule 112   generaCuad -> <empty>
Rule 113   exp -> number exp2
Rule 114   meteNum -> <empty>
Rule 115   exp -> empty
Rule 116   exp2 -> LESS meteOper exp
Rule 117   exp2 -> GRTR meteOper exp
Rule 118   exp2 -> EQ meteOper exp
Rule 119   exp2 -> NOTEQ meteOper exp
Rule 120   exp2 -> AND meteOper exp
Rule 121   exp2 -> OR meteOper exp
Rule 122   exp2 -> SUM meteOper exp
Rule 123   meteOper -> <empty>
Rule 124   exp2 -> MINUS meteOper exp
Rule 125   exp2 -> MULTP meteOper exp
Rule 126   exp2 -> DIVIDE meteOper exp
Rule 127   exp2 -> empty
Rule 128   output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
Rule 129   output2 -> ID output2
Rule 130   output2 -> QUOTE ID QUOTE output2
Rule 131   output2 -> empty
Rule 132   input -> READ LEFTPAR ID RIGHTPAR SEMICOLON
Rule 133   empty -> <empty>
Rule 134   circulo -> LEFTPAR INTEGER COMMA STRING COMMA BOOL COMMA INTEGER COMMA INTEGER RIGHTPAR SEMICOLON
Rule 135   cuadro -> LEFTPAR INTEGER COMMA STRING COMMA BOOL COMMA INTEGER COMMA INTEGER RIGHTPAR SEMICOLON
Rule 136   triangulo -> LEFTPAR INTEGER COMMA INTEGER COMMA INTEGER COMMA STRING COMMA BOOL COMMA INTEGER COMMA INTEGER COMMA INTEGER RIGHTPAR SEMICOLON
Rule 137   linea -> LEFTPAR INTEGER COMMA STRING COMMA INTEGER COMMA INTEGER COMMA INTEGER COMMA INTEGER RIGHTPAR SEMICOLON
Rule 138   rectangulo -> LEFTPAR INTEGER COMMA INTEGER COMMA STRING COMMA BOOL COMMA INTEGER COMMA INTEGER COMMA INTEGER RIGHTPAR SEMICOLON

Terminals, with rules where they appear

ACTDECR              : 
ACTDECRVALOR         : 96
ACTINCR              : 93
ACTINCRVALOR         : 95
AND                  : 103 120
ASSGN                : 52 64 65 88
BOOL                 : 31 134 135 136 138
COLON                : 
COMMA                : 10 18 47 58 90 134 134 134 134 135 135 135 135 136 136 136 136 136 136 136 137 137 137 137 137 138 138 138 138 138 138
CYCLE                : 
DECLARE              : 6 50
DIVIDE               : 126
DO                   : 80
DOT                  : 
ELSE                 : 71
END                  : 1
EQ                   : 101 118
FLOAT                : 29 54
FLOATNUMB            : 
FOR                  : 87
FUNCTION             : 12
GRTR                 : 100 117
GRTREQ               : 
ID                   : 1 8 10 12 14 17 18 44 46 47 51 58 64 65 88 93 95 96 97 107 129 130 132
IF                   : 68
INT                  : 28
INTEGER              : 53 134 134 134 135 135 135 136 136 136 136 136 136 137 137 137 137 137 138 138 138 138 138
LEFTBRACK            : 25
LEFTKEY              : 12 33 68 71 80 83 87
LEFTPAR              : 12 33 44 68 80 83 87 108 128 132 134 135 136 137 138
LESS                 : 99 116
LESSEQ               : 
MAIN                 : 33
MINUS                : 124
MULTP                : 125
NOTEQ                : 102 119
NUMBER               : 13
OR                   : 104 121
PROGRAM              : 1
QUOTE                : 130 130
READ                 : 132
RETURN               : 13 14
RIGHTBRACK           : 25
RIGHTKEY             : 12 33 68 71 80 83 87
RIGHTPAR             : 12 33 44 68 80 83 87 108 128 132 134 135 136 137 138
SEMICOLON            : 1 1 8 13 14 51 64 65 87 87 128 132 134 135 136 137 138
SPACE                : 
STRING               : 30 134 135 136 137 138
SUM                  : 122
TYPE                 : 
VOID                 : 32
WHILE                : 80 83
WRITE                : 128
error                : 
newline              : 

Nonterminals, with rules where they appear

altaModulo           : 12
altaModuloMain       : 33
altaPrograma         : 1
altaVarGlobal        : 8 10
altaVarLocal         : 17 18 51 58
array                : 9 25 57
assignment           : 41
assignmentDecl       : 8 51 58
circulo              : 
conditional          : 36
conditional2         : 68 74
conditionalElse      : 68
cuadFor              : 88
cuadro               : 
cuerpo               : 1
cycles               : 38
declare              : 4
declare2             : 8
declare2Local        : 51
declare3             : 8 10
declare3Local        : 51 58
declareLocal         : 37
declareRecursivo     : 6 8
declareRecursivoLocal : 50 51
do-while             : 79
empty                : 5 7 15 19 20 21 23 24 26 43 45 48 49 55 56 59 60 61 62 67 73 75 77 86 91 106 115 127 131
est                  : 12 33 36 37 38 39 40 41 42 68 71 80 83 87
exp                  : 25 52 64 74 85 108 116 117 118 119 120 121 122 124 125 126
exp2                 : 107 108 113
expFor               : 92 99 100 101 102 103 104
expFor2              : 97
for                  : 78
for2                 : 87 90
for3                 : 88
for4                 : 87
funct                : 11
funct2               : 12
funct3               : 17 18
functReturn          : 12
generaCuad           : 64 88 108
goToMainQuad         : 1
gotoCuad             : 68
gotoFCuad            : 68 83
gotoVCuad            : 80
input                : 39
linea                : 
llamadaAFunct        : 42 65
llamadaAFunct2       : 44
llamadaAFunct3       : 46
llenaCuadF           : 83
llenaGoto            : 71
llenaMain            : 33
meteExp              : 97 107
meteID               : 93 95 96
meteNum              : 53 54
meteOper             : 93 95 96 99 100 101 102 103 104 116 117 118 119 120 121 122 124 125 126
metePar              : 108
meteSalto            : 80
meteVar              : 64 65
number               : 88 98 113
output               : 40
output2              : 128 129 130
parte3For            : 87
program              : 0
program2             : 1
program3             : 4 11
rectangulo           : 
sacaPar              : 108
triangulo            : 
type                 : 8 12 17 18 51
type2                : 27
while                : 76
while2               : 80 83 85

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON
    (3) altaPrograma -> .

    SEMICOLON       reduce using rule 3 (altaPrograma -> .)

    altaPrograma                   shift and go to state 4

state 4

    (1) program -> PROGRAM ID altaPrograma . SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON

    SEMICOLON       shift and go to state 5


state 5

    (1) program -> PROGRAM ID altaPrograma SEMICOLON . program2 goToMainQuad cuerpo END SEMICOLON
    (4) program2 -> . declare program3
    (5) program2 -> . empty
    (6) declare -> . DECLARE declareRecursivo
    (7) declare -> . empty
    (133) empty -> .

    DECLARE         shift and go to state 7
    MAIN            reduce using rule 133 (empty -> .)
    FUNCTION        reduce using rule 133 (empty -> .)

    program2                       shift and go to state 6
    declare                        shift and go to state 8
    empty                          shift and go to state 9

state 6

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 . goToMainQuad cuerpo END SEMICOLON
    (2) goToMainQuad -> .

    MAIN            reduce using rule 2 (goToMainQuad -> .)

    goToMainQuad                   shift and go to state 10

state 7

    (6) declare -> DECLARE . declareRecursivo
    (8) declareRecursivo -> . type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
    (23) declareRecursivo -> . empty
    (27) type -> . type2
    (133) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    FUNCTION        reduce using rule 133 (empty -> .)
    MAIN            reduce using rule 133 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    declareRecursivo               shift and go to state 16
    type                           shift and go to state 17
    empty                          shift and go to state 18
    type2                          shift and go to state 19

state 8

    (4) program2 -> declare . program3
    (11) program3 -> . funct program3
    (21) program3 -> . empty
    (12) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (133) empty -> .

    FUNCTION        shift and go to state 20
    MAIN            reduce using rule 133 (empty -> .)

    funct                          shift and go to state 21
    program3                       shift and go to state 22
    empty                          shift and go to state 23

state 9

    (5) program2 -> empty .
    (7) declare -> empty .

  ! reduce/reduce conflict for MAIN resolved using rule 5 (program2 -> empty .)
    MAIN            reduce using rule 5 (program2 -> empty .)
    FUNCTION        reduce using rule 7 (declare -> empty .)

  ! MAIN            [ reduce using rule 7 (declare -> empty .) ]


state 10

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad . cuerpo END SEMICOLON
    (33) cuerpo -> . MAIN LEFTPAR RIGHTPAR LEFTKEY llenaMain altaModuloMain est RIGHTKEY

    MAIN            shift and go to state 25

    cuerpo                         shift and go to state 24

state 11

    (30) type2 -> STRING .

    ID              reduce using rule 30 (type2 -> STRING .)


state 12

    (28) type2 -> INT .

    ID              reduce using rule 28 (type2 -> INT .)


state 13

    (32) type2 -> VOID .

    ID              reduce using rule 32 (type2 -> VOID .)


state 14

    (29) type2 -> FLOAT .

    ID              reduce using rule 29 (type2 -> FLOAT .)


state 15

    (31) type2 -> BOOL .

    ID              reduce using rule 31 (type2 -> BOOL .)


state 16

    (6) declare -> DECLARE declareRecursivo .

    FUNCTION        reduce using rule 6 (declare -> DECLARE declareRecursivo .)
    MAIN            reduce using rule 6 (declare -> DECLARE declareRecursivo .)


state 17

    (8) declareRecursivo -> type . ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo

    ID              shift and go to state 26


state 18

    (23) declareRecursivo -> empty .

    FUNCTION        reduce using rule 23 (declareRecursivo -> empty .)
    MAIN            reduce using rule 23 (declareRecursivo -> empty .)


state 19

    (27) type -> type2 .

    ID              reduce using rule 27 (type -> type2 .)


state 20

    (12) funct -> FUNCTION . type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (27) type -> . type2
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    type                           shift and go to state 27
    type2                          shift and go to state 19

state 21

    (11) program3 -> funct . program3
    (11) program3 -> . funct program3
    (21) program3 -> . empty
    (12) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (133) empty -> .

    FUNCTION        shift and go to state 20
    MAIN            reduce using rule 133 (empty -> .)

    program3                       shift and go to state 28
    funct                          shift and go to state 21
    empty                          shift and go to state 23

state 22

    (4) program2 -> declare program3 .

    MAIN            reduce using rule 4 (program2 -> declare program3 .)


state 23

    (21) program3 -> empty .

    MAIN            reduce using rule 21 (program3 -> empty .)


state 24

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo . END SEMICOLON

    END             shift and go to state 29


state 25

    (33) cuerpo -> MAIN . LEFTPAR RIGHTPAR LEFTKEY llenaMain altaModuloMain est RIGHTKEY

    LEFTPAR         shift and go to state 30


state 26

    (8) declareRecursivo -> type ID . altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
    (22) altaVarGlobal -> .

    ASSGN           reduce using rule 22 (altaVarGlobal -> .)
    LEFTBRACK       reduce using rule 22 (altaVarGlobal -> .)
    COMMA           reduce using rule 22 (altaVarGlobal -> .)
    SEMICOLON       reduce using rule 22 (altaVarGlobal -> .)

    altaVarGlobal                  shift and go to state 31

state 27

    (12) funct -> FUNCTION type . ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY

    ID              shift and go to state 32


state 28

    (11) program3 -> funct program3 .

    MAIN            reduce using rule 11 (program3 -> funct program3 .)


state 29

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END . SEMICOLON

    SEMICOLON       shift and go to state 33


state 30

    (33) cuerpo -> MAIN LEFTPAR . RIGHTPAR LEFTKEY llenaMain altaModuloMain est RIGHTKEY

    RIGHTPAR        shift and go to state 34


state 31

    (8) declareRecursivo -> type ID altaVarGlobal . assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
    (52) assignmentDecl -> . ASSGN exp
    (56) assignmentDecl -> . empty
    (133) empty -> .

    ASSGN           shift and go to state 35
    LEFTBRACK       reduce using rule 133 (empty -> .)
    COMMA           reduce using rule 133 (empty -> .)
    SEMICOLON       reduce using rule 133 (empty -> .)

    assignmentDecl                 shift and go to state 36
    empty                          shift and go to state 37

state 32

    (12) funct -> FUNCTION type ID . altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (16) altaModulo -> .

    LEFTPAR         reduce using rule 16 (altaModulo -> .)

    altaModulo                     shift and go to state 38

state 33

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON .

    $end            reduce using rule 1 (program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON .)


state 34

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR . LEFTKEY llenaMain altaModuloMain est RIGHTKEY

    LEFTKEY         shift and go to state 39


state 35

    (52) assignmentDecl -> ASSGN . exp
    (107) exp -> . ID meteExp exp2
    (108) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (113) exp -> . number exp2
    (115) exp -> . empty
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (133) empty -> .

    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    LEFTBRACK       reduce using rule 133 (empty -> .)
    COMMA           reduce using rule 133 (empty -> .)
    SEMICOLON       reduce using rule 133 (empty -> .)
    LESS            reduce using rule 133 (empty -> .)
    GRTR            reduce using rule 133 (empty -> .)
    EQ              reduce using rule 133 (empty -> .)
    NOTEQ           reduce using rule 133 (empty -> .)
    AND             reduce using rule 133 (empty -> .)
    OR              reduce using rule 133 (empty -> .)
    SUM             reduce using rule 133 (empty -> .)
    MINUS           reduce using rule 133 (empty -> .)
    MULTP           reduce using rule 133 (empty -> .)
    DIVIDE          reduce using rule 133 (empty -> .)

    number                         shift and go to state 40
    exp                            shift and go to state 43
    empty                          shift and go to state 46

state 36

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl . declare2 declare3 SEMICOLON declareRecursivo
    (9) declare2 -> . array
    (25) array -> . LEFTBRACK exp RIGHTBRACK array
    (26) array -> . empty
    (133) empty -> .

    LEFTBRACK       shift and go to state 47
    COMMA           reduce using rule 133 (empty -> .)
    SEMICOLON       reduce using rule 133 (empty -> .)

    declare2                       shift and go to state 48
    array                          shift and go to state 49
    empty                          shift and go to state 50

state 37

    (56) assignmentDecl -> empty .

    LEFTBRACK       reduce using rule 56 (assignmentDecl -> empty .)
    COMMA           reduce using rule 56 (assignmentDecl -> empty .)
    SEMICOLON       reduce using rule 56 (assignmentDecl -> empty .)


state 38

    (12) funct -> FUNCTION type ID altaModulo . LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY

    LEFTPAR         shift and go to state 51


state 39

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY . llenaMain altaModuloMain est RIGHTKEY
    (34) llenaMain -> .

    IF              reduce using rule 34 (llenaMain -> .)
    DECLARE         reduce using rule 34 (llenaMain -> .)
    READ            reduce using rule 34 (llenaMain -> .)
    WRITE           reduce using rule 34 (llenaMain -> .)
    ID              reduce using rule 34 (llenaMain -> .)
    WHILE           reduce using rule 34 (llenaMain -> .)
    FOR             reduce using rule 34 (llenaMain -> .)
    DO              reduce using rule 34 (llenaMain -> .)
    RIGHTKEY        reduce using rule 34 (llenaMain -> .)

    llenaMain                      shift and go to state 52

state 40

    (113) exp -> number . exp2
    (116) exp2 -> . LESS meteOper exp
    (117) exp2 -> . GRTR meteOper exp
    (118) exp2 -> . EQ meteOper exp
    (119) exp2 -> . NOTEQ meteOper exp
    (120) exp2 -> . AND meteOper exp
    (121) exp2 -> . OR meteOper exp
    (122) exp2 -> . SUM meteOper exp
    (124) exp2 -> . MINUS meteOper exp
    (125) exp2 -> . MULTP meteOper exp
    (126) exp2 -> . DIVIDE meteOper exp
    (127) exp2 -> . empty
    (133) empty -> .

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GRTR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTP resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    LESS            shift and go to state 55
    GRTR            shift and go to state 60
    EQ              shift and go to state 62
    NOTEQ           shift and go to state 56
    AND             shift and go to state 53
    OR              shift and go to state 63
    SUM             shift and go to state 58
    MINUS           shift and go to state 59
    MULTP           shift and go to state 61
    DIVIDE          shift and go to state 54
    LEFTBRACK       reduce using rule 133 (empty -> .)
    COMMA           reduce using rule 133 (empty -> .)
    SEMICOLON       reduce using rule 133 (empty -> .)
    RIGHTBRACK      reduce using rule 133 (empty -> .)
    RIGHTPAR        reduce using rule 133 (empty -> .)
    ID              reduce using rule 133 (empty -> .)
    LEFTPAR         reduce using rule 133 (empty -> .)
    INTEGER         reduce using rule 133 (empty -> .)
    FLOAT           reduce using rule 133 (empty -> .)

  ! LESS            [ reduce using rule 133 (empty -> .) ]
  ! GRTR            [ reduce using rule 133 (empty -> .) ]
  ! EQ              [ reduce using rule 133 (empty -> .) ]
  ! NOTEQ           [ reduce using rule 133 (empty -> .) ]
  ! AND             [ reduce using rule 133 (empty -> .) ]
  ! OR              [ reduce using rule 133 (empty -> .) ]
  ! SUM             [ reduce using rule 133 (empty -> .) ]
  ! MINUS           [ reduce using rule 133 (empty -> .) ]
  ! MULTP           [ reduce using rule 133 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 133 (empty -> .) ]

    exp2                           shift and go to state 57
    empty                          shift and go to state 64

state 41

    (54) number -> FLOAT . meteNum
    (114) meteNum -> .

    LESS            reduce using rule 114 (meteNum -> .)
    GRTR            reduce using rule 114 (meteNum -> .)
    EQ              reduce using rule 114 (meteNum -> .)
    NOTEQ           reduce using rule 114 (meteNum -> .)
    AND             reduce using rule 114 (meteNum -> .)
    OR              reduce using rule 114 (meteNum -> .)
    SUM             reduce using rule 114 (meteNum -> .)
    MINUS           reduce using rule 114 (meteNum -> .)
    MULTP           reduce using rule 114 (meteNum -> .)
    DIVIDE          reduce using rule 114 (meteNum -> .)
    LEFTBRACK       reduce using rule 114 (meteNum -> .)
    COMMA           reduce using rule 114 (meteNum -> .)
    SEMICOLON       reduce using rule 114 (meteNum -> .)
    RIGHTBRACK      reduce using rule 114 (meteNum -> .)
    RIGHTPAR        reduce using rule 114 (meteNum -> .)
    ID              reduce using rule 114 (meteNum -> .)
    LEFTPAR         reduce using rule 114 (meteNum -> .)
    INTEGER         reduce using rule 114 (meteNum -> .)
    FLOAT           reduce using rule 114 (meteNum -> .)

    meteNum                        shift and go to state 65

state 42

    (108) exp -> LEFTPAR . metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (109) metePar -> .

    ID              reduce using rule 109 (metePar -> .)
    LEFTPAR         reduce using rule 109 (metePar -> .)
    INTEGER         reduce using rule 109 (metePar -> .)
    FLOAT           reduce using rule 109 (metePar -> .)
    RIGHTPAR        reduce using rule 109 (metePar -> .)
    LESS            reduce using rule 109 (metePar -> .)
    GRTR            reduce using rule 109 (metePar -> .)
    EQ              reduce using rule 109 (metePar -> .)
    NOTEQ           reduce using rule 109 (metePar -> .)
    AND             reduce using rule 109 (metePar -> .)
    OR              reduce using rule 109 (metePar -> .)
    SUM             reduce using rule 109 (metePar -> .)
    MINUS           reduce using rule 109 (metePar -> .)
    MULTP           reduce using rule 109 (metePar -> .)
    DIVIDE          reduce using rule 109 (metePar -> .)

    metePar                        shift and go to state 66

state 43

    (52) assignmentDecl -> ASSGN exp .

    LEFTBRACK       reduce using rule 52 (assignmentDecl -> ASSGN exp .)
    COMMA           reduce using rule 52 (assignmentDecl -> ASSGN exp .)
    SEMICOLON       reduce using rule 52 (assignmentDecl -> ASSGN exp .)


state 44

    (53) number -> INTEGER . meteNum
    (114) meteNum -> .

    LESS            reduce using rule 114 (meteNum -> .)
    GRTR            reduce using rule 114 (meteNum -> .)
    EQ              reduce using rule 114 (meteNum -> .)
    NOTEQ           reduce using rule 114 (meteNum -> .)
    AND             reduce using rule 114 (meteNum -> .)
    OR              reduce using rule 114 (meteNum -> .)
    SUM             reduce using rule 114 (meteNum -> .)
    MINUS           reduce using rule 114 (meteNum -> .)
    MULTP           reduce using rule 114 (meteNum -> .)
    DIVIDE          reduce using rule 114 (meteNum -> .)
    LEFTBRACK       reduce using rule 114 (meteNum -> .)
    COMMA           reduce using rule 114 (meteNum -> .)
    SEMICOLON       reduce using rule 114 (meteNum -> .)
    RIGHTBRACK      reduce using rule 114 (meteNum -> .)
    RIGHTPAR        reduce using rule 114 (meteNum -> .)
    ID              reduce using rule 114 (meteNum -> .)
    LEFTPAR         reduce using rule 114 (meteNum -> .)
    INTEGER         reduce using rule 114 (meteNum -> .)
    FLOAT           reduce using rule 114 (meteNum -> .)

    meteNum                        shift and go to state 67

state 45

    (107) exp -> ID . meteExp exp2
    (111) meteExp -> .

    LESS            reduce using rule 111 (meteExp -> .)
    GRTR            reduce using rule 111 (meteExp -> .)
    EQ              reduce using rule 111 (meteExp -> .)
    NOTEQ           reduce using rule 111 (meteExp -> .)
    AND             reduce using rule 111 (meteExp -> .)
    OR              reduce using rule 111 (meteExp -> .)
    SUM             reduce using rule 111 (meteExp -> .)
    MINUS           reduce using rule 111 (meteExp -> .)
    MULTP           reduce using rule 111 (meteExp -> .)
    DIVIDE          reduce using rule 111 (meteExp -> .)
    LEFTBRACK       reduce using rule 111 (meteExp -> .)
    COMMA           reduce using rule 111 (meteExp -> .)
    SEMICOLON       reduce using rule 111 (meteExp -> .)
    RIGHTBRACK      reduce using rule 111 (meteExp -> .)
    RIGHTPAR        reduce using rule 111 (meteExp -> .)
    ID              reduce using rule 111 (meteExp -> .)
    LEFTPAR         reduce using rule 111 (meteExp -> .)
    INTEGER         reduce using rule 111 (meteExp -> .)
    FLOAT           reduce using rule 111 (meteExp -> .)

    meteExp                        shift and go to state 68

state 46

    (115) exp -> empty .
    (55) number -> empty .

  ! reduce/reduce conflict for LESS resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for GRTR resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for EQ resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for NOTEQ resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for AND resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for OR resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for SUM resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for MINUS resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for MULTP resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for RIGHTBRACK resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for LEFTBRACK resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for COMMA resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for RIGHTPAR resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for LEFTPAR resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for INTEGER resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for FLOAT resolved using rule 55 (number -> empty .)
    LESS            reduce using rule 55 (number -> empty .)
    GRTR            reduce using rule 55 (number -> empty .)
    EQ              reduce using rule 55 (number -> empty .)
    NOTEQ           reduce using rule 55 (number -> empty .)
    AND             reduce using rule 55 (number -> empty .)
    OR              reduce using rule 55 (number -> empty .)
    SUM             reduce using rule 55 (number -> empty .)
    MINUS           reduce using rule 55 (number -> empty .)
    MULTP           reduce using rule 55 (number -> empty .)
    DIVIDE          reduce using rule 55 (number -> empty .)
    RIGHTBRACK      reduce using rule 55 (number -> empty .)
    LEFTBRACK       reduce using rule 55 (number -> empty .)
    COMMA           reduce using rule 55 (number -> empty .)
    SEMICOLON       reduce using rule 55 (number -> empty .)
    RIGHTPAR        reduce using rule 55 (number -> empty .)
    ID              reduce using rule 55 (number -> empty .)
    LEFTPAR         reduce using rule 55 (number -> empty .)
    INTEGER         reduce using rule 55 (number -> empty .)
    FLOAT           reduce using rule 55 (number -> empty .)

  ! LEFTBRACK       [ reduce using rule 115 (exp -> empty .) ]
  ! COMMA           [ reduce using rule 115 (exp -> empty .) ]
  ! SEMICOLON       [ reduce using rule 115 (exp -> empty .) ]
  ! RIGHTBRACK      [ reduce using rule 115 (exp -> empty .) ]
  ! RIGHTPAR        [ reduce using rule 115 (exp -> empty .) ]
  ! ID              [ reduce using rule 115 (exp -> empty .) ]
  ! LEFTPAR         [ reduce using rule 115 (exp -> empty .) ]
  ! INTEGER         [ reduce using rule 115 (exp -> empty .) ]
  ! FLOAT           [ reduce using rule 115 (exp -> empty .) ]
  ! LESS            [ reduce using rule 115 (exp -> empty .) ]
  ! GRTR            [ reduce using rule 115 (exp -> empty .) ]
  ! EQ              [ reduce using rule 115 (exp -> empty .) ]
  ! NOTEQ           [ reduce using rule 115 (exp -> empty .) ]
  ! AND             [ reduce using rule 115 (exp -> empty .) ]
  ! OR              [ reduce using rule 115 (exp -> empty .) ]
  ! SUM             [ reduce using rule 115 (exp -> empty .) ]
  ! MINUS           [ reduce using rule 115 (exp -> empty .) ]
  ! MULTP           [ reduce using rule 115 (exp -> empty .) ]
  ! DIVIDE          [ reduce using rule 115 (exp -> empty .) ]


state 47

    (25) array -> LEFTBRACK . exp RIGHTBRACK array
    (107) exp -> . ID meteExp exp2
    (108) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (113) exp -> . number exp2
    (115) exp -> . empty
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (133) empty -> .

    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    RIGHTBRACK      reduce using rule 133 (empty -> .)
    LESS            reduce using rule 133 (empty -> .)
    GRTR            reduce using rule 133 (empty -> .)
    EQ              reduce using rule 133 (empty -> .)
    NOTEQ           reduce using rule 133 (empty -> .)
    AND             reduce using rule 133 (empty -> .)
    OR              reduce using rule 133 (empty -> .)
    SUM             reduce using rule 133 (empty -> .)
    MINUS           reduce using rule 133 (empty -> .)
    MULTP           reduce using rule 133 (empty -> .)
    DIVIDE          reduce using rule 133 (empty -> .)

    number                         shift and go to state 40
    exp                            shift and go to state 69
    empty                          shift and go to state 46

state 48

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 . declare3 SEMICOLON declareRecursivo
    (10) declare3 -> . COMMA ID altaVarGlobal declare3
    (24) declare3 -> . empty
    (133) empty -> .

    COMMA           shift and go to state 71
    SEMICOLON       reduce using rule 133 (empty -> .)

    declare3                       shift and go to state 70
    empty                          shift and go to state 72

state 49

    (9) declare2 -> array .

    COMMA           reduce using rule 9 (declare2 -> array .)
    SEMICOLON       reduce using rule 9 (declare2 -> array .)


state 50

    (26) array -> empty .

    COMMA           reduce using rule 26 (array -> empty .)
    SEMICOLON       reduce using rule 26 (array -> empty .)


state 51

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR . funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (17) funct2 -> . type ID altaVarLocal funct3
    (19) funct2 -> . empty
    (27) type -> . type2
    (133) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    RIGHTPAR        reduce using rule 133 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    funct2                         shift and go to state 73
    type                           shift and go to state 74
    empty                          shift and go to state 75
    type2                          shift and go to state 19

state 52

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY llenaMain . altaModuloMain est RIGHTKEY
    (35) altaModuloMain -> .

    IF              reduce using rule 35 (altaModuloMain -> .)
    DECLARE         reduce using rule 35 (altaModuloMain -> .)
    READ            reduce using rule 35 (altaModuloMain -> .)
    WRITE           reduce using rule 35 (altaModuloMain -> .)
    ID              reduce using rule 35 (altaModuloMain -> .)
    WHILE           reduce using rule 35 (altaModuloMain -> .)
    FOR             reduce using rule 35 (altaModuloMain -> .)
    DO              reduce using rule 35 (altaModuloMain -> .)
    RIGHTKEY        reduce using rule 35 (altaModuloMain -> .)

    altaModuloMain                 shift and go to state 76

state 53

    (120) exp2 -> AND . meteOper exp
    (123) meteOper -> .

    ID              reduce using rule 123 (meteOper -> .)
    LEFTPAR         reduce using rule 123 (meteOper -> .)
    INTEGER         reduce using rule 123 (meteOper -> .)
    FLOAT           reduce using rule 123 (meteOper -> .)
    LESS            reduce using rule 123 (meteOper -> .)
    GRTR            reduce using rule 123 (meteOper -> .)
    EQ              reduce using rule 123 (meteOper -> .)
    NOTEQ           reduce using rule 123 (meteOper -> .)
    AND             reduce using rule 123 (meteOper -> .)
    OR              reduce using rule 123 (meteOper -> .)
    SUM             reduce using rule 123 (meteOper -> .)
    MINUS           reduce using rule 123 (meteOper -> .)
    MULTP           reduce using rule 123 (meteOper -> .)
    DIVIDE          reduce using rule 123 (meteOper -> .)
    LEFTBRACK       reduce using rule 123 (meteOper -> .)
    COMMA           reduce using rule 123 (meteOper -> .)
    SEMICOLON       reduce using rule 123 (meteOper -> .)
    RIGHTBRACK      reduce using rule 123 (meteOper -> .)
    RIGHTPAR        reduce using rule 123 (meteOper -> .)

    meteOper                       shift and go to state 77

state 54

    (126) exp2 -> DIVIDE . meteOper exp
    (123) meteOper -> .

    ID              reduce using rule 123 (meteOper -> .)
    LEFTPAR         reduce using rule 123 (meteOper -> .)
    INTEGER         reduce using rule 123 (meteOper -> .)
    FLOAT           reduce using rule 123 (meteOper -> .)
    LESS            reduce using rule 123 (meteOper -> .)
    GRTR            reduce using rule 123 (meteOper -> .)
    EQ              reduce using rule 123 (meteOper -> .)
    NOTEQ           reduce using rule 123 (meteOper -> .)
    AND             reduce using rule 123 (meteOper -> .)
    OR              reduce using rule 123 (meteOper -> .)
    SUM             reduce using rule 123 (meteOper -> .)
    MINUS           reduce using rule 123 (meteOper -> .)
    MULTP           reduce using rule 123 (meteOper -> .)
    DIVIDE          reduce using rule 123 (meteOper -> .)
    LEFTBRACK       reduce using rule 123 (meteOper -> .)
    COMMA           reduce using rule 123 (meteOper -> .)
    SEMICOLON       reduce using rule 123 (meteOper -> .)
    RIGHTBRACK      reduce using rule 123 (meteOper -> .)
    RIGHTPAR        reduce using rule 123 (meteOper -> .)

    meteOper                       shift and go to state 78

state 55

    (116) exp2 -> LESS . meteOper exp
    (123) meteOper -> .

    ID              reduce using rule 123 (meteOper -> .)
    LEFTPAR         reduce using rule 123 (meteOper -> .)
    INTEGER         reduce using rule 123 (meteOper -> .)
    FLOAT           reduce using rule 123 (meteOper -> .)
    LESS            reduce using rule 123 (meteOper -> .)
    GRTR            reduce using rule 123 (meteOper -> .)
    EQ              reduce using rule 123 (meteOper -> .)
    NOTEQ           reduce using rule 123 (meteOper -> .)
    AND             reduce using rule 123 (meteOper -> .)
    OR              reduce using rule 123 (meteOper -> .)
    SUM             reduce using rule 123 (meteOper -> .)
    MINUS           reduce using rule 123 (meteOper -> .)
    MULTP           reduce using rule 123 (meteOper -> .)
    DIVIDE          reduce using rule 123 (meteOper -> .)
    LEFTBRACK       reduce using rule 123 (meteOper -> .)
    COMMA           reduce using rule 123 (meteOper -> .)
    SEMICOLON       reduce using rule 123 (meteOper -> .)
    RIGHTBRACK      reduce using rule 123 (meteOper -> .)
    RIGHTPAR        reduce using rule 123 (meteOper -> .)

    meteOper                       shift and go to state 79

state 56

    (119) exp2 -> NOTEQ . meteOper exp
    (123) meteOper -> .

    ID              reduce using rule 123 (meteOper -> .)
    LEFTPAR         reduce using rule 123 (meteOper -> .)
    INTEGER         reduce using rule 123 (meteOper -> .)
    FLOAT           reduce using rule 123 (meteOper -> .)
    LESS            reduce using rule 123 (meteOper -> .)
    GRTR            reduce using rule 123 (meteOper -> .)
    EQ              reduce using rule 123 (meteOper -> .)
    NOTEQ           reduce using rule 123 (meteOper -> .)
    AND             reduce using rule 123 (meteOper -> .)
    OR              reduce using rule 123 (meteOper -> .)
    SUM             reduce using rule 123 (meteOper -> .)
    MINUS           reduce using rule 123 (meteOper -> .)
    MULTP           reduce using rule 123 (meteOper -> .)
    DIVIDE          reduce using rule 123 (meteOper -> .)
    LEFTBRACK       reduce using rule 123 (meteOper -> .)
    COMMA           reduce using rule 123 (meteOper -> .)
    SEMICOLON       reduce using rule 123 (meteOper -> .)
    RIGHTBRACK      reduce using rule 123 (meteOper -> .)
    RIGHTPAR        reduce using rule 123 (meteOper -> .)

    meteOper                       shift and go to state 80

state 57

    (113) exp -> number exp2 .

    LEFTBRACK       reduce using rule 113 (exp -> number exp2 .)
    COMMA           reduce using rule 113 (exp -> number exp2 .)
    SEMICOLON       reduce using rule 113 (exp -> number exp2 .)
    RIGHTBRACK      reduce using rule 113 (exp -> number exp2 .)
    RIGHTPAR        reduce using rule 113 (exp -> number exp2 .)
    ID              reduce using rule 113 (exp -> number exp2 .)
    LEFTPAR         reduce using rule 113 (exp -> number exp2 .)
    INTEGER         reduce using rule 113 (exp -> number exp2 .)
    FLOAT           reduce using rule 113 (exp -> number exp2 .)
    LESS            reduce using rule 113 (exp -> number exp2 .)
    GRTR            reduce using rule 113 (exp -> number exp2 .)
    EQ              reduce using rule 113 (exp -> number exp2 .)
    NOTEQ           reduce using rule 113 (exp -> number exp2 .)
    AND             reduce using rule 113 (exp -> number exp2 .)
    OR              reduce using rule 113 (exp -> number exp2 .)
    SUM             reduce using rule 113 (exp -> number exp2 .)
    MINUS           reduce using rule 113 (exp -> number exp2 .)
    MULTP           reduce using rule 113 (exp -> number exp2 .)
    DIVIDE          reduce using rule 113 (exp -> number exp2 .)


state 58

    (122) exp2 -> SUM . meteOper exp
    (123) meteOper -> .

    ID              reduce using rule 123 (meteOper -> .)
    LEFTPAR         reduce using rule 123 (meteOper -> .)
    INTEGER         reduce using rule 123 (meteOper -> .)
    FLOAT           reduce using rule 123 (meteOper -> .)
    LESS            reduce using rule 123 (meteOper -> .)
    GRTR            reduce using rule 123 (meteOper -> .)
    EQ              reduce using rule 123 (meteOper -> .)
    NOTEQ           reduce using rule 123 (meteOper -> .)
    AND             reduce using rule 123 (meteOper -> .)
    OR              reduce using rule 123 (meteOper -> .)
    SUM             reduce using rule 123 (meteOper -> .)
    MINUS           reduce using rule 123 (meteOper -> .)
    MULTP           reduce using rule 123 (meteOper -> .)
    DIVIDE          reduce using rule 123 (meteOper -> .)
    LEFTBRACK       reduce using rule 123 (meteOper -> .)
    COMMA           reduce using rule 123 (meteOper -> .)
    SEMICOLON       reduce using rule 123 (meteOper -> .)
    RIGHTBRACK      reduce using rule 123 (meteOper -> .)
    RIGHTPAR        reduce using rule 123 (meteOper -> .)

    meteOper                       shift and go to state 81

state 59

    (124) exp2 -> MINUS . meteOper exp
    (123) meteOper -> .

    ID              reduce using rule 123 (meteOper -> .)
    LEFTPAR         reduce using rule 123 (meteOper -> .)
    INTEGER         reduce using rule 123 (meteOper -> .)
    FLOAT           reduce using rule 123 (meteOper -> .)
    LESS            reduce using rule 123 (meteOper -> .)
    GRTR            reduce using rule 123 (meteOper -> .)
    EQ              reduce using rule 123 (meteOper -> .)
    NOTEQ           reduce using rule 123 (meteOper -> .)
    AND             reduce using rule 123 (meteOper -> .)
    OR              reduce using rule 123 (meteOper -> .)
    SUM             reduce using rule 123 (meteOper -> .)
    MINUS           reduce using rule 123 (meteOper -> .)
    MULTP           reduce using rule 123 (meteOper -> .)
    DIVIDE          reduce using rule 123 (meteOper -> .)
    LEFTBRACK       reduce using rule 123 (meteOper -> .)
    COMMA           reduce using rule 123 (meteOper -> .)
    SEMICOLON       reduce using rule 123 (meteOper -> .)
    RIGHTBRACK      reduce using rule 123 (meteOper -> .)
    RIGHTPAR        reduce using rule 123 (meteOper -> .)

    meteOper                       shift and go to state 82

state 60

    (117) exp2 -> GRTR . meteOper exp
    (123) meteOper -> .

    ID              reduce using rule 123 (meteOper -> .)
    LEFTPAR         reduce using rule 123 (meteOper -> .)
    INTEGER         reduce using rule 123 (meteOper -> .)
    FLOAT           reduce using rule 123 (meteOper -> .)
    LESS            reduce using rule 123 (meteOper -> .)
    GRTR            reduce using rule 123 (meteOper -> .)
    EQ              reduce using rule 123 (meteOper -> .)
    NOTEQ           reduce using rule 123 (meteOper -> .)
    AND             reduce using rule 123 (meteOper -> .)
    OR              reduce using rule 123 (meteOper -> .)
    SUM             reduce using rule 123 (meteOper -> .)
    MINUS           reduce using rule 123 (meteOper -> .)
    MULTP           reduce using rule 123 (meteOper -> .)
    DIVIDE          reduce using rule 123 (meteOper -> .)
    LEFTBRACK       reduce using rule 123 (meteOper -> .)
    COMMA           reduce using rule 123 (meteOper -> .)
    SEMICOLON       reduce using rule 123 (meteOper -> .)
    RIGHTBRACK      reduce using rule 123 (meteOper -> .)
    RIGHTPAR        reduce using rule 123 (meteOper -> .)

    meteOper                       shift and go to state 83

state 61

    (125) exp2 -> MULTP . meteOper exp
    (123) meteOper -> .

    ID              reduce using rule 123 (meteOper -> .)
    LEFTPAR         reduce using rule 123 (meteOper -> .)
    INTEGER         reduce using rule 123 (meteOper -> .)
    FLOAT           reduce using rule 123 (meteOper -> .)
    LESS            reduce using rule 123 (meteOper -> .)
    GRTR            reduce using rule 123 (meteOper -> .)
    EQ              reduce using rule 123 (meteOper -> .)
    NOTEQ           reduce using rule 123 (meteOper -> .)
    AND             reduce using rule 123 (meteOper -> .)
    OR              reduce using rule 123 (meteOper -> .)
    SUM             reduce using rule 123 (meteOper -> .)
    MINUS           reduce using rule 123 (meteOper -> .)
    MULTP           reduce using rule 123 (meteOper -> .)
    DIVIDE          reduce using rule 123 (meteOper -> .)
    LEFTBRACK       reduce using rule 123 (meteOper -> .)
    COMMA           reduce using rule 123 (meteOper -> .)
    SEMICOLON       reduce using rule 123 (meteOper -> .)
    RIGHTBRACK      reduce using rule 123 (meteOper -> .)
    RIGHTPAR        reduce using rule 123 (meteOper -> .)

    meteOper                       shift and go to state 84

state 62

    (118) exp2 -> EQ . meteOper exp
    (123) meteOper -> .

    ID              reduce using rule 123 (meteOper -> .)
    LEFTPAR         reduce using rule 123 (meteOper -> .)
    INTEGER         reduce using rule 123 (meteOper -> .)
    FLOAT           reduce using rule 123 (meteOper -> .)
    LESS            reduce using rule 123 (meteOper -> .)
    GRTR            reduce using rule 123 (meteOper -> .)
    EQ              reduce using rule 123 (meteOper -> .)
    NOTEQ           reduce using rule 123 (meteOper -> .)
    AND             reduce using rule 123 (meteOper -> .)
    OR              reduce using rule 123 (meteOper -> .)
    SUM             reduce using rule 123 (meteOper -> .)
    MINUS           reduce using rule 123 (meteOper -> .)
    MULTP           reduce using rule 123 (meteOper -> .)
    DIVIDE          reduce using rule 123 (meteOper -> .)
    LEFTBRACK       reduce using rule 123 (meteOper -> .)
    COMMA           reduce using rule 123 (meteOper -> .)
    SEMICOLON       reduce using rule 123 (meteOper -> .)
    RIGHTBRACK      reduce using rule 123 (meteOper -> .)
    RIGHTPAR        reduce using rule 123 (meteOper -> .)

    meteOper                       shift and go to state 85

state 63

    (121) exp2 -> OR . meteOper exp
    (123) meteOper -> .

    ID              reduce using rule 123 (meteOper -> .)
    LEFTPAR         reduce using rule 123 (meteOper -> .)
    INTEGER         reduce using rule 123 (meteOper -> .)
    FLOAT           reduce using rule 123 (meteOper -> .)
    LESS            reduce using rule 123 (meteOper -> .)
    GRTR            reduce using rule 123 (meteOper -> .)
    EQ              reduce using rule 123 (meteOper -> .)
    NOTEQ           reduce using rule 123 (meteOper -> .)
    AND             reduce using rule 123 (meteOper -> .)
    OR              reduce using rule 123 (meteOper -> .)
    SUM             reduce using rule 123 (meteOper -> .)
    MINUS           reduce using rule 123 (meteOper -> .)
    MULTP           reduce using rule 123 (meteOper -> .)
    DIVIDE          reduce using rule 123 (meteOper -> .)
    LEFTBRACK       reduce using rule 123 (meteOper -> .)
    COMMA           reduce using rule 123 (meteOper -> .)
    SEMICOLON       reduce using rule 123 (meteOper -> .)
    RIGHTBRACK      reduce using rule 123 (meteOper -> .)
    RIGHTPAR        reduce using rule 123 (meteOper -> .)

    meteOper                       shift and go to state 86

state 64

    (127) exp2 -> empty .

    LEFTBRACK       reduce using rule 127 (exp2 -> empty .)
    COMMA           reduce using rule 127 (exp2 -> empty .)
    SEMICOLON       reduce using rule 127 (exp2 -> empty .)
    RIGHTBRACK      reduce using rule 127 (exp2 -> empty .)
    RIGHTPAR        reduce using rule 127 (exp2 -> empty .)
    ID              reduce using rule 127 (exp2 -> empty .)
    LEFTPAR         reduce using rule 127 (exp2 -> empty .)
    INTEGER         reduce using rule 127 (exp2 -> empty .)
    FLOAT           reduce using rule 127 (exp2 -> empty .)
    LESS            reduce using rule 127 (exp2 -> empty .)
    GRTR            reduce using rule 127 (exp2 -> empty .)
    EQ              reduce using rule 127 (exp2 -> empty .)
    NOTEQ           reduce using rule 127 (exp2 -> empty .)
    AND             reduce using rule 127 (exp2 -> empty .)
    OR              reduce using rule 127 (exp2 -> empty .)
    SUM             reduce using rule 127 (exp2 -> empty .)
    MINUS           reduce using rule 127 (exp2 -> empty .)
    MULTP           reduce using rule 127 (exp2 -> empty .)
    DIVIDE          reduce using rule 127 (exp2 -> empty .)


state 65

    (54) number -> FLOAT meteNum .

    LESS            reduce using rule 54 (number -> FLOAT meteNum .)
    GRTR            reduce using rule 54 (number -> FLOAT meteNum .)
    EQ              reduce using rule 54 (number -> FLOAT meteNum .)
    NOTEQ           reduce using rule 54 (number -> FLOAT meteNum .)
    AND             reduce using rule 54 (number -> FLOAT meteNum .)
    OR              reduce using rule 54 (number -> FLOAT meteNum .)
    SUM             reduce using rule 54 (number -> FLOAT meteNum .)
    MINUS           reduce using rule 54 (number -> FLOAT meteNum .)
    MULTP           reduce using rule 54 (number -> FLOAT meteNum .)
    DIVIDE          reduce using rule 54 (number -> FLOAT meteNum .)
    RIGHTBRACK      reduce using rule 54 (number -> FLOAT meteNum .)
    LEFTBRACK       reduce using rule 54 (number -> FLOAT meteNum .)
    COMMA           reduce using rule 54 (number -> FLOAT meteNum .)
    SEMICOLON       reduce using rule 54 (number -> FLOAT meteNum .)
    RIGHTPAR        reduce using rule 54 (number -> FLOAT meteNum .)
    ID              reduce using rule 54 (number -> FLOAT meteNum .)
    LEFTPAR         reduce using rule 54 (number -> FLOAT meteNum .)
    INTEGER         reduce using rule 54 (number -> FLOAT meteNum .)
    FLOAT           reduce using rule 54 (number -> FLOAT meteNum .)


state 66

    (108) exp -> LEFTPAR metePar . exp RIGHTPAR sacaPar exp2 generaCuad
    (107) exp -> . ID meteExp exp2
    (108) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (113) exp -> . number exp2
    (115) exp -> . empty
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (133) empty -> .

    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    RIGHTPAR        reduce using rule 133 (empty -> .)
    LESS            reduce using rule 133 (empty -> .)
    GRTR            reduce using rule 133 (empty -> .)
    EQ              reduce using rule 133 (empty -> .)
    NOTEQ           reduce using rule 133 (empty -> .)
    AND             reduce using rule 133 (empty -> .)
    OR              reduce using rule 133 (empty -> .)
    SUM             reduce using rule 133 (empty -> .)
    MINUS           reduce using rule 133 (empty -> .)
    MULTP           reduce using rule 133 (empty -> .)
    DIVIDE          reduce using rule 133 (empty -> .)

    number                         shift and go to state 40
    exp                            shift and go to state 87
    empty                          shift and go to state 46

state 67

    (53) number -> INTEGER meteNum .

    LESS            reduce using rule 53 (number -> INTEGER meteNum .)
    GRTR            reduce using rule 53 (number -> INTEGER meteNum .)
    EQ              reduce using rule 53 (number -> INTEGER meteNum .)
    NOTEQ           reduce using rule 53 (number -> INTEGER meteNum .)
    AND             reduce using rule 53 (number -> INTEGER meteNum .)
    OR              reduce using rule 53 (number -> INTEGER meteNum .)
    SUM             reduce using rule 53 (number -> INTEGER meteNum .)
    MINUS           reduce using rule 53 (number -> INTEGER meteNum .)
    MULTP           reduce using rule 53 (number -> INTEGER meteNum .)
    DIVIDE          reduce using rule 53 (number -> INTEGER meteNum .)
    RIGHTBRACK      reduce using rule 53 (number -> INTEGER meteNum .)
    LEFTBRACK       reduce using rule 53 (number -> INTEGER meteNum .)
    COMMA           reduce using rule 53 (number -> INTEGER meteNum .)
    SEMICOLON       reduce using rule 53 (number -> INTEGER meteNum .)
    RIGHTPAR        reduce using rule 53 (number -> INTEGER meteNum .)
    ID              reduce using rule 53 (number -> INTEGER meteNum .)
    LEFTPAR         reduce using rule 53 (number -> INTEGER meteNum .)
    INTEGER         reduce using rule 53 (number -> INTEGER meteNum .)
    FLOAT           reduce using rule 53 (number -> INTEGER meteNum .)


state 68

    (107) exp -> ID meteExp . exp2
    (116) exp2 -> . LESS meteOper exp
    (117) exp2 -> . GRTR meteOper exp
    (118) exp2 -> . EQ meteOper exp
    (119) exp2 -> . NOTEQ meteOper exp
    (120) exp2 -> . AND meteOper exp
    (121) exp2 -> . OR meteOper exp
    (122) exp2 -> . SUM meteOper exp
    (124) exp2 -> . MINUS meteOper exp
    (125) exp2 -> . MULTP meteOper exp
    (126) exp2 -> . DIVIDE meteOper exp
    (127) exp2 -> . empty
    (133) empty -> .

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GRTR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTP resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    LESS            shift and go to state 55
    GRTR            shift and go to state 60
    EQ              shift and go to state 62
    NOTEQ           shift and go to state 56
    AND             shift and go to state 53
    OR              shift and go to state 63
    SUM             shift and go to state 58
    MINUS           shift and go to state 59
    MULTP           shift and go to state 61
    DIVIDE          shift and go to state 54
    LEFTBRACK       reduce using rule 133 (empty -> .)
    COMMA           reduce using rule 133 (empty -> .)
    SEMICOLON       reduce using rule 133 (empty -> .)
    RIGHTBRACK      reduce using rule 133 (empty -> .)
    RIGHTPAR        reduce using rule 133 (empty -> .)
    ID              reduce using rule 133 (empty -> .)
    LEFTPAR         reduce using rule 133 (empty -> .)
    INTEGER         reduce using rule 133 (empty -> .)
    FLOAT           reduce using rule 133 (empty -> .)

  ! LESS            [ reduce using rule 133 (empty -> .) ]
  ! GRTR            [ reduce using rule 133 (empty -> .) ]
  ! EQ              [ reduce using rule 133 (empty -> .) ]
  ! NOTEQ           [ reduce using rule 133 (empty -> .) ]
  ! AND             [ reduce using rule 133 (empty -> .) ]
  ! OR              [ reduce using rule 133 (empty -> .) ]
  ! SUM             [ reduce using rule 133 (empty -> .) ]
  ! MINUS           [ reduce using rule 133 (empty -> .) ]
  ! MULTP           [ reduce using rule 133 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 133 (empty -> .) ]

    exp2                           shift and go to state 88
    empty                          shift and go to state 64

state 69

    (25) array -> LEFTBRACK exp . RIGHTBRACK array

    RIGHTBRACK      shift and go to state 89


state 70

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 . SEMICOLON declareRecursivo

    SEMICOLON       shift and go to state 90


state 71

    (10) declare3 -> COMMA . ID altaVarGlobal declare3

    ID              shift and go to state 91


state 72

    (24) declare3 -> empty .

    SEMICOLON       reduce using rule 24 (declare3 -> empty .)


state 73

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 . RIGHTPAR LEFTKEY est functReturn RIGHTKEY

    RIGHTPAR        shift and go to state 92


state 74

    (17) funct2 -> type . ID altaVarLocal funct3

    ID              shift and go to state 93


state 75

    (19) funct2 -> empty .

    RIGHTPAR        reduce using rule 19 (funct2 -> empty .)


state 76

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY llenaMain altaModuloMain . est RIGHTKEY
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . for
    (79) cycles -> . do-while
    (132) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (128) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (133) empty -> .
    (83) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (87) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 108
    DECLARE         shift and go to state 107
    READ            shift and go to state 95
    WRITE           shift and go to state 105
    ID              shift and go to state 106
    RIGHTKEY        reduce using rule 133 (empty -> .)
    WHILE           shift and go to state 97
    FOR             shift and go to state 103
    DO              shift and go to state 94

  ! IF              [ reduce using rule 133 (empty -> .) ]
  ! DECLARE         [ reduce using rule 133 (empty -> .) ]
  ! READ            [ reduce using rule 133 (empty -> .) ]
  ! WRITE           [ reduce using rule 133 (empty -> .) ]
  ! ID              [ reduce using rule 133 (empty -> .) ]
  ! WHILE           [ reduce using rule 133 (empty -> .) ]
  ! FOR             [ reduce using rule 133 (empty -> .) ]
  ! DO              [ reduce using rule 133 (empty -> .) ]

    conditional                    shift and go to state 96
    do-while                       shift and go to state 98
    est                            shift and go to state 99
    for                            shift and go to state 100
    llamadaAFunct                  shift and go to state 101
    input                          shift and go to state 102
    assignment                     shift and go to state 104
    cycles                         shift and go to state 109
    while                          shift and go to state 110
    empty                          shift and go to state 111
    output                         shift and go to state 112
    declareLocal                   shift and go to state 113

state 77

    (120) exp2 -> AND meteOper . exp
    (107) exp -> . ID meteExp exp2
    (108) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (113) exp -> . number exp2
    (115) exp -> . empty
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (133) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    LEFTBRACK       reduce using rule 133 (empty -> .)
    COMMA           reduce using rule 133 (empty -> .)
    SEMICOLON       reduce using rule 133 (empty -> .)
    RIGHTBRACK      reduce using rule 133 (empty -> .)
    RIGHTPAR        reduce using rule 133 (empty -> .)
    LESS            reduce using rule 133 (empty -> .)
    GRTR            reduce using rule 133 (empty -> .)
    EQ              reduce using rule 133 (empty -> .)
    NOTEQ           reduce using rule 133 (empty -> .)
    AND             reduce using rule 133 (empty -> .)
    OR              reduce using rule 133 (empty -> .)
    SUM             reduce using rule 133 (empty -> .)
    MINUS           reduce using rule 133 (empty -> .)
    MULTP           reduce using rule 133 (empty -> .)
    DIVIDE          reduce using rule 133 (empty -> .)

  ! ID              [ reduce using rule 133 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 133 (empty -> .) ]
  ! INTEGER         [ reduce using rule 133 (empty -> .) ]
  ! FLOAT           [ reduce using rule 133 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 114
    empty                          shift and go to state 46

state 78

    (126) exp2 -> DIVIDE meteOper . exp
    (107) exp -> . ID meteExp exp2
    (108) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (113) exp -> . number exp2
    (115) exp -> . empty
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (133) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    LEFTBRACK       reduce using rule 133 (empty -> .)
    COMMA           reduce using rule 133 (empty -> .)
    SEMICOLON       reduce using rule 133 (empty -> .)
    RIGHTBRACK      reduce using rule 133 (empty -> .)
    RIGHTPAR        reduce using rule 133 (empty -> .)
    LESS            reduce using rule 133 (empty -> .)
    GRTR            reduce using rule 133 (empty -> .)
    EQ              reduce using rule 133 (empty -> .)
    NOTEQ           reduce using rule 133 (empty -> .)
    AND             reduce using rule 133 (empty -> .)
    OR              reduce using rule 133 (empty -> .)
    SUM             reduce using rule 133 (empty -> .)
    MINUS           reduce using rule 133 (empty -> .)
    MULTP           reduce using rule 133 (empty -> .)
    DIVIDE          reduce using rule 133 (empty -> .)

  ! ID              [ reduce using rule 133 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 133 (empty -> .) ]
  ! INTEGER         [ reduce using rule 133 (empty -> .) ]
  ! FLOAT           [ reduce using rule 133 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 115
    empty                          shift and go to state 46

state 79

    (116) exp2 -> LESS meteOper . exp
    (107) exp -> . ID meteExp exp2
    (108) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (113) exp -> . number exp2
    (115) exp -> . empty
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (133) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    LEFTBRACK       reduce using rule 133 (empty -> .)
    COMMA           reduce using rule 133 (empty -> .)
    SEMICOLON       reduce using rule 133 (empty -> .)
    RIGHTBRACK      reduce using rule 133 (empty -> .)
    RIGHTPAR        reduce using rule 133 (empty -> .)
    LESS            reduce using rule 133 (empty -> .)
    GRTR            reduce using rule 133 (empty -> .)
    EQ              reduce using rule 133 (empty -> .)
    NOTEQ           reduce using rule 133 (empty -> .)
    AND             reduce using rule 133 (empty -> .)
    OR              reduce using rule 133 (empty -> .)
    SUM             reduce using rule 133 (empty -> .)
    MINUS           reduce using rule 133 (empty -> .)
    MULTP           reduce using rule 133 (empty -> .)
    DIVIDE          reduce using rule 133 (empty -> .)

  ! ID              [ reduce using rule 133 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 133 (empty -> .) ]
  ! INTEGER         [ reduce using rule 133 (empty -> .) ]
  ! FLOAT           [ reduce using rule 133 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 116
    empty                          shift and go to state 46

state 80

    (119) exp2 -> NOTEQ meteOper . exp
    (107) exp -> . ID meteExp exp2
    (108) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (113) exp -> . number exp2
    (115) exp -> . empty
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (133) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    LEFTBRACK       reduce using rule 133 (empty -> .)
    COMMA           reduce using rule 133 (empty -> .)
    SEMICOLON       reduce using rule 133 (empty -> .)
    RIGHTBRACK      reduce using rule 133 (empty -> .)
    RIGHTPAR        reduce using rule 133 (empty -> .)
    LESS            reduce using rule 133 (empty -> .)
    GRTR            reduce using rule 133 (empty -> .)
    EQ              reduce using rule 133 (empty -> .)
    NOTEQ           reduce using rule 133 (empty -> .)
    AND             reduce using rule 133 (empty -> .)
    OR              reduce using rule 133 (empty -> .)
    SUM             reduce using rule 133 (empty -> .)
    MINUS           reduce using rule 133 (empty -> .)
    MULTP           reduce using rule 133 (empty -> .)
    DIVIDE          reduce using rule 133 (empty -> .)

  ! ID              [ reduce using rule 133 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 133 (empty -> .) ]
  ! INTEGER         [ reduce using rule 133 (empty -> .) ]
  ! FLOAT           [ reduce using rule 133 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 117
    empty                          shift and go to state 46

state 81

    (122) exp2 -> SUM meteOper . exp
    (107) exp -> . ID meteExp exp2
    (108) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (113) exp -> . number exp2
    (115) exp -> . empty
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (133) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    LEFTBRACK       reduce using rule 133 (empty -> .)
    COMMA           reduce using rule 133 (empty -> .)
    SEMICOLON       reduce using rule 133 (empty -> .)
    RIGHTBRACK      reduce using rule 133 (empty -> .)
    RIGHTPAR        reduce using rule 133 (empty -> .)
    LESS            reduce using rule 133 (empty -> .)
    GRTR            reduce using rule 133 (empty -> .)
    EQ              reduce using rule 133 (empty -> .)
    NOTEQ           reduce using rule 133 (empty -> .)
    AND             reduce using rule 133 (empty -> .)
    OR              reduce using rule 133 (empty -> .)
    SUM             reduce using rule 133 (empty -> .)
    MINUS           reduce using rule 133 (empty -> .)
    MULTP           reduce using rule 133 (empty -> .)
    DIVIDE          reduce using rule 133 (empty -> .)

  ! ID              [ reduce using rule 133 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 133 (empty -> .) ]
  ! INTEGER         [ reduce using rule 133 (empty -> .) ]
  ! FLOAT           [ reduce using rule 133 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 118
    empty                          shift and go to state 46

state 82

    (124) exp2 -> MINUS meteOper . exp
    (107) exp -> . ID meteExp exp2
    (108) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (113) exp -> . number exp2
    (115) exp -> . empty
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (133) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    LEFTBRACK       reduce using rule 133 (empty -> .)
    COMMA           reduce using rule 133 (empty -> .)
    SEMICOLON       reduce using rule 133 (empty -> .)
    RIGHTBRACK      reduce using rule 133 (empty -> .)
    RIGHTPAR        reduce using rule 133 (empty -> .)
    LESS            reduce using rule 133 (empty -> .)
    GRTR            reduce using rule 133 (empty -> .)
    EQ              reduce using rule 133 (empty -> .)
    NOTEQ           reduce using rule 133 (empty -> .)
    AND             reduce using rule 133 (empty -> .)
    OR              reduce using rule 133 (empty -> .)
    SUM             reduce using rule 133 (empty -> .)
    MINUS           reduce using rule 133 (empty -> .)
    MULTP           reduce using rule 133 (empty -> .)
    DIVIDE          reduce using rule 133 (empty -> .)

  ! ID              [ reduce using rule 133 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 133 (empty -> .) ]
  ! INTEGER         [ reduce using rule 133 (empty -> .) ]
  ! FLOAT           [ reduce using rule 133 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 119
    empty                          shift and go to state 46

state 83

    (117) exp2 -> GRTR meteOper . exp
    (107) exp -> . ID meteExp exp2
    (108) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (113) exp -> . number exp2
    (115) exp -> . empty
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (133) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    LEFTBRACK       reduce using rule 133 (empty -> .)
    COMMA           reduce using rule 133 (empty -> .)
    SEMICOLON       reduce using rule 133 (empty -> .)
    RIGHTBRACK      reduce using rule 133 (empty -> .)
    RIGHTPAR        reduce using rule 133 (empty -> .)
    LESS            reduce using rule 133 (empty -> .)
    GRTR            reduce using rule 133 (empty -> .)
    EQ              reduce using rule 133 (empty -> .)
    NOTEQ           reduce using rule 133 (empty -> .)
    AND             reduce using rule 133 (empty -> .)
    OR              reduce using rule 133 (empty -> .)
    SUM             reduce using rule 133 (empty -> .)
    MINUS           reduce using rule 133 (empty -> .)
    MULTP           reduce using rule 133 (empty -> .)
    DIVIDE          reduce using rule 133 (empty -> .)

  ! ID              [ reduce using rule 133 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 133 (empty -> .) ]
  ! INTEGER         [ reduce using rule 133 (empty -> .) ]
  ! FLOAT           [ reduce using rule 133 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 120
    empty                          shift and go to state 46

state 84

    (125) exp2 -> MULTP meteOper . exp
    (107) exp -> . ID meteExp exp2
    (108) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (113) exp -> . number exp2
    (115) exp -> . empty
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (133) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    LEFTBRACK       reduce using rule 133 (empty -> .)
    COMMA           reduce using rule 133 (empty -> .)
    SEMICOLON       reduce using rule 133 (empty -> .)
    RIGHTBRACK      reduce using rule 133 (empty -> .)
    RIGHTPAR        reduce using rule 133 (empty -> .)
    LESS            reduce using rule 133 (empty -> .)
    GRTR            reduce using rule 133 (empty -> .)
    EQ              reduce using rule 133 (empty -> .)
    NOTEQ           reduce using rule 133 (empty -> .)
    AND             reduce using rule 133 (empty -> .)
    OR              reduce using rule 133 (empty -> .)
    SUM             reduce using rule 133 (empty -> .)
    MINUS           reduce using rule 133 (empty -> .)
    MULTP           reduce using rule 133 (empty -> .)
    DIVIDE          reduce using rule 133 (empty -> .)

  ! ID              [ reduce using rule 133 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 133 (empty -> .) ]
  ! INTEGER         [ reduce using rule 133 (empty -> .) ]
  ! FLOAT           [ reduce using rule 133 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 121
    empty                          shift and go to state 46

state 85

    (118) exp2 -> EQ meteOper . exp
    (107) exp -> . ID meteExp exp2
    (108) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (113) exp -> . number exp2
    (115) exp -> . empty
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (133) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    LEFTBRACK       reduce using rule 133 (empty -> .)
    COMMA           reduce using rule 133 (empty -> .)
    SEMICOLON       reduce using rule 133 (empty -> .)
    RIGHTBRACK      reduce using rule 133 (empty -> .)
    RIGHTPAR        reduce using rule 133 (empty -> .)
    LESS            reduce using rule 133 (empty -> .)
    GRTR            reduce using rule 133 (empty -> .)
    EQ              reduce using rule 133 (empty -> .)
    NOTEQ           reduce using rule 133 (empty -> .)
    AND             reduce using rule 133 (empty -> .)
    OR              reduce using rule 133 (empty -> .)
    SUM             reduce using rule 133 (empty -> .)
    MINUS           reduce using rule 133 (empty -> .)
    MULTP           reduce using rule 133 (empty -> .)
    DIVIDE          reduce using rule 133 (empty -> .)

  ! ID              [ reduce using rule 133 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 133 (empty -> .) ]
  ! INTEGER         [ reduce using rule 133 (empty -> .) ]
  ! FLOAT           [ reduce using rule 133 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 122
    empty                          shift and go to state 46

state 86

    (121) exp2 -> OR meteOper . exp
    (107) exp -> . ID meteExp exp2
    (108) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (113) exp -> . number exp2
    (115) exp -> . empty
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (133) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    LEFTBRACK       reduce using rule 133 (empty -> .)
    COMMA           reduce using rule 133 (empty -> .)
    SEMICOLON       reduce using rule 133 (empty -> .)
    RIGHTBRACK      reduce using rule 133 (empty -> .)
    RIGHTPAR        reduce using rule 133 (empty -> .)
    LESS            reduce using rule 133 (empty -> .)
    GRTR            reduce using rule 133 (empty -> .)
    EQ              reduce using rule 133 (empty -> .)
    NOTEQ           reduce using rule 133 (empty -> .)
    AND             reduce using rule 133 (empty -> .)
    OR              reduce using rule 133 (empty -> .)
    SUM             reduce using rule 133 (empty -> .)
    MINUS           reduce using rule 133 (empty -> .)
    MULTP           reduce using rule 133 (empty -> .)
    DIVIDE          reduce using rule 133 (empty -> .)

  ! ID              [ reduce using rule 133 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 133 (empty -> .) ]
  ! INTEGER         [ reduce using rule 133 (empty -> .) ]
  ! FLOAT           [ reduce using rule 133 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 123
    empty                          shift and go to state 46

state 87

    (108) exp -> LEFTPAR metePar exp . RIGHTPAR sacaPar exp2 generaCuad

    RIGHTPAR        shift and go to state 124


state 88

    (107) exp -> ID meteExp exp2 .

    LEFTBRACK       reduce using rule 107 (exp -> ID meteExp exp2 .)
    COMMA           reduce using rule 107 (exp -> ID meteExp exp2 .)
    SEMICOLON       reduce using rule 107 (exp -> ID meteExp exp2 .)
    RIGHTBRACK      reduce using rule 107 (exp -> ID meteExp exp2 .)
    RIGHTPAR        reduce using rule 107 (exp -> ID meteExp exp2 .)
    ID              reduce using rule 107 (exp -> ID meteExp exp2 .)
    LEFTPAR         reduce using rule 107 (exp -> ID meteExp exp2 .)
    INTEGER         reduce using rule 107 (exp -> ID meteExp exp2 .)
    FLOAT           reduce using rule 107 (exp -> ID meteExp exp2 .)
    LESS            reduce using rule 107 (exp -> ID meteExp exp2 .)
    GRTR            reduce using rule 107 (exp -> ID meteExp exp2 .)
    EQ              reduce using rule 107 (exp -> ID meteExp exp2 .)
    NOTEQ           reduce using rule 107 (exp -> ID meteExp exp2 .)
    AND             reduce using rule 107 (exp -> ID meteExp exp2 .)
    OR              reduce using rule 107 (exp -> ID meteExp exp2 .)
    SUM             reduce using rule 107 (exp -> ID meteExp exp2 .)
    MINUS           reduce using rule 107 (exp -> ID meteExp exp2 .)
    MULTP           reduce using rule 107 (exp -> ID meteExp exp2 .)
    DIVIDE          reduce using rule 107 (exp -> ID meteExp exp2 .)


state 89

    (25) array -> LEFTBRACK exp RIGHTBRACK . array
    (25) array -> . LEFTBRACK exp RIGHTBRACK array
    (26) array -> . empty
    (133) empty -> .

    LEFTBRACK       shift and go to state 47
    COMMA           reduce using rule 133 (empty -> .)
    SEMICOLON       reduce using rule 133 (empty -> .)

    array                          shift and go to state 125
    empty                          shift and go to state 50

state 90

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON . declareRecursivo
    (8) declareRecursivo -> . type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
    (23) declareRecursivo -> . empty
    (27) type -> . type2
    (133) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    FUNCTION        reduce using rule 133 (empty -> .)
    MAIN            reduce using rule 133 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    declareRecursivo               shift and go to state 126
    type                           shift and go to state 17
    empty                          shift and go to state 18
    type2                          shift and go to state 19

state 91

    (10) declare3 -> COMMA ID . altaVarGlobal declare3
    (22) altaVarGlobal -> .

    COMMA           reduce using rule 22 (altaVarGlobal -> .)
    SEMICOLON       reduce using rule 22 (altaVarGlobal -> .)

    altaVarGlobal                  shift and go to state 127

state 92

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR . LEFTKEY est functReturn RIGHTKEY

    LEFTKEY         shift and go to state 128


state 93

    (17) funct2 -> type ID . altaVarLocal funct3
    (63) altaVarLocal -> .

    COMMA           reduce using rule 63 (altaVarLocal -> .)
    RIGHTPAR        reduce using rule 63 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 129

state 94

    (80) do-while -> DO . meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad
    (82) meteSalto -> .

    LEFTKEY         reduce using rule 82 (meteSalto -> .)

    meteSalto                      shift and go to state 130

state 95

    (132) input -> READ . LEFTPAR ID RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 131


state 96

    (36) est -> conditional . est
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . for
    (79) cycles -> . do-while
    (132) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (128) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (133) empty -> .
    (83) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (87) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 108
    DECLARE         shift and go to state 107
    READ            shift and go to state 95
    WRITE           shift and go to state 105
    ID              shift and go to state 106
    RIGHTKEY        reduce using rule 133 (empty -> .)
    RETURN          reduce using rule 133 (empty -> .)
    WHILE           shift and go to state 97
    FOR             shift and go to state 103
    DO              shift and go to state 94

  ! IF              [ reduce using rule 133 (empty -> .) ]
  ! DECLARE         [ reduce using rule 133 (empty -> .) ]
  ! READ            [ reduce using rule 133 (empty -> .) ]
  ! WRITE           [ reduce using rule 133 (empty -> .) ]
  ! ID              [ reduce using rule 133 (empty -> .) ]
  ! WHILE           [ reduce using rule 133 (empty -> .) ]
  ! FOR             [ reduce using rule 133 (empty -> .) ]
  ! DO              [ reduce using rule 133 (empty -> .) ]

    conditional                    shift and go to state 96
    do-while                       shift and go to state 98
    est                            shift and go to state 132
    for                            shift and go to state 100
    llamadaAFunct                  shift and go to state 101
    input                          shift and go to state 102
    assignment                     shift and go to state 104
    cycles                         shift and go to state 109
    while                          shift and go to state 110
    empty                          shift and go to state 111
    output                         shift and go to state 112
    declareLocal                   shift and go to state 113

state 97

    (83) while -> WHILE . LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF

    LEFTPAR         shift and go to state 133


state 98

    (79) cycles -> do-while .

    IF              reduce using rule 79 (cycles -> do-while .)
    DECLARE         reduce using rule 79 (cycles -> do-while .)
    READ            reduce using rule 79 (cycles -> do-while .)
    WRITE           reduce using rule 79 (cycles -> do-while .)
    ID              reduce using rule 79 (cycles -> do-while .)
    WHILE           reduce using rule 79 (cycles -> do-while .)
    FOR             reduce using rule 79 (cycles -> do-while .)
    DO              reduce using rule 79 (cycles -> do-while .)
    RIGHTKEY        reduce using rule 79 (cycles -> do-while .)
    RETURN          reduce using rule 79 (cycles -> do-while .)


state 99

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY llenaMain altaModuloMain est . RIGHTKEY

    RIGHTKEY        shift and go to state 134


state 100

    (78) cycles -> for .

    IF              reduce using rule 78 (cycles -> for .)
    DECLARE         reduce using rule 78 (cycles -> for .)
    READ            reduce using rule 78 (cycles -> for .)
    WRITE           reduce using rule 78 (cycles -> for .)
    ID              reduce using rule 78 (cycles -> for .)
    WHILE           reduce using rule 78 (cycles -> for .)
    FOR             reduce using rule 78 (cycles -> for .)
    DO              reduce using rule 78 (cycles -> for .)
    RIGHTKEY        reduce using rule 78 (cycles -> for .)
    RETURN          reduce using rule 78 (cycles -> for .)


state 101

    (42) est -> llamadaAFunct . est
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . for
    (79) cycles -> . do-while
    (132) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (128) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (133) empty -> .
    (83) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (87) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 108
    DECLARE         shift and go to state 107
    READ            shift and go to state 95
    WRITE           shift and go to state 105
    ID              shift and go to state 106
    RIGHTKEY        reduce using rule 133 (empty -> .)
    RETURN          reduce using rule 133 (empty -> .)
    WHILE           shift and go to state 97
    FOR             shift and go to state 103
    DO              shift and go to state 94

  ! IF              [ reduce using rule 133 (empty -> .) ]
  ! DECLARE         [ reduce using rule 133 (empty -> .) ]
  ! READ            [ reduce using rule 133 (empty -> .) ]
  ! WRITE           [ reduce using rule 133 (empty -> .) ]
  ! ID              [ reduce using rule 133 (empty -> .) ]
  ! WHILE           [ reduce using rule 133 (empty -> .) ]
  ! FOR             [ reduce using rule 133 (empty -> .) ]
  ! DO              [ reduce using rule 133 (empty -> .) ]

    conditional                    shift and go to state 96
    do-while                       shift and go to state 98
    est                            shift and go to state 135
    for                            shift and go to state 100
    llamadaAFunct                  shift and go to state 101
    input                          shift and go to state 102
    assignment                     shift and go to state 104
    cycles                         shift and go to state 109
    while                          shift and go to state 110
    empty                          shift and go to state 111
    output                         shift and go to state 112
    declareLocal                   shift and go to state 113

state 102

    (39) est -> input . est
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . for
    (79) cycles -> . do-while
    (132) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (128) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (133) empty -> .
    (83) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (87) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 108
    DECLARE         shift and go to state 107
    READ            shift and go to state 95
    WRITE           shift and go to state 105
    ID              shift and go to state 106
    RIGHTKEY        reduce using rule 133 (empty -> .)
    RETURN          reduce using rule 133 (empty -> .)
    WHILE           shift and go to state 97
    FOR             shift and go to state 103
    DO              shift and go to state 94

  ! IF              [ reduce using rule 133 (empty -> .) ]
  ! DECLARE         [ reduce using rule 133 (empty -> .) ]
  ! READ            [ reduce using rule 133 (empty -> .) ]
  ! WRITE           [ reduce using rule 133 (empty -> .) ]
  ! ID              [ reduce using rule 133 (empty -> .) ]
  ! WHILE           [ reduce using rule 133 (empty -> .) ]
  ! FOR             [ reduce using rule 133 (empty -> .) ]
  ! DO              [ reduce using rule 133 (empty -> .) ]

    conditional                    shift and go to state 96
    do-while                       shift and go to state 98
    est                            shift and go to state 136
    for                            shift and go to state 100
    llamadaAFunct                  shift and go to state 101
    input                          shift and go to state 102
    assignment                     shift and go to state 104
    cycles                         shift and go to state 109
    while                          shift and go to state 110
    empty                          shift and go to state 111
    output                         shift and go to state 112
    declareLocal                   shift and go to state 113

state 103

    (87) for -> FOR . LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY

    LEFTPAR         shift and go to state 137


state 104

    (41) est -> assignment . est
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . for
    (79) cycles -> . do-while
    (132) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (128) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (133) empty -> .
    (83) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (87) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 108
    DECLARE         shift and go to state 107
    READ            shift and go to state 95
    WRITE           shift and go to state 105
    ID              shift and go to state 106
    RIGHTKEY        reduce using rule 133 (empty -> .)
    RETURN          reduce using rule 133 (empty -> .)
    WHILE           shift and go to state 97
    FOR             shift and go to state 103
    DO              shift and go to state 94

  ! IF              [ reduce using rule 133 (empty -> .) ]
  ! DECLARE         [ reduce using rule 133 (empty -> .) ]
  ! READ            [ reduce using rule 133 (empty -> .) ]
  ! WRITE           [ reduce using rule 133 (empty -> .) ]
  ! ID              [ reduce using rule 133 (empty -> .) ]
  ! WHILE           [ reduce using rule 133 (empty -> .) ]
  ! FOR             [ reduce using rule 133 (empty -> .) ]
  ! DO              [ reduce using rule 133 (empty -> .) ]

    conditional                    shift and go to state 96
    do-while                       shift and go to state 98
    est                            shift and go to state 138
    for                            shift and go to state 100
    llamadaAFunct                  shift and go to state 101
    input                          shift and go to state 102
    assignment                     shift and go to state 104
    cycles                         shift and go to state 109
    while                          shift and go to state 110
    empty                          shift and go to state 111
    output                         shift and go to state 112
    declareLocal                   shift and go to state 113

state 105

    (128) output -> WRITE . LEFTPAR output2 RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 139


state 106

    (64) assignment -> ID . ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> ID . ASSGN meteVar llamadaAFunct SEMICOLON
    (44) llamadaAFunct -> ID . LEFTPAR llamadaAFunct2 RIGHTPAR

    ASSGN           shift and go to state 140
    LEFTPAR         shift and go to state 141


state 107

    (50) declareLocal -> DECLARE . declareRecursivoLocal
    (51) declareRecursivoLocal -> . type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (59) declareRecursivoLocal -> . empty
    (27) type -> . type2
    (133) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    IF              reduce using rule 133 (empty -> .)
    DECLARE         reduce using rule 133 (empty -> .)
    READ            reduce using rule 133 (empty -> .)
    WRITE           reduce using rule 133 (empty -> .)
    ID              reduce using rule 133 (empty -> .)
    WHILE           reduce using rule 133 (empty -> .)
    FOR             reduce using rule 133 (empty -> .)
    DO              reduce using rule 133 (empty -> .)
    RIGHTKEY        reduce using rule 133 (empty -> .)
    RETURN          reduce using rule 133 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    declareRecursivoLocal          shift and go to state 142
    type2                          shift and go to state 19
    type                           shift and go to state 143
    empty                          shift and go to state 144

state 108

    (68) conditional -> IF . LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse

    LEFTPAR         shift and go to state 145


state 109

    (38) est -> cycles . est
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . for
    (79) cycles -> . do-while
    (132) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (128) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (133) empty -> .
    (83) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (87) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 108
    DECLARE         shift and go to state 107
    READ            shift and go to state 95
    WRITE           shift and go to state 105
    ID              shift and go to state 106
    RIGHTKEY        reduce using rule 133 (empty -> .)
    RETURN          reduce using rule 133 (empty -> .)
    WHILE           shift and go to state 97
    FOR             shift and go to state 103
    DO              shift and go to state 94

  ! IF              [ reduce using rule 133 (empty -> .) ]
  ! DECLARE         [ reduce using rule 133 (empty -> .) ]
  ! READ            [ reduce using rule 133 (empty -> .) ]
  ! WRITE           [ reduce using rule 133 (empty -> .) ]
  ! ID              [ reduce using rule 133 (empty -> .) ]
  ! WHILE           [ reduce using rule 133 (empty -> .) ]
  ! FOR             [ reduce using rule 133 (empty -> .) ]
  ! DO              [ reduce using rule 133 (empty -> .) ]

    conditional                    shift and go to state 96
    do-while                       shift and go to state 98
    est                            shift and go to state 146
    for                            shift and go to state 100
    llamadaAFunct                  shift and go to state 101
    input                          shift and go to state 102
    assignment                     shift and go to state 104
    cycles                         shift and go to state 109
    while                          shift and go to state 110
    empty                          shift and go to state 111
    output                         shift and go to state 112
    declareLocal                   shift and go to state 113

state 110

    (76) cycles -> while .

    IF              reduce using rule 76 (cycles -> while .)
    DECLARE         reduce using rule 76 (cycles -> while .)
    READ            reduce using rule 76 (cycles -> while .)
    WRITE           reduce using rule 76 (cycles -> while .)
    ID              reduce using rule 76 (cycles -> while .)
    WHILE           reduce using rule 76 (cycles -> while .)
    FOR             reduce using rule 76 (cycles -> while .)
    DO              reduce using rule 76 (cycles -> while .)
    RIGHTKEY        reduce using rule 76 (cycles -> while .)
    RETURN          reduce using rule 76 (cycles -> while .)


state 111

    (43) est -> empty .
    (60) declareLocal -> empty .
    (77) cycles -> empty .
    (67) assignment -> empty .
    (45) llamadaAFunct -> empty .

  ! reduce/reduce conflict for RIGHTKEY resolved using rule 43 (est -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 43 (est -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for DECLARE resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for READ resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for WRITE resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for DO resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 43 (est -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 43 (est -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for DECLARE resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for READ resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for WRITE resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for DO resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 43 (est -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 43 (est -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 45 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for DECLARE resolved using rule 45 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for READ resolved using rule 45 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for WRITE resolved using rule 45 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 45 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 45 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 45 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for DO resolved using rule 45 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 43 (est -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 43 (est -> empty .)
    RIGHTKEY        reduce using rule 43 (est -> empty .)
    RETURN          reduce using rule 43 (est -> empty .)
    IF              reduce using rule 45 (llamadaAFunct -> empty .)
    DECLARE         reduce using rule 45 (llamadaAFunct -> empty .)
    READ            reduce using rule 45 (llamadaAFunct -> empty .)
    WRITE           reduce using rule 45 (llamadaAFunct -> empty .)
    ID              reduce using rule 45 (llamadaAFunct -> empty .)
    WHILE           reduce using rule 45 (llamadaAFunct -> empty .)
    FOR             reduce using rule 45 (llamadaAFunct -> empty .)
    DO              reduce using rule 45 (llamadaAFunct -> empty .)

  ! IF              [ reduce using rule 60 (declareLocal -> empty .) ]
  ! DECLARE         [ reduce using rule 60 (declareLocal -> empty .) ]
  ! READ            [ reduce using rule 60 (declareLocal -> empty .) ]
  ! WRITE           [ reduce using rule 60 (declareLocal -> empty .) ]
  ! ID              [ reduce using rule 60 (declareLocal -> empty .) ]
  ! WHILE           [ reduce using rule 60 (declareLocal -> empty .) ]
  ! FOR             [ reduce using rule 60 (declareLocal -> empty .) ]
  ! DO              [ reduce using rule 60 (declareLocal -> empty .) ]
  ! RIGHTKEY        [ reduce using rule 60 (declareLocal -> empty .) ]
  ! RETURN          [ reduce using rule 60 (declareLocal -> empty .) ]
  ! IF              [ reduce using rule 77 (cycles -> empty .) ]
  ! DECLARE         [ reduce using rule 77 (cycles -> empty .) ]
  ! READ            [ reduce using rule 77 (cycles -> empty .) ]
  ! WRITE           [ reduce using rule 77 (cycles -> empty .) ]
  ! ID              [ reduce using rule 77 (cycles -> empty .) ]
  ! WHILE           [ reduce using rule 77 (cycles -> empty .) ]
  ! FOR             [ reduce using rule 77 (cycles -> empty .) ]
  ! DO              [ reduce using rule 77 (cycles -> empty .) ]
  ! RIGHTKEY        [ reduce using rule 77 (cycles -> empty .) ]
  ! RETURN          [ reduce using rule 77 (cycles -> empty .) ]
  ! IF              [ reduce using rule 67 (assignment -> empty .) ]
  ! DECLARE         [ reduce using rule 67 (assignment -> empty .) ]
  ! READ            [ reduce using rule 67 (assignment -> empty .) ]
  ! WRITE           [ reduce using rule 67 (assignment -> empty .) ]
  ! ID              [ reduce using rule 67 (assignment -> empty .) ]
  ! WHILE           [ reduce using rule 67 (assignment -> empty .) ]
  ! FOR             [ reduce using rule 67 (assignment -> empty .) ]
  ! DO              [ reduce using rule 67 (assignment -> empty .) ]
  ! RIGHTKEY        [ reduce using rule 67 (assignment -> empty .) ]
  ! RETURN          [ reduce using rule 67 (assignment -> empty .) ]
  ! RIGHTKEY        [ reduce using rule 45 (llamadaAFunct -> empty .) ]
  ! RETURN          [ reduce using rule 45 (llamadaAFunct -> empty .) ]


state 112

    (40) est -> output . est
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . for
    (79) cycles -> . do-while
    (132) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (128) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (133) empty -> .
    (83) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (87) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 108
    DECLARE         shift and go to state 107
    READ            shift and go to state 95
    WRITE           shift and go to state 105
    ID              shift and go to state 106
    RIGHTKEY        reduce using rule 133 (empty -> .)
    RETURN          reduce using rule 133 (empty -> .)
    WHILE           shift and go to state 97
    FOR             shift and go to state 103
    DO              shift and go to state 94

  ! IF              [ reduce using rule 133 (empty -> .) ]
  ! DECLARE         [ reduce using rule 133 (empty -> .) ]
  ! READ            [ reduce using rule 133 (empty -> .) ]
  ! WRITE           [ reduce using rule 133 (empty -> .) ]
  ! ID              [ reduce using rule 133 (empty -> .) ]
  ! WHILE           [ reduce using rule 133 (empty -> .) ]
  ! FOR             [ reduce using rule 133 (empty -> .) ]
  ! DO              [ reduce using rule 133 (empty -> .) ]

    conditional                    shift and go to state 96
    do-while                       shift and go to state 98
    est                            shift and go to state 147
    for                            shift and go to state 100
    llamadaAFunct                  shift and go to state 101
    input                          shift and go to state 102
    assignment                     shift and go to state 104
    cycles                         shift and go to state 109
    while                          shift and go to state 110
    empty                          shift and go to state 111
    output                         shift and go to state 112
    declareLocal                   shift and go to state 113

state 113

    (37) est -> declareLocal . est
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . for
    (79) cycles -> . do-while
    (132) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (128) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (133) empty -> .
    (83) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (87) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 108
    DECLARE         shift and go to state 107
    READ            shift and go to state 95
    WRITE           shift and go to state 105
    ID              shift and go to state 106
    RIGHTKEY        reduce using rule 133 (empty -> .)
    RETURN          reduce using rule 133 (empty -> .)
    WHILE           shift and go to state 97
    FOR             shift and go to state 103
    DO              shift and go to state 94

  ! IF              [ reduce using rule 133 (empty -> .) ]
  ! DECLARE         [ reduce using rule 133 (empty -> .) ]
  ! READ            [ reduce using rule 133 (empty -> .) ]
  ! WRITE           [ reduce using rule 133 (empty -> .) ]
  ! ID              [ reduce using rule 133 (empty -> .) ]
  ! WHILE           [ reduce using rule 133 (empty -> .) ]
  ! FOR             [ reduce using rule 133 (empty -> .) ]
  ! DO              [ reduce using rule 133 (empty -> .) ]

    conditional                    shift and go to state 96
    do-while                       shift and go to state 98
    est                            shift and go to state 148
    for                            shift and go to state 100
    llamadaAFunct                  shift and go to state 101
    input                          shift and go to state 102
    assignment                     shift and go to state 104
    declareLocal                   shift and go to state 113
    while                          shift and go to state 110
    empty                          shift and go to state 111
    output                         shift and go to state 112
    cycles                         shift and go to state 109

state 114

    (120) exp2 -> AND meteOper exp .

    LEFTBRACK       reduce using rule 120 (exp2 -> AND meteOper exp .)
    COMMA           reduce using rule 120 (exp2 -> AND meteOper exp .)
    SEMICOLON       reduce using rule 120 (exp2 -> AND meteOper exp .)
    RIGHTBRACK      reduce using rule 120 (exp2 -> AND meteOper exp .)
    RIGHTPAR        reduce using rule 120 (exp2 -> AND meteOper exp .)
    ID              reduce using rule 120 (exp2 -> AND meteOper exp .)
    LEFTPAR         reduce using rule 120 (exp2 -> AND meteOper exp .)
    INTEGER         reduce using rule 120 (exp2 -> AND meteOper exp .)
    FLOAT           reduce using rule 120 (exp2 -> AND meteOper exp .)
    LESS            reduce using rule 120 (exp2 -> AND meteOper exp .)
    GRTR            reduce using rule 120 (exp2 -> AND meteOper exp .)
    EQ              reduce using rule 120 (exp2 -> AND meteOper exp .)
    NOTEQ           reduce using rule 120 (exp2 -> AND meteOper exp .)
    AND             reduce using rule 120 (exp2 -> AND meteOper exp .)
    OR              reduce using rule 120 (exp2 -> AND meteOper exp .)
    SUM             reduce using rule 120 (exp2 -> AND meteOper exp .)
    MINUS           reduce using rule 120 (exp2 -> AND meteOper exp .)
    MULTP           reduce using rule 120 (exp2 -> AND meteOper exp .)
    DIVIDE          reduce using rule 120 (exp2 -> AND meteOper exp .)


state 115

    (126) exp2 -> DIVIDE meteOper exp .

    LEFTBRACK       reduce using rule 126 (exp2 -> DIVIDE meteOper exp .)
    COMMA           reduce using rule 126 (exp2 -> DIVIDE meteOper exp .)
    SEMICOLON       reduce using rule 126 (exp2 -> DIVIDE meteOper exp .)
    RIGHTBRACK      reduce using rule 126 (exp2 -> DIVIDE meteOper exp .)
    RIGHTPAR        reduce using rule 126 (exp2 -> DIVIDE meteOper exp .)
    ID              reduce using rule 126 (exp2 -> DIVIDE meteOper exp .)
    LEFTPAR         reduce using rule 126 (exp2 -> DIVIDE meteOper exp .)
    INTEGER         reduce using rule 126 (exp2 -> DIVIDE meteOper exp .)
    FLOAT           reduce using rule 126 (exp2 -> DIVIDE meteOper exp .)
    LESS            reduce using rule 126 (exp2 -> DIVIDE meteOper exp .)
    GRTR            reduce using rule 126 (exp2 -> DIVIDE meteOper exp .)
    EQ              reduce using rule 126 (exp2 -> DIVIDE meteOper exp .)
    NOTEQ           reduce using rule 126 (exp2 -> DIVIDE meteOper exp .)
    AND             reduce using rule 126 (exp2 -> DIVIDE meteOper exp .)
    OR              reduce using rule 126 (exp2 -> DIVIDE meteOper exp .)
    SUM             reduce using rule 126 (exp2 -> DIVIDE meteOper exp .)
    MINUS           reduce using rule 126 (exp2 -> DIVIDE meteOper exp .)
    MULTP           reduce using rule 126 (exp2 -> DIVIDE meteOper exp .)
    DIVIDE          reduce using rule 126 (exp2 -> DIVIDE meteOper exp .)


state 116

    (116) exp2 -> LESS meteOper exp .

    LEFTBRACK       reduce using rule 116 (exp2 -> LESS meteOper exp .)
    COMMA           reduce using rule 116 (exp2 -> LESS meteOper exp .)
    SEMICOLON       reduce using rule 116 (exp2 -> LESS meteOper exp .)
    RIGHTBRACK      reduce using rule 116 (exp2 -> LESS meteOper exp .)
    RIGHTPAR        reduce using rule 116 (exp2 -> LESS meteOper exp .)
    ID              reduce using rule 116 (exp2 -> LESS meteOper exp .)
    LEFTPAR         reduce using rule 116 (exp2 -> LESS meteOper exp .)
    INTEGER         reduce using rule 116 (exp2 -> LESS meteOper exp .)
    FLOAT           reduce using rule 116 (exp2 -> LESS meteOper exp .)
    LESS            reduce using rule 116 (exp2 -> LESS meteOper exp .)
    GRTR            reduce using rule 116 (exp2 -> LESS meteOper exp .)
    EQ              reduce using rule 116 (exp2 -> LESS meteOper exp .)
    NOTEQ           reduce using rule 116 (exp2 -> LESS meteOper exp .)
    AND             reduce using rule 116 (exp2 -> LESS meteOper exp .)
    OR              reduce using rule 116 (exp2 -> LESS meteOper exp .)
    SUM             reduce using rule 116 (exp2 -> LESS meteOper exp .)
    MINUS           reduce using rule 116 (exp2 -> LESS meteOper exp .)
    MULTP           reduce using rule 116 (exp2 -> LESS meteOper exp .)
    DIVIDE          reduce using rule 116 (exp2 -> LESS meteOper exp .)


state 117

    (119) exp2 -> NOTEQ meteOper exp .

    LEFTBRACK       reduce using rule 119 (exp2 -> NOTEQ meteOper exp .)
    COMMA           reduce using rule 119 (exp2 -> NOTEQ meteOper exp .)
    SEMICOLON       reduce using rule 119 (exp2 -> NOTEQ meteOper exp .)
    RIGHTBRACK      reduce using rule 119 (exp2 -> NOTEQ meteOper exp .)
    RIGHTPAR        reduce using rule 119 (exp2 -> NOTEQ meteOper exp .)
    ID              reduce using rule 119 (exp2 -> NOTEQ meteOper exp .)
    LEFTPAR         reduce using rule 119 (exp2 -> NOTEQ meteOper exp .)
    INTEGER         reduce using rule 119 (exp2 -> NOTEQ meteOper exp .)
    FLOAT           reduce using rule 119 (exp2 -> NOTEQ meteOper exp .)
    LESS            reduce using rule 119 (exp2 -> NOTEQ meteOper exp .)
    GRTR            reduce using rule 119 (exp2 -> NOTEQ meteOper exp .)
    EQ              reduce using rule 119 (exp2 -> NOTEQ meteOper exp .)
    NOTEQ           reduce using rule 119 (exp2 -> NOTEQ meteOper exp .)
    AND             reduce using rule 119 (exp2 -> NOTEQ meteOper exp .)
    OR              reduce using rule 119 (exp2 -> NOTEQ meteOper exp .)
    SUM             reduce using rule 119 (exp2 -> NOTEQ meteOper exp .)
    MINUS           reduce using rule 119 (exp2 -> NOTEQ meteOper exp .)
    MULTP           reduce using rule 119 (exp2 -> NOTEQ meteOper exp .)
    DIVIDE          reduce using rule 119 (exp2 -> NOTEQ meteOper exp .)


state 118

    (122) exp2 -> SUM meteOper exp .

    LEFTBRACK       reduce using rule 122 (exp2 -> SUM meteOper exp .)
    COMMA           reduce using rule 122 (exp2 -> SUM meteOper exp .)
    SEMICOLON       reduce using rule 122 (exp2 -> SUM meteOper exp .)
    RIGHTBRACK      reduce using rule 122 (exp2 -> SUM meteOper exp .)
    RIGHTPAR        reduce using rule 122 (exp2 -> SUM meteOper exp .)
    ID              reduce using rule 122 (exp2 -> SUM meteOper exp .)
    LEFTPAR         reduce using rule 122 (exp2 -> SUM meteOper exp .)
    INTEGER         reduce using rule 122 (exp2 -> SUM meteOper exp .)
    FLOAT           reduce using rule 122 (exp2 -> SUM meteOper exp .)
    LESS            reduce using rule 122 (exp2 -> SUM meteOper exp .)
    GRTR            reduce using rule 122 (exp2 -> SUM meteOper exp .)
    EQ              reduce using rule 122 (exp2 -> SUM meteOper exp .)
    NOTEQ           reduce using rule 122 (exp2 -> SUM meteOper exp .)
    AND             reduce using rule 122 (exp2 -> SUM meteOper exp .)
    OR              reduce using rule 122 (exp2 -> SUM meteOper exp .)
    SUM             reduce using rule 122 (exp2 -> SUM meteOper exp .)
    MINUS           reduce using rule 122 (exp2 -> SUM meteOper exp .)
    MULTP           reduce using rule 122 (exp2 -> SUM meteOper exp .)
    DIVIDE          reduce using rule 122 (exp2 -> SUM meteOper exp .)


state 119

    (124) exp2 -> MINUS meteOper exp .

    LEFTBRACK       reduce using rule 124 (exp2 -> MINUS meteOper exp .)
    COMMA           reduce using rule 124 (exp2 -> MINUS meteOper exp .)
    SEMICOLON       reduce using rule 124 (exp2 -> MINUS meteOper exp .)
    RIGHTBRACK      reduce using rule 124 (exp2 -> MINUS meteOper exp .)
    RIGHTPAR        reduce using rule 124 (exp2 -> MINUS meteOper exp .)
    ID              reduce using rule 124 (exp2 -> MINUS meteOper exp .)
    LEFTPAR         reduce using rule 124 (exp2 -> MINUS meteOper exp .)
    INTEGER         reduce using rule 124 (exp2 -> MINUS meteOper exp .)
    FLOAT           reduce using rule 124 (exp2 -> MINUS meteOper exp .)
    LESS            reduce using rule 124 (exp2 -> MINUS meteOper exp .)
    GRTR            reduce using rule 124 (exp2 -> MINUS meteOper exp .)
    EQ              reduce using rule 124 (exp2 -> MINUS meteOper exp .)
    NOTEQ           reduce using rule 124 (exp2 -> MINUS meteOper exp .)
    AND             reduce using rule 124 (exp2 -> MINUS meteOper exp .)
    OR              reduce using rule 124 (exp2 -> MINUS meteOper exp .)
    SUM             reduce using rule 124 (exp2 -> MINUS meteOper exp .)
    MINUS           reduce using rule 124 (exp2 -> MINUS meteOper exp .)
    MULTP           reduce using rule 124 (exp2 -> MINUS meteOper exp .)
    DIVIDE          reduce using rule 124 (exp2 -> MINUS meteOper exp .)


state 120

    (117) exp2 -> GRTR meteOper exp .

    LEFTBRACK       reduce using rule 117 (exp2 -> GRTR meteOper exp .)
    COMMA           reduce using rule 117 (exp2 -> GRTR meteOper exp .)
    SEMICOLON       reduce using rule 117 (exp2 -> GRTR meteOper exp .)
    RIGHTBRACK      reduce using rule 117 (exp2 -> GRTR meteOper exp .)
    RIGHTPAR        reduce using rule 117 (exp2 -> GRTR meteOper exp .)
    ID              reduce using rule 117 (exp2 -> GRTR meteOper exp .)
    LEFTPAR         reduce using rule 117 (exp2 -> GRTR meteOper exp .)
    INTEGER         reduce using rule 117 (exp2 -> GRTR meteOper exp .)
    FLOAT           reduce using rule 117 (exp2 -> GRTR meteOper exp .)
    LESS            reduce using rule 117 (exp2 -> GRTR meteOper exp .)
    GRTR            reduce using rule 117 (exp2 -> GRTR meteOper exp .)
    EQ              reduce using rule 117 (exp2 -> GRTR meteOper exp .)
    NOTEQ           reduce using rule 117 (exp2 -> GRTR meteOper exp .)
    AND             reduce using rule 117 (exp2 -> GRTR meteOper exp .)
    OR              reduce using rule 117 (exp2 -> GRTR meteOper exp .)
    SUM             reduce using rule 117 (exp2 -> GRTR meteOper exp .)
    MINUS           reduce using rule 117 (exp2 -> GRTR meteOper exp .)
    MULTP           reduce using rule 117 (exp2 -> GRTR meteOper exp .)
    DIVIDE          reduce using rule 117 (exp2 -> GRTR meteOper exp .)


state 121

    (125) exp2 -> MULTP meteOper exp .

    LEFTBRACK       reduce using rule 125 (exp2 -> MULTP meteOper exp .)
    COMMA           reduce using rule 125 (exp2 -> MULTP meteOper exp .)
    SEMICOLON       reduce using rule 125 (exp2 -> MULTP meteOper exp .)
    RIGHTBRACK      reduce using rule 125 (exp2 -> MULTP meteOper exp .)
    RIGHTPAR        reduce using rule 125 (exp2 -> MULTP meteOper exp .)
    ID              reduce using rule 125 (exp2 -> MULTP meteOper exp .)
    LEFTPAR         reduce using rule 125 (exp2 -> MULTP meteOper exp .)
    INTEGER         reduce using rule 125 (exp2 -> MULTP meteOper exp .)
    FLOAT           reduce using rule 125 (exp2 -> MULTP meteOper exp .)
    LESS            reduce using rule 125 (exp2 -> MULTP meteOper exp .)
    GRTR            reduce using rule 125 (exp2 -> MULTP meteOper exp .)
    EQ              reduce using rule 125 (exp2 -> MULTP meteOper exp .)
    NOTEQ           reduce using rule 125 (exp2 -> MULTP meteOper exp .)
    AND             reduce using rule 125 (exp2 -> MULTP meteOper exp .)
    OR              reduce using rule 125 (exp2 -> MULTP meteOper exp .)
    SUM             reduce using rule 125 (exp2 -> MULTP meteOper exp .)
    MINUS           reduce using rule 125 (exp2 -> MULTP meteOper exp .)
    MULTP           reduce using rule 125 (exp2 -> MULTP meteOper exp .)
    DIVIDE          reduce using rule 125 (exp2 -> MULTP meteOper exp .)


state 122

    (118) exp2 -> EQ meteOper exp .

    LEFTBRACK       reduce using rule 118 (exp2 -> EQ meteOper exp .)
    COMMA           reduce using rule 118 (exp2 -> EQ meteOper exp .)
    SEMICOLON       reduce using rule 118 (exp2 -> EQ meteOper exp .)
    RIGHTBRACK      reduce using rule 118 (exp2 -> EQ meteOper exp .)
    RIGHTPAR        reduce using rule 118 (exp2 -> EQ meteOper exp .)
    ID              reduce using rule 118 (exp2 -> EQ meteOper exp .)
    LEFTPAR         reduce using rule 118 (exp2 -> EQ meteOper exp .)
    INTEGER         reduce using rule 118 (exp2 -> EQ meteOper exp .)
    FLOAT           reduce using rule 118 (exp2 -> EQ meteOper exp .)
    LESS            reduce using rule 118 (exp2 -> EQ meteOper exp .)
    GRTR            reduce using rule 118 (exp2 -> EQ meteOper exp .)
    EQ              reduce using rule 118 (exp2 -> EQ meteOper exp .)
    NOTEQ           reduce using rule 118 (exp2 -> EQ meteOper exp .)
    AND             reduce using rule 118 (exp2 -> EQ meteOper exp .)
    OR              reduce using rule 118 (exp2 -> EQ meteOper exp .)
    SUM             reduce using rule 118 (exp2 -> EQ meteOper exp .)
    MINUS           reduce using rule 118 (exp2 -> EQ meteOper exp .)
    MULTP           reduce using rule 118 (exp2 -> EQ meteOper exp .)
    DIVIDE          reduce using rule 118 (exp2 -> EQ meteOper exp .)


state 123

    (121) exp2 -> OR meteOper exp .

    LEFTBRACK       reduce using rule 121 (exp2 -> OR meteOper exp .)
    COMMA           reduce using rule 121 (exp2 -> OR meteOper exp .)
    SEMICOLON       reduce using rule 121 (exp2 -> OR meteOper exp .)
    RIGHTBRACK      reduce using rule 121 (exp2 -> OR meteOper exp .)
    RIGHTPAR        reduce using rule 121 (exp2 -> OR meteOper exp .)
    ID              reduce using rule 121 (exp2 -> OR meteOper exp .)
    LEFTPAR         reduce using rule 121 (exp2 -> OR meteOper exp .)
    INTEGER         reduce using rule 121 (exp2 -> OR meteOper exp .)
    FLOAT           reduce using rule 121 (exp2 -> OR meteOper exp .)
    LESS            reduce using rule 121 (exp2 -> OR meteOper exp .)
    GRTR            reduce using rule 121 (exp2 -> OR meteOper exp .)
    EQ              reduce using rule 121 (exp2 -> OR meteOper exp .)
    NOTEQ           reduce using rule 121 (exp2 -> OR meteOper exp .)
    AND             reduce using rule 121 (exp2 -> OR meteOper exp .)
    OR              reduce using rule 121 (exp2 -> OR meteOper exp .)
    SUM             reduce using rule 121 (exp2 -> OR meteOper exp .)
    MINUS           reduce using rule 121 (exp2 -> OR meteOper exp .)
    MULTP           reduce using rule 121 (exp2 -> OR meteOper exp .)
    DIVIDE          reduce using rule 121 (exp2 -> OR meteOper exp .)


state 124

    (108) exp -> LEFTPAR metePar exp RIGHTPAR . sacaPar exp2 generaCuad
    (110) sacaPar -> .

    LESS            reduce using rule 110 (sacaPar -> .)
    GRTR            reduce using rule 110 (sacaPar -> .)
    EQ              reduce using rule 110 (sacaPar -> .)
    NOTEQ           reduce using rule 110 (sacaPar -> .)
    AND             reduce using rule 110 (sacaPar -> .)
    OR              reduce using rule 110 (sacaPar -> .)
    SUM             reduce using rule 110 (sacaPar -> .)
    MINUS           reduce using rule 110 (sacaPar -> .)
    MULTP           reduce using rule 110 (sacaPar -> .)
    DIVIDE          reduce using rule 110 (sacaPar -> .)
    LEFTBRACK       reduce using rule 110 (sacaPar -> .)
    COMMA           reduce using rule 110 (sacaPar -> .)
    SEMICOLON       reduce using rule 110 (sacaPar -> .)
    RIGHTBRACK      reduce using rule 110 (sacaPar -> .)
    RIGHTPAR        reduce using rule 110 (sacaPar -> .)
    ID              reduce using rule 110 (sacaPar -> .)
    LEFTPAR         reduce using rule 110 (sacaPar -> .)
    INTEGER         reduce using rule 110 (sacaPar -> .)
    FLOAT           reduce using rule 110 (sacaPar -> .)

    sacaPar                        shift and go to state 149

state 125

    (25) array -> LEFTBRACK exp RIGHTBRACK array .

    COMMA           reduce using rule 25 (array -> LEFTBRACK exp RIGHTBRACK array .)
    SEMICOLON       reduce using rule 25 (array -> LEFTBRACK exp RIGHTBRACK array .)


state 126

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo .

    FUNCTION        reduce using rule 8 (declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo .)
    MAIN            reduce using rule 8 (declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo .)


state 127

    (10) declare3 -> COMMA ID altaVarGlobal . declare3
    (10) declare3 -> . COMMA ID altaVarGlobal declare3
    (24) declare3 -> . empty
    (133) empty -> .

    COMMA           shift and go to state 71
    SEMICOLON       reduce using rule 133 (empty -> .)

    empty                          shift and go to state 72
    declare3                       shift and go to state 150

state 128

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY . est functReturn RIGHTKEY
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . for
    (79) cycles -> . do-while
    (132) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (128) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (133) empty -> .
    (83) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (87) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 108
    DECLARE         shift and go to state 107
    READ            shift and go to state 95
    WRITE           shift and go to state 105
    ID              shift and go to state 106
    RETURN          reduce using rule 133 (empty -> .)
    RIGHTKEY        reduce using rule 133 (empty -> .)
    WHILE           shift and go to state 97
    FOR             shift and go to state 103
    DO              shift and go to state 94

  ! IF              [ reduce using rule 133 (empty -> .) ]
  ! DECLARE         [ reduce using rule 133 (empty -> .) ]
  ! READ            [ reduce using rule 133 (empty -> .) ]
  ! WRITE           [ reduce using rule 133 (empty -> .) ]
  ! ID              [ reduce using rule 133 (empty -> .) ]
  ! WHILE           [ reduce using rule 133 (empty -> .) ]
  ! FOR             [ reduce using rule 133 (empty -> .) ]
  ! DO              [ reduce using rule 133 (empty -> .) ]

    conditional                    shift and go to state 96
    do-while                       shift and go to state 98
    est                            shift and go to state 151
    for                            shift and go to state 100
    llamadaAFunct                  shift and go to state 101
    input                          shift and go to state 102
    assignment                     shift and go to state 104
    cycles                         shift and go to state 109
    while                          shift and go to state 110
    empty                          shift and go to state 111
    output                         shift and go to state 112
    declareLocal                   shift and go to state 113

state 129

    (17) funct2 -> type ID altaVarLocal . funct3
    (18) funct3 -> . COMMA type ID altaVarLocal funct3
    (20) funct3 -> . empty
    (133) empty -> .

    COMMA           shift and go to state 153
    RIGHTPAR        reduce using rule 133 (empty -> .)

    funct3                         shift and go to state 152
    empty                          shift and go to state 154

state 130

    (80) do-while -> DO meteSalto . LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

    LEFTKEY         shift and go to state 155


state 131

    (132) input -> READ LEFTPAR . ID RIGHTPAR SEMICOLON

    ID              shift and go to state 156


state 132

    (36) est -> conditional est .

    RIGHTKEY        reduce using rule 36 (est -> conditional est .)
    RETURN          reduce using rule 36 (est -> conditional est .)


state 133

    (83) while -> WHILE LEFTPAR . while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (85) while2 -> . exp while2
    (86) while2 -> . empty
    (107) exp -> . ID meteExp exp2
    (108) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (113) exp -> . number exp2
    (115) exp -> . empty
    (133) empty -> .
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    RIGHTPAR        reduce using rule 133 (empty -> .)
    LESS            reduce using rule 133 (empty -> .)
    GRTR            reduce using rule 133 (empty -> .)
    EQ              reduce using rule 133 (empty -> .)
    NOTEQ           reduce using rule 133 (empty -> .)
    AND             reduce using rule 133 (empty -> .)
    OR              reduce using rule 133 (empty -> .)
    SUM             reduce using rule 133 (empty -> .)
    MINUS           reduce using rule 133 (empty -> .)
    MULTP           reduce using rule 133 (empty -> .)
    DIVIDE          reduce using rule 133 (empty -> .)
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41

  ! ID              [ reduce using rule 133 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 133 (empty -> .) ]
  ! INTEGER         [ reduce using rule 133 (empty -> .) ]
  ! FLOAT           [ reduce using rule 133 (empty -> .) ]

    number                         shift and go to state 40
    while2                         shift and go to state 157
    exp                            shift and go to state 158
    empty                          shift and go to state 159

state 134

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY llenaMain altaModuloMain est RIGHTKEY .

    END             reduce using rule 33 (cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY llenaMain altaModuloMain est RIGHTKEY .)


state 135

    (42) est -> llamadaAFunct est .

    RIGHTKEY        reduce using rule 42 (est -> llamadaAFunct est .)
    RETURN          reduce using rule 42 (est -> llamadaAFunct est .)


state 136

    (39) est -> input est .

    RIGHTKEY        reduce using rule 39 (est -> input est .)
    RETURN          reduce using rule 39 (est -> input est .)


state 137

    (87) for -> FOR LEFTPAR . for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (88) for2 -> . ID ASSGN cuadFor number generaCuad for3

    ID              shift and go to state 161

    for2                           shift and go to state 160

state 138

    (41) est -> assignment est .

    RIGHTKEY        reduce using rule 41 (est -> assignment est .)
    RETURN          reduce using rule 41 (est -> assignment est .)


state 139

    (128) output -> WRITE LEFTPAR . output2 RIGHTPAR SEMICOLON
    (129) output2 -> . ID output2
    (130) output2 -> . QUOTE ID QUOTE output2
    (131) output2 -> . empty
    (133) empty -> .

    ID              shift and go to state 164
    QUOTE           shift and go to state 163
    RIGHTPAR        reduce using rule 133 (empty -> .)

    output2                        shift and go to state 162
    empty                          shift and go to state 165

state 140

    (64) assignment -> ID ASSGN . meteVar exp generaCuad SEMICOLON
    (65) assignment -> ID ASSGN . meteVar llamadaAFunct SEMICOLON
    (66) meteVar -> .

    ID              reduce using rule 66 (meteVar -> .)
    LEFTPAR         reduce using rule 66 (meteVar -> .)
    INTEGER         reduce using rule 66 (meteVar -> .)
    FLOAT           reduce using rule 66 (meteVar -> .)
    SEMICOLON       reduce using rule 66 (meteVar -> .)
    LESS            reduce using rule 66 (meteVar -> .)
    GRTR            reduce using rule 66 (meteVar -> .)
    EQ              reduce using rule 66 (meteVar -> .)
    NOTEQ           reduce using rule 66 (meteVar -> .)
    AND             reduce using rule 66 (meteVar -> .)
    OR              reduce using rule 66 (meteVar -> .)
    SUM             reduce using rule 66 (meteVar -> .)
    MINUS           reduce using rule 66 (meteVar -> .)
    MULTP           reduce using rule 66 (meteVar -> .)
    DIVIDE          reduce using rule 66 (meteVar -> .)

    meteVar                        shift and go to state 166

state 141

    (44) llamadaAFunct -> ID LEFTPAR . llamadaAFunct2 RIGHTPAR
    (46) llamadaAFunct2 -> . ID llamadaAFunct3
    (49) llamadaAFunct2 -> . empty
    (133) empty -> .

    ID              shift and go to state 168
    RIGHTPAR        reduce using rule 133 (empty -> .)

    llamadaAFunct2                 shift and go to state 167
    empty                          shift and go to state 169

state 142

    (50) declareLocal -> DECLARE declareRecursivoLocal .

    IF              reduce using rule 50 (declareLocal -> DECLARE declareRecursivoLocal .)
    DECLARE         reduce using rule 50 (declareLocal -> DECLARE declareRecursivoLocal .)
    READ            reduce using rule 50 (declareLocal -> DECLARE declareRecursivoLocal .)
    WRITE           reduce using rule 50 (declareLocal -> DECLARE declareRecursivoLocal .)
    ID              reduce using rule 50 (declareLocal -> DECLARE declareRecursivoLocal .)
    WHILE           reduce using rule 50 (declareLocal -> DECLARE declareRecursivoLocal .)
    FOR             reduce using rule 50 (declareLocal -> DECLARE declareRecursivoLocal .)
    DO              reduce using rule 50 (declareLocal -> DECLARE declareRecursivoLocal .)
    RIGHTKEY        reduce using rule 50 (declareLocal -> DECLARE declareRecursivoLocal .)
    RETURN          reduce using rule 50 (declareLocal -> DECLARE declareRecursivoLocal .)


state 143

    (51) declareRecursivoLocal -> type . ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal

    ID              shift and go to state 170


state 144

    (59) declareRecursivoLocal -> empty .

    IF              reduce using rule 59 (declareRecursivoLocal -> empty .)
    DECLARE         reduce using rule 59 (declareRecursivoLocal -> empty .)
    READ            reduce using rule 59 (declareRecursivoLocal -> empty .)
    WRITE           reduce using rule 59 (declareRecursivoLocal -> empty .)
    ID              reduce using rule 59 (declareRecursivoLocal -> empty .)
    WHILE           reduce using rule 59 (declareRecursivoLocal -> empty .)
    FOR             reduce using rule 59 (declareRecursivoLocal -> empty .)
    DO              reduce using rule 59 (declareRecursivoLocal -> empty .)
    RIGHTKEY        reduce using rule 59 (declareRecursivoLocal -> empty .)
    RETURN          reduce using rule 59 (declareRecursivoLocal -> empty .)


state 145

    (68) conditional -> IF LEFTPAR . conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (74) conditional2 -> . exp conditional2
    (75) conditional2 -> . empty
    (107) exp -> . ID meteExp exp2
    (108) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (113) exp -> . number exp2
    (115) exp -> . empty
    (133) empty -> .
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    RIGHTPAR        reduce using rule 133 (empty -> .)
    LESS            reduce using rule 133 (empty -> .)
    GRTR            reduce using rule 133 (empty -> .)
    EQ              reduce using rule 133 (empty -> .)
    NOTEQ           reduce using rule 133 (empty -> .)
    AND             reduce using rule 133 (empty -> .)
    OR              reduce using rule 133 (empty -> .)
    SUM             reduce using rule 133 (empty -> .)
    MINUS           reduce using rule 133 (empty -> .)
    MULTP           reduce using rule 133 (empty -> .)
    DIVIDE          reduce using rule 133 (empty -> .)
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41

  ! ID              [ reduce using rule 133 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 133 (empty -> .) ]
  ! INTEGER         [ reduce using rule 133 (empty -> .) ]
  ! FLOAT           [ reduce using rule 133 (empty -> .) ]

    exp                            shift and go to state 173
    number                         shift and go to state 40
    empty                          shift and go to state 171
    conditional2                   shift and go to state 172

state 146

    (38) est -> cycles est .

    RIGHTKEY        reduce using rule 38 (est -> cycles est .)
    RETURN          reduce using rule 38 (est -> cycles est .)


state 147

    (40) est -> output est .

    RIGHTKEY        reduce using rule 40 (est -> output est .)
    RETURN          reduce using rule 40 (est -> output est .)


state 148

    (37) est -> declareLocal est .

    RIGHTKEY        reduce using rule 37 (est -> declareLocal est .)
    RETURN          reduce using rule 37 (est -> declareLocal est .)


state 149

    (108) exp -> LEFTPAR metePar exp RIGHTPAR sacaPar . exp2 generaCuad
    (116) exp2 -> . LESS meteOper exp
    (117) exp2 -> . GRTR meteOper exp
    (118) exp2 -> . EQ meteOper exp
    (119) exp2 -> . NOTEQ meteOper exp
    (120) exp2 -> . AND meteOper exp
    (121) exp2 -> . OR meteOper exp
    (122) exp2 -> . SUM meteOper exp
    (124) exp2 -> . MINUS meteOper exp
    (125) exp2 -> . MULTP meteOper exp
    (126) exp2 -> . DIVIDE meteOper exp
    (127) exp2 -> . empty
    (133) empty -> .

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GRTR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTP resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    LESS            shift and go to state 55
    GRTR            shift and go to state 60
    EQ              shift and go to state 62
    NOTEQ           shift and go to state 56
    AND             shift and go to state 53
    OR              shift and go to state 63
    SUM             shift and go to state 58
    MINUS           shift and go to state 59
    MULTP           shift and go to state 61
    DIVIDE          shift and go to state 54
    LEFTBRACK       reduce using rule 133 (empty -> .)
    COMMA           reduce using rule 133 (empty -> .)
    SEMICOLON       reduce using rule 133 (empty -> .)
    RIGHTBRACK      reduce using rule 133 (empty -> .)
    RIGHTPAR        reduce using rule 133 (empty -> .)
    ID              reduce using rule 133 (empty -> .)
    LEFTPAR         reduce using rule 133 (empty -> .)
    INTEGER         reduce using rule 133 (empty -> .)
    FLOAT           reduce using rule 133 (empty -> .)

  ! LESS            [ reduce using rule 133 (empty -> .) ]
  ! GRTR            [ reduce using rule 133 (empty -> .) ]
  ! EQ              [ reduce using rule 133 (empty -> .) ]
  ! NOTEQ           [ reduce using rule 133 (empty -> .) ]
  ! AND             [ reduce using rule 133 (empty -> .) ]
  ! OR              [ reduce using rule 133 (empty -> .) ]
  ! SUM             [ reduce using rule 133 (empty -> .) ]
  ! MINUS           [ reduce using rule 133 (empty -> .) ]
  ! MULTP           [ reduce using rule 133 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 133 (empty -> .) ]

    exp2                           shift and go to state 174
    empty                          shift and go to state 64

state 150

    (10) declare3 -> COMMA ID altaVarGlobal declare3 .

    SEMICOLON       reduce using rule 10 (declare3 -> COMMA ID altaVarGlobal declare3 .)


state 151

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est . functReturn RIGHTKEY
    (13) functReturn -> . RETURN NUMBER SEMICOLON
    (14) functReturn -> . RETURN ID SEMICOLON
    (15) functReturn -> . empty
    (133) empty -> .

    RETURN          shift and go to state 175
    RIGHTKEY        reduce using rule 133 (empty -> .)

    functReturn                    shift and go to state 176
    empty                          shift and go to state 177

state 152

    (17) funct2 -> type ID altaVarLocal funct3 .

    RIGHTPAR        reduce using rule 17 (funct2 -> type ID altaVarLocal funct3 .)


state 153

    (18) funct3 -> COMMA . type ID altaVarLocal funct3
    (27) type -> . type2
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    type                           shift and go to state 178
    type2                          shift and go to state 19

state 154

    (20) funct3 -> empty .

    RIGHTPAR        reduce using rule 20 (funct3 -> empty .)


state 155

    (80) do-while -> DO meteSalto LEFTKEY . est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . for
    (79) cycles -> . do-while
    (132) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (128) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (133) empty -> .
    (83) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (87) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 108
    DECLARE         shift and go to state 107
    READ            shift and go to state 95
    WRITE           shift and go to state 105
    ID              shift and go to state 106
    RIGHTKEY        reduce using rule 133 (empty -> .)
    WHILE           shift and go to state 97
    FOR             shift and go to state 103
    DO              shift and go to state 94

  ! IF              [ reduce using rule 133 (empty -> .) ]
  ! DECLARE         [ reduce using rule 133 (empty -> .) ]
  ! READ            [ reduce using rule 133 (empty -> .) ]
  ! WRITE           [ reduce using rule 133 (empty -> .) ]
  ! ID              [ reduce using rule 133 (empty -> .) ]
  ! WHILE           [ reduce using rule 133 (empty -> .) ]
  ! FOR             [ reduce using rule 133 (empty -> .) ]
  ! DO              [ reduce using rule 133 (empty -> .) ]

    conditional                    shift and go to state 96
    do-while                       shift and go to state 98
    est                            shift and go to state 179
    for                            shift and go to state 100
    llamadaAFunct                  shift and go to state 101
    input                          shift and go to state 102
    assignment                     shift and go to state 104
    declareLocal                   shift and go to state 113
    while                          shift and go to state 110
    empty                          shift and go to state 111
    output                         shift and go to state 112
    cycles                         shift and go to state 109

state 156

    (132) input -> READ LEFTPAR ID . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 180


state 157

    (83) while -> WHILE LEFTPAR while2 . RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF

    RIGHTPAR        shift and go to state 181


state 158

    (85) while2 -> exp . while2
    (85) while2 -> . exp while2
    (86) while2 -> . empty
    (107) exp -> . ID meteExp exp2
    (108) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (113) exp -> . number exp2
    (115) exp -> . empty
    (133) empty -> .
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    RIGHTPAR        reduce using rule 133 (empty -> .)
    LESS            reduce using rule 133 (empty -> .)
    GRTR            reduce using rule 133 (empty -> .)
    EQ              reduce using rule 133 (empty -> .)
    NOTEQ           reduce using rule 133 (empty -> .)
    AND             reduce using rule 133 (empty -> .)
    OR              reduce using rule 133 (empty -> .)
    SUM             reduce using rule 133 (empty -> .)
    MINUS           reduce using rule 133 (empty -> .)
    MULTP           reduce using rule 133 (empty -> .)
    DIVIDE          reduce using rule 133 (empty -> .)
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41

  ! ID              [ reduce using rule 133 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 133 (empty -> .) ]
  ! INTEGER         [ reduce using rule 133 (empty -> .) ]
  ! FLOAT           [ reduce using rule 133 (empty -> .) ]

    number                         shift and go to state 40
    while2                         shift and go to state 182
    exp                            shift and go to state 158
    empty                          shift and go to state 159

state 159

    (86) while2 -> empty .
    (115) exp -> empty .
    (55) number -> empty .

  ! reduce/reduce conflict for RIGHTPAR resolved using rule 86 (while2 -> empty .)
  ! reduce/reduce conflict for LESS resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for GRTR resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for EQ resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for NOTEQ resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for AND resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for OR resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for SUM resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for MINUS resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for MULTP resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for LEFTPAR resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for INTEGER resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for FLOAT resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for RIGHTPAR resolved using rule 55 (number -> empty .)
    LESS            reduce using rule 55 (number -> empty .)
    GRTR            reduce using rule 55 (number -> empty .)
    EQ              reduce using rule 55 (number -> empty .)
    NOTEQ           reduce using rule 55 (number -> empty .)
    AND             reduce using rule 55 (number -> empty .)
    OR              reduce using rule 55 (number -> empty .)
    SUM             reduce using rule 55 (number -> empty .)
    MINUS           reduce using rule 55 (number -> empty .)
    MULTP           reduce using rule 55 (number -> empty .)
    DIVIDE          reduce using rule 55 (number -> empty .)
    ID              reduce using rule 55 (number -> empty .)
    LEFTPAR         reduce using rule 55 (number -> empty .)
    INTEGER         reduce using rule 55 (number -> empty .)
    FLOAT           reduce using rule 55 (number -> empty .)
    RIGHTPAR        reduce using rule 55 (number -> empty .)

  ! RIGHTPAR        [ reduce using rule 86 (while2 -> empty .) ]
  ! ID              [ reduce using rule 115 (exp -> empty .) ]
  ! LEFTPAR         [ reduce using rule 115 (exp -> empty .) ]
  ! INTEGER         [ reduce using rule 115 (exp -> empty .) ]
  ! FLOAT           [ reduce using rule 115 (exp -> empty .) ]
  ! LESS            [ reduce using rule 115 (exp -> empty .) ]
  ! GRTR            [ reduce using rule 115 (exp -> empty .) ]
  ! EQ              [ reduce using rule 115 (exp -> empty .) ]
  ! NOTEQ           [ reduce using rule 115 (exp -> empty .) ]
  ! AND             [ reduce using rule 115 (exp -> empty .) ]
  ! OR              [ reduce using rule 115 (exp -> empty .) ]
  ! SUM             [ reduce using rule 115 (exp -> empty .) ]
  ! MINUS           [ reduce using rule 115 (exp -> empty .) ]
  ! MULTP           [ reduce using rule 115 (exp -> empty .) ]
  ! DIVIDE          [ reduce using rule 115 (exp -> empty .) ]
  ! RIGHTPAR        [ reduce using rule 115 (exp -> empty .) ]


state 160

    (87) for -> FOR LEFTPAR for2 . SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY

    SEMICOLON       shift and go to state 183


state 161

    (88) for2 -> ID . ASSGN cuadFor number generaCuad for3

    ASSGN           shift and go to state 184


state 162

    (128) output -> WRITE LEFTPAR output2 . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 185


state 163

    (130) output2 -> QUOTE . ID QUOTE output2

    ID              shift and go to state 186


state 164

    (129) output2 -> ID . output2
    (129) output2 -> . ID output2
    (130) output2 -> . QUOTE ID QUOTE output2
    (131) output2 -> . empty
    (133) empty -> .

    ID              shift and go to state 164
    QUOTE           shift and go to state 163
    RIGHTPAR        reduce using rule 133 (empty -> .)

    output2                        shift and go to state 187
    empty                          shift and go to state 165

state 165

    (131) output2 -> empty .

    RIGHTPAR        reduce using rule 131 (output2 -> empty .)


state 166

    (64) assignment -> ID ASSGN meteVar . exp generaCuad SEMICOLON
    (65) assignment -> ID ASSGN meteVar . llamadaAFunct SEMICOLON
    (107) exp -> . ID meteExp exp2
    (108) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (113) exp -> . number exp2
    (115) exp -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (133) empty -> .

    ID              shift and go to state 190
    LEFTPAR         shift and go to state 42
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    SEMICOLON       reduce using rule 133 (empty -> .)
    LESS            reduce using rule 133 (empty -> .)
    GRTR            reduce using rule 133 (empty -> .)
    EQ              reduce using rule 133 (empty -> .)
    NOTEQ           reduce using rule 133 (empty -> .)
    AND             reduce using rule 133 (empty -> .)
    OR              reduce using rule 133 (empty -> .)
    SUM             reduce using rule 133 (empty -> .)
    MINUS           reduce using rule 133 (empty -> .)
    MULTP           reduce using rule 133 (empty -> .)
    DIVIDE          reduce using rule 133 (empty -> .)

    llamadaAFunct                  shift and go to state 188
    number                         shift and go to state 40
    exp                            shift and go to state 189
    empty                          shift and go to state 191

state 167

    (44) llamadaAFunct -> ID LEFTPAR llamadaAFunct2 . RIGHTPAR

    RIGHTPAR        shift and go to state 192


state 168

    (46) llamadaAFunct2 -> ID . llamadaAFunct3
    (47) llamadaAFunct3 -> . COMMA ID
    (48) llamadaAFunct3 -> . empty
    (133) empty -> .

    COMMA           shift and go to state 194
    RIGHTPAR        reduce using rule 133 (empty -> .)

    llamadaAFunct3                 shift and go to state 193
    empty                          shift and go to state 195

state 169

    (49) llamadaAFunct2 -> empty .

    RIGHTPAR        reduce using rule 49 (llamadaAFunct2 -> empty .)


state 170

    (51) declareRecursivoLocal -> type ID . altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (63) altaVarLocal -> .

    ASSGN           reduce using rule 63 (altaVarLocal -> .)
    LEFTBRACK       reduce using rule 63 (altaVarLocal -> .)
    COMMA           reduce using rule 63 (altaVarLocal -> .)
    SEMICOLON       reduce using rule 63 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 196

state 171

    (75) conditional2 -> empty .
    (115) exp -> empty .
    (55) number -> empty .

  ! reduce/reduce conflict for RIGHTPAR resolved using rule 75 (conditional2 -> empty .)
  ! reduce/reduce conflict for LESS resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for GRTR resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for EQ resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for NOTEQ resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for AND resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for OR resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for SUM resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for MINUS resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for MULTP resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for LEFTPAR resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for INTEGER resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for FLOAT resolved using rule 55 (number -> empty .)
  ! reduce/reduce conflict for RIGHTPAR resolved using rule 55 (number -> empty .)
    LESS            reduce using rule 55 (number -> empty .)
    GRTR            reduce using rule 55 (number -> empty .)
    EQ              reduce using rule 55 (number -> empty .)
    NOTEQ           reduce using rule 55 (number -> empty .)
    AND             reduce using rule 55 (number -> empty .)
    OR              reduce using rule 55 (number -> empty .)
    SUM             reduce using rule 55 (number -> empty .)
    MINUS           reduce using rule 55 (number -> empty .)
    MULTP           reduce using rule 55 (number -> empty .)
    DIVIDE          reduce using rule 55 (number -> empty .)
    ID              reduce using rule 55 (number -> empty .)
    LEFTPAR         reduce using rule 55 (number -> empty .)
    INTEGER         reduce using rule 55 (number -> empty .)
    FLOAT           reduce using rule 55 (number -> empty .)
    RIGHTPAR        reduce using rule 55 (number -> empty .)

  ! RIGHTPAR        [ reduce using rule 75 (conditional2 -> empty .) ]
  ! ID              [ reduce using rule 115 (exp -> empty .) ]
  ! LEFTPAR         [ reduce using rule 115 (exp -> empty .) ]
  ! INTEGER         [ reduce using rule 115 (exp -> empty .) ]
  ! FLOAT           [ reduce using rule 115 (exp -> empty .) ]
  ! LESS            [ reduce using rule 115 (exp -> empty .) ]
  ! GRTR            [ reduce using rule 115 (exp -> empty .) ]
  ! EQ              [ reduce using rule 115 (exp -> empty .) ]
  ! NOTEQ           [ reduce using rule 115 (exp -> empty .) ]
  ! AND             [ reduce using rule 115 (exp -> empty .) ]
  ! OR              [ reduce using rule 115 (exp -> empty .) ]
  ! SUM             [ reduce using rule 115 (exp -> empty .) ]
  ! MINUS           [ reduce using rule 115 (exp -> empty .) ]
  ! MULTP           [ reduce using rule 115 (exp -> empty .) ]
  ! DIVIDE          [ reduce using rule 115 (exp -> empty .) ]
  ! RIGHTPAR        [ reduce using rule 115 (exp -> empty .) ]


state 172

    (68) conditional -> IF LEFTPAR conditional2 . RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse

    RIGHTPAR        shift and go to state 197


state 173

    (74) conditional2 -> exp . conditional2
    (74) conditional2 -> . exp conditional2
    (75) conditional2 -> . empty
    (107) exp -> . ID meteExp exp2
    (108) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (113) exp -> . number exp2
    (115) exp -> . empty
    (133) empty -> .
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    RIGHTPAR        reduce using rule 133 (empty -> .)
    LESS            reduce using rule 133 (empty -> .)
    GRTR            reduce using rule 133 (empty -> .)
    EQ              reduce using rule 133 (empty -> .)
    NOTEQ           reduce using rule 133 (empty -> .)
    AND             reduce using rule 133 (empty -> .)
    OR              reduce using rule 133 (empty -> .)
    SUM             reduce using rule 133 (empty -> .)
    MINUS           reduce using rule 133 (empty -> .)
    MULTP           reduce using rule 133 (empty -> .)
    DIVIDE          reduce using rule 133 (empty -> .)
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41

  ! ID              [ reduce using rule 133 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 133 (empty -> .) ]
  ! INTEGER         [ reduce using rule 133 (empty -> .) ]
  ! FLOAT           [ reduce using rule 133 (empty -> .) ]

    number                         shift and go to state 40
    conditional2                   shift and go to state 198
    exp                            shift and go to state 173
    empty                          shift and go to state 171

state 174

    (108) exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 . generaCuad
    (112) generaCuad -> .

    LEFTBRACK       reduce using rule 112 (generaCuad -> .)
    COMMA           reduce using rule 112 (generaCuad -> .)
    SEMICOLON       reduce using rule 112 (generaCuad -> .)
    RIGHTBRACK      reduce using rule 112 (generaCuad -> .)
    RIGHTPAR        reduce using rule 112 (generaCuad -> .)
    ID              reduce using rule 112 (generaCuad -> .)
    LEFTPAR         reduce using rule 112 (generaCuad -> .)
    INTEGER         reduce using rule 112 (generaCuad -> .)
    FLOAT           reduce using rule 112 (generaCuad -> .)
    LESS            reduce using rule 112 (generaCuad -> .)
    GRTR            reduce using rule 112 (generaCuad -> .)
    EQ              reduce using rule 112 (generaCuad -> .)
    NOTEQ           reduce using rule 112 (generaCuad -> .)
    AND             reduce using rule 112 (generaCuad -> .)
    OR              reduce using rule 112 (generaCuad -> .)
    SUM             reduce using rule 112 (generaCuad -> .)
    MINUS           reduce using rule 112 (generaCuad -> .)
    MULTP           reduce using rule 112 (generaCuad -> .)
    DIVIDE          reduce using rule 112 (generaCuad -> .)

    generaCuad                     shift and go to state 199

state 175

    (13) functReturn -> RETURN . NUMBER SEMICOLON
    (14) functReturn -> RETURN . ID SEMICOLON

    NUMBER          shift and go to state 200
    ID              shift and go to state 201


state 176

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn . RIGHTKEY

    RIGHTKEY        shift and go to state 202


state 177

    (15) functReturn -> empty .

    RIGHTKEY        reduce using rule 15 (functReturn -> empty .)


state 178

    (18) funct3 -> COMMA type . ID altaVarLocal funct3

    ID              shift and go to state 203


state 179

    (80) do-while -> DO meteSalto LEFTKEY est . RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

    RIGHTKEY        shift and go to state 204


state 180

    (132) input -> READ LEFTPAR ID RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 205


state 181

    (83) while -> WHILE LEFTPAR while2 RIGHTPAR . gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (69) gotoFCuad -> .

    LEFTKEY         reduce using rule 69 (gotoFCuad -> .)

    gotoFCuad                      shift and go to state 206

state 182

    (85) while2 -> exp while2 .

    RIGHTPAR        reduce using rule 85 (while2 -> exp while2 .)


state 183

    (87) for -> FOR LEFTPAR for2 SEMICOLON . for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (92) for4 -> . expFor
    (97) expFor -> . ID meteExp expFor2
    (98) expFor -> . number
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (133) empty -> .

    ID              shift and go to state 209
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    SEMICOLON       reduce using rule 133 (empty -> .)

    number                         shift and go to state 207
    expFor                         shift and go to state 208
    empty                          shift and go to state 210
    for4                           shift and go to state 211

state 184

    (88) for2 -> ID ASSGN . cuadFor number generaCuad for3
    (89) cuadFor -> .

    INTEGER         reduce using rule 89 (cuadFor -> .)
    FLOAT           reduce using rule 89 (cuadFor -> .)
    COMMA           reduce using rule 89 (cuadFor -> .)
    SEMICOLON       reduce using rule 89 (cuadFor -> .)

    cuadFor                        shift and go to state 212

state 185

    (128) output -> WRITE LEFTPAR output2 RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 213


state 186

    (130) output2 -> QUOTE ID . QUOTE output2

    QUOTE           shift and go to state 214


state 187

    (129) output2 -> ID output2 .

    RIGHTPAR        reduce using rule 129 (output2 -> ID output2 .)


state 188

    (65) assignment -> ID ASSGN meteVar llamadaAFunct . SEMICOLON

    SEMICOLON       shift and go to state 215


state 189

    (64) assignment -> ID ASSGN meteVar exp . generaCuad SEMICOLON
    (112) generaCuad -> .

    SEMICOLON       reduce using rule 112 (generaCuad -> .)

    generaCuad                     shift and go to state 216

state 190

    (107) exp -> ID . meteExp exp2
    (44) llamadaAFunct -> ID . LEFTPAR llamadaAFunct2 RIGHTPAR
    (111) meteExp -> .

    LEFTPAR         shift and go to state 141
    LESS            reduce using rule 111 (meteExp -> .)
    GRTR            reduce using rule 111 (meteExp -> .)
    EQ              reduce using rule 111 (meteExp -> .)
    NOTEQ           reduce using rule 111 (meteExp -> .)
    AND             reduce using rule 111 (meteExp -> .)
    OR              reduce using rule 111 (meteExp -> .)
    SUM             reduce using rule 111 (meteExp -> .)
    MINUS           reduce using rule 111 (meteExp -> .)
    MULTP           reduce using rule 111 (meteExp -> .)
    DIVIDE          reduce using rule 111 (meteExp -> .)
    SEMICOLON       reduce using rule 111 (meteExp -> .)

    meteExp                        shift and go to state 68

state 191

    (115) exp -> empty .
    (45) llamadaAFunct -> empty .
    (55) number -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 45 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 45 (llamadaAFunct -> empty .)
    SEMICOLON       reduce using rule 45 (llamadaAFunct -> empty .)
    LESS            reduce using rule 55 (number -> empty .)
    GRTR            reduce using rule 55 (number -> empty .)
    EQ              reduce using rule 55 (number -> empty .)
    NOTEQ           reduce using rule 55 (number -> empty .)
    AND             reduce using rule 55 (number -> empty .)
    OR              reduce using rule 55 (number -> empty .)
    SUM             reduce using rule 55 (number -> empty .)
    MINUS           reduce using rule 55 (number -> empty .)
    MULTP           reduce using rule 55 (number -> empty .)
    DIVIDE          reduce using rule 55 (number -> empty .)

  ! SEMICOLON       [ reduce using rule 115 (exp -> empty .) ]
  ! SEMICOLON       [ reduce using rule 55 (number -> empty .) ]


state 192

    (44) llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .

    IF              reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    DECLARE         reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    READ            reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    WRITE           reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    ID              reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    WHILE           reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    FOR             reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    DO              reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    RIGHTKEY        reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    RETURN          reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    SEMICOLON       reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)


state 193

    (46) llamadaAFunct2 -> ID llamadaAFunct3 .

    RIGHTPAR        reduce using rule 46 (llamadaAFunct2 -> ID llamadaAFunct3 .)


state 194

    (47) llamadaAFunct3 -> COMMA . ID

    ID              shift and go to state 217


state 195

    (48) llamadaAFunct3 -> empty .

    RIGHTPAR        reduce using rule 48 (llamadaAFunct3 -> empty .)


state 196

    (51) declareRecursivoLocal -> type ID altaVarLocal . assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (52) assignmentDecl -> . ASSGN exp
    (56) assignmentDecl -> . empty
    (133) empty -> .

    ASSGN           shift and go to state 35
    LEFTBRACK       reduce using rule 133 (empty -> .)
    COMMA           reduce using rule 133 (empty -> .)
    SEMICOLON       reduce using rule 133 (empty -> .)

    assignmentDecl                 shift and go to state 218
    empty                          shift and go to state 37

state 197

    (68) conditional -> IF LEFTPAR conditional2 RIGHTPAR . gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (69) gotoFCuad -> .

    LEFTKEY         reduce using rule 69 (gotoFCuad -> .)

    gotoFCuad                      shift and go to state 219

state 198

    (74) conditional2 -> exp conditional2 .

    RIGHTPAR        reduce using rule 74 (conditional2 -> exp conditional2 .)


state 199

    (108) exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .

    LEFTBRACK       reduce using rule 108 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    COMMA           reduce using rule 108 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    SEMICOLON       reduce using rule 108 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    RIGHTBRACK      reduce using rule 108 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    RIGHTPAR        reduce using rule 108 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    ID              reduce using rule 108 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    LEFTPAR         reduce using rule 108 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    INTEGER         reduce using rule 108 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    FLOAT           reduce using rule 108 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    LESS            reduce using rule 108 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    GRTR            reduce using rule 108 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    EQ              reduce using rule 108 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    NOTEQ           reduce using rule 108 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    AND             reduce using rule 108 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    OR              reduce using rule 108 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    SUM             reduce using rule 108 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    MINUS           reduce using rule 108 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    MULTP           reduce using rule 108 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    DIVIDE          reduce using rule 108 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)


state 200

    (13) functReturn -> RETURN NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 220


state 201

    (14) functReturn -> RETURN ID . SEMICOLON

    SEMICOLON       shift and go to state 221


state 202

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY .

    FUNCTION        reduce using rule 12 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY .)
    MAIN            reduce using rule 12 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY .)


state 203

    (18) funct3 -> COMMA type ID . altaVarLocal funct3
    (63) altaVarLocal -> .

    COMMA           reduce using rule 63 (altaVarLocal -> .)
    RIGHTPAR        reduce using rule 63 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 222

state 204

    (80) do-while -> DO meteSalto LEFTKEY est RIGHTKEY . WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

    WHILE           shift and go to state 223


state 205

    (132) input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .

    IF              reduce using rule 132 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    DECLARE         reduce using rule 132 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    READ            reduce using rule 132 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    WRITE           reduce using rule 132 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    ID              reduce using rule 132 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 132 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    FOR             reduce using rule 132 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    DO              reduce using rule 132 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    RIGHTKEY        reduce using rule 132 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    RETURN          reduce using rule 132 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)


state 206

    (83) while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad . LEFTKEY est RIGHTKEY llenaCuadF

    LEFTKEY         shift and go to state 224


state 207

    (98) expFor -> number .

    SEMICOLON       reduce using rule 98 (expFor -> number .)


state 208

    (92) for4 -> expFor .

    SEMICOLON       reduce using rule 92 (for4 -> expFor .)


state 209

    (97) expFor -> ID . meteExp expFor2
    (111) meteExp -> .

    LESS            reduce using rule 111 (meteExp -> .)
    GRTR            reduce using rule 111 (meteExp -> .)
    EQ              reduce using rule 111 (meteExp -> .)
    NOTEQ           reduce using rule 111 (meteExp -> .)
    AND             reduce using rule 111 (meteExp -> .)
    OR              reduce using rule 111 (meteExp -> .)
    SEMICOLON       reduce using rule 111 (meteExp -> .)

    meteExp                        shift and go to state 225

state 210

    (55) number -> empty .

    SEMICOLON       reduce using rule 55 (number -> empty .)
    COMMA           reduce using rule 55 (number -> empty .)


state 211

    (87) for -> FOR LEFTPAR for2 SEMICOLON for4 . SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY

    SEMICOLON       shift and go to state 226


state 212

    (88) for2 -> ID ASSGN cuadFor . number generaCuad for3
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (133) empty -> .

    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    COMMA           reduce using rule 133 (empty -> .)
    SEMICOLON       reduce using rule 133 (empty -> .)

    number                         shift and go to state 227
    empty                          shift and go to state 210

state 213

    (128) output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .

    IF              reduce using rule 128 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    DECLARE         reduce using rule 128 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    READ            reduce using rule 128 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    WRITE           reduce using rule 128 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    ID              reduce using rule 128 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 128 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    FOR             reduce using rule 128 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    DO              reduce using rule 128 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    RIGHTKEY        reduce using rule 128 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    RETURN          reduce using rule 128 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)


state 214

    (130) output2 -> QUOTE ID QUOTE . output2
    (129) output2 -> . ID output2
    (130) output2 -> . QUOTE ID QUOTE output2
    (131) output2 -> . empty
    (133) empty -> .

    ID              shift and go to state 164
    QUOTE           shift and go to state 163
    RIGHTPAR        reduce using rule 133 (empty -> .)

    output2                        shift and go to state 228
    empty                          shift and go to state 165

state 215

    (65) assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .

    IF              reduce using rule 65 (assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .)
    DECLARE         reduce using rule 65 (assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .)
    READ            reduce using rule 65 (assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .)
    WRITE           reduce using rule 65 (assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .)
    ID              reduce using rule 65 (assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .)
    WHILE           reduce using rule 65 (assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .)
    FOR             reduce using rule 65 (assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .)
    DO              reduce using rule 65 (assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .)
    RIGHTKEY        reduce using rule 65 (assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .)
    RETURN          reduce using rule 65 (assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .)


state 216

    (64) assignment -> ID ASSGN meteVar exp generaCuad . SEMICOLON

    SEMICOLON       shift and go to state 229


state 217

    (47) llamadaAFunct3 -> COMMA ID .

    RIGHTPAR        reduce using rule 47 (llamadaAFunct3 -> COMMA ID .)


state 218

    (51) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl . declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (57) declare2Local -> . array
    (61) declare2Local -> . empty
    (25) array -> . LEFTBRACK exp RIGHTBRACK array
    (26) array -> . empty
    (133) empty -> .

    LEFTBRACK       shift and go to state 47
    COMMA           reduce using rule 133 (empty -> .)
    SEMICOLON       reduce using rule 133 (empty -> .)

    declare2Local                  shift and go to state 230
    array                          shift and go to state 231
    empty                          shift and go to state 232

state 219

    (68) conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad . LEFTKEY est RIGHTKEY gotoCuad conditionalElse

    LEFTKEY         shift and go to state 233


state 220

    (13) functReturn -> RETURN NUMBER SEMICOLON .

    RIGHTKEY        reduce using rule 13 (functReturn -> RETURN NUMBER SEMICOLON .)


state 221

    (14) functReturn -> RETURN ID SEMICOLON .

    RIGHTKEY        reduce using rule 14 (functReturn -> RETURN ID SEMICOLON .)


state 222

    (18) funct3 -> COMMA type ID altaVarLocal . funct3
    (18) funct3 -> . COMMA type ID altaVarLocal funct3
    (20) funct3 -> . empty
    (133) empty -> .

    COMMA           shift and go to state 153
    RIGHTPAR        reduce using rule 133 (empty -> .)

    funct3                         shift and go to state 234
    empty                          shift and go to state 154

state 223

    (80) do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE . LEFTPAR while2 RIGHTPAR gotoVCuad

    LEFTPAR         shift and go to state 235


state 224

    (83) while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY . est RIGHTKEY llenaCuadF
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . for
    (79) cycles -> . do-while
    (132) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (128) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (133) empty -> .
    (83) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (87) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 108
    DECLARE         shift and go to state 107
    READ            shift and go to state 95
    WRITE           shift and go to state 105
    ID              shift and go to state 106
    RIGHTKEY        reduce using rule 133 (empty -> .)
    WHILE           shift and go to state 97
    FOR             shift and go to state 103
    DO              shift and go to state 94

  ! IF              [ reduce using rule 133 (empty -> .) ]
  ! DECLARE         [ reduce using rule 133 (empty -> .) ]
  ! READ            [ reduce using rule 133 (empty -> .) ]
  ! WRITE           [ reduce using rule 133 (empty -> .) ]
  ! ID              [ reduce using rule 133 (empty -> .) ]
  ! WHILE           [ reduce using rule 133 (empty -> .) ]
  ! FOR             [ reduce using rule 133 (empty -> .) ]
  ! DO              [ reduce using rule 133 (empty -> .) ]

    conditional                    shift and go to state 96
    do-while                       shift and go to state 98
    est                            shift and go to state 236
    for                            shift and go to state 100
    llamadaAFunct                  shift and go to state 101
    input                          shift and go to state 102
    assignment                     shift and go to state 104
    declareLocal                   shift and go to state 113
    while                          shift and go to state 110
    empty                          shift and go to state 111
    output                         shift and go to state 112
    cycles                         shift and go to state 109

state 225

    (97) expFor -> ID meteExp . expFor2
    (99) expFor2 -> . LESS meteOper expFor
    (100) expFor2 -> . GRTR meteOper expFor
    (101) expFor2 -> . EQ meteOper expFor
    (102) expFor2 -> . NOTEQ meteOper expFor
    (103) expFor2 -> . AND meteOper expFor
    (104) expFor2 -> . OR meteOper expFor
    (105) expFor2 -> .
    (106) expFor2 -> . empty
    (133) empty -> .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 105 (expFor2 -> .)
    LESS            shift and go to state 238
    GRTR            shift and go to state 241
    EQ              shift and go to state 242
    NOTEQ           shift and go to state 239
    AND             shift and go to state 237
    OR              shift and go to state 244
    SEMICOLON       reduce using rule 105 (expFor2 -> .)

  ! SEMICOLON       [ reduce using rule 133 (empty -> .) ]

    empty                          shift and go to state 243
    expFor2                        shift and go to state 240

state 226

    (87) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON . parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (93) parte3For -> . ID meteID ACTINCR meteOper
    (95) parte3For -> . ID meteID ACTINCRVALOR meteOper
    (96) parte3For -> . ID meteID ACTDECRVALOR meteOper

    ID              shift and go to state 246

    parte3For                      shift and go to state 245

state 227

    (88) for2 -> ID ASSGN cuadFor number . generaCuad for3
    (112) generaCuad -> .

    COMMA           reduce using rule 112 (generaCuad -> .)
    SEMICOLON       reduce using rule 112 (generaCuad -> .)

    generaCuad                     shift and go to state 247

state 228

    (130) output2 -> QUOTE ID QUOTE output2 .

    RIGHTPAR        reduce using rule 130 (output2 -> QUOTE ID QUOTE output2 .)


state 229

    (64) assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .

    IF              reduce using rule 64 (assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .)
    DECLARE         reduce using rule 64 (assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .)
    READ            reduce using rule 64 (assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .)
    WRITE           reduce using rule 64 (assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .)
    ID              reduce using rule 64 (assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .)
    WHILE           reduce using rule 64 (assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .)
    FOR             reduce using rule 64 (assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .)
    DO              reduce using rule 64 (assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .)
    RIGHTKEY        reduce using rule 64 (assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .)
    RETURN          reduce using rule 64 (assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .)


state 230

    (51) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local . declare3Local SEMICOLON declareRecursivoLocal
    (58) declare3Local -> . COMMA ID altaVarLocal assignmentDecl declare3Local
    (62) declare3Local -> . empty
    (133) empty -> .

    COMMA           shift and go to state 248
    SEMICOLON       reduce using rule 133 (empty -> .)

    empty                          shift and go to state 249
    declare3Local                  shift and go to state 250

state 231

    (57) declare2Local -> array .

    COMMA           reduce using rule 57 (declare2Local -> array .)
    SEMICOLON       reduce using rule 57 (declare2Local -> array .)


state 232

    (61) declare2Local -> empty .
    (26) array -> empty .

  ! reduce/reduce conflict for COMMA resolved using rule 26 (array -> empty .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 26 (array -> empty .)
    COMMA           reduce using rule 26 (array -> empty .)
    SEMICOLON       reduce using rule 26 (array -> empty .)

  ! COMMA           [ reduce using rule 61 (declare2Local -> empty .) ]
  ! SEMICOLON       [ reduce using rule 61 (declare2Local -> empty .) ]


state 233

    (68) conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY . est RIGHTKEY gotoCuad conditionalElse
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . for
    (79) cycles -> . do-while
    (132) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (128) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (133) empty -> .
    (83) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (87) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 108
    DECLARE         shift and go to state 107
    READ            shift and go to state 95
    WRITE           shift and go to state 105
    ID              shift and go to state 106
    RIGHTKEY        reduce using rule 133 (empty -> .)
    WHILE           shift and go to state 97
    FOR             shift and go to state 103
    DO              shift and go to state 94

  ! IF              [ reduce using rule 133 (empty -> .) ]
  ! DECLARE         [ reduce using rule 133 (empty -> .) ]
  ! READ            [ reduce using rule 133 (empty -> .) ]
  ! WRITE           [ reduce using rule 133 (empty -> .) ]
  ! ID              [ reduce using rule 133 (empty -> .) ]
  ! WHILE           [ reduce using rule 133 (empty -> .) ]
  ! FOR             [ reduce using rule 133 (empty -> .) ]
  ! DO              [ reduce using rule 133 (empty -> .) ]

    conditional                    shift and go to state 96
    do-while                       shift and go to state 98
    est                            shift and go to state 251
    for                            shift and go to state 100
    llamadaAFunct                  shift and go to state 101
    input                          shift and go to state 102
    empty                          shift and go to state 111
    assignment                     shift and go to state 104
    cycles                         shift and go to state 109
    while                          shift and go to state 110
    output                         shift and go to state 112
    declareLocal                   shift and go to state 113

state 234

    (18) funct3 -> COMMA type ID altaVarLocal funct3 .

    RIGHTPAR        reduce using rule 18 (funct3 -> COMMA type ID altaVarLocal funct3 .)


state 235

    (80) do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR . while2 RIGHTPAR gotoVCuad
    (85) while2 -> . exp while2
    (86) while2 -> . empty
    (107) exp -> . ID meteExp exp2
    (108) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (113) exp -> . number exp2
    (115) exp -> . empty
    (133) empty -> .
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    ID              shift and go to state 45
    LEFTPAR         shift and go to state 42
    RIGHTPAR        reduce using rule 133 (empty -> .)
    LESS            reduce using rule 133 (empty -> .)
    GRTR            reduce using rule 133 (empty -> .)
    EQ              reduce using rule 133 (empty -> .)
    NOTEQ           reduce using rule 133 (empty -> .)
    AND             reduce using rule 133 (empty -> .)
    OR              reduce using rule 133 (empty -> .)
    SUM             reduce using rule 133 (empty -> .)
    MINUS           reduce using rule 133 (empty -> .)
    MULTP           reduce using rule 133 (empty -> .)
    DIVIDE          reduce using rule 133 (empty -> .)
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41

  ! ID              [ reduce using rule 133 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 133 (empty -> .) ]
  ! INTEGER         [ reduce using rule 133 (empty -> .) ]
  ! FLOAT           [ reduce using rule 133 (empty -> .) ]

    number                         shift and go to state 40
    while2                         shift and go to state 252
    exp                            shift and go to state 158
    empty                          shift and go to state 159

state 236

    (83) while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est . RIGHTKEY llenaCuadF

    RIGHTKEY        shift and go to state 253


state 237

    (103) expFor2 -> AND . meteOper expFor
    (123) meteOper -> .

    ID              reduce using rule 123 (meteOper -> .)
    INTEGER         reduce using rule 123 (meteOper -> .)
    FLOAT           reduce using rule 123 (meteOper -> .)
    SEMICOLON       reduce using rule 123 (meteOper -> .)

    meteOper                       shift and go to state 254

state 238

    (99) expFor2 -> LESS . meteOper expFor
    (123) meteOper -> .

    ID              reduce using rule 123 (meteOper -> .)
    INTEGER         reduce using rule 123 (meteOper -> .)
    FLOAT           reduce using rule 123 (meteOper -> .)
    SEMICOLON       reduce using rule 123 (meteOper -> .)

    meteOper                       shift and go to state 255

state 239

    (102) expFor2 -> NOTEQ . meteOper expFor
    (123) meteOper -> .

    ID              reduce using rule 123 (meteOper -> .)
    INTEGER         reduce using rule 123 (meteOper -> .)
    FLOAT           reduce using rule 123 (meteOper -> .)
    SEMICOLON       reduce using rule 123 (meteOper -> .)

    meteOper                       shift and go to state 256

state 240

    (97) expFor -> ID meteExp expFor2 .

    SEMICOLON       reduce using rule 97 (expFor -> ID meteExp expFor2 .)


state 241

    (100) expFor2 -> GRTR . meteOper expFor
    (123) meteOper -> .

    ID              reduce using rule 123 (meteOper -> .)
    INTEGER         reduce using rule 123 (meteOper -> .)
    FLOAT           reduce using rule 123 (meteOper -> .)
    SEMICOLON       reduce using rule 123 (meteOper -> .)

    meteOper                       shift and go to state 257

state 242

    (101) expFor2 -> EQ . meteOper expFor
    (123) meteOper -> .

    ID              reduce using rule 123 (meteOper -> .)
    INTEGER         reduce using rule 123 (meteOper -> .)
    FLOAT           reduce using rule 123 (meteOper -> .)
    SEMICOLON       reduce using rule 123 (meteOper -> .)

    meteOper                       shift and go to state 258

state 243

    (106) expFor2 -> empty .

    SEMICOLON       reduce using rule 106 (expFor2 -> empty .)


state 244

    (104) expFor2 -> OR . meteOper expFor
    (123) meteOper -> .

    ID              reduce using rule 123 (meteOper -> .)
    INTEGER         reduce using rule 123 (meteOper -> .)
    FLOAT           reduce using rule 123 (meteOper -> .)
    SEMICOLON       reduce using rule 123 (meteOper -> .)

    meteOper                       shift and go to state 259

state 245

    (87) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For . RIGHTPAR LEFTKEY est RIGHTKEY

    RIGHTPAR        shift and go to state 260


state 246

    (93) parte3For -> ID . meteID ACTINCR meteOper
    (95) parte3For -> ID . meteID ACTINCRVALOR meteOper
    (96) parte3For -> ID . meteID ACTDECRVALOR meteOper
    (94) meteID -> .

    ACTINCR         reduce using rule 94 (meteID -> .)
    ACTINCRVALOR    reduce using rule 94 (meteID -> .)
    ACTDECRVALOR    reduce using rule 94 (meteID -> .)

    meteID                         shift and go to state 261

state 247

    (88) for2 -> ID ASSGN cuadFor number generaCuad . for3
    (90) for3 -> . COMMA for2
    (91) for3 -> . empty
    (133) empty -> .

    COMMA           shift and go to state 262
    SEMICOLON       reduce using rule 133 (empty -> .)

    for3                           shift and go to state 263
    empty                          shift and go to state 264

state 248

    (58) declare3Local -> COMMA . ID altaVarLocal assignmentDecl declare3Local

    ID              shift and go to state 265


state 249

    (62) declare3Local -> empty .

    SEMICOLON       reduce using rule 62 (declare3Local -> empty .)


state 250

    (51) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local . SEMICOLON declareRecursivoLocal

    SEMICOLON       shift and go to state 266


state 251

    (68) conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est . RIGHTKEY gotoCuad conditionalElse

    RIGHTKEY        shift and go to state 267


state 252

    (80) do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 . RIGHTPAR gotoVCuad

    RIGHTPAR        shift and go to state 268


state 253

    (83) while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY . llenaCuadF
    (84) llenaCuadF -> .

    IF              reduce using rule 84 (llenaCuadF -> .)
    DECLARE         reduce using rule 84 (llenaCuadF -> .)
    READ            reduce using rule 84 (llenaCuadF -> .)
    WRITE           reduce using rule 84 (llenaCuadF -> .)
    ID              reduce using rule 84 (llenaCuadF -> .)
    WHILE           reduce using rule 84 (llenaCuadF -> .)
    FOR             reduce using rule 84 (llenaCuadF -> .)
    DO              reduce using rule 84 (llenaCuadF -> .)
    RIGHTKEY        reduce using rule 84 (llenaCuadF -> .)
    RETURN          reduce using rule 84 (llenaCuadF -> .)

    llenaCuadF                     shift and go to state 269

state 254

    (103) expFor2 -> AND meteOper . expFor
    (97) expFor -> . ID meteExp expFor2
    (98) expFor -> . number
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (133) empty -> .

    ID              shift and go to state 209
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    SEMICOLON       reduce using rule 133 (empty -> .)

    number                         shift and go to state 207
    expFor                         shift and go to state 270
    empty                          shift and go to state 210

state 255

    (99) expFor2 -> LESS meteOper . expFor
    (97) expFor -> . ID meteExp expFor2
    (98) expFor -> . number
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (133) empty -> .

    ID              shift and go to state 209
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    SEMICOLON       reduce using rule 133 (empty -> .)

    number                         shift and go to state 207
    expFor                         shift and go to state 271
    empty                          shift and go to state 210

state 256

    (102) expFor2 -> NOTEQ meteOper . expFor
    (97) expFor -> . ID meteExp expFor2
    (98) expFor -> . number
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (133) empty -> .

    ID              shift and go to state 209
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    SEMICOLON       reduce using rule 133 (empty -> .)

    number                         shift and go to state 207
    expFor                         shift and go to state 272
    empty                          shift and go to state 210

state 257

    (100) expFor2 -> GRTR meteOper . expFor
    (97) expFor -> . ID meteExp expFor2
    (98) expFor -> . number
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (133) empty -> .

    ID              shift and go to state 209
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    SEMICOLON       reduce using rule 133 (empty -> .)

    number                         shift and go to state 207
    expFor                         shift and go to state 273
    empty                          shift and go to state 210

state 258

    (101) expFor2 -> EQ meteOper . expFor
    (97) expFor -> . ID meteExp expFor2
    (98) expFor -> . number
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (133) empty -> .

    ID              shift and go to state 209
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    SEMICOLON       reduce using rule 133 (empty -> .)

    number                         shift and go to state 207
    expFor                         shift and go to state 274
    empty                          shift and go to state 210

state 259

    (104) expFor2 -> OR meteOper . expFor
    (97) expFor -> . ID meteExp expFor2
    (98) expFor -> . number
    (53) number -> . INTEGER meteNum
    (54) number -> . FLOAT meteNum
    (55) number -> . empty
    (133) empty -> .

    ID              shift and go to state 209
    INTEGER         shift and go to state 44
    FLOAT           shift and go to state 41
    SEMICOLON       reduce using rule 133 (empty -> .)

    number                         shift and go to state 207
    expFor                         shift and go to state 275
    empty                          shift and go to state 210

state 260

    (87) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR . LEFTKEY est RIGHTKEY

    LEFTKEY         shift and go to state 276


state 261

    (93) parte3For -> ID meteID . ACTINCR meteOper
    (95) parte3For -> ID meteID . ACTINCRVALOR meteOper
    (96) parte3For -> ID meteID . ACTDECRVALOR meteOper

    ACTINCR         shift and go to state 277
    ACTINCRVALOR    shift and go to state 278
    ACTDECRVALOR    shift and go to state 279


state 262

    (90) for3 -> COMMA . for2
    (88) for2 -> . ID ASSGN cuadFor number generaCuad for3

    ID              shift and go to state 161

    for2                           shift and go to state 280

state 263

    (88) for2 -> ID ASSGN cuadFor number generaCuad for3 .

    SEMICOLON       reduce using rule 88 (for2 -> ID ASSGN cuadFor number generaCuad for3 .)


state 264

    (91) for3 -> empty .

    SEMICOLON       reduce using rule 91 (for3 -> empty .)


state 265

    (58) declare3Local -> COMMA ID . altaVarLocal assignmentDecl declare3Local
    (63) altaVarLocal -> .

    ASSGN           reduce using rule 63 (altaVarLocal -> .)
    COMMA           reduce using rule 63 (altaVarLocal -> .)
    SEMICOLON       reduce using rule 63 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 281

state 266

    (51) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON . declareRecursivoLocal
    (51) declareRecursivoLocal -> . type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (59) declareRecursivoLocal -> . empty
    (27) type -> . type2
    (133) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    IF              reduce using rule 133 (empty -> .)
    DECLARE         reduce using rule 133 (empty -> .)
    READ            reduce using rule 133 (empty -> .)
    WRITE           reduce using rule 133 (empty -> .)
    ID              reduce using rule 133 (empty -> .)
    WHILE           reduce using rule 133 (empty -> .)
    FOR             reduce using rule 133 (empty -> .)
    DO              reduce using rule 133 (empty -> .)
    RIGHTKEY        reduce using rule 133 (empty -> .)
    RETURN          reduce using rule 133 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    declareRecursivoLocal          shift and go to state 282
    type2                          shift and go to state 19
    type                           shift and go to state 143
    empty                          shift and go to state 144

state 267

    (68) conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY . gotoCuad conditionalElse
    (70) gotoCuad -> .

    ELSE            reduce using rule 70 (gotoCuad -> .)
    IF              reduce using rule 70 (gotoCuad -> .)
    DECLARE         reduce using rule 70 (gotoCuad -> .)
    READ            reduce using rule 70 (gotoCuad -> .)
    WRITE           reduce using rule 70 (gotoCuad -> .)
    ID              reduce using rule 70 (gotoCuad -> .)
    WHILE           reduce using rule 70 (gotoCuad -> .)
    FOR             reduce using rule 70 (gotoCuad -> .)
    DO              reduce using rule 70 (gotoCuad -> .)
    RIGHTKEY        reduce using rule 70 (gotoCuad -> .)
    RETURN          reduce using rule 70 (gotoCuad -> .)

    gotoCuad                       shift and go to state 283

state 268

    (80) do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR . gotoVCuad
    (81) gotoVCuad -> .

    IF              reduce using rule 81 (gotoVCuad -> .)
    DECLARE         reduce using rule 81 (gotoVCuad -> .)
    READ            reduce using rule 81 (gotoVCuad -> .)
    WRITE           reduce using rule 81 (gotoVCuad -> .)
    ID              reduce using rule 81 (gotoVCuad -> .)
    WHILE           reduce using rule 81 (gotoVCuad -> .)
    FOR             reduce using rule 81 (gotoVCuad -> .)
    DO              reduce using rule 81 (gotoVCuad -> .)
    RIGHTKEY        reduce using rule 81 (gotoVCuad -> .)
    RETURN          reduce using rule 81 (gotoVCuad -> .)

    gotoVCuad                      shift and go to state 284

state 269

    (83) while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .

    IF              reduce using rule 83 (while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .)
    DECLARE         reduce using rule 83 (while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .)
    READ            reduce using rule 83 (while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .)
    WRITE           reduce using rule 83 (while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .)
    ID              reduce using rule 83 (while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .)
    WHILE           reduce using rule 83 (while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .)
    FOR             reduce using rule 83 (while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .)
    DO              reduce using rule 83 (while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .)
    RIGHTKEY        reduce using rule 83 (while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .)
    RETURN          reduce using rule 83 (while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .)


state 270

    (103) expFor2 -> AND meteOper expFor .

    SEMICOLON       reduce using rule 103 (expFor2 -> AND meteOper expFor .)


state 271

    (99) expFor2 -> LESS meteOper expFor .

    SEMICOLON       reduce using rule 99 (expFor2 -> LESS meteOper expFor .)


state 272

    (102) expFor2 -> NOTEQ meteOper expFor .

    SEMICOLON       reduce using rule 102 (expFor2 -> NOTEQ meteOper expFor .)


state 273

    (100) expFor2 -> GRTR meteOper expFor .

    SEMICOLON       reduce using rule 100 (expFor2 -> GRTR meteOper expFor .)


state 274

    (101) expFor2 -> EQ meteOper expFor .

    SEMICOLON       reduce using rule 101 (expFor2 -> EQ meteOper expFor .)


state 275

    (104) expFor2 -> OR meteOper expFor .

    SEMICOLON       reduce using rule 104 (expFor2 -> OR meteOper expFor .)


state 276

    (87) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY . est RIGHTKEY
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . for
    (79) cycles -> . do-while
    (132) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (128) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (133) empty -> .
    (83) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (87) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 108
    DECLARE         shift and go to state 107
    READ            shift and go to state 95
    WRITE           shift and go to state 105
    ID              shift and go to state 106
    RIGHTKEY        reduce using rule 133 (empty -> .)
    WHILE           shift and go to state 97
    FOR             shift and go to state 103
    DO              shift and go to state 94

  ! IF              [ reduce using rule 133 (empty -> .) ]
  ! DECLARE         [ reduce using rule 133 (empty -> .) ]
  ! READ            [ reduce using rule 133 (empty -> .) ]
  ! WRITE           [ reduce using rule 133 (empty -> .) ]
  ! ID              [ reduce using rule 133 (empty -> .) ]
  ! WHILE           [ reduce using rule 133 (empty -> .) ]
  ! FOR             [ reduce using rule 133 (empty -> .) ]
  ! DO              [ reduce using rule 133 (empty -> .) ]

    conditional                    shift and go to state 96
    do-while                       shift and go to state 98
    est                            shift and go to state 285
    for                            shift and go to state 100
    llamadaAFunct                  shift and go to state 101
    input                          shift and go to state 102
    assignment                     shift and go to state 104
    declareLocal                   shift and go to state 113
    while                          shift and go to state 110
    empty                          shift and go to state 111
    output                         shift and go to state 112
    cycles                         shift and go to state 109

state 277

    (93) parte3For -> ID meteID ACTINCR . meteOper
    (123) meteOper -> .

    RIGHTPAR        reduce using rule 123 (meteOper -> .)

    meteOper                       shift and go to state 286

state 278

    (95) parte3For -> ID meteID ACTINCRVALOR . meteOper
    (123) meteOper -> .

    RIGHTPAR        reduce using rule 123 (meteOper -> .)

    meteOper                       shift and go to state 287

state 279

    (96) parte3For -> ID meteID ACTDECRVALOR . meteOper
    (123) meteOper -> .

    RIGHTPAR        reduce using rule 123 (meteOper -> .)

    meteOper                       shift and go to state 288

state 280

    (90) for3 -> COMMA for2 .

    SEMICOLON       reduce using rule 90 (for3 -> COMMA for2 .)


state 281

    (58) declare3Local -> COMMA ID altaVarLocal . assignmentDecl declare3Local
    (52) assignmentDecl -> . ASSGN exp
    (56) assignmentDecl -> . empty
    (133) empty -> .

    ASSGN           shift and go to state 35
    COMMA           reduce using rule 133 (empty -> .)
    SEMICOLON       reduce using rule 133 (empty -> .)

    empty                          shift and go to state 37
    assignmentDecl                 shift and go to state 289

state 282

    (51) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .

    IF              reduce using rule 51 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    DECLARE         reduce using rule 51 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    READ            reduce using rule 51 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    WRITE           reduce using rule 51 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    ID              reduce using rule 51 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    WHILE           reduce using rule 51 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    FOR             reduce using rule 51 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    DO              reduce using rule 51 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    RIGHTKEY        reduce using rule 51 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    RETURN          reduce using rule 51 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)


state 283

    (68) conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad . conditionalElse
    (71) conditionalElse -> . ELSE LEFTKEY est RIGHTKEY llenaGoto
    (73) conditionalElse -> . empty
    (133) empty -> .

    ELSE            shift and go to state 292
    IF              reduce using rule 133 (empty -> .)
    DECLARE         reduce using rule 133 (empty -> .)
    READ            reduce using rule 133 (empty -> .)
    WRITE           reduce using rule 133 (empty -> .)
    ID              reduce using rule 133 (empty -> .)
    WHILE           reduce using rule 133 (empty -> .)
    FOR             reduce using rule 133 (empty -> .)
    DO              reduce using rule 133 (empty -> .)
    RIGHTKEY        reduce using rule 133 (empty -> .)
    RETURN          reduce using rule 133 (empty -> .)

    conditionalElse                shift and go to state 290
    empty                          shift and go to state 291

state 284

    (80) do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .

    IF              reduce using rule 80 (do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .)
    DECLARE         reduce using rule 80 (do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .)
    READ            reduce using rule 80 (do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .)
    WRITE           reduce using rule 80 (do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .)
    ID              reduce using rule 80 (do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .)
    WHILE           reduce using rule 80 (do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .)
    FOR             reduce using rule 80 (do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .)
    DO              reduce using rule 80 (do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .)
    RIGHTKEY        reduce using rule 80 (do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .)
    RETURN          reduce using rule 80 (do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .)


state 285

    (87) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 293


state 286

    (93) parte3For -> ID meteID ACTINCR meteOper .

    RIGHTPAR        reduce using rule 93 (parte3For -> ID meteID ACTINCR meteOper .)


state 287

    (95) parte3For -> ID meteID ACTINCRVALOR meteOper .

    RIGHTPAR        reduce using rule 95 (parte3For -> ID meteID ACTINCRVALOR meteOper .)


state 288

    (96) parte3For -> ID meteID ACTDECRVALOR meteOper .

    RIGHTPAR        reduce using rule 96 (parte3For -> ID meteID ACTDECRVALOR meteOper .)


state 289

    (58) declare3Local -> COMMA ID altaVarLocal assignmentDecl . declare3Local
    (58) declare3Local -> . COMMA ID altaVarLocal assignmentDecl declare3Local
    (62) declare3Local -> . empty
    (133) empty -> .

    COMMA           shift and go to state 248
    SEMICOLON       reduce using rule 133 (empty -> .)

    empty                          shift and go to state 249
    declare3Local                  shift and go to state 294

state 290

    (68) conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .

    IF              reduce using rule 68 (conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .)
    DECLARE         reduce using rule 68 (conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .)
    READ            reduce using rule 68 (conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .)
    WRITE           reduce using rule 68 (conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .)
    ID              reduce using rule 68 (conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .)
    WHILE           reduce using rule 68 (conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .)
    FOR             reduce using rule 68 (conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .)
    DO              reduce using rule 68 (conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .)
    RIGHTKEY        reduce using rule 68 (conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .)
    RETURN          reduce using rule 68 (conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .)


state 291

    (73) conditionalElse -> empty .

    IF              reduce using rule 73 (conditionalElse -> empty .)
    DECLARE         reduce using rule 73 (conditionalElse -> empty .)
    READ            reduce using rule 73 (conditionalElse -> empty .)
    WRITE           reduce using rule 73 (conditionalElse -> empty .)
    ID              reduce using rule 73 (conditionalElse -> empty .)
    WHILE           reduce using rule 73 (conditionalElse -> empty .)
    FOR             reduce using rule 73 (conditionalElse -> empty .)
    DO              reduce using rule 73 (conditionalElse -> empty .)
    RIGHTKEY        reduce using rule 73 (conditionalElse -> empty .)
    RETURN          reduce using rule 73 (conditionalElse -> empty .)


state 292

    (71) conditionalElse -> ELSE . LEFTKEY est RIGHTKEY llenaGoto

    LEFTKEY         shift and go to state 295


state 293

    (87) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .

    IF              reduce using rule 87 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    DECLARE         reduce using rule 87 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    READ            reduce using rule 87 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    WRITE           reduce using rule 87 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    ID              reduce using rule 87 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    WHILE           reduce using rule 87 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    FOR             reduce using rule 87 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    DO              reduce using rule 87 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    RIGHTKEY        reduce using rule 87 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    RETURN          reduce using rule 87 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)


state 294

    (58) declare3Local -> COMMA ID altaVarLocal assignmentDecl declare3Local .

    SEMICOLON       reduce using rule 58 (declare3Local -> COMMA ID altaVarLocal assignmentDecl declare3Local .)


state 295

    (71) conditionalElse -> ELSE LEFTKEY . est RIGHTKEY llenaGoto
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . for
    (79) cycles -> . do-while
    (132) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (128) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (133) empty -> .
    (83) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (87) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 108
    DECLARE         shift and go to state 107
    READ            shift and go to state 95
    WRITE           shift and go to state 105
    ID              shift and go to state 106
    RIGHTKEY        reduce using rule 133 (empty -> .)
    WHILE           shift and go to state 97
    FOR             shift and go to state 103
    DO              shift and go to state 94

  ! IF              [ reduce using rule 133 (empty -> .) ]
  ! DECLARE         [ reduce using rule 133 (empty -> .) ]
  ! READ            [ reduce using rule 133 (empty -> .) ]
  ! WRITE           [ reduce using rule 133 (empty -> .) ]
  ! ID              [ reduce using rule 133 (empty -> .) ]
  ! WHILE           [ reduce using rule 133 (empty -> .) ]
  ! FOR             [ reduce using rule 133 (empty -> .) ]
  ! DO              [ reduce using rule 133 (empty -> .) ]

    conditional                    shift and go to state 96
    do-while                       shift and go to state 98
    est                            shift and go to state 296
    for                            shift and go to state 100
    llamadaAFunct                  shift and go to state 101
    input                          shift and go to state 102
    assignment                     shift and go to state 104
    cycles                         shift and go to state 109
    while                          shift and go to state 110
    empty                          shift and go to state 111
    output                         shift and go to state 112
    declareLocal                   shift and go to state 113

state 296

    (71) conditionalElse -> ELSE LEFTKEY est . RIGHTKEY llenaGoto

    RIGHTKEY        shift and go to state 297


state 297

    (71) conditionalElse -> ELSE LEFTKEY est RIGHTKEY . llenaGoto
    (72) llenaGoto -> .

    IF              reduce using rule 72 (llenaGoto -> .)
    DECLARE         reduce using rule 72 (llenaGoto -> .)
    READ            reduce using rule 72 (llenaGoto -> .)
    WRITE           reduce using rule 72 (llenaGoto -> .)
    ID              reduce using rule 72 (llenaGoto -> .)
    WHILE           reduce using rule 72 (llenaGoto -> .)
    FOR             reduce using rule 72 (llenaGoto -> .)
    DO              reduce using rule 72 (llenaGoto -> .)
    RIGHTKEY        reduce using rule 72 (llenaGoto -> .)
    RETURN          reduce using rule 72 (llenaGoto -> .)

    llenaGoto                      shift and go to state 298

state 298

    (71) conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .

    IF              reduce using rule 71 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .)
    DECLARE         reduce using rule 71 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .)
    READ            reduce using rule 71 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .)
    WRITE           reduce using rule 71 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .)
    ID              reduce using rule 71 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .)
    WHILE           reduce using rule 71 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .)
    FOR             reduce using rule 71 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .)
    DO              reduce using rule 71 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .)
    RIGHTKEY        reduce using rule 71 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .)
    RETURN          reduce using rule 71 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LESS in state 40 resolved as shift
WARNING: shift/reduce conflict for GRTR in state 40 resolved as shift
WARNING: shift/reduce conflict for EQ in state 40 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 40 resolved as shift
WARNING: shift/reduce conflict for AND in state 40 resolved as shift
WARNING: shift/reduce conflict for OR in state 40 resolved as shift
WARNING: shift/reduce conflict for SUM in state 40 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 40 resolved as shift
WARNING: shift/reduce conflict for MULTP in state 40 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 40 resolved as shift
WARNING: shift/reduce conflict for LESS in state 68 resolved as shift
WARNING: shift/reduce conflict for GRTR in state 68 resolved as shift
WARNING: shift/reduce conflict for EQ in state 68 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 68 resolved as shift
WARNING: shift/reduce conflict for AND in state 68 resolved as shift
WARNING: shift/reduce conflict for OR in state 68 resolved as shift
WARNING: shift/reduce conflict for SUM in state 68 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 68 resolved as shift
WARNING: shift/reduce conflict for MULTP in state 68 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 68 resolved as shift
WARNING: shift/reduce conflict for IF in state 76 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 76 resolved as shift
WARNING: shift/reduce conflict for READ in state 76 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 76 resolved as shift
WARNING: shift/reduce conflict for ID in state 76 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 76 resolved as shift
WARNING: shift/reduce conflict for FOR in state 76 resolved as shift
WARNING: shift/reduce conflict for DO in state 76 resolved as shift
WARNING: shift/reduce conflict for ID in state 77 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 77 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 77 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 77 resolved as shift
WARNING: shift/reduce conflict for ID in state 78 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 78 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 78 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 78 resolved as shift
WARNING: shift/reduce conflict for ID in state 79 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 79 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 79 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 79 resolved as shift
WARNING: shift/reduce conflict for ID in state 80 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 80 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 80 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 80 resolved as shift
WARNING: shift/reduce conflict for ID in state 81 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 81 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 81 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 81 resolved as shift
WARNING: shift/reduce conflict for ID in state 82 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 82 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 82 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 82 resolved as shift
WARNING: shift/reduce conflict for ID in state 83 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 83 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 83 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 83 resolved as shift
WARNING: shift/reduce conflict for ID in state 84 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 84 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 84 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 84 resolved as shift
WARNING: shift/reduce conflict for ID in state 85 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 85 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 85 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 85 resolved as shift
WARNING: shift/reduce conflict for ID in state 86 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 86 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 86 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 86 resolved as shift
WARNING: shift/reduce conflict for IF in state 96 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 96 resolved as shift
WARNING: shift/reduce conflict for READ in state 96 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 96 resolved as shift
WARNING: shift/reduce conflict for ID in state 96 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 96 resolved as shift
WARNING: shift/reduce conflict for FOR in state 96 resolved as shift
WARNING: shift/reduce conflict for DO in state 96 resolved as shift
WARNING: shift/reduce conflict for IF in state 101 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 101 resolved as shift
WARNING: shift/reduce conflict for READ in state 101 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 101 resolved as shift
WARNING: shift/reduce conflict for ID in state 101 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 101 resolved as shift
WARNING: shift/reduce conflict for FOR in state 101 resolved as shift
WARNING: shift/reduce conflict for DO in state 101 resolved as shift
WARNING: shift/reduce conflict for IF in state 102 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 102 resolved as shift
WARNING: shift/reduce conflict for READ in state 102 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 102 resolved as shift
WARNING: shift/reduce conflict for ID in state 102 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 102 resolved as shift
WARNING: shift/reduce conflict for FOR in state 102 resolved as shift
WARNING: shift/reduce conflict for DO in state 102 resolved as shift
WARNING: shift/reduce conflict for IF in state 104 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 104 resolved as shift
WARNING: shift/reduce conflict for READ in state 104 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 104 resolved as shift
WARNING: shift/reduce conflict for ID in state 104 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 104 resolved as shift
WARNING: shift/reduce conflict for FOR in state 104 resolved as shift
WARNING: shift/reduce conflict for DO in state 104 resolved as shift
WARNING: shift/reduce conflict for IF in state 109 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 109 resolved as shift
WARNING: shift/reduce conflict for READ in state 109 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 109 resolved as shift
WARNING: shift/reduce conflict for ID in state 109 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 109 resolved as shift
WARNING: shift/reduce conflict for FOR in state 109 resolved as shift
WARNING: shift/reduce conflict for DO in state 109 resolved as shift
WARNING: shift/reduce conflict for IF in state 112 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 112 resolved as shift
WARNING: shift/reduce conflict for READ in state 112 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 112 resolved as shift
WARNING: shift/reduce conflict for ID in state 112 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 112 resolved as shift
WARNING: shift/reduce conflict for FOR in state 112 resolved as shift
WARNING: shift/reduce conflict for DO in state 112 resolved as shift
WARNING: shift/reduce conflict for IF in state 113 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 113 resolved as shift
WARNING: shift/reduce conflict for READ in state 113 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 113 resolved as shift
WARNING: shift/reduce conflict for ID in state 113 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 113 resolved as shift
WARNING: shift/reduce conflict for FOR in state 113 resolved as shift
WARNING: shift/reduce conflict for DO in state 113 resolved as shift
WARNING: shift/reduce conflict for IF in state 128 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 128 resolved as shift
WARNING: shift/reduce conflict for READ in state 128 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 128 resolved as shift
WARNING: shift/reduce conflict for ID in state 128 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 128 resolved as shift
WARNING: shift/reduce conflict for FOR in state 128 resolved as shift
WARNING: shift/reduce conflict for DO in state 128 resolved as shift
WARNING: shift/reduce conflict for ID in state 133 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 133 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 133 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 133 resolved as shift
WARNING: shift/reduce conflict for ID in state 145 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 145 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 145 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 145 resolved as shift
WARNING: shift/reduce conflict for LESS in state 149 resolved as shift
WARNING: shift/reduce conflict for GRTR in state 149 resolved as shift
WARNING: shift/reduce conflict for EQ in state 149 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 149 resolved as shift
WARNING: shift/reduce conflict for AND in state 149 resolved as shift
WARNING: shift/reduce conflict for OR in state 149 resolved as shift
WARNING: shift/reduce conflict for SUM in state 149 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 149 resolved as shift
WARNING: shift/reduce conflict for MULTP in state 149 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 149 resolved as shift
WARNING: shift/reduce conflict for IF in state 155 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 155 resolved as shift
WARNING: shift/reduce conflict for READ in state 155 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 155 resolved as shift
WARNING: shift/reduce conflict for ID in state 155 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 155 resolved as shift
WARNING: shift/reduce conflict for FOR in state 155 resolved as shift
WARNING: shift/reduce conflict for DO in state 155 resolved as shift
WARNING: shift/reduce conflict for ID in state 158 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 158 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 158 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 158 resolved as shift
WARNING: shift/reduce conflict for ID in state 173 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 173 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 173 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 173 resolved as shift
WARNING: shift/reduce conflict for IF in state 224 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 224 resolved as shift
WARNING: shift/reduce conflict for READ in state 224 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 224 resolved as shift
WARNING: shift/reduce conflict for ID in state 224 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 224 resolved as shift
WARNING: shift/reduce conflict for FOR in state 224 resolved as shift
WARNING: shift/reduce conflict for DO in state 224 resolved as shift
WARNING: shift/reduce conflict for IF in state 233 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 233 resolved as shift
WARNING: shift/reduce conflict for READ in state 233 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 233 resolved as shift
WARNING: shift/reduce conflict for ID in state 233 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 233 resolved as shift
WARNING: shift/reduce conflict for FOR in state 233 resolved as shift
WARNING: shift/reduce conflict for DO in state 233 resolved as shift
WARNING: shift/reduce conflict for ID in state 235 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 235 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 235 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 235 resolved as shift
WARNING: shift/reduce conflict for IF in state 276 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 276 resolved as shift
WARNING: shift/reduce conflict for READ in state 276 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 276 resolved as shift
WARNING: shift/reduce conflict for ID in state 276 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 276 resolved as shift
WARNING: shift/reduce conflict for FOR in state 276 resolved as shift
WARNING: shift/reduce conflict for DO in state 276 resolved as shift
WARNING: shift/reduce conflict for IF in state 295 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 295 resolved as shift
WARNING: shift/reduce conflict for READ in state 295 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 295 resolved as shift
WARNING: shift/reduce conflict for ID in state 295 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 295 resolved as shift
WARNING: shift/reduce conflict for FOR in state 295 resolved as shift
WARNING: shift/reduce conflict for DO in state 295 resolved as shift
WARNING: reduce/reduce conflict in state 9 resolved using rule (program2 -> empty)
WARNING: rejected rule (declare -> empty) in state 9
WARNING: reduce/reduce conflict in state 46 resolved using rule (number -> empty)
WARNING: rejected rule (exp -> empty) in state 46
WARNING: reduce/reduce conflict in state 111 resolved using rule (est -> empty)
WARNING: rejected rule (declareLocal -> empty) in state 111
WARNING: reduce/reduce conflict in state 111 resolved using rule (declareLocal -> empty)
WARNING: rejected rule (cycles -> empty) in state 111
WARNING: reduce/reduce conflict in state 111 resolved using rule (est -> empty)
WARNING: rejected rule (cycles -> empty) in state 111
WARNING: reduce/reduce conflict in state 111 resolved using rule (declareLocal -> empty)
WARNING: rejected rule (assignment -> empty) in state 111
WARNING: reduce/reduce conflict in state 111 resolved using rule (est -> empty)
WARNING: rejected rule (assignment -> empty) in state 111
WARNING: reduce/reduce conflict in state 111 resolved using rule (llamadaAFunct -> empty)
WARNING: rejected rule (declareLocal -> empty) in state 111
WARNING: reduce/reduce conflict in state 111 resolved using rule (est -> empty)
WARNING: rejected rule (llamadaAFunct -> empty) in state 111
WARNING: reduce/reduce conflict in state 159 resolved using rule (while2 -> empty)
WARNING: rejected rule (exp -> empty) in state 159
WARNING: reduce/reduce conflict in state 159 resolved using rule (number -> empty)
WARNING: rejected rule (exp -> empty) in state 159
WARNING: reduce/reduce conflict in state 159 resolved using rule (number -> empty)
WARNING: rejected rule (while2 -> empty) in state 159
WARNING: reduce/reduce conflict in state 171 resolved using rule (conditional2 -> empty)
WARNING: rejected rule (exp -> empty) in state 171
WARNING: reduce/reduce conflict in state 171 resolved using rule (number -> empty)
WARNING: rejected rule (exp -> empty) in state 171
WARNING: reduce/reduce conflict in state 171 resolved using rule (number -> empty)
WARNING: rejected rule (conditional2 -> empty) in state 171
WARNING: reduce/reduce conflict in state 191 resolved using rule (llamadaAFunct -> empty)
WARNING: rejected rule (exp -> empty) in state 191
WARNING: reduce/reduce conflict in state 191 resolved using rule (llamadaAFunct -> empty)
WARNING: rejected rule (number -> empty) in state 191
WARNING: reduce/reduce conflict in state 225 resolved using rule (expFor2 -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 225
WARNING: reduce/reduce conflict in state 232 resolved using rule (array -> empty)
WARNING: rejected rule (declare2Local -> empty) in state 232
WARNING: Rule (exp -> empty) is never reduced
WARNING: Rule (declareLocal -> empty) is never reduced
WARNING: Rule (cycles -> empty) is never reduced
WARNING: Rule (assignment -> empty) is never reduced
WARNING: Rule (while2 -> empty) is never reduced
WARNING: Rule (conditional2 -> empty) is never reduced
WARNING: Rule (declare2Local -> empty) is never reduced
