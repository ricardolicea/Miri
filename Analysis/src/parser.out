Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    NUMBER
    MULTP
    DOT
    LESSEQ
    COLON
    GRTREQ
    CYCLE
    DIVIDE
    SPACE
    newline
    TYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM createDirProc ID altaPrograma SEMICOLON program2 cuerpo END SEMICOLON
Rule 2     createDirProc -> <empty>
Rule 3     altaPrograma -> empty
Rule 4     program2 -> declare program3
Rule 5     declare -> DECLARE declareRecursivo
Rule 6     declareRecursivo -> type ID altaVarGlobal declare2 declare3 SEMICOLON declareRecursivo
Rule 7     declare2 -> array
Rule 8     declare3 -> COMMA ID altaVarGlobal declare3
Rule 9     program2 -> empty
Rule 10    program3 -> funct program3
Rule 11    funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
Rule 12    altaModulo -> <empty>
Rule 13    funct2 -> type ID funct3
Rule 14    funct3 -> COMMA funct type ID funct3
Rule 15    funct2 -> empty
Rule 16    funct3 -> empty
Rule 17    program3 -> empty
Rule 18    altaVarGlobal -> <empty>
Rule 19    declareRecursivo -> empty
Rule 20    declare -> empty
Rule 21    declare2 -> empty
Rule 22    declare3 -> empty
Rule 23    array -> LEFTBRACK exp RIGHTBRACK array
Rule 24    array -> empty
Rule 25    type -> type2
Rule 26    type2 -> INT
Rule 27    type2 -> FLOAT
Rule 28    type2 -> STRING
Rule 29    type2 -> BOOL
Rule 30    type2 -> VOID
Rule 31    cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY
Rule 32    altaModuloMain -> <empty>
Rule 33    est -> conditional
Rule 34    est -> declareLocal
Rule 35    declareLocal -> DECLARE declareRecursivoLocal
Rule 36    declareRecursivoLocal -> type ID altaVarLocal declare2Local declare3Local SEMICOLON declareRecursivoLocal
Rule 37    declare2Local -> array
Rule 38    declare3Local -> COMMA ID altaVarLocal declare3Local
Rule 39    declareRecursivoLocal -> empty
Rule 40    declareLocal -> empty
Rule 41    declare2Local -> empty
Rule 42    declare3Local -> empty
Rule 43    altaVarLocal -> <empty>
Rule 44    est -> cycles
Rule 45    est -> input
Rule 46    est -> output
Rule 47    est -> assignment
Rule 48    est -> funct
Rule 49    est -> empty
Rule 50    assignment -> ID ASSGN ID SEMICOLON
Rule 51    conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
Rule 52    conditional2 -> exp conditional2
Rule 53    conditional2 -> empty
Rule 54    cycles -> while
Rule 55    cycles -> for
Rule 56    cycles -> do-while
Rule 57    do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR
Rule 58    while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
Rule 59    while2 -> exp while2
Rule 60    while2 -> empty
Rule 61    for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
Rule 62    arithmeticOp -> SUM
Rule 63    arithmeticOp -> MINUS
Rule 64    for2 -> ID ASSGN ID for2
Rule 65    for2 -> empty
Rule 66    for3 -> exp for3
Rule 67    for3 -> empty
Rule 68    exp -> ID array exp2 SEMICOLON
Rule 69    exp2 -> LESS
Rule 70    exp2 -> GRTR
Rule 71    exp2 -> EQ
Rule 72    exp2 -> NOTEQ
Rule 73    exp2 -> AND
Rule 74    exp2 -> OR
Rule 75    exp2 -> arithmeticExp
Rule 76    arithmeticExp -> ID EQ ID arithmeticOp ID arithmeticExp
Rule 77    arithmeticExp -> empty
Rule 78    exp2 -> empty
Rule 79    output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
Rule 80    output2 -> ID output2
Rule 81    output2 -> empty
Rule 82    input -> READ LEFTPAR ID RIGHTPAR SEMICOLON
Rule 83    empty -> <empty>

Terminals, with rules where they appear

AND                  : 73
ASSGN                : 50 64
BOOL                 : 29
COLON                : 
COMMA                : 8 14 38
CYCLE                : 
DECLARE              : 5 35
DIVIDE               : 
DO                   : 57
DOT                  : 
ELSE                 : 51
END                  : 1
EQ                   : 71 76
FLOAT                : 27
FOR                  : 61
FUNCTION             : 11
GRTR                 : 70
GRTREQ               : 
ID                   : 1 6 8 11 13 14 36 38 50 50 61 64 64 68 76 76 76 80 82
IF                   : 51
INT                  : 26
LEFTBRACK            : 23
LEFTKEY              : 11 31 51 57 58 61
LEFTPAR              : 11 31 51 57 58 61 79 82
LESS                 : 69
LESSEQ               : 
MAIN                 : 31
MINUS                : 63
MULTP                : 
NOTEQ                : 72
NUMBER               : 
OR                   : 74
PROGRAM              : 1
QUOTE                : 79 79
READ                 : 82
RIGHTBRACK           : 23
RIGHTKEY             : 11 31 51 51 57 58 61
RIGHTPAR             : 11 31 51 57 58 61 79 82
SEMICOLON            : 1 1 6 36 50 61 61 68 79 82
SPACE                : 
STRING               : 28
SUM                  : 62
TYPE                 : 
VOID                 : 30
WHILE                : 57 58 58
WRITE                : 79
error                : 
newline              : 

Nonterminals, with rules where they appear

altaModulo           : 11
altaModuloMain       : 31
altaPrograma         : 1
altaVarGlobal        : 6 8
altaVarLocal         : 36 38
arithmeticExp        : 75 76
arithmeticOp         : 61 61 76
array                : 7 23 37 68
assignment           : 47
conditional          : 33
conditional2         : 51 52
createDirProc        : 1
cuerpo               : 1
cycles               : 44
declare              : 4
declare2             : 6
declare2Local        : 36
declare3             : 6 8
declare3Local        : 36 38
declareLocal         : 34
declareRecursivo     : 5 6
declareRecursivoLocal : 35 36
do-while             : 56
empty                : 3 9 15 16 17 19 20 21 22 24 39 40 41 42 49 53 60 65 67 77 78 81
est                  : 11 31 51 51 57 58 61
exp                  : 23 52 59 66 79
exp2                 : 68
for                  : 55
for2                 : 61 64
for3                 : 61 66
funct                : 10 14 48
funct2               : 11
funct3               : 13 14
input                : 45
output               : 46
output2              : 79 80
program              : 0
program2             : 1
program3             : 4 10
type                 : 6 11 13 14 36
type2                : 25
while                : 54
while2               : 57 58 59

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM createDirProc ID altaPrograma SEMICOLON program2 cuerpo END SEMICOLON

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . createDirProc ID altaPrograma SEMICOLON program2 cuerpo END SEMICOLON
    (2) createDirProc -> .

    ID              reduce using rule 2 (createDirProc -> .)

    createDirProc                  shift and go to state 3

state 3

    (1) program -> PROGRAM createDirProc . ID altaPrograma SEMICOLON program2 cuerpo END SEMICOLON

    ID              shift and go to state 4


state 4

    (1) program -> PROGRAM createDirProc ID . altaPrograma SEMICOLON program2 cuerpo END SEMICOLON
    (3) altaPrograma -> . empty
    (83) empty -> .

    SEMICOLON       reduce using rule 83 (empty -> .)

    altaPrograma                   shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) program -> PROGRAM createDirProc ID altaPrograma . SEMICOLON program2 cuerpo END SEMICOLON

    SEMICOLON       shift and go to state 7


state 6

    (3) altaPrograma -> empty .

    SEMICOLON       reduce using rule 3 (altaPrograma -> empty .)


state 7

    (1) program -> PROGRAM createDirProc ID altaPrograma SEMICOLON . program2 cuerpo END SEMICOLON
    (4) program2 -> . declare program3
    (9) program2 -> . empty
    (5) declare -> . DECLARE declareRecursivo
    (20) declare -> . empty
    (83) empty -> .

    DECLARE         shift and go to state 9
    MAIN            reduce using rule 83 (empty -> .)
    FUNCTION        reduce using rule 83 (empty -> .)

    program2                       shift and go to state 8
    declare                        shift and go to state 10
    empty                          shift and go to state 11

state 8

    (1) program -> PROGRAM createDirProc ID altaPrograma SEMICOLON program2 . cuerpo END SEMICOLON
    (31) cuerpo -> . MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY

    MAIN            shift and go to state 13

    cuerpo                         shift and go to state 12

state 9

    (5) declare -> DECLARE . declareRecursivo
    (6) declareRecursivo -> . type ID altaVarGlobal declare2 declare3 SEMICOLON declareRecursivo
    (19) declareRecursivo -> . empty
    (25) type -> . type2
    (83) empty -> .
    (26) type2 -> . INT
    (27) type2 -> . FLOAT
    (28) type2 -> . STRING
    (29) type2 -> . BOOL
    (30) type2 -> . VOID

    FUNCTION        reduce using rule 83 (empty -> .)
    MAIN            reduce using rule 83 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18
    VOID            shift and go to state 16

    declareRecursivo               shift and go to state 19
    type                           shift and go to state 20
    empty                          shift and go to state 21
    type2                          shift and go to state 22

state 10

    (4) program2 -> declare . program3
    (10) program3 -> . funct program3
    (17) program3 -> . empty
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (83) empty -> .

    FUNCTION        shift and go to state 23
    MAIN            reduce using rule 83 (empty -> .)

    funct                          shift and go to state 24
    program3                       shift and go to state 25
    empty                          shift and go to state 26

state 11

    (9) program2 -> empty .
    (20) declare -> empty .

  ! reduce/reduce conflict for MAIN resolved using rule 9 (program2 -> empty .)
    MAIN            reduce using rule 9 (program2 -> empty .)
    FUNCTION        reduce using rule 20 (declare -> empty .)

  ! MAIN            [ reduce using rule 20 (declare -> empty .) ]


state 12

    (1) program -> PROGRAM createDirProc ID altaPrograma SEMICOLON program2 cuerpo . END SEMICOLON

    END             shift and go to state 27


state 13

    (31) cuerpo -> MAIN . LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY

    LEFTPAR         shift and go to state 28


state 14

    (28) type2 -> STRING .

    ID              reduce using rule 28 (type2 -> STRING .)


state 15

    (26) type2 -> INT .

    ID              reduce using rule 26 (type2 -> INT .)


state 16

    (30) type2 -> VOID .

    ID              reduce using rule 30 (type2 -> VOID .)


state 17

    (27) type2 -> FLOAT .

    ID              reduce using rule 27 (type2 -> FLOAT .)


state 18

    (29) type2 -> BOOL .

    ID              reduce using rule 29 (type2 -> BOOL .)


state 19

    (5) declare -> DECLARE declareRecursivo .

    FUNCTION        reduce using rule 5 (declare -> DECLARE declareRecursivo .)
    MAIN            reduce using rule 5 (declare -> DECLARE declareRecursivo .)


state 20

    (6) declareRecursivo -> type . ID altaVarGlobal declare2 declare3 SEMICOLON declareRecursivo

    ID              shift and go to state 29


state 21

    (19) declareRecursivo -> empty .

    FUNCTION        reduce using rule 19 (declareRecursivo -> empty .)
    MAIN            reduce using rule 19 (declareRecursivo -> empty .)


state 22

    (25) type -> type2 .

    ID              reduce using rule 25 (type -> type2 .)


state 23

    (11) funct -> FUNCTION . type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (25) type -> . type2
    (26) type2 -> . INT
    (27) type2 -> . FLOAT
    (28) type2 -> . STRING
    (29) type2 -> . BOOL
    (30) type2 -> . VOID

    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18
    VOID            shift and go to state 16

    type                           shift and go to state 30
    type2                          shift and go to state 22

state 24

    (10) program3 -> funct . program3
    (10) program3 -> . funct program3
    (17) program3 -> . empty
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (83) empty -> .

    FUNCTION        shift and go to state 23
    MAIN            reduce using rule 83 (empty -> .)

    program3                       shift and go to state 31
    funct                          shift and go to state 24
    empty                          shift and go to state 26

state 25

    (4) program2 -> declare program3 .

    MAIN            reduce using rule 4 (program2 -> declare program3 .)


state 26

    (17) program3 -> empty .

    MAIN            reduce using rule 17 (program3 -> empty .)


state 27

    (1) program -> PROGRAM createDirProc ID altaPrograma SEMICOLON program2 cuerpo END . SEMICOLON

    SEMICOLON       shift and go to state 32


state 28

    (31) cuerpo -> MAIN LEFTPAR . RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY

    RIGHTPAR        shift and go to state 33


state 29

    (6) declareRecursivo -> type ID . altaVarGlobal declare2 declare3 SEMICOLON declareRecursivo
    (18) altaVarGlobal -> .

    LEFTBRACK       reduce using rule 18 (altaVarGlobal -> .)
    COMMA           reduce using rule 18 (altaVarGlobal -> .)
    SEMICOLON       reduce using rule 18 (altaVarGlobal -> .)

    altaVarGlobal                  shift and go to state 34

state 30

    (11) funct -> FUNCTION type . ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY

    ID              shift and go to state 35


state 31

    (10) program3 -> funct program3 .

    MAIN            reduce using rule 10 (program3 -> funct program3 .)


state 32

    (1) program -> PROGRAM createDirProc ID altaPrograma SEMICOLON program2 cuerpo END SEMICOLON .

    $end            reduce using rule 1 (program -> PROGRAM createDirProc ID altaPrograma SEMICOLON program2 cuerpo END SEMICOLON .)


state 33

    (31) cuerpo -> MAIN LEFTPAR RIGHTPAR . LEFTKEY altaModuloMain est RIGHTKEY

    LEFTKEY         shift and go to state 36


state 34

    (6) declareRecursivo -> type ID altaVarGlobal . declare2 declare3 SEMICOLON declareRecursivo
    (7) declare2 -> . array
    (21) declare2 -> . empty
    (23) array -> . LEFTBRACK exp RIGHTBRACK array
    (24) array -> . empty
    (83) empty -> .

    LEFTBRACK       shift and go to state 37
    COMMA           reduce using rule 83 (empty -> .)
    SEMICOLON       reduce using rule 83 (empty -> .)

    declare2                       shift and go to state 38
    array                          shift and go to state 39
    empty                          shift and go to state 40

state 35

    (11) funct -> FUNCTION type ID . altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (12) altaModulo -> .

    LEFTPAR         reduce using rule 12 (altaModulo -> .)

    altaModulo                     shift and go to state 41

state 36

    (31) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY . altaModuloMain est RIGHTKEY
    (32) altaModuloMain -> .

    IF              reduce using rule 32 (altaModuloMain -> .)
    DECLARE         reduce using rule 32 (altaModuloMain -> .)
    READ            reduce using rule 32 (altaModuloMain -> .)
    WRITE           reduce using rule 32 (altaModuloMain -> .)
    ID              reduce using rule 32 (altaModuloMain -> .)
    FUNCTION        reduce using rule 32 (altaModuloMain -> .)
    WHILE           reduce using rule 32 (altaModuloMain -> .)
    FOR             reduce using rule 32 (altaModuloMain -> .)
    DO              reduce using rule 32 (altaModuloMain -> .)
    RIGHTKEY        reduce using rule 32 (altaModuloMain -> .)

    altaModuloMain                 shift and go to state 42

state 37

    (23) array -> LEFTBRACK . exp RIGHTBRACK array
    (68) exp -> . ID array exp2 SEMICOLON

    ID              shift and go to state 44

    exp                            shift and go to state 43

state 38

    (6) declareRecursivo -> type ID altaVarGlobal declare2 . declare3 SEMICOLON declareRecursivo
    (8) declare3 -> . COMMA ID altaVarGlobal declare3
    (22) declare3 -> . empty
    (83) empty -> .

    COMMA           shift and go to state 46
    SEMICOLON       reduce using rule 83 (empty -> .)

    declare3                       shift and go to state 45
    empty                          shift and go to state 47

state 39

    (7) declare2 -> array .

    COMMA           reduce using rule 7 (declare2 -> array .)
    SEMICOLON       reduce using rule 7 (declare2 -> array .)


state 40

    (21) declare2 -> empty .
    (24) array -> empty .

  ! reduce/reduce conflict for COMMA resolved using rule 21 (declare2 -> empty .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 21 (declare2 -> empty .)
    COMMA           reduce using rule 21 (declare2 -> empty .)
    SEMICOLON       reduce using rule 21 (declare2 -> empty .)

  ! COMMA           [ reduce using rule 24 (array -> empty .) ]
  ! SEMICOLON       [ reduce using rule 24 (array -> empty .) ]


state 41

    (11) funct -> FUNCTION type ID altaModulo . LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY

    LEFTPAR         shift and go to state 48


state 42

    (31) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain . est RIGHTKEY
    (33) est -> . conditional
    (34) est -> . declareLocal
    (44) est -> . cycles
    (45) est -> . input
    (46) est -> . output
    (47) est -> . assignment
    (48) est -> . funct
    (49) est -> . empty
    (51) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (35) declareLocal -> . DECLARE declareRecursivoLocal
    (40) declareLocal -> . empty
    (54) cycles -> . while
    (55) cycles -> . for
    (56) cycles -> . do-while
    (82) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (79) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (50) assignment -> . ID ASSGN ID SEMICOLON
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (83) empty -> .
    (58) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (61) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (57) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 63
    DECLARE         shift and go to state 62
    READ            shift and go to state 51
    WRITE           shift and go to state 60
    ID              shift and go to state 61
    FUNCTION        shift and go to state 23
    RIGHTKEY        reduce using rule 83 (empty -> .)
    WHILE           shift and go to state 53
    FOR             shift and go to state 58
    DO              shift and go to state 49

    funct                          shift and go to state 50
    conditional                    shift and go to state 52
    do-while                       shift and go to state 54
    est                            shift and go to state 55
    for                            shift and go to state 56
    input                          shift and go to state 57
    assignment                     shift and go to state 59
    cycles                         shift and go to state 64
    while                          shift and go to state 65
    empty                          shift and go to state 66
    output                         shift and go to state 67
    declareLocal                   shift and go to state 68

state 43

    (23) array -> LEFTBRACK exp . RIGHTBRACK array

    RIGHTBRACK      shift and go to state 69


state 44

    (68) exp -> ID . array exp2 SEMICOLON
    (23) array -> . LEFTBRACK exp RIGHTBRACK array
    (24) array -> . empty
    (83) empty -> .

    LEFTBRACK       shift and go to state 37
    LESS            reduce using rule 83 (empty -> .)
    GRTR            reduce using rule 83 (empty -> .)
    EQ              reduce using rule 83 (empty -> .)
    NOTEQ           reduce using rule 83 (empty -> .)
    AND             reduce using rule 83 (empty -> .)
    OR              reduce using rule 83 (empty -> .)
    ID              reduce using rule 83 (empty -> .)
    SEMICOLON       reduce using rule 83 (empty -> .)

    array                          shift and go to state 70
    empty                          shift and go to state 71

state 45

    (6) declareRecursivo -> type ID altaVarGlobal declare2 declare3 . SEMICOLON declareRecursivo

    SEMICOLON       shift and go to state 72


state 46

    (8) declare3 -> COMMA . ID altaVarGlobal declare3

    ID              shift and go to state 73


state 47

    (22) declare3 -> empty .

    SEMICOLON       reduce using rule 22 (declare3 -> empty .)


state 48

    (11) funct -> FUNCTION type ID altaModulo LEFTPAR . funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (13) funct2 -> . type ID funct3
    (15) funct2 -> . empty
    (25) type -> . type2
    (83) empty -> .
    (26) type2 -> . INT
    (27) type2 -> . FLOAT
    (28) type2 -> . STRING
    (29) type2 -> . BOOL
    (30) type2 -> . VOID

    RIGHTPAR        reduce using rule 83 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18
    VOID            shift and go to state 16

    funct2                         shift and go to state 74
    type                           shift and go to state 75
    empty                          shift and go to state 76
    type2                          shift and go to state 22

state 49

    (57) do-while -> DO . LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    LEFTKEY         shift and go to state 77


state 50

    (48) est -> funct .

    RIGHTKEY        reduce using rule 48 (est -> funct .)


state 51

    (82) input -> READ . LEFTPAR ID RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 78


state 52

    (33) est -> conditional .

    RIGHTKEY        reduce using rule 33 (est -> conditional .)


state 53

    (58) while -> WHILE . LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY

    LEFTPAR         shift and go to state 79


state 54

    (56) cycles -> do-while .

    RIGHTKEY        reduce using rule 56 (cycles -> do-while .)


state 55

    (31) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est . RIGHTKEY

    RIGHTKEY        shift and go to state 80


state 56

    (55) cycles -> for .

    RIGHTKEY        reduce using rule 55 (cycles -> for .)


state 57

    (45) est -> input .

    RIGHTKEY        reduce using rule 45 (est -> input .)


state 58

    (61) for -> FOR . LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY

    LEFTPAR         shift and go to state 81


state 59

    (47) est -> assignment .

    RIGHTKEY        reduce using rule 47 (est -> assignment .)


state 60

    (79) output -> WRITE . LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 82


state 61

    (50) assignment -> ID . ASSGN ID SEMICOLON

    ASSGN           shift and go to state 83


state 62

    (35) declareLocal -> DECLARE . declareRecursivoLocal
    (36) declareRecursivoLocal -> . type ID altaVarLocal declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (39) declareRecursivoLocal -> . empty
    (25) type -> . type2
    (83) empty -> .
    (26) type2 -> . INT
    (27) type2 -> . FLOAT
    (28) type2 -> . STRING
    (29) type2 -> . BOOL
    (30) type2 -> . VOID

    RIGHTKEY        reduce using rule 83 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18
    VOID            shift and go to state 16

    declareRecursivoLocal          shift and go to state 84
    type2                          shift and go to state 22
    type                           shift and go to state 85
    empty                          shift and go to state 86

state 63

    (51) conditional -> IF . LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY

    LEFTPAR         shift and go to state 87


state 64

    (44) est -> cycles .

    RIGHTKEY        reduce using rule 44 (est -> cycles .)


state 65

    (54) cycles -> while .

    RIGHTKEY        reduce using rule 54 (cycles -> while .)


state 66

    (49) est -> empty .
    (40) declareLocal -> empty .

  ! reduce/reduce conflict for RIGHTKEY resolved using rule 40 (declareLocal -> empty .)
    RIGHTKEY        reduce using rule 40 (declareLocal -> empty .)

  ! RIGHTKEY        [ reduce using rule 49 (est -> empty .) ]


state 67

    (46) est -> output .

    RIGHTKEY        reduce using rule 46 (est -> output .)


state 68

    (34) est -> declareLocal .

    RIGHTKEY        reduce using rule 34 (est -> declareLocal .)


state 69

    (23) array -> LEFTBRACK exp RIGHTBRACK . array
    (23) array -> . LEFTBRACK exp RIGHTBRACK array
    (24) array -> . empty
    (83) empty -> .

    LEFTBRACK       shift and go to state 37
    COMMA           reduce using rule 83 (empty -> .)
    SEMICOLON       reduce using rule 83 (empty -> .)
    LESS            reduce using rule 83 (empty -> .)
    GRTR            reduce using rule 83 (empty -> .)
    EQ              reduce using rule 83 (empty -> .)
    NOTEQ           reduce using rule 83 (empty -> .)
    AND             reduce using rule 83 (empty -> .)
    OR              reduce using rule 83 (empty -> .)
    ID              reduce using rule 83 (empty -> .)

    array                          shift and go to state 88
    empty                          shift and go to state 71

state 70

    (68) exp -> ID array . exp2 SEMICOLON
    (69) exp2 -> . LESS
    (70) exp2 -> . GRTR
    (71) exp2 -> . EQ
    (72) exp2 -> . NOTEQ
    (73) exp2 -> . AND
    (74) exp2 -> . OR
    (75) exp2 -> . arithmeticExp
    (78) exp2 -> . empty
    (76) arithmeticExp -> . ID EQ ID arithmeticOp ID arithmeticExp
    (77) arithmeticExp -> . empty
    (83) empty -> .

    LESS            shift and go to state 91
    GRTR            shift and go to state 95
    EQ              shift and go to state 96
    NOTEQ           shift and go to state 92
    AND             shift and go to state 89
    OR              shift and go to state 94
    ID              shift and go to state 97
    SEMICOLON       reduce using rule 83 (empty -> .)

    exp2                           shift and go to state 93
    arithmeticExp                  shift and go to state 90
    empty                          shift and go to state 98

state 71

    (24) array -> empty .

    LESS            reduce using rule 24 (array -> empty .)
    GRTR            reduce using rule 24 (array -> empty .)
    EQ              reduce using rule 24 (array -> empty .)
    NOTEQ           reduce using rule 24 (array -> empty .)
    AND             reduce using rule 24 (array -> empty .)
    OR              reduce using rule 24 (array -> empty .)
    ID              reduce using rule 24 (array -> empty .)
    SEMICOLON       reduce using rule 24 (array -> empty .)
    COMMA           reduce using rule 24 (array -> empty .)


state 72

    (6) declareRecursivo -> type ID altaVarGlobal declare2 declare3 SEMICOLON . declareRecursivo
    (6) declareRecursivo -> . type ID altaVarGlobal declare2 declare3 SEMICOLON declareRecursivo
    (19) declareRecursivo -> . empty
    (25) type -> . type2
    (83) empty -> .
    (26) type2 -> . INT
    (27) type2 -> . FLOAT
    (28) type2 -> . STRING
    (29) type2 -> . BOOL
    (30) type2 -> . VOID

    FUNCTION        reduce using rule 83 (empty -> .)
    MAIN            reduce using rule 83 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18
    VOID            shift and go to state 16

    declareRecursivo               shift and go to state 99
    type                           shift and go to state 20
    empty                          shift and go to state 21
    type2                          shift and go to state 22

state 73

    (8) declare3 -> COMMA ID . altaVarGlobal declare3
    (18) altaVarGlobal -> .

    COMMA           reduce using rule 18 (altaVarGlobal -> .)
    SEMICOLON       reduce using rule 18 (altaVarGlobal -> .)

    altaVarGlobal                  shift and go to state 100

state 74

    (11) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 . RIGHTPAR LEFTKEY est RIGHTKEY

    RIGHTPAR        shift and go to state 101


state 75

    (13) funct2 -> type . ID funct3

    ID              shift and go to state 102


state 76

    (15) funct2 -> empty .

    RIGHTPAR        reduce using rule 15 (funct2 -> empty .)


state 77

    (57) do-while -> DO LEFTKEY . est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR
    (33) est -> . conditional
    (34) est -> . declareLocal
    (44) est -> . cycles
    (45) est -> . input
    (46) est -> . output
    (47) est -> . assignment
    (48) est -> . funct
    (49) est -> . empty
    (51) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (35) declareLocal -> . DECLARE declareRecursivoLocal
    (40) declareLocal -> . empty
    (54) cycles -> . while
    (55) cycles -> . for
    (56) cycles -> . do-while
    (82) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (79) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (50) assignment -> . ID ASSGN ID SEMICOLON
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (83) empty -> .
    (58) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (61) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (57) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 63
    DECLARE         shift and go to state 62
    READ            shift and go to state 51
    WRITE           shift and go to state 60
    ID              shift and go to state 61
    FUNCTION        shift and go to state 23
    RIGHTKEY        reduce using rule 83 (empty -> .)
    WHILE           shift and go to state 53
    FOR             shift and go to state 58
    DO              shift and go to state 49

    funct                          shift and go to state 50
    conditional                    shift and go to state 52
    do-while                       shift and go to state 54
    est                            shift and go to state 103
    for                            shift and go to state 56
    input                          shift and go to state 57
    assignment                     shift and go to state 59
    cycles                         shift and go to state 64
    while                          shift and go to state 65
    empty                          shift and go to state 66
    output                         shift and go to state 67
    declareLocal                   shift and go to state 68

state 78

    (82) input -> READ LEFTPAR . ID RIGHTPAR SEMICOLON

    ID              shift and go to state 104


state 79

    (58) while -> WHILE LEFTPAR . while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (59) while2 -> . exp while2
    (60) while2 -> . empty
    (68) exp -> . ID array exp2 SEMICOLON
    (83) empty -> .

    ID              shift and go to state 44
    RIGHTPAR        reduce using rule 83 (empty -> .)

    while2                         shift and go to state 105
    exp                            shift and go to state 106
    empty                          shift and go to state 107

state 80

    (31) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY .

    END             reduce using rule 31 (cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY .)


state 81

    (61) for -> FOR LEFTPAR . for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (64) for2 -> . ID ASSGN ID for2
    (65) for2 -> . empty
    (83) empty -> .

    ID              shift and go to state 109
    SEMICOLON       reduce using rule 83 (empty -> .)

    for2                           shift and go to state 108
    empty                          shift and go to state 110

state 82

    (79) output -> WRITE LEFTPAR . output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (80) output2 -> . ID output2
    (81) output2 -> . empty
    (83) empty -> .

    ID              shift and go to state 112
    QUOTE           reduce using rule 83 (empty -> .)

    output2                        shift and go to state 111
    empty                          shift and go to state 113

state 83

    (50) assignment -> ID ASSGN . ID SEMICOLON

    ID              shift and go to state 114


state 84

    (35) declareLocal -> DECLARE declareRecursivoLocal .

    RIGHTKEY        reduce using rule 35 (declareLocal -> DECLARE declareRecursivoLocal .)


state 85

    (36) declareRecursivoLocal -> type . ID altaVarLocal declare2Local declare3Local SEMICOLON declareRecursivoLocal

    ID              shift and go to state 115


state 86

    (39) declareRecursivoLocal -> empty .

    RIGHTKEY        reduce using rule 39 (declareRecursivoLocal -> empty .)


state 87

    (51) conditional -> IF LEFTPAR . conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (52) conditional2 -> . exp conditional2
    (53) conditional2 -> . empty
    (68) exp -> . ID array exp2 SEMICOLON
    (83) empty -> .

    ID              shift and go to state 44
    RIGHTPAR        reduce using rule 83 (empty -> .)

    conditional2                   shift and go to state 118
    exp                            shift and go to state 117
    empty                          shift and go to state 116

state 88

    (23) array -> LEFTBRACK exp RIGHTBRACK array .

    LESS            reduce using rule 23 (array -> LEFTBRACK exp RIGHTBRACK array .)
    GRTR            reduce using rule 23 (array -> LEFTBRACK exp RIGHTBRACK array .)
    EQ              reduce using rule 23 (array -> LEFTBRACK exp RIGHTBRACK array .)
    NOTEQ           reduce using rule 23 (array -> LEFTBRACK exp RIGHTBRACK array .)
    AND             reduce using rule 23 (array -> LEFTBRACK exp RIGHTBRACK array .)
    OR              reduce using rule 23 (array -> LEFTBRACK exp RIGHTBRACK array .)
    ID              reduce using rule 23 (array -> LEFTBRACK exp RIGHTBRACK array .)
    SEMICOLON       reduce using rule 23 (array -> LEFTBRACK exp RIGHTBRACK array .)
    COMMA           reduce using rule 23 (array -> LEFTBRACK exp RIGHTBRACK array .)


state 89

    (73) exp2 -> AND .

    SEMICOLON       reduce using rule 73 (exp2 -> AND .)


state 90

    (75) exp2 -> arithmeticExp .

    SEMICOLON       reduce using rule 75 (exp2 -> arithmeticExp .)


state 91

    (69) exp2 -> LESS .

    SEMICOLON       reduce using rule 69 (exp2 -> LESS .)


state 92

    (72) exp2 -> NOTEQ .

    SEMICOLON       reduce using rule 72 (exp2 -> NOTEQ .)


state 93

    (68) exp -> ID array exp2 . SEMICOLON

    SEMICOLON       shift and go to state 119


state 94

    (74) exp2 -> OR .

    SEMICOLON       reduce using rule 74 (exp2 -> OR .)


state 95

    (70) exp2 -> GRTR .

    SEMICOLON       reduce using rule 70 (exp2 -> GRTR .)


state 96

    (71) exp2 -> EQ .

    SEMICOLON       reduce using rule 71 (exp2 -> EQ .)


state 97

    (76) arithmeticExp -> ID . EQ ID arithmeticOp ID arithmeticExp

    EQ              shift and go to state 120


state 98

    (78) exp2 -> empty .
    (77) arithmeticExp -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 77 (arithmeticExp -> empty .)
    SEMICOLON       reduce using rule 77 (arithmeticExp -> empty .)

  ! SEMICOLON       [ reduce using rule 78 (exp2 -> empty .) ]


state 99

    (6) declareRecursivo -> type ID altaVarGlobal declare2 declare3 SEMICOLON declareRecursivo .

    FUNCTION        reduce using rule 6 (declareRecursivo -> type ID altaVarGlobal declare2 declare3 SEMICOLON declareRecursivo .)
    MAIN            reduce using rule 6 (declareRecursivo -> type ID altaVarGlobal declare2 declare3 SEMICOLON declareRecursivo .)


state 100

    (8) declare3 -> COMMA ID altaVarGlobal . declare3
    (8) declare3 -> . COMMA ID altaVarGlobal declare3
    (22) declare3 -> . empty
    (83) empty -> .

    COMMA           shift and go to state 46
    SEMICOLON       reduce using rule 83 (empty -> .)

    empty                          shift and go to state 47
    declare3                       shift and go to state 121

state 101

    (11) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR . LEFTKEY est RIGHTKEY

    LEFTKEY         shift and go to state 122


state 102

    (13) funct2 -> type ID . funct3
    (14) funct3 -> . COMMA funct type ID funct3
    (16) funct3 -> . empty
    (83) empty -> .

    COMMA           shift and go to state 124
    RIGHTPAR        reduce using rule 83 (empty -> .)

    funct3                         shift and go to state 123
    empty                          shift and go to state 125

state 103

    (57) do-while -> DO LEFTKEY est . RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    RIGHTKEY        shift and go to state 126


state 104

    (82) input -> READ LEFTPAR ID . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 127


state 105

    (58) while -> WHILE LEFTPAR while2 . RIGHTPAR WHILE LEFTKEY est RIGHTKEY

    RIGHTPAR        shift and go to state 128


state 106

    (59) while2 -> exp . while2
    (59) while2 -> . exp while2
    (60) while2 -> . empty
    (68) exp -> . ID array exp2 SEMICOLON
    (83) empty -> .

    ID              shift and go to state 44
    RIGHTPAR        reduce using rule 83 (empty -> .)

    while2                         shift and go to state 129
    empty                          shift and go to state 107
    exp                            shift and go to state 106

state 107

    (60) while2 -> empty .

    RIGHTPAR        reduce using rule 60 (while2 -> empty .)


state 108

    (61) for -> FOR LEFTPAR for2 . SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY

    SEMICOLON       shift and go to state 130


state 109

    (64) for2 -> ID . ASSGN ID for2

    ASSGN           shift and go to state 131


state 110

    (65) for2 -> empty .

    SEMICOLON       reduce using rule 65 (for2 -> empty .)


state 111

    (79) output -> WRITE LEFTPAR output2 . QUOTE exp QUOTE RIGHTPAR SEMICOLON

    QUOTE           shift and go to state 132


state 112

    (80) output2 -> ID . output2
    (80) output2 -> . ID output2
    (81) output2 -> . empty
    (83) empty -> .

    ID              shift and go to state 112
    QUOTE           reduce using rule 83 (empty -> .)

    output2                        shift and go to state 133
    empty                          shift and go to state 113

state 113

    (81) output2 -> empty .

    QUOTE           reduce using rule 81 (output2 -> empty .)


state 114

    (50) assignment -> ID ASSGN ID . SEMICOLON

    SEMICOLON       shift and go to state 134


state 115

    (36) declareRecursivoLocal -> type ID . altaVarLocal declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (43) altaVarLocal -> .

    LEFTBRACK       reduce using rule 43 (altaVarLocal -> .)
    COMMA           reduce using rule 43 (altaVarLocal -> .)
    SEMICOLON       reduce using rule 43 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 135

state 116

    (53) conditional2 -> empty .

    RIGHTPAR        reduce using rule 53 (conditional2 -> empty .)


state 117

    (52) conditional2 -> exp . conditional2
    (52) conditional2 -> . exp conditional2
    (53) conditional2 -> . empty
    (68) exp -> . ID array exp2 SEMICOLON
    (83) empty -> .

    ID              shift and go to state 44
    RIGHTPAR        reduce using rule 83 (empty -> .)

    empty                          shift and go to state 116
    conditional2                   shift and go to state 136
    exp                            shift and go to state 117

state 118

    (51) conditional -> IF LEFTPAR conditional2 . RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY

    RIGHTPAR        shift and go to state 137


state 119

    (68) exp -> ID array exp2 SEMICOLON .

    ID              reduce using rule 68 (exp -> ID array exp2 SEMICOLON .)
    RIGHTPAR        reduce using rule 68 (exp -> ID array exp2 SEMICOLON .)
    SEMICOLON       reduce using rule 68 (exp -> ID array exp2 SEMICOLON .)
    QUOTE           reduce using rule 68 (exp -> ID array exp2 SEMICOLON .)
    RIGHTBRACK      reduce using rule 68 (exp -> ID array exp2 SEMICOLON .)


state 120

    (76) arithmeticExp -> ID EQ . ID arithmeticOp ID arithmeticExp

    ID              shift and go to state 138


state 121

    (8) declare3 -> COMMA ID altaVarGlobal declare3 .

    SEMICOLON       reduce using rule 8 (declare3 -> COMMA ID altaVarGlobal declare3 .)


state 122

    (11) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY . est RIGHTKEY
    (33) est -> . conditional
    (34) est -> . declareLocal
    (44) est -> . cycles
    (45) est -> . input
    (46) est -> . output
    (47) est -> . assignment
    (48) est -> . funct
    (49) est -> . empty
    (51) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (35) declareLocal -> . DECLARE declareRecursivoLocal
    (40) declareLocal -> . empty
    (54) cycles -> . while
    (55) cycles -> . for
    (56) cycles -> . do-while
    (82) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (79) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (50) assignment -> . ID ASSGN ID SEMICOLON
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (83) empty -> .
    (58) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (61) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (57) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 63
    DECLARE         shift and go to state 62
    READ            shift and go to state 51
    WRITE           shift and go to state 60
    ID              shift and go to state 61
    FUNCTION        shift and go to state 23
    RIGHTKEY        reduce using rule 83 (empty -> .)
    WHILE           shift and go to state 53
    FOR             shift and go to state 58
    DO              shift and go to state 49

    funct                          shift and go to state 50
    conditional                    shift and go to state 52
    do-while                       shift and go to state 54
    est                            shift and go to state 139
    for                            shift and go to state 56
    input                          shift and go to state 57
    assignment                     shift and go to state 59
    declareLocal                   shift and go to state 68
    while                          shift and go to state 65
    empty                          shift and go to state 66
    output                         shift and go to state 67
    cycles                         shift and go to state 64

state 123

    (13) funct2 -> type ID funct3 .

    RIGHTPAR        reduce using rule 13 (funct2 -> type ID funct3 .)


state 124

    (14) funct3 -> COMMA . funct type ID funct3
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY

    FUNCTION        shift and go to state 23

    funct                          shift and go to state 140

state 125

    (16) funct3 -> empty .

    RIGHTPAR        reduce using rule 16 (funct3 -> empty .)


state 126

    (57) do-while -> DO LEFTKEY est RIGHTKEY . WHILE LEFTPAR while2 RIGHTPAR

    WHILE           shift and go to state 141


state 127

    (82) input -> READ LEFTPAR ID RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 142


state 128

    (58) while -> WHILE LEFTPAR while2 RIGHTPAR . WHILE LEFTKEY est RIGHTKEY

    WHILE           shift and go to state 143


state 129

    (59) while2 -> exp while2 .

    RIGHTPAR        reduce using rule 59 (while2 -> exp while2 .)


state 130

    (61) for -> FOR LEFTPAR for2 SEMICOLON . for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (66) for3 -> . exp for3
    (67) for3 -> . empty
    (68) exp -> . ID array exp2 SEMICOLON
    (83) empty -> .

    ID              shift and go to state 44
    SEMICOLON       reduce using rule 83 (empty -> .)

    exp                            shift and go to state 144
    for3                           shift and go to state 145
    empty                          shift and go to state 146

state 131

    (64) for2 -> ID ASSGN . ID for2

    ID              shift and go to state 147


state 132

    (79) output -> WRITE LEFTPAR output2 QUOTE . exp QUOTE RIGHTPAR SEMICOLON
    (68) exp -> . ID array exp2 SEMICOLON

    ID              shift and go to state 44

    exp                            shift and go to state 148

state 133

    (80) output2 -> ID output2 .

    QUOTE           reduce using rule 80 (output2 -> ID output2 .)


state 134

    (50) assignment -> ID ASSGN ID SEMICOLON .

    RIGHTKEY        reduce using rule 50 (assignment -> ID ASSGN ID SEMICOLON .)


state 135

    (36) declareRecursivoLocal -> type ID altaVarLocal . declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (37) declare2Local -> . array
    (41) declare2Local -> . empty
    (23) array -> . LEFTBRACK exp RIGHTBRACK array
    (24) array -> . empty
    (83) empty -> .

    LEFTBRACK       shift and go to state 37
    COMMA           reduce using rule 83 (empty -> .)
    SEMICOLON       reduce using rule 83 (empty -> .)

    declare2Local                  shift and go to state 149
    array                          shift and go to state 150
    empty                          shift and go to state 151

state 136

    (52) conditional2 -> exp conditional2 .

    RIGHTPAR        reduce using rule 52 (conditional2 -> exp conditional2 .)


state 137

    (51) conditional -> IF LEFTPAR conditional2 RIGHTPAR . LEFTKEY est RIGHTKEY ELSE est RIGHTKEY

    LEFTKEY         shift and go to state 152


state 138

    (76) arithmeticExp -> ID EQ ID . arithmeticOp ID arithmeticExp
    (62) arithmeticOp -> . SUM
    (63) arithmeticOp -> . MINUS

    SUM             shift and go to state 154
    MINUS           shift and go to state 155

    arithmeticOp                   shift and go to state 153

state 139

    (11) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 156


state 140

    (14) funct3 -> COMMA funct . type ID funct3
    (25) type -> . type2
    (26) type2 -> . INT
    (27) type2 -> . FLOAT
    (28) type2 -> . STRING
    (29) type2 -> . BOOL
    (30) type2 -> . VOID

    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18
    VOID            shift and go to state 16

    type                           shift and go to state 157
    type2                          shift and go to state 22

state 141

    (57) do-while -> DO LEFTKEY est RIGHTKEY WHILE . LEFTPAR while2 RIGHTPAR

    LEFTPAR         shift and go to state 158


state 142

    (82) input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .

    RIGHTKEY        reduce using rule 82 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)


state 143

    (58) while -> WHILE LEFTPAR while2 RIGHTPAR WHILE . LEFTKEY est RIGHTKEY

    LEFTKEY         shift and go to state 159


state 144

    (66) for3 -> exp . for3
    (66) for3 -> . exp for3
    (67) for3 -> . empty
    (68) exp -> . ID array exp2 SEMICOLON
    (83) empty -> .

    ID              shift and go to state 44
    SEMICOLON       reduce using rule 83 (empty -> .)

    for3                           shift and go to state 160
    empty                          shift and go to state 146
    exp                            shift and go to state 144

state 145

    (61) for -> FOR LEFTPAR for2 SEMICOLON for3 . SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY

    SEMICOLON       shift and go to state 161


state 146

    (67) for3 -> empty .

    SEMICOLON       reduce using rule 67 (for3 -> empty .)


state 147

    (64) for2 -> ID ASSGN ID . for2
    (64) for2 -> . ID ASSGN ID for2
    (65) for2 -> . empty
    (83) empty -> .

    ID              shift and go to state 109
    SEMICOLON       reduce using rule 83 (empty -> .)

    for2                           shift and go to state 162
    empty                          shift and go to state 110

state 148

    (79) output -> WRITE LEFTPAR output2 QUOTE exp . QUOTE RIGHTPAR SEMICOLON

    QUOTE           shift and go to state 163


state 149

    (36) declareRecursivoLocal -> type ID altaVarLocal declare2Local . declare3Local SEMICOLON declareRecursivoLocal
    (38) declare3Local -> . COMMA ID altaVarLocal declare3Local
    (42) declare3Local -> . empty
    (83) empty -> .

    COMMA           shift and go to state 164
    SEMICOLON       reduce using rule 83 (empty -> .)

    empty                          shift and go to state 165
    declare3Local                  shift and go to state 166

state 150

    (37) declare2Local -> array .

    COMMA           reduce using rule 37 (declare2Local -> array .)
    SEMICOLON       reduce using rule 37 (declare2Local -> array .)


state 151

    (41) declare2Local -> empty .
    (24) array -> empty .

  ! reduce/reduce conflict for COMMA resolved using rule 24 (array -> empty .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 24 (array -> empty .)
    COMMA           reduce using rule 24 (array -> empty .)
    SEMICOLON       reduce using rule 24 (array -> empty .)

  ! COMMA           [ reduce using rule 41 (declare2Local -> empty .) ]
  ! SEMICOLON       [ reduce using rule 41 (declare2Local -> empty .) ]


state 152

    (51) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY . est RIGHTKEY ELSE est RIGHTKEY
    (33) est -> . conditional
    (34) est -> . declareLocal
    (44) est -> . cycles
    (45) est -> . input
    (46) est -> . output
    (47) est -> . assignment
    (48) est -> . funct
    (49) est -> . empty
    (51) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (35) declareLocal -> . DECLARE declareRecursivoLocal
    (40) declareLocal -> . empty
    (54) cycles -> . while
    (55) cycles -> . for
    (56) cycles -> . do-while
    (82) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (79) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (50) assignment -> . ID ASSGN ID SEMICOLON
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (83) empty -> .
    (58) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (61) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (57) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 63
    DECLARE         shift and go to state 62
    READ            shift and go to state 51
    WRITE           shift and go to state 60
    ID              shift and go to state 61
    FUNCTION        shift and go to state 23
    RIGHTKEY        reduce using rule 83 (empty -> .)
    WHILE           shift and go to state 53
    FOR             shift and go to state 58
    DO              shift and go to state 49

    funct                          shift and go to state 50
    conditional                    shift and go to state 52
    do-while                       shift and go to state 54
    est                            shift and go to state 167
    for                            shift and go to state 56
    input                          shift and go to state 57
    empty                          shift and go to state 66
    assignment                     shift and go to state 59
    cycles                         shift and go to state 64
    while                          shift and go to state 65
    output                         shift and go to state 67
    declareLocal                   shift and go to state 68

state 153

    (76) arithmeticExp -> ID EQ ID arithmeticOp . ID arithmeticExp

    ID              shift and go to state 168


state 154

    (62) arithmeticOp -> SUM .

    SUM             reduce using rule 62 (arithmeticOp -> SUM .)
    MINUS           reduce using rule 62 (arithmeticOp -> SUM .)
    ID              reduce using rule 62 (arithmeticOp -> SUM .)
    RIGHTPAR        reduce using rule 62 (arithmeticOp -> SUM .)


state 155

    (63) arithmeticOp -> MINUS .

    SUM             reduce using rule 63 (arithmeticOp -> MINUS .)
    MINUS           reduce using rule 63 (arithmeticOp -> MINUS .)
    ID              reduce using rule 63 (arithmeticOp -> MINUS .)
    RIGHTPAR        reduce using rule 63 (arithmeticOp -> MINUS .)


state 156

    (11) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .

    RIGHTKEY        reduce using rule 11 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    FUNCTION        reduce using rule 11 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    MAIN            reduce using rule 11 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    INT             reduce using rule 11 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    FLOAT           reduce using rule 11 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    STRING          reduce using rule 11 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    BOOL            reduce using rule 11 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    VOID            reduce using rule 11 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)


state 157

    (14) funct3 -> COMMA funct type . ID funct3

    ID              shift and go to state 169


state 158

    (57) do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR . while2 RIGHTPAR
    (59) while2 -> . exp while2
    (60) while2 -> . empty
    (68) exp -> . ID array exp2 SEMICOLON
    (83) empty -> .

    ID              shift and go to state 44
    RIGHTPAR        reduce using rule 83 (empty -> .)

    while2                         shift and go to state 170
    exp                            shift and go to state 106
    empty                          shift and go to state 107

state 159

    (58) while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY . est RIGHTKEY
    (33) est -> . conditional
    (34) est -> . declareLocal
    (44) est -> . cycles
    (45) est -> . input
    (46) est -> . output
    (47) est -> . assignment
    (48) est -> . funct
    (49) est -> . empty
    (51) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (35) declareLocal -> . DECLARE declareRecursivoLocal
    (40) declareLocal -> . empty
    (54) cycles -> . while
    (55) cycles -> . for
    (56) cycles -> . do-while
    (82) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (79) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (50) assignment -> . ID ASSGN ID SEMICOLON
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (83) empty -> .
    (58) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (61) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (57) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 63
    DECLARE         shift and go to state 62
    READ            shift and go to state 51
    WRITE           shift and go to state 60
    ID              shift and go to state 61
    FUNCTION        shift and go to state 23
    RIGHTKEY        reduce using rule 83 (empty -> .)
    WHILE           shift and go to state 53
    FOR             shift and go to state 58
    DO              shift and go to state 49

    funct                          shift and go to state 50
    conditional                    shift and go to state 52
    do-while                       shift and go to state 54
    est                            shift and go to state 171
    for                            shift and go to state 56
    input                          shift and go to state 57
    assignment                     shift and go to state 59
    cycles                         shift and go to state 64
    while                          shift and go to state 65
    empty                          shift and go to state 66
    output                         shift and go to state 67
    declareLocal                   shift and go to state 68

state 160

    (66) for3 -> exp for3 .

    SEMICOLON       reduce using rule 66 (for3 -> exp for3 .)


state 161

    (61) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON . ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY

    ID              shift and go to state 172


state 162

    (64) for2 -> ID ASSGN ID for2 .

    SEMICOLON       reduce using rule 64 (for2 -> ID ASSGN ID for2 .)


state 163

    (79) output -> WRITE LEFTPAR output2 QUOTE exp QUOTE . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 173


state 164

    (38) declare3Local -> COMMA . ID altaVarLocal declare3Local

    ID              shift and go to state 174


state 165

    (42) declare3Local -> empty .

    SEMICOLON       reduce using rule 42 (declare3Local -> empty .)


state 166

    (36) declareRecursivoLocal -> type ID altaVarLocal declare2Local declare3Local . SEMICOLON declareRecursivoLocal

    SEMICOLON       shift and go to state 175


state 167

    (51) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est . RIGHTKEY ELSE est RIGHTKEY

    RIGHTKEY        shift and go to state 176


state 168

    (76) arithmeticExp -> ID EQ ID arithmeticOp ID . arithmeticExp
    (76) arithmeticExp -> . ID EQ ID arithmeticOp ID arithmeticExp
    (77) arithmeticExp -> . empty
    (83) empty -> .

    ID              shift and go to state 97
    SEMICOLON       reduce using rule 83 (empty -> .)

    arithmeticExp                  shift and go to state 177
    empty                          shift and go to state 178

state 169

    (14) funct3 -> COMMA funct type ID . funct3
    (14) funct3 -> . COMMA funct type ID funct3
    (16) funct3 -> . empty
    (83) empty -> .

    COMMA           shift and go to state 124
    RIGHTPAR        reduce using rule 83 (empty -> .)

    funct3                         shift and go to state 179
    empty                          shift and go to state 125

state 170

    (57) do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 . RIGHTPAR

    RIGHTPAR        shift and go to state 180


state 171

    (58) while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 181


state 172

    (61) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID . arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (62) arithmeticOp -> . SUM
    (63) arithmeticOp -> . MINUS

    SUM             shift and go to state 154
    MINUS           shift and go to state 155

    arithmeticOp                   shift and go to state 182

state 173

    (79) output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 183


state 174

    (38) declare3Local -> COMMA ID . altaVarLocal declare3Local
    (43) altaVarLocal -> .

    COMMA           reduce using rule 43 (altaVarLocal -> .)
    SEMICOLON       reduce using rule 43 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 184

state 175

    (36) declareRecursivoLocal -> type ID altaVarLocal declare2Local declare3Local SEMICOLON . declareRecursivoLocal
    (36) declareRecursivoLocal -> . type ID altaVarLocal declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (39) declareRecursivoLocal -> . empty
    (25) type -> . type2
    (83) empty -> .
    (26) type2 -> . INT
    (27) type2 -> . FLOAT
    (28) type2 -> . STRING
    (29) type2 -> . BOOL
    (30) type2 -> . VOID

    RIGHTKEY        reduce using rule 83 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18
    VOID            shift and go to state 16

    declareRecursivoLocal          shift and go to state 185
    type2                          shift and go to state 22
    type                           shift and go to state 85
    empty                          shift and go to state 86

state 176

    (51) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY . ELSE est RIGHTKEY

    ELSE            shift and go to state 186


state 177

    (76) arithmeticExp -> ID EQ ID arithmeticOp ID arithmeticExp .

    SEMICOLON       reduce using rule 76 (arithmeticExp -> ID EQ ID arithmeticOp ID arithmeticExp .)


state 178

    (77) arithmeticExp -> empty .

    SEMICOLON       reduce using rule 77 (arithmeticExp -> empty .)


state 179

    (14) funct3 -> COMMA funct type ID funct3 .

    RIGHTPAR        reduce using rule 14 (funct3 -> COMMA funct type ID funct3 .)


state 180

    (57) do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .

    RIGHTKEY        reduce using rule 57 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)


state 181

    (58) while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY .

    RIGHTKEY        reduce using rule 58 (while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY .)


state 182

    (61) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp . arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (62) arithmeticOp -> . SUM
    (63) arithmeticOp -> . MINUS

    SUM             shift and go to state 154
    MINUS           shift and go to state 155

    arithmeticOp                   shift and go to state 187

state 183

    (79) output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON .

    RIGHTKEY        reduce using rule 79 (output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON .)


state 184

    (38) declare3Local -> COMMA ID altaVarLocal . declare3Local
    (38) declare3Local -> . COMMA ID altaVarLocal declare3Local
    (42) declare3Local -> . empty
    (83) empty -> .

    COMMA           shift and go to state 164
    SEMICOLON       reduce using rule 83 (empty -> .)

    empty                          shift and go to state 165
    declare3Local                  shift and go to state 188

state 185

    (36) declareRecursivoLocal -> type ID altaVarLocal declare2Local declare3Local SEMICOLON declareRecursivoLocal .

    RIGHTKEY        reduce using rule 36 (declareRecursivoLocal -> type ID altaVarLocal declare2Local declare3Local SEMICOLON declareRecursivoLocal .)


state 186

    (51) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE . est RIGHTKEY
    (33) est -> . conditional
    (34) est -> . declareLocal
    (44) est -> . cycles
    (45) est -> . input
    (46) est -> . output
    (47) est -> . assignment
    (48) est -> . funct
    (49) est -> . empty
    (51) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (35) declareLocal -> . DECLARE declareRecursivoLocal
    (40) declareLocal -> . empty
    (54) cycles -> . while
    (55) cycles -> . for
    (56) cycles -> . do-while
    (82) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (79) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (50) assignment -> . ID ASSGN ID SEMICOLON
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (83) empty -> .
    (58) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (61) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (57) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 63
    DECLARE         shift and go to state 62
    READ            shift and go to state 51
    WRITE           shift and go to state 60
    ID              shift and go to state 61
    FUNCTION        shift and go to state 23
    RIGHTKEY        reduce using rule 83 (empty -> .)
    WHILE           shift and go to state 53
    FOR             shift and go to state 58
    DO              shift and go to state 49

    funct                          shift and go to state 50
    conditional                    shift and go to state 52
    do-while                       shift and go to state 54
    est                            shift and go to state 189
    for                            shift and go to state 56
    input                          shift and go to state 57
    empty                          shift and go to state 66
    assignment                     shift and go to state 59
    cycles                         shift and go to state 64
    while                          shift and go to state 65
    output                         shift and go to state 67
    declareLocal                   shift and go to state 68

state 187

    (61) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp . RIGHTPAR LEFTKEY est RIGHTKEY

    RIGHTPAR        shift and go to state 190


state 188

    (38) declare3Local -> COMMA ID altaVarLocal declare3Local .

    SEMICOLON       reduce using rule 38 (declare3Local -> COMMA ID altaVarLocal declare3Local .)


state 189

    (51) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est . RIGHTKEY

    RIGHTKEY        shift and go to state 191


state 190

    (61) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR . LEFTKEY est RIGHTKEY

    LEFTKEY         shift and go to state 192


state 191

    (51) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY .

    RIGHTKEY        reduce using rule 51 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY .)


state 192

    (61) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY . est RIGHTKEY
    (33) est -> . conditional
    (34) est -> . declareLocal
    (44) est -> . cycles
    (45) est -> . input
    (46) est -> . output
    (47) est -> . assignment
    (48) est -> . funct
    (49) est -> . empty
    (51) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (35) declareLocal -> . DECLARE declareRecursivoLocal
    (40) declareLocal -> . empty
    (54) cycles -> . while
    (55) cycles -> . for
    (56) cycles -> . do-while
    (82) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (79) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (50) assignment -> . ID ASSGN ID SEMICOLON
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (83) empty -> .
    (58) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (61) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (57) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 63
    DECLARE         shift and go to state 62
    READ            shift and go to state 51
    WRITE           shift and go to state 60
    ID              shift and go to state 61
    FUNCTION        shift and go to state 23
    RIGHTKEY        reduce using rule 83 (empty -> .)
    WHILE           shift and go to state 53
    FOR             shift and go to state 58
    DO              shift and go to state 49

    funct                          shift and go to state 50
    conditional                    shift and go to state 52
    do-while                       shift and go to state 54
    est                            shift and go to state 193
    for                            shift and go to state 56
    input                          shift and go to state 57
    assignment                     shift and go to state 59
    declareLocal                   shift and go to state 68
    while                          shift and go to state 65
    empty                          shift and go to state 66
    output                         shift and go to state 67
    cycles                         shift and go to state 64

state 193

    (61) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 194


state 194

    (61) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY .

    RIGHTKEY        reduce using rule 61 (for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 11 resolved using rule (program2 -> empty)
WARNING: rejected rule (declare -> empty) in state 11
WARNING: reduce/reduce conflict in state 40 resolved using rule (declare2 -> empty)
WARNING: rejected rule (array -> empty) in state 40
WARNING: reduce/reduce conflict in state 66 resolved using rule (declareLocal -> empty)
WARNING: rejected rule (est -> empty) in state 66
WARNING: reduce/reduce conflict in state 98 resolved using rule (arithmeticExp -> empty)
WARNING: rejected rule (exp2 -> empty) in state 98
WARNING: reduce/reduce conflict in state 151 resolved using rule (array -> empty)
WARNING: rejected rule (declare2Local -> empty) in state 151
WARNING: Rule (est -> empty) is never reduced
WARNING: Rule (exp2 -> empty) is never reduced
WARNING: Rule (declare2Local -> empty) is never reduced
