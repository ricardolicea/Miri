Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    NUMBER
    MULTP
    DOT
    LESSEQ
    COLON
    GRTREQ
    CYCLE
    DIVIDE
    SPACE
    newline
    TYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM createDirProc ID altaPrograma SEMICOLON program2 cuerpo END SEMICOLON
Rule 2     createDirProc -> <empty>
Rule 3     altaPrograma -> empty
Rule 4     program2 -> declare program3
Rule 5     declare -> DECLARE declareRecursivo
Rule 6     declareRecursivo -> type ID altaVar declare2 declare3 SEMICOLON declareRecursivo
Rule 7     declare2 -> array
Rule 8     declare3 -> COMMA ID altaVar declare3
Rule 9     program2 -> empty
Rule 10    program3 -> funct program3
Rule 11    funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
Rule 12    altaModulo -> <empty>
Rule 13    funct2 -> type ID funct3
Rule 14    funct3 -> COMMA funct type ID funct3
Rule 15    funct2 -> empty
Rule 16    funct3 -> empty
Rule 17    program3 -> empty
Rule 18    altaVar -> <empty>
Rule 19    declareRecursivo -> empty
Rule 20    declare -> empty
Rule 21    declare2 -> empty
Rule 22    declare3 -> empty
Rule 23    array -> LEFTBRACK exp RIGHTBRACK array
Rule 24    array -> empty
Rule 25    type -> type2
Rule 26    type2 -> INT
Rule 27    type2 -> FLOAT
Rule 28    type2 -> STRING
Rule 29    type2 -> BOOL
Rule 30    type2 -> VOID
Rule 31    cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY est RIGHTKEY
Rule 32    est -> conditional
Rule 33    est -> declare
Rule 34    est -> cycles
Rule 35    est -> input
Rule 36    est -> output
Rule 37    est -> assignment
Rule 38    est -> funct
Rule 39    est -> empty
Rule 40    assignment -> ID ASSGN ID SEMICOLON
Rule 41    conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
Rule 42    conditional2 -> exp conditional2
Rule 43    conditional2 -> empty
Rule 44    cycles -> while
Rule 45    cycles -> for
Rule 46    cycles -> do-while
Rule 47    do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR
Rule 48    while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
Rule 49    while2 -> exp while2
Rule 50    while2 -> empty
Rule 51    for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
Rule 52    arithmeticOp -> SUM
Rule 53    arithmeticOp -> MINUS
Rule 54    for2 -> ID ASSGN ID for2
Rule 55    for2 -> empty
Rule 56    for3 -> exp for3
Rule 57    for3 -> empty
Rule 58    exp -> ID array exp2 SEMICOLON
Rule 59    exp2 -> LESS
Rule 60    exp2 -> GRTR
Rule 61    exp2 -> EQ
Rule 62    exp2 -> NOTEQ
Rule 63    exp2 -> AND
Rule 64    exp2 -> OR
Rule 65    exp2 -> arithmeticExp
Rule 66    arithmeticExp -> ID EQ ID arithmeticOp ID arithmeticExp
Rule 67    arithmeticExp -> empty
Rule 68    exp2 -> empty
Rule 69    output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
Rule 70    output2 -> ID output2
Rule 71    output2 -> empty
Rule 72    input -> READ LEFTPAR ID RIGHTPAR SEMICOLON
Rule 73    empty -> <empty>

Terminals, with rules where they appear

AND                  : 63
ASSGN                : 40 54
BOOL                 : 29
COLON                : 
COMMA                : 8 14
CYCLE                : 
DECLARE              : 5
DIVIDE               : 
DO                   : 47
DOT                  : 
ELSE                 : 41
END                  : 1
EQ                   : 61 66
FLOAT                : 27
FOR                  : 51
FUNCTION             : 11
GRTR                 : 60
GRTREQ               : 
ID                   : 1 6 8 11 13 14 40 40 51 54 54 58 66 66 66 70 72
IF                   : 41
INT                  : 26
LEFTBRACK            : 23
LEFTKEY              : 11 31 41 47 48 51
LEFTPAR              : 11 31 41 47 48 51 69 72
LESS                 : 59
LESSEQ               : 
MAIN                 : 31
MINUS                : 53
MULTP                : 
NOTEQ                : 62
NUMBER               : 
OR                   : 64
PROGRAM              : 1
QUOTE                : 69 69
READ                 : 72
RIGHTBRACK           : 23
RIGHTKEY             : 11 31 41 41 47 48 51
RIGHTPAR             : 11 31 41 47 48 51 69 72
SEMICOLON            : 1 1 6 40 51 51 58 69 72
SPACE                : 
STRING               : 28
SUM                  : 52
TYPE                 : 
VOID                 : 30
WHILE                : 47 48 48
WRITE                : 69
error                : 
newline              : 

Nonterminals, with rules where they appear

altaModulo           : 11
altaPrograma         : 1
altaVar              : 6 8
arithmeticExp        : 65 66
arithmeticOp         : 51 51 66
array                : 7 23 58
assignment           : 37
conditional          : 32
conditional2         : 41 42
createDirProc        : 1
cuerpo               : 1
cycles               : 34
declare              : 4 33
declare2             : 6
declare3             : 6 8
declareRecursivo     : 5 6
do-while             : 46
empty                : 3 9 15 16 17 19 20 21 22 24 39 43 50 55 57 67 68 71
est                  : 11 31 41 41 47 48 51
exp                  : 23 42 49 56 69
exp2                 : 58
for                  : 45
for2                 : 51 54
for3                 : 51 56
funct                : 10 14 38
funct2               : 11
funct3               : 13 14
input                : 35
output               : 36
output2              : 69 70
program              : 0
program2             : 1
program3             : 4 10
type                 : 6 11 13 14
type2                : 25
while                : 44
while2               : 47 48 49

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM createDirProc ID altaPrograma SEMICOLON program2 cuerpo END SEMICOLON

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . createDirProc ID altaPrograma SEMICOLON program2 cuerpo END SEMICOLON
    (2) createDirProc -> .

    ID              reduce using rule 2 (createDirProc -> .)

    createDirProc                  shift and go to state 3

state 3

    (1) program -> PROGRAM createDirProc . ID altaPrograma SEMICOLON program2 cuerpo END SEMICOLON

    ID              shift and go to state 4


state 4

    (1) program -> PROGRAM createDirProc ID . altaPrograma SEMICOLON program2 cuerpo END SEMICOLON
    (3) altaPrograma -> . empty
    (73) empty -> .

    SEMICOLON       reduce using rule 73 (empty -> .)

    altaPrograma                   shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) program -> PROGRAM createDirProc ID altaPrograma . SEMICOLON program2 cuerpo END SEMICOLON

    SEMICOLON       shift and go to state 7


state 6

    (3) altaPrograma -> empty .

    SEMICOLON       reduce using rule 3 (altaPrograma -> empty .)


state 7

    (1) program -> PROGRAM createDirProc ID altaPrograma SEMICOLON . program2 cuerpo END SEMICOLON
    (4) program2 -> . declare program3
    (9) program2 -> . empty
    (5) declare -> . DECLARE declareRecursivo
    (20) declare -> . empty
    (73) empty -> .

    DECLARE         shift and go to state 9
    MAIN            reduce using rule 73 (empty -> .)
    FUNCTION        reduce using rule 73 (empty -> .)

    program2                       shift and go to state 8
    declare                        shift and go to state 10
    empty                          shift and go to state 11

state 8

    (1) program -> PROGRAM createDirProc ID altaPrograma SEMICOLON program2 . cuerpo END SEMICOLON
    (31) cuerpo -> . MAIN LEFTPAR RIGHTPAR LEFTKEY est RIGHTKEY

    MAIN            shift and go to state 13

    cuerpo                         shift and go to state 12

state 9

    (5) declare -> DECLARE . declareRecursivo
    (6) declareRecursivo -> . type ID altaVar declare2 declare3 SEMICOLON declareRecursivo
    (19) declareRecursivo -> . empty
    (25) type -> . type2
    (73) empty -> .
    (26) type2 -> . INT
    (27) type2 -> . FLOAT
    (28) type2 -> . STRING
    (29) type2 -> . BOOL
    (30) type2 -> . VOID

    FUNCTION        reduce using rule 73 (empty -> .)
    MAIN            reduce using rule 73 (empty -> .)
    RIGHTKEY        reduce using rule 73 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 18
    STRING          shift and go to state 15
    BOOL            shift and go to state 14
    VOID            shift and go to state 17

    declareRecursivo               shift and go to state 20
    type                           shift and go to state 21
    empty                          shift and go to state 19
    type2                          shift and go to state 22

state 10

    (4) program2 -> declare . program3
    (10) program3 -> . funct program3
    (17) program3 -> . empty
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (73) empty -> .

    FUNCTION        shift and go to state 23
    MAIN            reduce using rule 73 (empty -> .)

    funct                          shift and go to state 24
    program3                       shift and go to state 25
    empty                          shift and go to state 26

state 11

    (9) program2 -> empty .
    (20) declare -> empty .

  ! reduce/reduce conflict for MAIN resolved using rule 9 (program2 -> empty .)
    MAIN            reduce using rule 9 (program2 -> empty .)
    FUNCTION        reduce using rule 20 (declare -> empty .)

  ! MAIN            [ reduce using rule 20 (declare -> empty .) ]


state 12

    (1) program -> PROGRAM createDirProc ID altaPrograma SEMICOLON program2 cuerpo . END SEMICOLON

    END             shift and go to state 27


state 13

    (31) cuerpo -> MAIN . LEFTPAR RIGHTPAR LEFTKEY est RIGHTKEY

    LEFTPAR         shift and go to state 28


state 14

    (29) type2 -> BOOL .

    ID              reduce using rule 29 (type2 -> BOOL .)


state 15

    (28) type2 -> STRING .

    ID              reduce using rule 28 (type2 -> STRING .)


state 16

    (26) type2 -> INT .

    ID              reduce using rule 26 (type2 -> INT .)


state 17

    (30) type2 -> VOID .

    ID              reduce using rule 30 (type2 -> VOID .)


state 18

    (27) type2 -> FLOAT .

    ID              reduce using rule 27 (type2 -> FLOAT .)


state 19

    (19) declareRecursivo -> empty .

    FUNCTION        reduce using rule 19 (declareRecursivo -> empty .)
    MAIN            reduce using rule 19 (declareRecursivo -> empty .)
    RIGHTKEY        reduce using rule 19 (declareRecursivo -> empty .)


state 20

    (5) declare -> DECLARE declareRecursivo .

    RIGHTKEY        reduce using rule 5 (declare -> DECLARE declareRecursivo .)
    FUNCTION        reduce using rule 5 (declare -> DECLARE declareRecursivo .)
    MAIN            reduce using rule 5 (declare -> DECLARE declareRecursivo .)


state 21

    (6) declareRecursivo -> type . ID altaVar declare2 declare3 SEMICOLON declareRecursivo

    ID              shift and go to state 29


state 22

    (25) type -> type2 .

    ID              reduce using rule 25 (type -> type2 .)


state 23

    (11) funct -> FUNCTION . type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (25) type -> . type2
    (26) type2 -> . INT
    (27) type2 -> . FLOAT
    (28) type2 -> . STRING
    (29) type2 -> . BOOL
    (30) type2 -> . VOID

    INT             shift and go to state 16
    FLOAT           shift and go to state 18
    STRING          shift and go to state 15
    BOOL            shift and go to state 14
    VOID            shift and go to state 17

    type                           shift and go to state 30
    type2                          shift and go to state 22

state 24

    (10) program3 -> funct . program3
    (10) program3 -> . funct program3
    (17) program3 -> . empty
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (73) empty -> .

    FUNCTION        shift and go to state 23
    MAIN            reduce using rule 73 (empty -> .)

    program3                       shift and go to state 31
    funct                          shift and go to state 24
    empty                          shift and go to state 26

state 25

    (4) program2 -> declare program3 .

    MAIN            reduce using rule 4 (program2 -> declare program3 .)


state 26

    (17) program3 -> empty .

    MAIN            reduce using rule 17 (program3 -> empty .)


state 27

    (1) program -> PROGRAM createDirProc ID altaPrograma SEMICOLON program2 cuerpo END . SEMICOLON

    SEMICOLON       shift and go to state 32


state 28

    (31) cuerpo -> MAIN LEFTPAR . RIGHTPAR LEFTKEY est RIGHTKEY

    RIGHTPAR        shift and go to state 33


state 29

    (6) declareRecursivo -> type ID . altaVar declare2 declare3 SEMICOLON declareRecursivo
    (18) altaVar -> .

    LEFTBRACK       reduce using rule 18 (altaVar -> .)
    COMMA           reduce using rule 18 (altaVar -> .)
    SEMICOLON       reduce using rule 18 (altaVar -> .)

    altaVar                        shift and go to state 34

state 30

    (11) funct -> FUNCTION type . ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY

    ID              shift and go to state 35


state 31

    (10) program3 -> funct program3 .

    MAIN            reduce using rule 10 (program3 -> funct program3 .)


state 32

    (1) program -> PROGRAM createDirProc ID altaPrograma SEMICOLON program2 cuerpo END SEMICOLON .

    $end            reduce using rule 1 (program -> PROGRAM createDirProc ID altaPrograma SEMICOLON program2 cuerpo END SEMICOLON .)


state 33

    (31) cuerpo -> MAIN LEFTPAR RIGHTPAR . LEFTKEY est RIGHTKEY

    LEFTKEY         shift and go to state 36


state 34

    (6) declareRecursivo -> type ID altaVar . declare2 declare3 SEMICOLON declareRecursivo
    (7) declare2 -> . array
    (21) declare2 -> . empty
    (23) array -> . LEFTBRACK exp RIGHTBRACK array
    (24) array -> . empty
    (73) empty -> .

    LEFTBRACK       shift and go to state 37
    COMMA           reduce using rule 73 (empty -> .)
    SEMICOLON       reduce using rule 73 (empty -> .)

    empty                          shift and go to state 38
    declare2                       shift and go to state 39
    array                          shift and go to state 40

state 35

    (11) funct -> FUNCTION type ID . altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (12) altaModulo -> .

    LEFTPAR         reduce using rule 12 (altaModulo -> .)

    altaModulo                     shift and go to state 41

state 36

    (31) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY . est RIGHTKEY
    (32) est -> . conditional
    (33) est -> . declare
    (34) est -> . cycles
    (35) est -> . input
    (36) est -> . output
    (37) est -> . assignment
    (38) est -> . funct
    (39) est -> . empty
    (41) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (5) declare -> . DECLARE declareRecursivo
    (20) declare -> . empty
    (44) cycles -> . while
    (45) cycles -> . for
    (46) cycles -> . do-while
    (72) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (69) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (40) assignment -> . ID ASSGN ID SEMICOLON
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (73) empty -> .
    (48) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (51) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (47) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 55
    DECLARE         shift and go to state 9
    READ            shift and go to state 44
    WRITE           shift and go to state 53
    ID              shift and go to state 54
    FUNCTION        shift and go to state 23
    RIGHTKEY        reduce using rule 73 (empty -> .)
    WHILE           shift and go to state 46
    FOR             shift and go to state 51
    DO              shift and go to state 42

    funct                          shift and go to state 43
    conditional                    shift and go to state 45
    do-while                       shift and go to state 47
    est                            shift and go to state 48
    for                            shift and go to state 49
    input                          shift and go to state 50
    assignment                     shift and go to state 52
    while                          shift and go to state 56
    empty                          shift and go to state 57
    output                         shift and go to state 58
    cycles                         shift and go to state 59
    declare                        shift and go to state 60

state 37

    (23) array -> LEFTBRACK . exp RIGHTBRACK array
    (58) exp -> . ID array exp2 SEMICOLON

    ID              shift and go to state 62

    exp                            shift and go to state 61

state 38

    (21) declare2 -> empty .
    (24) array -> empty .

  ! reduce/reduce conflict for COMMA resolved using rule 21 (declare2 -> empty .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 21 (declare2 -> empty .)
    COMMA           reduce using rule 21 (declare2 -> empty .)
    SEMICOLON       reduce using rule 21 (declare2 -> empty .)

  ! COMMA           [ reduce using rule 24 (array -> empty .) ]
  ! SEMICOLON       [ reduce using rule 24 (array -> empty .) ]


state 39

    (6) declareRecursivo -> type ID altaVar declare2 . declare3 SEMICOLON declareRecursivo
    (8) declare3 -> . COMMA ID altaVar declare3
    (22) declare3 -> . empty
    (73) empty -> .

    COMMA           shift and go to state 65
    SEMICOLON       reduce using rule 73 (empty -> .)

    declare3                       shift and go to state 64
    empty                          shift and go to state 63

state 40

    (7) declare2 -> array .

    COMMA           reduce using rule 7 (declare2 -> array .)
    SEMICOLON       reduce using rule 7 (declare2 -> array .)


state 41

    (11) funct -> FUNCTION type ID altaModulo . LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY

    LEFTPAR         shift and go to state 66


state 42

    (47) do-while -> DO . LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    LEFTKEY         shift and go to state 67


state 43

    (38) est -> funct .

    RIGHTKEY        reduce using rule 38 (est -> funct .)


state 44

    (72) input -> READ . LEFTPAR ID RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 68


state 45

    (32) est -> conditional .

    RIGHTKEY        reduce using rule 32 (est -> conditional .)


state 46

    (48) while -> WHILE . LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY

    LEFTPAR         shift and go to state 69


state 47

    (46) cycles -> do-while .

    RIGHTKEY        reduce using rule 46 (cycles -> do-while .)


state 48

    (31) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 70


state 49

    (45) cycles -> for .

    RIGHTKEY        reduce using rule 45 (cycles -> for .)


state 50

    (35) est -> input .

    RIGHTKEY        reduce using rule 35 (est -> input .)


state 51

    (51) for -> FOR . LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY

    LEFTPAR         shift and go to state 71


state 52

    (37) est -> assignment .

    RIGHTKEY        reduce using rule 37 (est -> assignment .)


state 53

    (69) output -> WRITE . LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 72


state 54

    (40) assignment -> ID . ASSGN ID SEMICOLON

    ASSGN           shift and go to state 73


state 55

    (41) conditional -> IF . LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY

    LEFTPAR         shift and go to state 74


state 56

    (44) cycles -> while .

    RIGHTKEY        reduce using rule 44 (cycles -> while .)


state 57

    (39) est -> empty .
    (20) declare -> empty .

  ! reduce/reduce conflict for RIGHTKEY resolved using rule 20 (declare -> empty .)
    RIGHTKEY        reduce using rule 20 (declare -> empty .)

  ! RIGHTKEY        [ reduce using rule 39 (est -> empty .) ]


state 58

    (36) est -> output .

    RIGHTKEY        reduce using rule 36 (est -> output .)


state 59

    (34) est -> cycles .

    RIGHTKEY        reduce using rule 34 (est -> cycles .)


state 60

    (33) est -> declare .

    RIGHTKEY        reduce using rule 33 (est -> declare .)


state 61

    (23) array -> LEFTBRACK exp . RIGHTBRACK array

    RIGHTBRACK      shift and go to state 75


state 62

    (58) exp -> ID . array exp2 SEMICOLON
    (23) array -> . LEFTBRACK exp RIGHTBRACK array
    (24) array -> . empty
    (73) empty -> .

    LEFTBRACK       shift and go to state 37
    LESS            reduce using rule 73 (empty -> .)
    GRTR            reduce using rule 73 (empty -> .)
    EQ              reduce using rule 73 (empty -> .)
    NOTEQ           reduce using rule 73 (empty -> .)
    AND             reduce using rule 73 (empty -> .)
    OR              reduce using rule 73 (empty -> .)
    ID              reduce using rule 73 (empty -> .)
    SEMICOLON       reduce using rule 73 (empty -> .)

    array                          shift and go to state 76
    empty                          shift and go to state 77

state 63

    (22) declare3 -> empty .

    SEMICOLON       reduce using rule 22 (declare3 -> empty .)


state 64

    (6) declareRecursivo -> type ID altaVar declare2 declare3 . SEMICOLON declareRecursivo

    SEMICOLON       shift and go to state 78


state 65

    (8) declare3 -> COMMA . ID altaVar declare3

    ID              shift and go to state 79


state 66

    (11) funct -> FUNCTION type ID altaModulo LEFTPAR . funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (13) funct2 -> . type ID funct3
    (15) funct2 -> . empty
    (25) type -> . type2
    (73) empty -> .
    (26) type2 -> . INT
    (27) type2 -> . FLOAT
    (28) type2 -> . STRING
    (29) type2 -> . BOOL
    (30) type2 -> . VOID

    RIGHTPAR        reduce using rule 73 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 18
    STRING          shift and go to state 15
    BOOL            shift and go to state 14
    VOID            shift and go to state 17

    funct2                         shift and go to state 80
    type                           shift and go to state 81
    empty                          shift and go to state 82
    type2                          shift and go to state 22

state 67

    (47) do-while -> DO LEFTKEY . est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR
    (32) est -> . conditional
    (33) est -> . declare
    (34) est -> . cycles
    (35) est -> . input
    (36) est -> . output
    (37) est -> . assignment
    (38) est -> . funct
    (39) est -> . empty
    (41) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (5) declare -> . DECLARE declareRecursivo
    (20) declare -> . empty
    (44) cycles -> . while
    (45) cycles -> . for
    (46) cycles -> . do-while
    (72) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (69) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (40) assignment -> . ID ASSGN ID SEMICOLON
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (73) empty -> .
    (48) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (51) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (47) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 55
    DECLARE         shift and go to state 9
    READ            shift and go to state 44
    WRITE           shift and go to state 53
    ID              shift and go to state 54
    FUNCTION        shift and go to state 23
    RIGHTKEY        reduce using rule 73 (empty -> .)
    WHILE           shift and go to state 46
    FOR             shift and go to state 51
    DO              shift and go to state 42

    funct                          shift and go to state 43
    conditional                    shift and go to state 45
    do-while                       shift and go to state 47
    est                            shift and go to state 83
    for                            shift and go to state 49
    input                          shift and go to state 50
    assignment                     shift and go to state 52
    while                          shift and go to state 56
    empty                          shift and go to state 57
    output                         shift and go to state 58
    cycles                         shift and go to state 59
    declare                        shift and go to state 60

state 68

    (72) input -> READ LEFTPAR . ID RIGHTPAR SEMICOLON

    ID              shift and go to state 84


state 69

    (48) while -> WHILE LEFTPAR . while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (49) while2 -> . exp while2
    (50) while2 -> . empty
    (58) exp -> . ID array exp2 SEMICOLON
    (73) empty -> .

    ID              shift and go to state 62
    RIGHTPAR        reduce using rule 73 (empty -> .)

    while2                         shift and go to state 85
    exp                            shift and go to state 86
    empty                          shift and go to state 87

state 70

    (31) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY est RIGHTKEY .

    END             reduce using rule 31 (cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY est RIGHTKEY .)


state 71

    (51) for -> FOR LEFTPAR . for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (54) for2 -> . ID ASSGN ID for2
    (55) for2 -> . empty
    (73) empty -> .

    ID              shift and go to state 89
    SEMICOLON       reduce using rule 73 (empty -> .)

    for2                           shift and go to state 88
    empty                          shift and go to state 90

state 72

    (69) output -> WRITE LEFTPAR . output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (70) output2 -> . ID output2
    (71) output2 -> . empty
    (73) empty -> .

    ID              shift and go to state 92
    QUOTE           reduce using rule 73 (empty -> .)

    output2                        shift and go to state 91
    empty                          shift and go to state 93

state 73

    (40) assignment -> ID ASSGN . ID SEMICOLON

    ID              shift and go to state 94


state 74

    (41) conditional -> IF LEFTPAR . conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (42) conditional2 -> . exp conditional2
    (43) conditional2 -> . empty
    (58) exp -> . ID array exp2 SEMICOLON
    (73) empty -> .

    ID              shift and go to state 62
    RIGHTPAR        reduce using rule 73 (empty -> .)

    conditional2                   shift and go to state 97
    exp                            shift and go to state 96
    empty                          shift and go to state 95

state 75

    (23) array -> LEFTBRACK exp RIGHTBRACK . array
    (23) array -> . LEFTBRACK exp RIGHTBRACK array
    (24) array -> . empty
    (73) empty -> .

    LEFTBRACK       shift and go to state 37
    COMMA           reduce using rule 73 (empty -> .)
    SEMICOLON       reduce using rule 73 (empty -> .)
    LESS            reduce using rule 73 (empty -> .)
    GRTR            reduce using rule 73 (empty -> .)
    EQ              reduce using rule 73 (empty -> .)
    NOTEQ           reduce using rule 73 (empty -> .)
    AND             reduce using rule 73 (empty -> .)
    OR              reduce using rule 73 (empty -> .)
    ID              reduce using rule 73 (empty -> .)

    array                          shift and go to state 98
    empty                          shift and go to state 77

state 76

    (58) exp -> ID array . exp2 SEMICOLON
    (59) exp2 -> . LESS
    (60) exp2 -> . GRTR
    (61) exp2 -> . EQ
    (62) exp2 -> . NOTEQ
    (63) exp2 -> . AND
    (64) exp2 -> . OR
    (65) exp2 -> . arithmeticExp
    (68) exp2 -> . empty
    (66) arithmeticExp -> . ID EQ ID arithmeticOp ID arithmeticExp
    (67) arithmeticExp -> . empty
    (73) empty -> .

    LESS            shift and go to state 101
    GRTR            shift and go to state 105
    EQ              shift and go to state 106
    NOTEQ           shift and go to state 102
    AND             shift and go to state 99
    OR              shift and go to state 104
    ID              shift and go to state 107
    SEMICOLON       reduce using rule 73 (empty -> .)

    exp2                           shift and go to state 103
    arithmeticExp                  shift and go to state 100
    empty                          shift and go to state 108

state 77

    (24) array -> empty .

    COMMA           reduce using rule 24 (array -> empty .)
    SEMICOLON       reduce using rule 24 (array -> empty .)
    LESS            reduce using rule 24 (array -> empty .)
    GRTR            reduce using rule 24 (array -> empty .)
    EQ              reduce using rule 24 (array -> empty .)
    NOTEQ           reduce using rule 24 (array -> empty .)
    AND             reduce using rule 24 (array -> empty .)
    OR              reduce using rule 24 (array -> empty .)
    ID              reduce using rule 24 (array -> empty .)


state 78

    (6) declareRecursivo -> type ID altaVar declare2 declare3 SEMICOLON . declareRecursivo
    (6) declareRecursivo -> . type ID altaVar declare2 declare3 SEMICOLON declareRecursivo
    (19) declareRecursivo -> . empty
    (25) type -> . type2
    (73) empty -> .
    (26) type2 -> . INT
    (27) type2 -> . FLOAT
    (28) type2 -> . STRING
    (29) type2 -> . BOOL
    (30) type2 -> . VOID

    FUNCTION        reduce using rule 73 (empty -> .)
    MAIN            reduce using rule 73 (empty -> .)
    RIGHTKEY        reduce using rule 73 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 18
    STRING          shift and go to state 15
    BOOL            shift and go to state 14
    VOID            shift and go to state 17

    declareRecursivo               shift and go to state 109
    type                           shift and go to state 21
    empty                          shift and go to state 19
    type2                          shift and go to state 22

state 79

    (8) declare3 -> COMMA ID . altaVar declare3
    (18) altaVar -> .

    COMMA           reduce using rule 18 (altaVar -> .)
    SEMICOLON       reduce using rule 18 (altaVar -> .)

    altaVar                        shift and go to state 110

state 80

    (11) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 . RIGHTPAR LEFTKEY est RIGHTKEY

    RIGHTPAR        shift and go to state 111


state 81

    (13) funct2 -> type . ID funct3

    ID              shift and go to state 112


state 82

    (15) funct2 -> empty .

    RIGHTPAR        reduce using rule 15 (funct2 -> empty .)


state 83

    (47) do-while -> DO LEFTKEY est . RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    RIGHTKEY        shift and go to state 113


state 84

    (72) input -> READ LEFTPAR ID . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 114


state 85

    (48) while -> WHILE LEFTPAR while2 . RIGHTPAR WHILE LEFTKEY est RIGHTKEY

    RIGHTPAR        shift and go to state 115


state 86

    (49) while2 -> exp . while2
    (49) while2 -> . exp while2
    (50) while2 -> . empty
    (58) exp -> . ID array exp2 SEMICOLON
    (73) empty -> .

    ID              shift and go to state 62
    RIGHTPAR        reduce using rule 73 (empty -> .)

    while2                         shift and go to state 116
    empty                          shift and go to state 87
    exp                            shift and go to state 86

state 87

    (50) while2 -> empty .

    RIGHTPAR        reduce using rule 50 (while2 -> empty .)


state 88

    (51) for -> FOR LEFTPAR for2 . SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY

    SEMICOLON       shift and go to state 117


state 89

    (54) for2 -> ID . ASSGN ID for2

    ASSGN           shift and go to state 118


state 90

    (55) for2 -> empty .

    SEMICOLON       reduce using rule 55 (for2 -> empty .)


state 91

    (69) output -> WRITE LEFTPAR output2 . QUOTE exp QUOTE RIGHTPAR SEMICOLON

    QUOTE           shift and go to state 119


state 92

    (70) output2 -> ID . output2
    (70) output2 -> . ID output2
    (71) output2 -> . empty
    (73) empty -> .

    ID              shift and go to state 92
    QUOTE           reduce using rule 73 (empty -> .)

    output2                        shift and go to state 120
    empty                          shift and go to state 93

state 93

    (71) output2 -> empty .

    QUOTE           reduce using rule 71 (output2 -> empty .)


state 94

    (40) assignment -> ID ASSGN ID . SEMICOLON

    SEMICOLON       shift and go to state 121


state 95

    (43) conditional2 -> empty .

    RIGHTPAR        reduce using rule 43 (conditional2 -> empty .)


state 96

    (42) conditional2 -> exp . conditional2
    (42) conditional2 -> . exp conditional2
    (43) conditional2 -> . empty
    (58) exp -> . ID array exp2 SEMICOLON
    (73) empty -> .

    ID              shift and go to state 62
    RIGHTPAR        reduce using rule 73 (empty -> .)

    empty                          shift and go to state 95
    conditional2                   shift and go to state 122
    exp                            shift and go to state 96

state 97

    (41) conditional -> IF LEFTPAR conditional2 . RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY

    RIGHTPAR        shift and go to state 123


state 98

    (23) array -> LEFTBRACK exp RIGHTBRACK array .

    COMMA           reduce using rule 23 (array -> LEFTBRACK exp RIGHTBRACK array .)
    SEMICOLON       reduce using rule 23 (array -> LEFTBRACK exp RIGHTBRACK array .)
    LESS            reduce using rule 23 (array -> LEFTBRACK exp RIGHTBRACK array .)
    GRTR            reduce using rule 23 (array -> LEFTBRACK exp RIGHTBRACK array .)
    EQ              reduce using rule 23 (array -> LEFTBRACK exp RIGHTBRACK array .)
    NOTEQ           reduce using rule 23 (array -> LEFTBRACK exp RIGHTBRACK array .)
    AND             reduce using rule 23 (array -> LEFTBRACK exp RIGHTBRACK array .)
    OR              reduce using rule 23 (array -> LEFTBRACK exp RIGHTBRACK array .)
    ID              reduce using rule 23 (array -> LEFTBRACK exp RIGHTBRACK array .)


state 99

    (63) exp2 -> AND .

    SEMICOLON       reduce using rule 63 (exp2 -> AND .)


state 100

    (65) exp2 -> arithmeticExp .

    SEMICOLON       reduce using rule 65 (exp2 -> arithmeticExp .)


state 101

    (59) exp2 -> LESS .

    SEMICOLON       reduce using rule 59 (exp2 -> LESS .)


state 102

    (62) exp2 -> NOTEQ .

    SEMICOLON       reduce using rule 62 (exp2 -> NOTEQ .)


state 103

    (58) exp -> ID array exp2 . SEMICOLON

    SEMICOLON       shift and go to state 124


state 104

    (64) exp2 -> OR .

    SEMICOLON       reduce using rule 64 (exp2 -> OR .)


state 105

    (60) exp2 -> GRTR .

    SEMICOLON       reduce using rule 60 (exp2 -> GRTR .)


state 106

    (61) exp2 -> EQ .

    SEMICOLON       reduce using rule 61 (exp2 -> EQ .)


state 107

    (66) arithmeticExp -> ID . EQ ID arithmeticOp ID arithmeticExp

    EQ              shift and go to state 125


state 108

    (68) exp2 -> empty .
    (67) arithmeticExp -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 67 (arithmeticExp -> empty .)
    SEMICOLON       reduce using rule 67 (arithmeticExp -> empty .)

  ! SEMICOLON       [ reduce using rule 68 (exp2 -> empty .) ]


state 109

    (6) declareRecursivo -> type ID altaVar declare2 declare3 SEMICOLON declareRecursivo .

    FUNCTION        reduce using rule 6 (declareRecursivo -> type ID altaVar declare2 declare3 SEMICOLON declareRecursivo .)
    MAIN            reduce using rule 6 (declareRecursivo -> type ID altaVar declare2 declare3 SEMICOLON declareRecursivo .)
    RIGHTKEY        reduce using rule 6 (declareRecursivo -> type ID altaVar declare2 declare3 SEMICOLON declareRecursivo .)


state 110

    (8) declare3 -> COMMA ID altaVar . declare3
    (8) declare3 -> . COMMA ID altaVar declare3
    (22) declare3 -> . empty
    (73) empty -> .

    COMMA           shift and go to state 65
    SEMICOLON       reduce using rule 73 (empty -> .)

    empty                          shift and go to state 63
    declare3                       shift and go to state 126

state 111

    (11) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR . LEFTKEY est RIGHTKEY

    LEFTKEY         shift and go to state 127


state 112

    (13) funct2 -> type ID . funct3
    (14) funct3 -> . COMMA funct type ID funct3
    (16) funct3 -> . empty
    (73) empty -> .

    COMMA           shift and go to state 129
    RIGHTPAR        reduce using rule 73 (empty -> .)

    funct3                         shift and go to state 128
    empty                          shift and go to state 130

state 113

    (47) do-while -> DO LEFTKEY est RIGHTKEY . WHILE LEFTPAR while2 RIGHTPAR

    WHILE           shift and go to state 131


state 114

    (72) input -> READ LEFTPAR ID RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 132


state 115

    (48) while -> WHILE LEFTPAR while2 RIGHTPAR . WHILE LEFTKEY est RIGHTKEY

    WHILE           shift and go to state 133


state 116

    (49) while2 -> exp while2 .

    RIGHTPAR        reduce using rule 49 (while2 -> exp while2 .)


state 117

    (51) for -> FOR LEFTPAR for2 SEMICOLON . for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (56) for3 -> . exp for3
    (57) for3 -> . empty
    (58) exp -> . ID array exp2 SEMICOLON
    (73) empty -> .

    ID              shift and go to state 62
    SEMICOLON       reduce using rule 73 (empty -> .)

    exp                            shift and go to state 134
    for3                           shift and go to state 135
    empty                          shift and go to state 136

state 118

    (54) for2 -> ID ASSGN . ID for2

    ID              shift and go to state 137


state 119

    (69) output -> WRITE LEFTPAR output2 QUOTE . exp QUOTE RIGHTPAR SEMICOLON
    (58) exp -> . ID array exp2 SEMICOLON

    ID              shift and go to state 62

    exp                            shift and go to state 138

state 120

    (70) output2 -> ID output2 .

    QUOTE           reduce using rule 70 (output2 -> ID output2 .)


state 121

    (40) assignment -> ID ASSGN ID SEMICOLON .

    RIGHTKEY        reduce using rule 40 (assignment -> ID ASSGN ID SEMICOLON .)


state 122

    (42) conditional2 -> exp conditional2 .

    RIGHTPAR        reduce using rule 42 (conditional2 -> exp conditional2 .)


state 123

    (41) conditional -> IF LEFTPAR conditional2 RIGHTPAR . LEFTKEY est RIGHTKEY ELSE est RIGHTKEY

    LEFTKEY         shift and go to state 139


state 124

    (58) exp -> ID array exp2 SEMICOLON .

    ID              reduce using rule 58 (exp -> ID array exp2 SEMICOLON .)
    RIGHTPAR        reduce using rule 58 (exp -> ID array exp2 SEMICOLON .)
    RIGHTBRACK      reduce using rule 58 (exp -> ID array exp2 SEMICOLON .)
    QUOTE           reduce using rule 58 (exp -> ID array exp2 SEMICOLON .)
    SEMICOLON       reduce using rule 58 (exp -> ID array exp2 SEMICOLON .)


state 125

    (66) arithmeticExp -> ID EQ . ID arithmeticOp ID arithmeticExp

    ID              shift and go to state 140


state 126

    (8) declare3 -> COMMA ID altaVar declare3 .

    SEMICOLON       reduce using rule 8 (declare3 -> COMMA ID altaVar declare3 .)


state 127

    (11) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY . est RIGHTKEY
    (32) est -> . conditional
    (33) est -> . declare
    (34) est -> . cycles
    (35) est -> . input
    (36) est -> . output
    (37) est -> . assignment
    (38) est -> . funct
    (39) est -> . empty
    (41) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (5) declare -> . DECLARE declareRecursivo
    (20) declare -> . empty
    (44) cycles -> . while
    (45) cycles -> . for
    (46) cycles -> . do-while
    (72) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (69) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (40) assignment -> . ID ASSGN ID SEMICOLON
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (73) empty -> .
    (48) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (51) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (47) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 55
    DECLARE         shift and go to state 9
    READ            shift and go to state 44
    WRITE           shift and go to state 53
    ID              shift and go to state 54
    FUNCTION        shift and go to state 23
    RIGHTKEY        reduce using rule 73 (empty -> .)
    WHILE           shift and go to state 46
    FOR             shift and go to state 51
    DO              shift and go to state 42

    funct                          shift and go to state 43
    conditional                    shift and go to state 45
    do-while                       shift and go to state 47
    est                            shift and go to state 141
    for                            shift and go to state 49
    input                          shift and go to state 50
    assignment                     shift and go to state 52
    while                          shift and go to state 56
    empty                          shift and go to state 57
    output                         shift and go to state 58
    cycles                         shift and go to state 59
    declare                        shift and go to state 60

state 128

    (13) funct2 -> type ID funct3 .

    RIGHTPAR        reduce using rule 13 (funct2 -> type ID funct3 .)


state 129

    (14) funct3 -> COMMA . funct type ID funct3
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY

    FUNCTION        shift and go to state 23

    funct                          shift and go to state 142

state 130

    (16) funct3 -> empty .

    RIGHTPAR        reduce using rule 16 (funct3 -> empty .)


state 131

    (47) do-while -> DO LEFTKEY est RIGHTKEY WHILE . LEFTPAR while2 RIGHTPAR

    LEFTPAR         shift and go to state 143


state 132

    (72) input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .

    RIGHTKEY        reduce using rule 72 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)


state 133

    (48) while -> WHILE LEFTPAR while2 RIGHTPAR WHILE . LEFTKEY est RIGHTKEY

    LEFTKEY         shift and go to state 144


state 134

    (56) for3 -> exp . for3
    (56) for3 -> . exp for3
    (57) for3 -> . empty
    (58) exp -> . ID array exp2 SEMICOLON
    (73) empty -> .

    ID              shift and go to state 62
    SEMICOLON       reduce using rule 73 (empty -> .)

    for3                           shift and go to state 145
    empty                          shift and go to state 136
    exp                            shift and go to state 134

state 135

    (51) for -> FOR LEFTPAR for2 SEMICOLON for3 . SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY

    SEMICOLON       shift and go to state 146


state 136

    (57) for3 -> empty .

    SEMICOLON       reduce using rule 57 (for3 -> empty .)


state 137

    (54) for2 -> ID ASSGN ID . for2
    (54) for2 -> . ID ASSGN ID for2
    (55) for2 -> . empty
    (73) empty -> .

    ID              shift and go to state 89
    SEMICOLON       reduce using rule 73 (empty -> .)

    for2                           shift and go to state 147
    empty                          shift and go to state 90

state 138

    (69) output -> WRITE LEFTPAR output2 QUOTE exp . QUOTE RIGHTPAR SEMICOLON

    QUOTE           shift and go to state 148


state 139

    (41) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY . est RIGHTKEY ELSE est RIGHTKEY
    (32) est -> . conditional
    (33) est -> . declare
    (34) est -> . cycles
    (35) est -> . input
    (36) est -> . output
    (37) est -> . assignment
    (38) est -> . funct
    (39) est -> . empty
    (41) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (5) declare -> . DECLARE declareRecursivo
    (20) declare -> . empty
    (44) cycles -> . while
    (45) cycles -> . for
    (46) cycles -> . do-while
    (72) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (69) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (40) assignment -> . ID ASSGN ID SEMICOLON
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (73) empty -> .
    (48) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (51) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (47) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 55
    DECLARE         shift and go to state 9
    READ            shift and go to state 44
    WRITE           shift and go to state 53
    ID              shift and go to state 54
    FUNCTION        shift and go to state 23
    RIGHTKEY        reduce using rule 73 (empty -> .)
    WHILE           shift and go to state 46
    FOR             shift and go to state 51
    DO              shift and go to state 42

    funct                          shift and go to state 43
    conditional                    shift and go to state 45
    do-while                       shift and go to state 47
    est                            shift and go to state 149
    for                            shift and go to state 49
    input                          shift and go to state 50
    empty                          shift and go to state 57
    assignment                     shift and go to state 52
    while                          shift and go to state 56
    output                         shift and go to state 58
    cycles                         shift and go to state 59
    declare                        shift and go to state 60

state 140

    (66) arithmeticExp -> ID EQ ID . arithmeticOp ID arithmeticExp
    (52) arithmeticOp -> . SUM
    (53) arithmeticOp -> . MINUS

    SUM             shift and go to state 151
    MINUS           shift and go to state 152

    arithmeticOp                   shift and go to state 150

state 141

    (11) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 153


state 142

    (14) funct3 -> COMMA funct . type ID funct3
    (25) type -> . type2
    (26) type2 -> . INT
    (27) type2 -> . FLOAT
    (28) type2 -> . STRING
    (29) type2 -> . BOOL
    (30) type2 -> . VOID

    INT             shift and go to state 16
    FLOAT           shift and go to state 18
    STRING          shift and go to state 15
    BOOL            shift and go to state 14
    VOID            shift and go to state 17

    type                           shift and go to state 154
    type2                          shift and go to state 22

state 143

    (47) do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR . while2 RIGHTPAR
    (49) while2 -> . exp while2
    (50) while2 -> . empty
    (58) exp -> . ID array exp2 SEMICOLON
    (73) empty -> .

    ID              shift and go to state 62
    RIGHTPAR        reduce using rule 73 (empty -> .)

    while2                         shift and go to state 155
    exp                            shift and go to state 86
    empty                          shift and go to state 87

state 144

    (48) while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY . est RIGHTKEY
    (32) est -> . conditional
    (33) est -> . declare
    (34) est -> . cycles
    (35) est -> . input
    (36) est -> . output
    (37) est -> . assignment
    (38) est -> . funct
    (39) est -> . empty
    (41) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (5) declare -> . DECLARE declareRecursivo
    (20) declare -> . empty
    (44) cycles -> . while
    (45) cycles -> . for
    (46) cycles -> . do-while
    (72) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (69) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (40) assignment -> . ID ASSGN ID SEMICOLON
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (73) empty -> .
    (48) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (51) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (47) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 55
    DECLARE         shift and go to state 9
    READ            shift and go to state 44
    WRITE           shift and go to state 53
    ID              shift and go to state 54
    FUNCTION        shift and go to state 23
    RIGHTKEY        reduce using rule 73 (empty -> .)
    WHILE           shift and go to state 46
    FOR             shift and go to state 51
    DO              shift and go to state 42

    funct                          shift and go to state 43
    conditional                    shift and go to state 45
    do-while                       shift and go to state 47
    est                            shift and go to state 156
    for                            shift and go to state 49
    input                          shift and go to state 50
    assignment                     shift and go to state 52
    while                          shift and go to state 56
    empty                          shift and go to state 57
    output                         shift and go to state 58
    cycles                         shift and go to state 59
    declare                        shift and go to state 60

state 145

    (56) for3 -> exp for3 .

    SEMICOLON       reduce using rule 56 (for3 -> exp for3 .)


state 146

    (51) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON . ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY

    ID              shift and go to state 157


state 147

    (54) for2 -> ID ASSGN ID for2 .

    SEMICOLON       reduce using rule 54 (for2 -> ID ASSGN ID for2 .)


state 148

    (69) output -> WRITE LEFTPAR output2 QUOTE exp QUOTE . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 158


state 149

    (41) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est . RIGHTKEY ELSE est RIGHTKEY

    RIGHTKEY        shift and go to state 159


state 150

    (66) arithmeticExp -> ID EQ ID arithmeticOp . ID arithmeticExp

    ID              shift and go to state 160


state 151

    (52) arithmeticOp -> SUM .

    ID              reduce using rule 52 (arithmeticOp -> SUM .)
    SUM             reduce using rule 52 (arithmeticOp -> SUM .)
    MINUS           reduce using rule 52 (arithmeticOp -> SUM .)
    RIGHTPAR        reduce using rule 52 (arithmeticOp -> SUM .)


state 152

    (53) arithmeticOp -> MINUS .

    ID              reduce using rule 53 (arithmeticOp -> MINUS .)
    SUM             reduce using rule 53 (arithmeticOp -> MINUS .)
    MINUS           reduce using rule 53 (arithmeticOp -> MINUS .)
    RIGHTPAR        reduce using rule 53 (arithmeticOp -> MINUS .)


state 153

    (11) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .

    RIGHTKEY        reduce using rule 11 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    FUNCTION        reduce using rule 11 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    MAIN            reduce using rule 11 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    INT             reduce using rule 11 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    FLOAT           reduce using rule 11 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    STRING          reduce using rule 11 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    BOOL            reduce using rule 11 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    VOID            reduce using rule 11 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)


state 154

    (14) funct3 -> COMMA funct type . ID funct3

    ID              shift and go to state 161


state 155

    (47) do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 . RIGHTPAR

    RIGHTPAR        shift and go to state 162


state 156

    (48) while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 163


state 157

    (51) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID . arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (52) arithmeticOp -> . SUM
    (53) arithmeticOp -> . MINUS

    SUM             shift and go to state 151
    MINUS           shift and go to state 152

    arithmeticOp                   shift and go to state 164

state 158

    (69) output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 165


state 159

    (41) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY . ELSE est RIGHTKEY

    ELSE            shift and go to state 166


state 160

    (66) arithmeticExp -> ID EQ ID arithmeticOp ID . arithmeticExp
    (66) arithmeticExp -> . ID EQ ID arithmeticOp ID arithmeticExp
    (67) arithmeticExp -> . empty
    (73) empty -> .

    ID              shift and go to state 107
    SEMICOLON       reduce using rule 73 (empty -> .)

    arithmeticExp                  shift and go to state 167
    empty                          shift and go to state 168

state 161

    (14) funct3 -> COMMA funct type ID . funct3
    (14) funct3 -> . COMMA funct type ID funct3
    (16) funct3 -> . empty
    (73) empty -> .

    COMMA           shift and go to state 129
    RIGHTPAR        reduce using rule 73 (empty -> .)

    funct3                         shift and go to state 169
    empty                          shift and go to state 130

state 162

    (47) do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .

    RIGHTKEY        reduce using rule 47 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)


state 163

    (48) while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY .

    RIGHTKEY        reduce using rule 48 (while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY .)


state 164

    (51) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp . arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (52) arithmeticOp -> . SUM
    (53) arithmeticOp -> . MINUS

    SUM             shift and go to state 151
    MINUS           shift and go to state 152

    arithmeticOp                   shift and go to state 170

state 165

    (69) output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON .

    RIGHTKEY        reduce using rule 69 (output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON .)


state 166

    (41) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE . est RIGHTKEY
    (32) est -> . conditional
    (33) est -> . declare
    (34) est -> . cycles
    (35) est -> . input
    (36) est -> . output
    (37) est -> . assignment
    (38) est -> . funct
    (39) est -> . empty
    (41) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (5) declare -> . DECLARE declareRecursivo
    (20) declare -> . empty
    (44) cycles -> . while
    (45) cycles -> . for
    (46) cycles -> . do-while
    (72) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (69) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (40) assignment -> . ID ASSGN ID SEMICOLON
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (73) empty -> .
    (48) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (51) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (47) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 55
    DECLARE         shift and go to state 9
    READ            shift and go to state 44
    WRITE           shift and go to state 53
    ID              shift and go to state 54
    FUNCTION        shift and go to state 23
    RIGHTKEY        reduce using rule 73 (empty -> .)
    WHILE           shift and go to state 46
    FOR             shift and go to state 51
    DO              shift and go to state 42

    funct                          shift and go to state 43
    conditional                    shift and go to state 45
    do-while                       shift and go to state 47
    est                            shift and go to state 171
    for                            shift and go to state 49
    input                          shift and go to state 50
    empty                          shift and go to state 57
    assignment                     shift and go to state 52
    while                          shift and go to state 56
    output                         shift and go to state 58
    cycles                         shift and go to state 59
    declare                        shift and go to state 60

state 167

    (66) arithmeticExp -> ID EQ ID arithmeticOp ID arithmeticExp .

    SEMICOLON       reduce using rule 66 (arithmeticExp -> ID EQ ID arithmeticOp ID arithmeticExp .)


state 168

    (67) arithmeticExp -> empty .

    SEMICOLON       reduce using rule 67 (arithmeticExp -> empty .)


state 169

    (14) funct3 -> COMMA funct type ID funct3 .

    RIGHTPAR        reduce using rule 14 (funct3 -> COMMA funct type ID funct3 .)


state 170

    (51) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp . RIGHTPAR LEFTKEY est RIGHTKEY

    RIGHTPAR        shift and go to state 172


state 171

    (41) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est . RIGHTKEY

    RIGHTKEY        shift and go to state 173


state 172

    (51) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR . LEFTKEY est RIGHTKEY

    LEFTKEY         shift and go to state 174


state 173

    (41) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY .

    RIGHTKEY        reduce using rule 41 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY .)


state 174

    (51) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY . est RIGHTKEY
    (32) est -> . conditional
    (33) est -> . declare
    (34) est -> . cycles
    (35) est -> . input
    (36) est -> . output
    (37) est -> . assignment
    (38) est -> . funct
    (39) est -> . empty
    (41) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (5) declare -> . DECLARE declareRecursivo
    (20) declare -> . empty
    (44) cycles -> . while
    (45) cycles -> . for
    (46) cycles -> . do-while
    (72) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (69) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (40) assignment -> . ID ASSGN ID SEMICOLON
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (73) empty -> .
    (48) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (51) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (47) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 55
    DECLARE         shift and go to state 9
    READ            shift and go to state 44
    WRITE           shift and go to state 53
    ID              shift and go to state 54
    FUNCTION        shift and go to state 23
    RIGHTKEY        reduce using rule 73 (empty -> .)
    WHILE           shift and go to state 46
    FOR             shift and go to state 51
    DO              shift and go to state 42

    funct                          shift and go to state 43
    conditional                    shift and go to state 45
    do-while                       shift and go to state 47
    est                            shift and go to state 175
    for                            shift and go to state 49
    input                          shift and go to state 50
    assignment                     shift and go to state 52
    while                          shift and go to state 56
    empty                          shift and go to state 57
    output                         shift and go to state 58
    cycles                         shift and go to state 59
    declare                        shift and go to state 60

state 175

    (51) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 176


state 176

    (51) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY .

    RIGHTKEY        reduce using rule 51 (for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 11 resolved using rule (program2 -> empty)
WARNING: rejected rule (declare -> empty) in state 11
WARNING: reduce/reduce conflict in state 38 resolved using rule (declare2 -> empty)
WARNING: rejected rule (array -> empty) in state 38
WARNING: reduce/reduce conflict in state 57 resolved using rule (declare -> empty)
WARNING: rejected rule (est -> empty) in state 57
WARNING: reduce/reduce conflict in state 108 resolved using rule (arithmeticExp -> empty)
WARNING: rejected rule (exp2 -> empty) in state 108
WARNING: Rule (est -> empty) is never reduced
WARNING: Rule (exp2 -> empty) is never reduced
