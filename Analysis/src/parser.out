Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    NUMBER
    MULTP
    DOT
    LESSEQ
    COLON
    GRTREQ
    CYCLE
    DIVIDE
    SPACE
    newline
    TYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM createDirProc ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON
Rule 2     createDirProc -> <empty>
Rule 3     goToMainQuad -> <empty>
Rule 4     altaPrograma -> empty
Rule 5     program2 -> declare program3
Rule 6     declare -> DECLARE declareRecursivo
Rule 7     declareRecursivo -> type ID altaVarGlobal declare2 declare3 SEMICOLON declareRecursivo
Rule 8     declare2 -> array
Rule 9     declare3 -> COMMA ID altaVarGlobal declare3
Rule 10    program3 -> funct program3
Rule 11    funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
Rule 12    altaModulo -> <empty>
Rule 13    funct2 -> type ID funct3
Rule 14    funct3 -> COMMA funct type ID funct3
Rule 15    funct2 -> empty
Rule 16    funct3 -> empty
Rule 17    program3 -> empty
Rule 18    altaVarGlobal -> <empty>
Rule 19    declareRecursivo -> empty
Rule 20    declare -> empty
Rule 21    declare3 -> empty
Rule 22    array -> LEFTBRACK exp RIGHTBRACK array
Rule 23    array -> empty
Rule 24    type -> type2
Rule 25    type2 -> INT
Rule 26    type2 -> FLOAT
Rule 27    type2 -> STRING
Rule 28    type2 -> BOOL
Rule 29    type2 -> VOID
Rule 30    cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY
Rule 31    altaModuloMain -> <empty>
Rule 32    est -> conditional
Rule 33    est -> declareLocal
Rule 34    declareLocal -> DECLARE declareRecursivoLocal
Rule 35    declareRecursivoLocal -> type ID altaVarLocal declare2Local declare3Local SEMICOLON declareRecursivoLocal
Rule 36    declare2Local -> array
Rule 37    declare3Local -> COMMA ID altaVarLocal declare3Local
Rule 38    declareRecursivoLocal -> empty
Rule 39    declareLocal -> empty
Rule 40    declare2Local -> empty
Rule 41    declare3Local -> empty
Rule 42    altaVarLocal -> <empty>
Rule 43    est -> cycles
Rule 44    est -> input
Rule 45    est -> output
Rule 46    est -> assignment
Rule 47    est -> funct
Rule 48    est -> empty
Rule 49    assignment -> ID ASSGN ID SEMICOLON
Rule 50    conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
Rule 51    conditional2 -> exp conditional2
Rule 52    conditional2 -> empty
Rule 53    cycles -> while
Rule 54    cycles -> for
Rule 55    cycles -> do-while
Rule 56    do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR
Rule 57    while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
Rule 58    while2 -> exp while2
Rule 59    while2 -> empty
Rule 60    for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
Rule 61    arithmeticOp -> SUM
Rule 62    arithmeticOp -> MINUS
Rule 63    for2 -> ID ASSGN ID for2
Rule 64    for2 -> empty
Rule 65    for3 -> exp for3
Rule 66    for3 -> empty
Rule 67    exp -> ID array exp2 SEMICOLON
Rule 68    exp2 -> LESS
Rule 69    exp2 -> GRTR
Rule 70    exp2 -> EQ
Rule 71    exp2 -> NOTEQ
Rule 72    exp2 -> AND
Rule 73    exp2 -> OR
Rule 74    exp2 -> arithmeticExp
Rule 75    arithmeticExp -> ID EQ ID arithmeticOp ID arithmeticExp
Rule 76    arithmeticExp -> empty
Rule 77    output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
Rule 78    output2 -> ID output2
Rule 79    output2 -> empty
Rule 80    input -> READ LEFTPAR ID RIGHTPAR SEMICOLON
Rule 81    empty -> <empty>

Terminals, with rules where they appear

AND                  : 72
ASSGN                : 49 63
BOOL                 : 28
COLON                : 
COMMA                : 9 14 37
CYCLE                : 
DECLARE              : 6 34
DIVIDE               : 
DO                   : 56
DOT                  : 
ELSE                 : 50
END                  : 1
EQ                   : 70 75
FLOAT                : 26
FOR                  : 60
FUNCTION             : 11
GRTR                 : 69
GRTREQ               : 
ID                   : 1 7 9 11 13 14 35 37 49 49 60 63 63 67 75 75 75 78 80
IF                   : 50
INT                  : 25
LEFTBRACK            : 22
LEFTKEY              : 11 30 50 56 57 60
LEFTPAR              : 11 30 50 56 57 60 77 80
LESS                 : 68
LESSEQ               : 
MAIN                 : 30
MINUS                : 62
MULTP                : 
NOTEQ                : 71
NUMBER               : 
OR                   : 73
PROGRAM              : 1
QUOTE                : 77 77
READ                 : 80
RIGHTBRACK           : 22
RIGHTKEY             : 11 30 50 50 56 57 60
RIGHTPAR             : 11 30 50 56 57 60 77 80
SEMICOLON            : 1 1 7 35 49 60 60 67 77 80
SPACE                : 
STRING               : 27
SUM                  : 61
TYPE                 : 
VOID                 : 29
WHILE                : 56 57 57
WRITE                : 77
error                : 
newline              : 

Nonterminals, with rules where they appear

altaModulo           : 11
altaModuloMain       : 30
altaPrograma         : 1
altaVarGlobal        : 7 9
altaVarLocal         : 35 37
arithmeticExp        : 74 75
arithmeticOp         : 60 60 75
array                : 8 22 36 67
assignment           : 46
conditional          : 32
conditional2         : 50 51
createDirProc        : 1
cuerpo               : 1
cycles               : 43
declare              : 5
declare2             : 7
declare2Local        : 35
declare3             : 7 9
declare3Local        : 35 37
declareLocal         : 33
declareRecursivo     : 6 7
declareRecursivoLocal : 34 35
do-while             : 55
empty                : 4 15 16 17 19 20 21 23 38 39 40 41 48 52 59 64 66 76 79
est                  : 11 30 50 50 56 57 60
exp                  : 22 51 58 65 77
exp2                 : 67
for                  : 54
for2                 : 60 63
for3                 : 60 65
funct                : 10 14 47
funct2               : 11
funct3               : 13 14
goToMainQuad         : 1
input                : 44
output               : 45
output2              : 77 78
program              : 0
program2             : 1
program3             : 5 10
type                 : 7 11 13 14 35
type2                : 24
while                : 53
while2               : 56 57 58

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM createDirProc ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . createDirProc ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON
    (2) createDirProc -> .

    ID              reduce using rule 2 (createDirProc -> .)

    createDirProc                  shift and go to state 3

state 3

    (1) program -> PROGRAM createDirProc . ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON

    ID              shift and go to state 4


state 4

    (1) program -> PROGRAM createDirProc ID . altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON
    (4) altaPrograma -> . empty
    (81) empty -> .

    SEMICOLON       reduce using rule 81 (empty -> .)

    altaPrograma                   shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) program -> PROGRAM createDirProc ID altaPrograma . SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON

    SEMICOLON       shift and go to state 7


state 6

    (4) altaPrograma -> empty .

    SEMICOLON       reduce using rule 4 (altaPrograma -> empty .)


state 7

    (1) program -> PROGRAM createDirProc ID altaPrograma SEMICOLON . program2 goToMainQuad cuerpo END SEMICOLON
    (5) program2 -> . declare program3
    (6) declare -> . DECLARE declareRecursivo
    (20) declare -> . empty
    (81) empty -> .

    DECLARE         shift and go to state 9
    FUNCTION        reduce using rule 81 (empty -> .)
    MAIN            reduce using rule 81 (empty -> .)

    program2                       shift and go to state 8
    declare                        shift and go to state 10
    empty                          shift and go to state 11

state 8

    (1) program -> PROGRAM createDirProc ID altaPrograma SEMICOLON program2 . goToMainQuad cuerpo END SEMICOLON
    (3) goToMainQuad -> .

    MAIN            reduce using rule 3 (goToMainQuad -> .)

    goToMainQuad                   shift and go to state 12

state 9

    (6) declare -> DECLARE . declareRecursivo
    (7) declareRecursivo -> . type ID altaVarGlobal declare2 declare3 SEMICOLON declareRecursivo
    (19) declareRecursivo -> . empty
    (24) type -> . type2
    (81) empty -> .
    (25) type2 -> . INT
    (26) type2 -> . FLOAT
    (27) type2 -> . STRING
    (28) type2 -> . BOOL
    (29) type2 -> . VOID

    FUNCTION        reduce using rule 81 (empty -> .)
    MAIN            reduce using rule 81 (empty -> .)
    INT             shift and go to state 14
    FLOAT           shift and go to state 16
    STRING          shift and go to state 13
    BOOL            shift and go to state 17
    VOID            shift and go to state 15

    declareRecursivo               shift and go to state 18
    type                           shift and go to state 19
    empty                          shift and go to state 20
    type2                          shift and go to state 21

state 10

    (5) program2 -> declare . program3
    (10) program3 -> . funct program3
    (17) program3 -> . empty
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (81) empty -> .

    FUNCTION        shift and go to state 22
    MAIN            reduce using rule 81 (empty -> .)

    funct                          shift and go to state 23
    program3                       shift and go to state 24
    empty                          shift and go to state 25

state 11

    (20) declare -> empty .

    FUNCTION        reduce using rule 20 (declare -> empty .)
    MAIN            reduce using rule 20 (declare -> empty .)


state 12

    (1) program -> PROGRAM createDirProc ID altaPrograma SEMICOLON program2 goToMainQuad . cuerpo END SEMICOLON
    (30) cuerpo -> . MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY

    MAIN            shift and go to state 27

    cuerpo                         shift and go to state 26

state 13

    (27) type2 -> STRING .

    ID              reduce using rule 27 (type2 -> STRING .)


state 14

    (25) type2 -> INT .

    ID              reduce using rule 25 (type2 -> INT .)


state 15

    (29) type2 -> VOID .

    ID              reduce using rule 29 (type2 -> VOID .)


state 16

    (26) type2 -> FLOAT .

    ID              reduce using rule 26 (type2 -> FLOAT .)


state 17

    (28) type2 -> BOOL .

    ID              reduce using rule 28 (type2 -> BOOL .)


state 18

    (6) declare -> DECLARE declareRecursivo .

    FUNCTION        reduce using rule 6 (declare -> DECLARE declareRecursivo .)
    MAIN            reduce using rule 6 (declare -> DECLARE declareRecursivo .)


state 19

    (7) declareRecursivo -> type . ID altaVarGlobal declare2 declare3 SEMICOLON declareRecursivo

    ID              shift and go to state 28


state 20

    (19) declareRecursivo -> empty .

    FUNCTION        reduce using rule 19 (declareRecursivo -> empty .)
    MAIN            reduce using rule 19 (declareRecursivo -> empty .)


state 21

    (24) type -> type2 .

    ID              reduce using rule 24 (type -> type2 .)


state 22

    (11) funct -> FUNCTION . type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (24) type -> . type2
    (25) type2 -> . INT
    (26) type2 -> . FLOAT
    (27) type2 -> . STRING
    (28) type2 -> . BOOL
    (29) type2 -> . VOID

    INT             shift and go to state 14
    FLOAT           shift and go to state 16
    STRING          shift and go to state 13
    BOOL            shift and go to state 17
    VOID            shift and go to state 15

    type                           shift and go to state 29
    type2                          shift and go to state 21

state 23

    (10) program3 -> funct . program3
    (10) program3 -> . funct program3
    (17) program3 -> . empty
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (81) empty -> .

    FUNCTION        shift and go to state 22
    MAIN            reduce using rule 81 (empty -> .)

    program3                       shift and go to state 30
    funct                          shift and go to state 23
    empty                          shift and go to state 25

state 24

    (5) program2 -> declare program3 .

    MAIN            reduce using rule 5 (program2 -> declare program3 .)


state 25

    (17) program3 -> empty .

    MAIN            reduce using rule 17 (program3 -> empty .)


state 26

    (1) program -> PROGRAM createDirProc ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo . END SEMICOLON

    END             shift and go to state 31


state 27

    (30) cuerpo -> MAIN . LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY

    LEFTPAR         shift and go to state 32


state 28

    (7) declareRecursivo -> type ID . altaVarGlobal declare2 declare3 SEMICOLON declareRecursivo
    (18) altaVarGlobal -> .

    LEFTBRACK       reduce using rule 18 (altaVarGlobal -> .)
    COMMA           reduce using rule 18 (altaVarGlobal -> .)
    SEMICOLON       reduce using rule 18 (altaVarGlobal -> .)

    altaVarGlobal                  shift and go to state 33

state 29

    (11) funct -> FUNCTION type . ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY

    ID              shift and go to state 34


state 30

    (10) program3 -> funct program3 .

    MAIN            reduce using rule 10 (program3 -> funct program3 .)


state 31

    (1) program -> PROGRAM createDirProc ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END . SEMICOLON

    SEMICOLON       shift and go to state 35


state 32

    (30) cuerpo -> MAIN LEFTPAR . RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY

    RIGHTPAR        shift and go to state 36


state 33

    (7) declareRecursivo -> type ID altaVarGlobal . declare2 declare3 SEMICOLON declareRecursivo
    (8) declare2 -> . array
    (22) array -> . LEFTBRACK exp RIGHTBRACK array
    (23) array -> . empty
    (81) empty -> .

    LEFTBRACK       shift and go to state 37
    COMMA           reduce using rule 81 (empty -> .)
    SEMICOLON       reduce using rule 81 (empty -> .)

    declare2                       shift and go to state 38
    array                          shift and go to state 39
    empty                          shift and go to state 40

state 34

    (11) funct -> FUNCTION type ID . altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (12) altaModulo -> .

    LEFTPAR         reduce using rule 12 (altaModulo -> .)

    altaModulo                     shift and go to state 41

state 35

    (1) program -> PROGRAM createDirProc ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON .

    $end            reduce using rule 1 (program -> PROGRAM createDirProc ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON .)


state 36

    (30) cuerpo -> MAIN LEFTPAR RIGHTPAR . LEFTKEY altaModuloMain est RIGHTKEY

    LEFTKEY         shift and go to state 42


state 37

    (22) array -> LEFTBRACK . exp RIGHTBRACK array
    (67) exp -> . ID array exp2 SEMICOLON

    ID              shift and go to state 44

    exp                            shift and go to state 43

state 38

    (7) declareRecursivo -> type ID altaVarGlobal declare2 . declare3 SEMICOLON declareRecursivo
    (9) declare3 -> . COMMA ID altaVarGlobal declare3
    (21) declare3 -> . empty
    (81) empty -> .

    COMMA           shift and go to state 46
    SEMICOLON       reduce using rule 81 (empty -> .)

    declare3                       shift and go to state 45
    empty                          shift and go to state 47

state 39

    (8) declare2 -> array .

    COMMA           reduce using rule 8 (declare2 -> array .)
    SEMICOLON       reduce using rule 8 (declare2 -> array .)


state 40

    (23) array -> empty .

    LESS            reduce using rule 23 (array -> empty .)
    GRTR            reduce using rule 23 (array -> empty .)
    EQ              reduce using rule 23 (array -> empty .)
    NOTEQ           reduce using rule 23 (array -> empty .)
    AND             reduce using rule 23 (array -> empty .)
    OR              reduce using rule 23 (array -> empty .)
    ID              reduce using rule 23 (array -> empty .)
    SEMICOLON       reduce using rule 23 (array -> empty .)
    COMMA           reduce using rule 23 (array -> empty .)


state 41

    (11) funct -> FUNCTION type ID altaModulo . LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY

    LEFTPAR         shift and go to state 48


state 42

    (30) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY . altaModuloMain est RIGHTKEY
    (31) altaModuloMain -> .

    IF              reduce using rule 31 (altaModuloMain -> .)
    DECLARE         reduce using rule 31 (altaModuloMain -> .)
    READ            reduce using rule 31 (altaModuloMain -> .)
    WRITE           reduce using rule 31 (altaModuloMain -> .)
    ID              reduce using rule 31 (altaModuloMain -> .)
    FUNCTION        reduce using rule 31 (altaModuloMain -> .)
    WHILE           reduce using rule 31 (altaModuloMain -> .)
    FOR             reduce using rule 31 (altaModuloMain -> .)
    DO              reduce using rule 31 (altaModuloMain -> .)
    RIGHTKEY        reduce using rule 31 (altaModuloMain -> .)

    altaModuloMain                 shift and go to state 49

state 43

    (22) array -> LEFTBRACK exp . RIGHTBRACK array

    RIGHTBRACK      shift and go to state 50


state 44

    (67) exp -> ID . array exp2 SEMICOLON
    (22) array -> . LEFTBRACK exp RIGHTBRACK array
    (23) array -> . empty
    (81) empty -> .

    LEFTBRACK       shift and go to state 37
    LESS            reduce using rule 81 (empty -> .)
    GRTR            reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NOTEQ           reduce using rule 81 (empty -> .)
    AND             reduce using rule 81 (empty -> .)
    OR              reduce using rule 81 (empty -> .)
    ID              reduce using rule 81 (empty -> .)
    SEMICOLON       reduce using rule 81 (empty -> .)

    array                          shift and go to state 51
    empty                          shift and go to state 40

state 45

    (7) declareRecursivo -> type ID altaVarGlobal declare2 declare3 . SEMICOLON declareRecursivo

    SEMICOLON       shift and go to state 52


state 46

    (9) declare3 -> COMMA . ID altaVarGlobal declare3

    ID              shift and go to state 53


state 47

    (21) declare3 -> empty .

    SEMICOLON       reduce using rule 21 (declare3 -> empty .)


state 48

    (11) funct -> FUNCTION type ID altaModulo LEFTPAR . funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (13) funct2 -> . type ID funct3
    (15) funct2 -> . empty
    (24) type -> . type2
    (81) empty -> .
    (25) type2 -> . INT
    (26) type2 -> . FLOAT
    (27) type2 -> . STRING
    (28) type2 -> . BOOL
    (29) type2 -> . VOID

    RIGHTPAR        reduce using rule 81 (empty -> .)
    INT             shift and go to state 14
    FLOAT           shift and go to state 16
    STRING          shift and go to state 13
    BOOL            shift and go to state 17
    VOID            shift and go to state 15

    funct2                         shift and go to state 54
    type                           shift and go to state 55
    empty                          shift and go to state 56
    type2                          shift and go to state 21

state 49

    (30) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain . est RIGHTKEY
    (32) est -> . conditional
    (33) est -> . declareLocal
    (43) est -> . cycles
    (44) est -> . input
    (45) est -> . output
    (46) est -> . assignment
    (47) est -> . funct
    (48) est -> . empty
    (50) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (34) declareLocal -> . DECLARE declareRecursivoLocal
    (39) declareLocal -> . empty
    (53) cycles -> . while
    (54) cycles -> . for
    (55) cycles -> . do-while
    (80) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (77) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (49) assignment -> . ID ASSGN ID SEMICOLON
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (81) empty -> .
    (57) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (60) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (56) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 71
    DECLARE         shift and go to state 70
    READ            shift and go to state 59
    WRITE           shift and go to state 68
    ID              shift and go to state 69
    FUNCTION        shift and go to state 22
    RIGHTKEY        reduce using rule 81 (empty -> .)
    WHILE           shift and go to state 61
    FOR             shift and go to state 66
    DO              shift and go to state 57

    funct                          shift and go to state 58
    conditional                    shift and go to state 60
    do-while                       shift and go to state 62
    est                            shift and go to state 63
    for                            shift and go to state 64
    input                          shift and go to state 65
    assignment                     shift and go to state 67
    cycles                         shift and go to state 72
    while                          shift and go to state 73
    empty                          shift and go to state 74
    output                         shift and go to state 75
    declareLocal                   shift and go to state 76

state 50

    (22) array -> LEFTBRACK exp RIGHTBRACK . array
    (22) array -> . LEFTBRACK exp RIGHTBRACK array
    (23) array -> . empty
    (81) empty -> .

    LEFTBRACK       shift and go to state 37
    COMMA           reduce using rule 81 (empty -> .)
    SEMICOLON       reduce using rule 81 (empty -> .)
    LESS            reduce using rule 81 (empty -> .)
    GRTR            reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NOTEQ           reduce using rule 81 (empty -> .)
    AND             reduce using rule 81 (empty -> .)
    OR              reduce using rule 81 (empty -> .)
    ID              reduce using rule 81 (empty -> .)

    array                          shift and go to state 77
    empty                          shift and go to state 40

state 51

    (67) exp -> ID array . exp2 SEMICOLON
    (68) exp2 -> . LESS
    (69) exp2 -> . GRTR
    (70) exp2 -> . EQ
    (71) exp2 -> . NOTEQ
    (72) exp2 -> . AND
    (73) exp2 -> . OR
    (74) exp2 -> . arithmeticExp
    (75) arithmeticExp -> . ID EQ ID arithmeticOp ID arithmeticExp
    (76) arithmeticExp -> . empty
    (81) empty -> .

    LESS            shift and go to state 80
    GRTR            shift and go to state 84
    EQ              shift and go to state 85
    NOTEQ           shift and go to state 81
    AND             shift and go to state 78
    OR              shift and go to state 83
    ID              shift and go to state 86
    SEMICOLON       reduce using rule 81 (empty -> .)

    exp2                           shift and go to state 82
    arithmeticExp                  shift and go to state 79
    empty                          shift and go to state 87

state 52

    (7) declareRecursivo -> type ID altaVarGlobal declare2 declare3 SEMICOLON . declareRecursivo
    (7) declareRecursivo -> . type ID altaVarGlobal declare2 declare3 SEMICOLON declareRecursivo
    (19) declareRecursivo -> . empty
    (24) type -> . type2
    (81) empty -> .
    (25) type2 -> . INT
    (26) type2 -> . FLOAT
    (27) type2 -> . STRING
    (28) type2 -> . BOOL
    (29) type2 -> . VOID

    FUNCTION        reduce using rule 81 (empty -> .)
    MAIN            reduce using rule 81 (empty -> .)
    INT             shift and go to state 14
    FLOAT           shift and go to state 16
    STRING          shift and go to state 13
    BOOL            shift and go to state 17
    VOID            shift and go to state 15

    declareRecursivo               shift and go to state 88
    type                           shift and go to state 19
    empty                          shift and go to state 20
    type2                          shift and go to state 21

state 53

    (9) declare3 -> COMMA ID . altaVarGlobal declare3
    (18) altaVarGlobal -> .

    COMMA           reduce using rule 18 (altaVarGlobal -> .)
    SEMICOLON       reduce using rule 18 (altaVarGlobal -> .)

    altaVarGlobal                  shift and go to state 89

state 54

    (11) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 . RIGHTPAR LEFTKEY est RIGHTKEY

    RIGHTPAR        shift and go to state 90


state 55

    (13) funct2 -> type . ID funct3

    ID              shift and go to state 91


state 56

    (15) funct2 -> empty .

    RIGHTPAR        reduce using rule 15 (funct2 -> empty .)


state 57

    (56) do-while -> DO . LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    LEFTKEY         shift and go to state 92


state 58

    (47) est -> funct .

    RIGHTKEY        reduce using rule 47 (est -> funct .)


state 59

    (80) input -> READ . LEFTPAR ID RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 93


state 60

    (32) est -> conditional .

    RIGHTKEY        reduce using rule 32 (est -> conditional .)


state 61

    (57) while -> WHILE . LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY

    LEFTPAR         shift and go to state 94


state 62

    (55) cycles -> do-while .

    RIGHTKEY        reduce using rule 55 (cycles -> do-while .)


state 63

    (30) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est . RIGHTKEY

    RIGHTKEY        shift and go to state 95


state 64

    (54) cycles -> for .

    RIGHTKEY        reduce using rule 54 (cycles -> for .)


state 65

    (44) est -> input .

    RIGHTKEY        reduce using rule 44 (est -> input .)


state 66

    (60) for -> FOR . LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY

    LEFTPAR         shift and go to state 96


state 67

    (46) est -> assignment .

    RIGHTKEY        reduce using rule 46 (est -> assignment .)


state 68

    (77) output -> WRITE . LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 97


state 69

    (49) assignment -> ID . ASSGN ID SEMICOLON

    ASSGN           shift and go to state 98


state 70

    (34) declareLocal -> DECLARE . declareRecursivoLocal
    (35) declareRecursivoLocal -> . type ID altaVarLocal declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (38) declareRecursivoLocal -> . empty
    (24) type -> . type2
    (81) empty -> .
    (25) type2 -> . INT
    (26) type2 -> . FLOAT
    (27) type2 -> . STRING
    (28) type2 -> . BOOL
    (29) type2 -> . VOID

    RIGHTKEY        reduce using rule 81 (empty -> .)
    INT             shift and go to state 14
    FLOAT           shift and go to state 16
    STRING          shift and go to state 13
    BOOL            shift and go to state 17
    VOID            shift and go to state 15

    declareRecursivoLocal          shift and go to state 99
    type2                          shift and go to state 21
    type                           shift and go to state 100
    empty                          shift and go to state 101

state 71

    (50) conditional -> IF . LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY

    LEFTPAR         shift and go to state 102


state 72

    (43) est -> cycles .

    RIGHTKEY        reduce using rule 43 (est -> cycles .)


state 73

    (53) cycles -> while .

    RIGHTKEY        reduce using rule 53 (cycles -> while .)


state 74

    (48) est -> empty .
    (39) declareLocal -> empty .

  ! reduce/reduce conflict for RIGHTKEY resolved using rule 39 (declareLocal -> empty .)
    RIGHTKEY        reduce using rule 39 (declareLocal -> empty .)

  ! RIGHTKEY        [ reduce using rule 48 (est -> empty .) ]


state 75

    (45) est -> output .

    RIGHTKEY        reduce using rule 45 (est -> output .)


state 76

    (33) est -> declareLocal .

    RIGHTKEY        reduce using rule 33 (est -> declareLocal .)


state 77

    (22) array -> LEFTBRACK exp RIGHTBRACK array .

    LESS            reduce using rule 22 (array -> LEFTBRACK exp RIGHTBRACK array .)
    GRTR            reduce using rule 22 (array -> LEFTBRACK exp RIGHTBRACK array .)
    EQ              reduce using rule 22 (array -> LEFTBRACK exp RIGHTBRACK array .)
    NOTEQ           reduce using rule 22 (array -> LEFTBRACK exp RIGHTBRACK array .)
    AND             reduce using rule 22 (array -> LEFTBRACK exp RIGHTBRACK array .)
    OR              reduce using rule 22 (array -> LEFTBRACK exp RIGHTBRACK array .)
    ID              reduce using rule 22 (array -> LEFTBRACK exp RIGHTBRACK array .)
    SEMICOLON       reduce using rule 22 (array -> LEFTBRACK exp RIGHTBRACK array .)
    COMMA           reduce using rule 22 (array -> LEFTBRACK exp RIGHTBRACK array .)


state 78

    (72) exp2 -> AND .

    SEMICOLON       reduce using rule 72 (exp2 -> AND .)


state 79

    (74) exp2 -> arithmeticExp .

    SEMICOLON       reduce using rule 74 (exp2 -> arithmeticExp .)


state 80

    (68) exp2 -> LESS .

    SEMICOLON       reduce using rule 68 (exp2 -> LESS .)


state 81

    (71) exp2 -> NOTEQ .

    SEMICOLON       reduce using rule 71 (exp2 -> NOTEQ .)


state 82

    (67) exp -> ID array exp2 . SEMICOLON

    SEMICOLON       shift and go to state 103


state 83

    (73) exp2 -> OR .

    SEMICOLON       reduce using rule 73 (exp2 -> OR .)


state 84

    (69) exp2 -> GRTR .

    SEMICOLON       reduce using rule 69 (exp2 -> GRTR .)


state 85

    (70) exp2 -> EQ .

    SEMICOLON       reduce using rule 70 (exp2 -> EQ .)


state 86

    (75) arithmeticExp -> ID . EQ ID arithmeticOp ID arithmeticExp

    EQ              shift and go to state 104


state 87

    (76) arithmeticExp -> empty .

    SEMICOLON       reduce using rule 76 (arithmeticExp -> empty .)


state 88

    (7) declareRecursivo -> type ID altaVarGlobal declare2 declare3 SEMICOLON declareRecursivo .

    FUNCTION        reduce using rule 7 (declareRecursivo -> type ID altaVarGlobal declare2 declare3 SEMICOLON declareRecursivo .)
    MAIN            reduce using rule 7 (declareRecursivo -> type ID altaVarGlobal declare2 declare3 SEMICOLON declareRecursivo .)


state 89

    (9) declare3 -> COMMA ID altaVarGlobal . declare3
    (9) declare3 -> . COMMA ID altaVarGlobal declare3
    (21) declare3 -> . empty
    (81) empty -> .

    COMMA           shift and go to state 46
    SEMICOLON       reduce using rule 81 (empty -> .)

    empty                          shift and go to state 47
    declare3                       shift and go to state 105

state 90

    (11) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR . LEFTKEY est RIGHTKEY

    LEFTKEY         shift and go to state 106


state 91

    (13) funct2 -> type ID . funct3
    (14) funct3 -> . COMMA funct type ID funct3
    (16) funct3 -> . empty
    (81) empty -> .

    COMMA           shift and go to state 108
    RIGHTPAR        reduce using rule 81 (empty -> .)

    funct3                         shift and go to state 107
    empty                          shift and go to state 109

state 92

    (56) do-while -> DO LEFTKEY . est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR
    (32) est -> . conditional
    (33) est -> . declareLocal
    (43) est -> . cycles
    (44) est -> . input
    (45) est -> . output
    (46) est -> . assignment
    (47) est -> . funct
    (48) est -> . empty
    (50) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (34) declareLocal -> . DECLARE declareRecursivoLocal
    (39) declareLocal -> . empty
    (53) cycles -> . while
    (54) cycles -> . for
    (55) cycles -> . do-while
    (80) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (77) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (49) assignment -> . ID ASSGN ID SEMICOLON
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (81) empty -> .
    (57) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (60) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (56) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 71
    DECLARE         shift and go to state 70
    READ            shift and go to state 59
    WRITE           shift and go to state 68
    ID              shift and go to state 69
    FUNCTION        shift and go to state 22
    RIGHTKEY        reduce using rule 81 (empty -> .)
    WHILE           shift and go to state 61
    FOR             shift and go to state 66
    DO              shift and go to state 57

    funct                          shift and go to state 58
    conditional                    shift and go to state 60
    do-while                       shift and go to state 62
    est                            shift and go to state 110
    for                            shift and go to state 64
    input                          shift and go to state 65
    assignment                     shift and go to state 67
    cycles                         shift and go to state 72
    while                          shift and go to state 73
    empty                          shift and go to state 74
    output                         shift and go to state 75
    declareLocal                   shift and go to state 76

state 93

    (80) input -> READ LEFTPAR . ID RIGHTPAR SEMICOLON

    ID              shift and go to state 111


state 94

    (57) while -> WHILE LEFTPAR . while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (58) while2 -> . exp while2
    (59) while2 -> . empty
    (67) exp -> . ID array exp2 SEMICOLON
    (81) empty -> .

    ID              shift and go to state 44
    RIGHTPAR        reduce using rule 81 (empty -> .)

    while2                         shift and go to state 112
    exp                            shift and go to state 113
    empty                          shift and go to state 114

state 95

    (30) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY .

    END             reduce using rule 30 (cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY .)


state 96

    (60) for -> FOR LEFTPAR . for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (63) for2 -> . ID ASSGN ID for2
    (64) for2 -> . empty
    (81) empty -> .

    ID              shift and go to state 116
    SEMICOLON       reduce using rule 81 (empty -> .)

    for2                           shift and go to state 115
    empty                          shift and go to state 117

state 97

    (77) output -> WRITE LEFTPAR . output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (78) output2 -> . ID output2
    (79) output2 -> . empty
    (81) empty -> .

    ID              shift and go to state 119
    QUOTE           reduce using rule 81 (empty -> .)

    output2                        shift and go to state 118
    empty                          shift and go to state 120

state 98

    (49) assignment -> ID ASSGN . ID SEMICOLON

    ID              shift and go to state 121


state 99

    (34) declareLocal -> DECLARE declareRecursivoLocal .

    RIGHTKEY        reduce using rule 34 (declareLocal -> DECLARE declareRecursivoLocal .)


state 100

    (35) declareRecursivoLocal -> type . ID altaVarLocal declare2Local declare3Local SEMICOLON declareRecursivoLocal

    ID              shift and go to state 122


state 101

    (38) declareRecursivoLocal -> empty .

    RIGHTKEY        reduce using rule 38 (declareRecursivoLocal -> empty .)


state 102

    (50) conditional -> IF LEFTPAR . conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (51) conditional2 -> . exp conditional2
    (52) conditional2 -> . empty
    (67) exp -> . ID array exp2 SEMICOLON
    (81) empty -> .

    ID              shift and go to state 44
    RIGHTPAR        reduce using rule 81 (empty -> .)

    conditional2                   shift and go to state 125
    exp                            shift and go to state 124
    empty                          shift and go to state 123

state 103

    (67) exp -> ID array exp2 SEMICOLON .

    ID              reduce using rule 67 (exp -> ID array exp2 SEMICOLON .)
    RIGHTPAR        reduce using rule 67 (exp -> ID array exp2 SEMICOLON .)
    SEMICOLON       reduce using rule 67 (exp -> ID array exp2 SEMICOLON .)
    RIGHTBRACK      reduce using rule 67 (exp -> ID array exp2 SEMICOLON .)
    QUOTE           reduce using rule 67 (exp -> ID array exp2 SEMICOLON .)


state 104

    (75) arithmeticExp -> ID EQ . ID arithmeticOp ID arithmeticExp

    ID              shift and go to state 126


state 105

    (9) declare3 -> COMMA ID altaVarGlobal declare3 .

    SEMICOLON       reduce using rule 9 (declare3 -> COMMA ID altaVarGlobal declare3 .)


state 106

    (11) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY . est RIGHTKEY
    (32) est -> . conditional
    (33) est -> . declareLocal
    (43) est -> . cycles
    (44) est -> . input
    (45) est -> . output
    (46) est -> . assignment
    (47) est -> . funct
    (48) est -> . empty
    (50) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (34) declareLocal -> . DECLARE declareRecursivoLocal
    (39) declareLocal -> . empty
    (53) cycles -> . while
    (54) cycles -> . for
    (55) cycles -> . do-while
    (80) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (77) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (49) assignment -> . ID ASSGN ID SEMICOLON
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (81) empty -> .
    (57) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (60) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (56) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 71
    DECLARE         shift and go to state 70
    READ            shift and go to state 59
    WRITE           shift and go to state 68
    ID              shift and go to state 69
    FUNCTION        shift and go to state 22
    RIGHTKEY        reduce using rule 81 (empty -> .)
    WHILE           shift and go to state 61
    FOR             shift and go to state 66
    DO              shift and go to state 57

    funct                          shift and go to state 58
    conditional                    shift and go to state 60
    do-while                       shift and go to state 62
    est                            shift and go to state 127
    for                            shift and go to state 64
    input                          shift and go to state 65
    assignment                     shift and go to state 67
    declareLocal                   shift and go to state 76
    while                          shift and go to state 73
    empty                          shift and go to state 74
    output                         shift and go to state 75
    cycles                         shift and go to state 72

state 107

    (13) funct2 -> type ID funct3 .

    RIGHTPAR        reduce using rule 13 (funct2 -> type ID funct3 .)


state 108

    (14) funct3 -> COMMA . funct type ID funct3
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY

    FUNCTION        shift and go to state 22

    funct                          shift and go to state 128

state 109

    (16) funct3 -> empty .

    RIGHTPAR        reduce using rule 16 (funct3 -> empty .)


state 110

    (56) do-while -> DO LEFTKEY est . RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    RIGHTKEY        shift and go to state 129


state 111

    (80) input -> READ LEFTPAR ID . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 130


state 112

    (57) while -> WHILE LEFTPAR while2 . RIGHTPAR WHILE LEFTKEY est RIGHTKEY

    RIGHTPAR        shift and go to state 131


state 113

    (58) while2 -> exp . while2
    (58) while2 -> . exp while2
    (59) while2 -> . empty
    (67) exp -> . ID array exp2 SEMICOLON
    (81) empty -> .

    ID              shift and go to state 44
    RIGHTPAR        reduce using rule 81 (empty -> .)

    while2                         shift and go to state 132
    empty                          shift and go to state 114
    exp                            shift and go to state 113

state 114

    (59) while2 -> empty .

    RIGHTPAR        reduce using rule 59 (while2 -> empty .)


state 115

    (60) for -> FOR LEFTPAR for2 . SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY

    SEMICOLON       shift and go to state 133


state 116

    (63) for2 -> ID . ASSGN ID for2

    ASSGN           shift and go to state 134


state 117

    (64) for2 -> empty .

    SEMICOLON       reduce using rule 64 (for2 -> empty .)


state 118

    (77) output -> WRITE LEFTPAR output2 . QUOTE exp QUOTE RIGHTPAR SEMICOLON

    QUOTE           shift and go to state 135


state 119

    (78) output2 -> ID . output2
    (78) output2 -> . ID output2
    (79) output2 -> . empty
    (81) empty -> .

    ID              shift and go to state 119
    QUOTE           reduce using rule 81 (empty -> .)

    output2                        shift and go to state 136
    empty                          shift and go to state 120

state 120

    (79) output2 -> empty .

    QUOTE           reduce using rule 79 (output2 -> empty .)


state 121

    (49) assignment -> ID ASSGN ID . SEMICOLON

    SEMICOLON       shift and go to state 137


state 122

    (35) declareRecursivoLocal -> type ID . altaVarLocal declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (42) altaVarLocal -> .

    LEFTBRACK       reduce using rule 42 (altaVarLocal -> .)
    COMMA           reduce using rule 42 (altaVarLocal -> .)
    SEMICOLON       reduce using rule 42 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 138

state 123

    (52) conditional2 -> empty .

    RIGHTPAR        reduce using rule 52 (conditional2 -> empty .)


state 124

    (51) conditional2 -> exp . conditional2
    (51) conditional2 -> . exp conditional2
    (52) conditional2 -> . empty
    (67) exp -> . ID array exp2 SEMICOLON
    (81) empty -> .

    ID              shift and go to state 44
    RIGHTPAR        reduce using rule 81 (empty -> .)

    empty                          shift and go to state 123
    conditional2                   shift and go to state 139
    exp                            shift and go to state 124

state 125

    (50) conditional -> IF LEFTPAR conditional2 . RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY

    RIGHTPAR        shift and go to state 140


state 126

    (75) arithmeticExp -> ID EQ ID . arithmeticOp ID arithmeticExp
    (61) arithmeticOp -> . SUM
    (62) arithmeticOp -> . MINUS

    SUM             shift and go to state 142
    MINUS           shift and go to state 143

    arithmeticOp                   shift and go to state 141

state 127

    (11) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 144


state 128

    (14) funct3 -> COMMA funct . type ID funct3
    (24) type -> . type2
    (25) type2 -> . INT
    (26) type2 -> . FLOAT
    (27) type2 -> . STRING
    (28) type2 -> . BOOL
    (29) type2 -> . VOID

    INT             shift and go to state 14
    FLOAT           shift and go to state 16
    STRING          shift and go to state 13
    BOOL            shift and go to state 17
    VOID            shift and go to state 15

    type                           shift and go to state 145
    type2                          shift and go to state 21

state 129

    (56) do-while -> DO LEFTKEY est RIGHTKEY . WHILE LEFTPAR while2 RIGHTPAR

    WHILE           shift and go to state 146


state 130

    (80) input -> READ LEFTPAR ID RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 147


state 131

    (57) while -> WHILE LEFTPAR while2 RIGHTPAR . WHILE LEFTKEY est RIGHTKEY

    WHILE           shift and go to state 148


state 132

    (58) while2 -> exp while2 .

    RIGHTPAR        reduce using rule 58 (while2 -> exp while2 .)


state 133

    (60) for -> FOR LEFTPAR for2 SEMICOLON . for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (65) for3 -> . exp for3
    (66) for3 -> . empty
    (67) exp -> . ID array exp2 SEMICOLON
    (81) empty -> .

    ID              shift and go to state 44
    SEMICOLON       reduce using rule 81 (empty -> .)

    exp                            shift and go to state 149
    for3                           shift and go to state 150
    empty                          shift and go to state 151

state 134

    (63) for2 -> ID ASSGN . ID for2

    ID              shift and go to state 152


state 135

    (77) output -> WRITE LEFTPAR output2 QUOTE . exp QUOTE RIGHTPAR SEMICOLON
    (67) exp -> . ID array exp2 SEMICOLON

    ID              shift and go to state 44

    exp                            shift and go to state 153

state 136

    (78) output2 -> ID output2 .

    QUOTE           reduce using rule 78 (output2 -> ID output2 .)


state 137

    (49) assignment -> ID ASSGN ID SEMICOLON .

    RIGHTKEY        reduce using rule 49 (assignment -> ID ASSGN ID SEMICOLON .)


state 138

    (35) declareRecursivoLocal -> type ID altaVarLocal . declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (36) declare2Local -> . array
    (40) declare2Local -> . empty
    (22) array -> . LEFTBRACK exp RIGHTBRACK array
    (23) array -> . empty
    (81) empty -> .

    LEFTBRACK       shift and go to state 37
    COMMA           reduce using rule 81 (empty -> .)
    SEMICOLON       reduce using rule 81 (empty -> .)

    declare2Local                  shift and go to state 154
    array                          shift and go to state 155
    empty                          shift and go to state 156

state 139

    (51) conditional2 -> exp conditional2 .

    RIGHTPAR        reduce using rule 51 (conditional2 -> exp conditional2 .)


state 140

    (50) conditional -> IF LEFTPAR conditional2 RIGHTPAR . LEFTKEY est RIGHTKEY ELSE est RIGHTKEY

    LEFTKEY         shift and go to state 157


state 141

    (75) arithmeticExp -> ID EQ ID arithmeticOp . ID arithmeticExp

    ID              shift and go to state 158


state 142

    (61) arithmeticOp -> SUM .

    SUM             reduce using rule 61 (arithmeticOp -> SUM .)
    MINUS           reduce using rule 61 (arithmeticOp -> SUM .)
    ID              reduce using rule 61 (arithmeticOp -> SUM .)
    RIGHTPAR        reduce using rule 61 (arithmeticOp -> SUM .)


state 143

    (62) arithmeticOp -> MINUS .

    SUM             reduce using rule 62 (arithmeticOp -> MINUS .)
    MINUS           reduce using rule 62 (arithmeticOp -> MINUS .)
    ID              reduce using rule 62 (arithmeticOp -> MINUS .)
    RIGHTPAR        reduce using rule 62 (arithmeticOp -> MINUS .)


state 144

    (11) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .

    RIGHTKEY        reduce using rule 11 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    FUNCTION        reduce using rule 11 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    MAIN            reduce using rule 11 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    INT             reduce using rule 11 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    FLOAT           reduce using rule 11 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    STRING          reduce using rule 11 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    BOOL            reduce using rule 11 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    VOID            reduce using rule 11 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)


state 145

    (14) funct3 -> COMMA funct type . ID funct3

    ID              shift and go to state 159


state 146

    (56) do-while -> DO LEFTKEY est RIGHTKEY WHILE . LEFTPAR while2 RIGHTPAR

    LEFTPAR         shift and go to state 160


state 147

    (80) input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .

    RIGHTKEY        reduce using rule 80 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)


state 148

    (57) while -> WHILE LEFTPAR while2 RIGHTPAR WHILE . LEFTKEY est RIGHTKEY

    LEFTKEY         shift and go to state 161


state 149

    (65) for3 -> exp . for3
    (65) for3 -> . exp for3
    (66) for3 -> . empty
    (67) exp -> . ID array exp2 SEMICOLON
    (81) empty -> .

    ID              shift and go to state 44
    SEMICOLON       reduce using rule 81 (empty -> .)

    for3                           shift and go to state 162
    empty                          shift and go to state 151
    exp                            shift and go to state 149

state 150

    (60) for -> FOR LEFTPAR for2 SEMICOLON for3 . SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY

    SEMICOLON       shift and go to state 163


state 151

    (66) for3 -> empty .

    SEMICOLON       reduce using rule 66 (for3 -> empty .)


state 152

    (63) for2 -> ID ASSGN ID . for2
    (63) for2 -> . ID ASSGN ID for2
    (64) for2 -> . empty
    (81) empty -> .

    ID              shift and go to state 116
    SEMICOLON       reduce using rule 81 (empty -> .)

    for2                           shift and go to state 164
    empty                          shift and go to state 117

state 153

    (77) output -> WRITE LEFTPAR output2 QUOTE exp . QUOTE RIGHTPAR SEMICOLON

    QUOTE           shift and go to state 165


state 154

    (35) declareRecursivoLocal -> type ID altaVarLocal declare2Local . declare3Local SEMICOLON declareRecursivoLocal
    (37) declare3Local -> . COMMA ID altaVarLocal declare3Local
    (41) declare3Local -> . empty
    (81) empty -> .

    COMMA           shift and go to state 166
    SEMICOLON       reduce using rule 81 (empty -> .)

    empty                          shift and go to state 167
    declare3Local                  shift and go to state 168

state 155

    (36) declare2Local -> array .

    COMMA           reduce using rule 36 (declare2Local -> array .)
    SEMICOLON       reduce using rule 36 (declare2Local -> array .)


state 156

    (40) declare2Local -> empty .
    (23) array -> empty .

  ! reduce/reduce conflict for COMMA resolved using rule 23 (array -> empty .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 23 (array -> empty .)
    COMMA           reduce using rule 23 (array -> empty .)
    SEMICOLON       reduce using rule 23 (array -> empty .)

  ! COMMA           [ reduce using rule 40 (declare2Local -> empty .) ]
  ! SEMICOLON       [ reduce using rule 40 (declare2Local -> empty .) ]


state 157

    (50) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY . est RIGHTKEY ELSE est RIGHTKEY
    (32) est -> . conditional
    (33) est -> . declareLocal
    (43) est -> . cycles
    (44) est -> . input
    (45) est -> . output
    (46) est -> . assignment
    (47) est -> . funct
    (48) est -> . empty
    (50) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (34) declareLocal -> . DECLARE declareRecursivoLocal
    (39) declareLocal -> . empty
    (53) cycles -> . while
    (54) cycles -> . for
    (55) cycles -> . do-while
    (80) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (77) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (49) assignment -> . ID ASSGN ID SEMICOLON
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (81) empty -> .
    (57) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (60) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (56) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 71
    DECLARE         shift and go to state 70
    READ            shift and go to state 59
    WRITE           shift and go to state 68
    ID              shift and go to state 69
    FUNCTION        shift and go to state 22
    RIGHTKEY        reduce using rule 81 (empty -> .)
    WHILE           shift and go to state 61
    FOR             shift and go to state 66
    DO              shift and go to state 57

    funct                          shift and go to state 58
    conditional                    shift and go to state 60
    do-while                       shift and go to state 62
    est                            shift and go to state 169
    for                            shift and go to state 64
    input                          shift and go to state 65
    empty                          shift and go to state 74
    assignment                     shift and go to state 67
    cycles                         shift and go to state 72
    while                          shift and go to state 73
    output                         shift and go to state 75
    declareLocal                   shift and go to state 76

state 158

    (75) arithmeticExp -> ID EQ ID arithmeticOp ID . arithmeticExp
    (75) arithmeticExp -> . ID EQ ID arithmeticOp ID arithmeticExp
    (76) arithmeticExp -> . empty
    (81) empty -> .

    ID              shift and go to state 86
    SEMICOLON       reduce using rule 81 (empty -> .)

    arithmeticExp                  shift and go to state 170
    empty                          shift and go to state 87

state 159

    (14) funct3 -> COMMA funct type ID . funct3
    (14) funct3 -> . COMMA funct type ID funct3
    (16) funct3 -> . empty
    (81) empty -> .

    COMMA           shift and go to state 108
    RIGHTPAR        reduce using rule 81 (empty -> .)

    funct3                         shift and go to state 171
    empty                          shift and go to state 109

state 160

    (56) do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR . while2 RIGHTPAR
    (58) while2 -> . exp while2
    (59) while2 -> . empty
    (67) exp -> . ID array exp2 SEMICOLON
    (81) empty -> .

    ID              shift and go to state 44
    RIGHTPAR        reduce using rule 81 (empty -> .)

    while2                         shift and go to state 172
    exp                            shift and go to state 113
    empty                          shift and go to state 114

state 161

    (57) while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY . est RIGHTKEY
    (32) est -> . conditional
    (33) est -> . declareLocal
    (43) est -> . cycles
    (44) est -> . input
    (45) est -> . output
    (46) est -> . assignment
    (47) est -> . funct
    (48) est -> . empty
    (50) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (34) declareLocal -> . DECLARE declareRecursivoLocal
    (39) declareLocal -> . empty
    (53) cycles -> . while
    (54) cycles -> . for
    (55) cycles -> . do-while
    (80) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (77) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (49) assignment -> . ID ASSGN ID SEMICOLON
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (81) empty -> .
    (57) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (60) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (56) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 71
    DECLARE         shift and go to state 70
    READ            shift and go to state 59
    WRITE           shift and go to state 68
    ID              shift and go to state 69
    FUNCTION        shift and go to state 22
    RIGHTKEY        reduce using rule 81 (empty -> .)
    WHILE           shift and go to state 61
    FOR             shift and go to state 66
    DO              shift and go to state 57

    funct                          shift and go to state 58
    conditional                    shift and go to state 60
    do-while                       shift and go to state 62
    est                            shift and go to state 173
    for                            shift and go to state 64
    input                          shift and go to state 65
    assignment                     shift and go to state 67
    cycles                         shift and go to state 72
    while                          shift and go to state 73
    empty                          shift and go to state 74
    output                         shift and go to state 75
    declareLocal                   shift and go to state 76

state 162

    (65) for3 -> exp for3 .

    SEMICOLON       reduce using rule 65 (for3 -> exp for3 .)


state 163

    (60) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON . ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY

    ID              shift and go to state 174


state 164

    (63) for2 -> ID ASSGN ID for2 .

    SEMICOLON       reduce using rule 63 (for2 -> ID ASSGN ID for2 .)


state 165

    (77) output -> WRITE LEFTPAR output2 QUOTE exp QUOTE . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 175


state 166

    (37) declare3Local -> COMMA . ID altaVarLocal declare3Local

    ID              shift and go to state 176


state 167

    (41) declare3Local -> empty .

    SEMICOLON       reduce using rule 41 (declare3Local -> empty .)


state 168

    (35) declareRecursivoLocal -> type ID altaVarLocal declare2Local declare3Local . SEMICOLON declareRecursivoLocal

    SEMICOLON       shift and go to state 177


state 169

    (50) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est . RIGHTKEY ELSE est RIGHTKEY

    RIGHTKEY        shift and go to state 178


state 170

    (75) arithmeticExp -> ID EQ ID arithmeticOp ID arithmeticExp .

    SEMICOLON       reduce using rule 75 (arithmeticExp -> ID EQ ID arithmeticOp ID arithmeticExp .)


state 171

    (14) funct3 -> COMMA funct type ID funct3 .

    RIGHTPAR        reduce using rule 14 (funct3 -> COMMA funct type ID funct3 .)


state 172

    (56) do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 . RIGHTPAR

    RIGHTPAR        shift and go to state 179


state 173

    (57) while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 180


state 174

    (60) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID . arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (61) arithmeticOp -> . SUM
    (62) arithmeticOp -> . MINUS

    SUM             shift and go to state 142
    MINUS           shift and go to state 143

    arithmeticOp                   shift and go to state 181

state 175

    (77) output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 182


state 176

    (37) declare3Local -> COMMA ID . altaVarLocal declare3Local
    (42) altaVarLocal -> .

    COMMA           reduce using rule 42 (altaVarLocal -> .)
    SEMICOLON       reduce using rule 42 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 183

state 177

    (35) declareRecursivoLocal -> type ID altaVarLocal declare2Local declare3Local SEMICOLON . declareRecursivoLocal
    (35) declareRecursivoLocal -> . type ID altaVarLocal declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (38) declareRecursivoLocal -> . empty
    (24) type -> . type2
    (81) empty -> .
    (25) type2 -> . INT
    (26) type2 -> . FLOAT
    (27) type2 -> . STRING
    (28) type2 -> . BOOL
    (29) type2 -> . VOID

    RIGHTKEY        reduce using rule 81 (empty -> .)
    INT             shift and go to state 14
    FLOAT           shift and go to state 16
    STRING          shift and go to state 13
    BOOL            shift and go to state 17
    VOID            shift and go to state 15

    declareRecursivoLocal          shift and go to state 184
    type2                          shift and go to state 21
    type                           shift and go to state 100
    empty                          shift and go to state 101

state 178

    (50) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY . ELSE est RIGHTKEY

    ELSE            shift and go to state 185


state 179

    (56) do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .

    RIGHTKEY        reduce using rule 56 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)


state 180

    (57) while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY .

    RIGHTKEY        reduce using rule 57 (while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY .)


state 181

    (60) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp . arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (61) arithmeticOp -> . SUM
    (62) arithmeticOp -> . MINUS

    SUM             shift and go to state 142
    MINUS           shift and go to state 143

    arithmeticOp                   shift and go to state 186

state 182

    (77) output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON .

    RIGHTKEY        reduce using rule 77 (output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON .)


state 183

    (37) declare3Local -> COMMA ID altaVarLocal . declare3Local
    (37) declare3Local -> . COMMA ID altaVarLocal declare3Local
    (41) declare3Local -> . empty
    (81) empty -> .

    COMMA           shift and go to state 166
    SEMICOLON       reduce using rule 81 (empty -> .)

    empty                          shift and go to state 167
    declare3Local                  shift and go to state 187

state 184

    (35) declareRecursivoLocal -> type ID altaVarLocal declare2Local declare3Local SEMICOLON declareRecursivoLocal .

    RIGHTKEY        reduce using rule 35 (declareRecursivoLocal -> type ID altaVarLocal declare2Local declare3Local SEMICOLON declareRecursivoLocal .)


state 185

    (50) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE . est RIGHTKEY
    (32) est -> . conditional
    (33) est -> . declareLocal
    (43) est -> . cycles
    (44) est -> . input
    (45) est -> . output
    (46) est -> . assignment
    (47) est -> . funct
    (48) est -> . empty
    (50) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (34) declareLocal -> . DECLARE declareRecursivoLocal
    (39) declareLocal -> . empty
    (53) cycles -> . while
    (54) cycles -> . for
    (55) cycles -> . do-while
    (80) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (77) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (49) assignment -> . ID ASSGN ID SEMICOLON
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (81) empty -> .
    (57) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (60) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (56) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 71
    DECLARE         shift and go to state 70
    READ            shift and go to state 59
    WRITE           shift and go to state 68
    ID              shift and go to state 69
    FUNCTION        shift and go to state 22
    RIGHTKEY        reduce using rule 81 (empty -> .)
    WHILE           shift and go to state 61
    FOR             shift and go to state 66
    DO              shift and go to state 57

    funct                          shift and go to state 58
    conditional                    shift and go to state 60
    do-while                       shift and go to state 62
    est                            shift and go to state 188
    for                            shift and go to state 64
    input                          shift and go to state 65
    empty                          shift and go to state 74
    assignment                     shift and go to state 67
    cycles                         shift and go to state 72
    while                          shift and go to state 73
    output                         shift and go to state 75
    declareLocal                   shift and go to state 76

state 186

    (60) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp . RIGHTPAR LEFTKEY est RIGHTKEY

    RIGHTPAR        shift and go to state 189


state 187

    (37) declare3Local -> COMMA ID altaVarLocal declare3Local .

    SEMICOLON       reduce using rule 37 (declare3Local -> COMMA ID altaVarLocal declare3Local .)


state 188

    (50) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est . RIGHTKEY

    RIGHTKEY        shift and go to state 190


state 189

    (60) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR . LEFTKEY est RIGHTKEY

    LEFTKEY         shift and go to state 191


state 190

    (50) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY .

    RIGHTKEY        reduce using rule 50 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY .)


state 191

    (60) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY . est RIGHTKEY
    (32) est -> . conditional
    (33) est -> . declareLocal
    (43) est -> . cycles
    (44) est -> . input
    (45) est -> . output
    (46) est -> . assignment
    (47) est -> . funct
    (48) est -> . empty
    (50) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (34) declareLocal -> . DECLARE declareRecursivoLocal
    (39) declareLocal -> . empty
    (53) cycles -> . while
    (54) cycles -> . for
    (55) cycles -> . do-while
    (80) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (77) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (49) assignment -> . ID ASSGN ID SEMICOLON
    (11) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (81) empty -> .
    (57) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (60) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (56) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 71
    DECLARE         shift and go to state 70
    READ            shift and go to state 59
    WRITE           shift and go to state 68
    ID              shift and go to state 69
    FUNCTION        shift and go to state 22
    RIGHTKEY        reduce using rule 81 (empty -> .)
    WHILE           shift and go to state 61
    FOR             shift and go to state 66
    DO              shift and go to state 57

    funct                          shift and go to state 58
    conditional                    shift and go to state 60
    do-while                       shift and go to state 62
    est                            shift and go to state 192
    for                            shift and go to state 64
    input                          shift and go to state 65
    assignment                     shift and go to state 67
    declareLocal                   shift and go to state 76
    while                          shift and go to state 73
    empty                          shift and go to state 74
    output                         shift and go to state 75
    cycles                         shift and go to state 72

state 192

    (60) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 193


state 193

    (60) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY .

    RIGHTKEY        reduce using rule 60 (for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 74 resolved using rule (declareLocal -> empty)
WARNING: rejected rule (est -> empty) in state 74
WARNING: reduce/reduce conflict in state 156 resolved using rule (array -> empty)
WARNING: rejected rule (declare2Local -> empty) in state 156
WARNING: Rule (est -> empty) is never reduced
WARNING: Rule (declare2Local -> empty) is never reduced
