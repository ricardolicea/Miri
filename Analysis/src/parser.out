Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    LESSEQ
    COLON
    GRTREQ
    CYCLE
    SPACE
    newline
    FLOATNUMB
    TYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON
Rule 2     goToMainQuad -> <empty>
Rule 3     altaPrograma -> <empty>
Rule 4     program2 -> declare program3
Rule 5     program2 -> empty
Rule 6     declare -> DECLARE declareRecursivo
Rule 7     declare -> empty
Rule 8     declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
Rule 9     declare2 -> array
Rule 10    declare3 -> COMMA ID altaVarGlobal declare3
Rule 11    program3 -> funct program3
Rule 12    funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
Rule 13    functReturn -> RETURN NUMBER SEMICOLON
Rule 14    functReturn -> RETURN ID SEMICOLON
Rule 15    functReturn -> empty
Rule 16    altaModulo -> <empty>
Rule 17    funct2 -> type ID altaVarLocal funct3
Rule 18    funct3 -> COMMA type ID altaVarLocal funct3
Rule 19    funct2 -> empty
Rule 20    funct3 -> empty
Rule 21    program3 -> empty
Rule 22    altaVarGlobal -> <empty>
Rule 23    declareRecursivo -> empty
Rule 24    declare3 -> empty
Rule 25    array -> LEFTBRACK exp RIGHTBRACK array
Rule 26    array -> empty
Rule 27    type -> type2
Rule 28    type2 -> INT
Rule 29    type2 -> FLOAT
Rule 30    type2 -> STRING
Rule 31    type2 -> BOOL
Rule 32    type2 -> VOID
Rule 33    cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY
Rule 34    altaModuloMain -> <empty>
Rule 35    est -> conditional est
Rule 36    est -> declareLocal est
Rule 37    est -> cycles est
Rule 38    est -> input est
Rule 39    est -> output est
Rule 40    est -> assignment est
Rule 41    est -> llamadaAFunct est
Rule 42    est -> empty
Rule 43    llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR
Rule 44    llamadaAFunct -> empty
Rule 45    llamadaAFunct2 -> ID llamadaAFunct3
Rule 46    llamadaAFunct3 -> COMMA ID
Rule 47    llamadaAFunct3 -> empty
Rule 48    llamadaAFunct2 -> empty
Rule 49    declareLocal -> DECLARE declareRecursivoLocal
Rule 50    declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
Rule 51    assignmentDecl -> ASSGN exp
Rule 52    number -> INTEGER number2
Rule 53    number2 -> DOT INTEGER
Rule 54    number2 -> empty
Rule 55    assignmentDecl -> empty
Rule 56    declare2Local -> array
Rule 57    declare3Local -> COMMA ID altaVarLocal assignmentDecl declare3Local
Rule 58    declareRecursivoLocal -> empty
Rule 59    declareLocal -> empty
Rule 60    declare2Local -> empty
Rule 61    declare3Local -> empty
Rule 62    altaVarLocal -> <empty>
Rule 63    assignment -> ID ASSGN exp SEMICOLON
Rule 64    assignment -> ID ASSGN llamadaAFunct SEMICOLON
Rule 65    assignment -> empty
Rule 66    conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
Rule 67    conditionalElse -> ELSE LEFTKEY est RIGHTKEY
Rule 68    conditionalElse -> empty
Rule 69    conditional2 -> exp conditional2
Rule 70    conditional2 -> empty
Rule 71    cycles -> while
Rule 72    cycles -> empty
Rule 73    cycles -> for
Rule 74    cycles -> do-while
Rule 75    do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR
Rule 76    while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
Rule 77    while2 -> exp while2
Rule 78    while2 -> empty
Rule 79    for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
Rule 80    for2 -> ID ASSGN number for3
Rule 81    for3 -> COMMA for2
Rule 82    for3 -> empty
Rule 83    for4 -> expFor
Rule 84    parte3For -> ID SUM SUM
Rule 85    parte3For -> ID MINUS MINUS
Rule 86    expFor -> ID expFor2
Rule 87    expFor -> number
Rule 88    expFor2 -> LESS expFor
Rule 89    expFor2 -> GRTR expFor
Rule 90    expFor2 -> EQ expFor
Rule 91    expFor2 -> NOTEQ expFor
Rule 92    expFor2 -> AND expFor
Rule 93    expFor2 -> OR expFor
Rule 94    expFor2 -> empty
Rule 95    exp -> ID exp2 generaCuad
Rule 96    generaCuad -> <empty>
Rule 97    exp -> number meteNum exp2
Rule 98    meteNum -> <empty>
Rule 99    exp -> empty
Rule 100   exp2 -> LESS exp
Rule 101   exp2 -> GRTR exp
Rule 102   exp2 -> EQ exp
Rule 103   exp2 -> NOTEQ exp
Rule 104   exp2 -> AND exp
Rule 105   exp2 -> OR exp
Rule 106   exp2 -> SUM meteOper exp
Rule 107   meteOper -> <empty>
Rule 108   exp2 -> MINUS meteOper exp
Rule 109   exp2 -> MULTP meteOper exp
Rule 110   exp2 -> DIVIDE meteOper exp
Rule 111   exp2 -> empty
Rule 112   output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
Rule 113   output2 -> ID output2
Rule 114   output2 -> QUOTE ID QUOTE output2
Rule 115   output2 -> empty
Rule 116   input -> READ LEFTPAR ID RIGHTPAR SEMICOLON
Rule 117   empty -> <empty>

Terminals, with rules where they appear

AND                  : 92 104
ASSGN                : 51 63 64 80
BOOL                 : 31
COLON                : 
COMMA                : 10 18 46 57 81
CYCLE                : 
DECLARE              : 6 49
DIVIDE               : 110
DO                   : 75
DOT                  : 53
ELSE                 : 67
END                  : 1
EQ                   : 90 102
FLOAT                : 29
FLOATNUMB            : 
FOR                  : 79
FUNCTION             : 12
GRTR                 : 89 101
GRTREQ               : 
ID                   : 1 8 10 12 14 17 18 43 45 46 50 57 63 64 80 84 85 86 95 113 114 116
IF                   : 66
INT                  : 28
INTEGER              : 52 53
LEFTBRACK            : 25
LEFTKEY              : 12 33 66 67 75 76 79
LEFTPAR              : 12 33 43 66 75 76 79 112 116
LESS                 : 88 100
LESSEQ               : 
MAIN                 : 33
MINUS                : 85 85 108
MULTP                : 109
NOTEQ                : 91 103
NUMBER               : 13
OR                   : 93 105
PROGRAM              : 1
QUOTE                : 114 114
READ                 : 116
RETURN               : 13 14
RIGHTBRACK           : 25
RIGHTKEY             : 12 33 66 67 75 76 79
RIGHTPAR             : 12 33 43 66 75 76 79 112 116
SEMICOLON            : 1 1 8 13 14 50 63 64 79 79 112 116
SPACE                : 
STRING               : 30
SUM                  : 84 84 106
TYPE                 : 
VOID                 : 32
WHILE                : 75 76
WRITE                : 112
error                : 
newline              : 

Nonterminals, with rules where they appear

altaModulo           : 12
altaModuloMain       : 33
altaPrograma         : 1
altaVarGlobal        : 8 10
altaVarLocal         : 17 18 50 57
array                : 9 25 56
assignment           : 40
assignmentDecl       : 8 50 57
conditional          : 35
conditional2         : 66 69
conditionalElse      : 66
cuerpo               : 1
cycles               : 37
declare              : 4
declare2             : 8
declare2Local        : 50
declare3             : 8 10
declare3Local        : 50 57
declareLocal         : 36
declareRecursivo     : 6 8
declareRecursivoLocal : 49 50
do-while             : 74
empty                : 5 7 15 19 20 21 23 24 26 42 44 47 48 54 55 58 59 60 61 65 68 70 72 78 82 94 99 111 115
est                  : 12 33 35 36 37 38 39 40 41 66 67 75 76 79
exp                  : 25 51 63 69 77 100 101 102 103 104 105 106 108 109 110
exp2                 : 95 97
expFor               : 83 88 89 90 91 92 93
expFor2              : 86
for                  : 73
for2                 : 79 81
for3                 : 80
for4                 : 79
funct                : 11
funct2               : 12
funct3               : 17 18
functReturn          : 12
generaCuad           : 95
goToMainQuad         : 1
input                : 38
llamadaAFunct        : 41 64
llamadaAFunct2       : 43
llamadaAFunct3       : 45
meteNum              : 97
meteOper             : 106 108 109 110
number               : 80 87 97
number2              : 52
output               : 39
output2              : 112 113 114
parte3For            : 79
program              : 0
program2             : 1
program3             : 4 11
type                 : 8 12 17 18 50
type2                : 27
while                : 71
while2               : 75 76 77

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON
    (3) altaPrograma -> .

    SEMICOLON       reduce using rule 3 (altaPrograma -> .)

    altaPrograma                   shift and go to state 4

state 4

    (1) program -> PROGRAM ID altaPrograma . SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON

    SEMICOLON       shift and go to state 5


state 5

    (1) program -> PROGRAM ID altaPrograma SEMICOLON . program2 goToMainQuad cuerpo END SEMICOLON
    (4) program2 -> . declare program3
    (5) program2 -> . empty
    (6) declare -> . DECLARE declareRecursivo
    (7) declare -> . empty
    (117) empty -> .

    DECLARE         shift and go to state 7
    MAIN            reduce using rule 117 (empty -> .)
    FUNCTION        reduce using rule 117 (empty -> .)

    program2                       shift and go to state 6
    declare                        shift and go to state 8
    empty                          shift and go to state 9

state 6

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 . goToMainQuad cuerpo END SEMICOLON
    (2) goToMainQuad -> .

    MAIN            reduce using rule 2 (goToMainQuad -> .)

    goToMainQuad                   shift and go to state 10

state 7

    (6) declare -> DECLARE . declareRecursivo
    (8) declareRecursivo -> . type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
    (23) declareRecursivo -> . empty
    (27) type -> . type2
    (117) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    FUNCTION        reduce using rule 117 (empty -> .)
    MAIN            reduce using rule 117 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    declareRecursivo               shift and go to state 16
    type                           shift and go to state 17
    empty                          shift and go to state 18
    type2                          shift and go to state 19

state 8

    (4) program2 -> declare . program3
    (11) program3 -> . funct program3
    (21) program3 -> . empty
    (12) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (117) empty -> .

    FUNCTION        shift and go to state 20
    MAIN            reduce using rule 117 (empty -> .)

    funct                          shift and go to state 21
    program3                       shift and go to state 22
    empty                          shift and go to state 23

state 9

    (5) program2 -> empty .
    (7) declare -> empty .

  ! reduce/reduce conflict for MAIN resolved using rule 5 (program2 -> empty .)
    MAIN            reduce using rule 5 (program2 -> empty .)
    FUNCTION        reduce using rule 7 (declare -> empty .)

  ! MAIN            [ reduce using rule 7 (declare -> empty .) ]


state 10

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad . cuerpo END SEMICOLON
    (33) cuerpo -> . MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY

    MAIN            shift and go to state 25

    cuerpo                         shift and go to state 24

state 11

    (30) type2 -> STRING .

    ID              reduce using rule 30 (type2 -> STRING .)


state 12

    (28) type2 -> INT .

    ID              reduce using rule 28 (type2 -> INT .)


state 13

    (32) type2 -> VOID .

    ID              reduce using rule 32 (type2 -> VOID .)


state 14

    (29) type2 -> FLOAT .

    ID              reduce using rule 29 (type2 -> FLOAT .)


state 15

    (31) type2 -> BOOL .

    ID              reduce using rule 31 (type2 -> BOOL .)


state 16

    (6) declare -> DECLARE declareRecursivo .

    FUNCTION        reduce using rule 6 (declare -> DECLARE declareRecursivo .)
    MAIN            reduce using rule 6 (declare -> DECLARE declareRecursivo .)


state 17

    (8) declareRecursivo -> type . ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo

    ID              shift and go to state 26


state 18

    (23) declareRecursivo -> empty .

    FUNCTION        reduce using rule 23 (declareRecursivo -> empty .)
    MAIN            reduce using rule 23 (declareRecursivo -> empty .)


state 19

    (27) type -> type2 .

    ID              reduce using rule 27 (type -> type2 .)


state 20

    (12) funct -> FUNCTION . type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (27) type -> . type2
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    type                           shift and go to state 27
    type2                          shift and go to state 19

state 21

    (11) program3 -> funct . program3
    (11) program3 -> . funct program3
    (21) program3 -> . empty
    (12) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (117) empty -> .

    FUNCTION        shift and go to state 20
    MAIN            reduce using rule 117 (empty -> .)

    program3                       shift and go to state 28
    funct                          shift and go to state 21
    empty                          shift and go to state 23

state 22

    (4) program2 -> declare program3 .

    MAIN            reduce using rule 4 (program2 -> declare program3 .)


state 23

    (21) program3 -> empty .

    MAIN            reduce using rule 21 (program3 -> empty .)


state 24

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo . END SEMICOLON

    END             shift and go to state 29


state 25

    (33) cuerpo -> MAIN . LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY

    LEFTPAR         shift and go to state 30


state 26

    (8) declareRecursivo -> type ID . altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
    (22) altaVarGlobal -> .

    ASSGN           reduce using rule 22 (altaVarGlobal -> .)
    LEFTBRACK       reduce using rule 22 (altaVarGlobal -> .)
    COMMA           reduce using rule 22 (altaVarGlobal -> .)
    SEMICOLON       reduce using rule 22 (altaVarGlobal -> .)

    altaVarGlobal                  shift and go to state 31

state 27

    (12) funct -> FUNCTION type . ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY

    ID              shift and go to state 32


state 28

    (11) program3 -> funct program3 .

    MAIN            reduce using rule 11 (program3 -> funct program3 .)


state 29

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END . SEMICOLON

    SEMICOLON       shift and go to state 33


state 30

    (33) cuerpo -> MAIN LEFTPAR . RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY

    RIGHTPAR        shift and go to state 34


state 31

    (8) declareRecursivo -> type ID altaVarGlobal . assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
    (51) assignmentDecl -> . ASSGN exp
    (55) assignmentDecl -> . empty
    (117) empty -> .

    ASSGN           shift and go to state 35
    LEFTBRACK       reduce using rule 117 (empty -> .)
    COMMA           reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)

    assignmentDecl                 shift and go to state 36
    empty                          shift and go to state 37

state 32

    (12) funct -> FUNCTION type ID . altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (16) altaModulo -> .

    LEFTPAR         reduce using rule 16 (altaModulo -> .)

    altaModulo                     shift and go to state 38

state 33

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON .

    $end            reduce using rule 1 (program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON .)


state 34

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR . LEFTKEY altaModuloMain est RIGHTKEY

    LEFTKEY         shift and go to state 39


state 35

    (51) assignmentDecl -> ASSGN . exp
    (95) exp -> . ID exp2 generaCuad
    (97) exp -> . number meteNum exp2
    (99) exp -> . empty
    (52) number -> . INTEGER number2
    (117) empty -> .

    ID              shift and go to state 43
    INTEGER         shift and go to state 42
    LEFTBRACK       reduce using rule 117 (empty -> .)
    COMMA           reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)

    number                         shift and go to state 40
    exp                            shift and go to state 41
    empty                          shift and go to state 44

state 36

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl . declare2 declare3 SEMICOLON declareRecursivo
    (9) declare2 -> . array
    (25) array -> . LEFTBRACK exp RIGHTBRACK array
    (26) array -> . empty
    (117) empty -> .

    LEFTBRACK       shift and go to state 45
    COMMA           reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)

    declare2                       shift and go to state 46
    array                          shift and go to state 47
    empty                          shift and go to state 48

state 37

    (55) assignmentDecl -> empty .

    LEFTBRACK       reduce using rule 55 (assignmentDecl -> empty .)
    COMMA           reduce using rule 55 (assignmentDecl -> empty .)
    SEMICOLON       reduce using rule 55 (assignmentDecl -> empty .)


state 38

    (12) funct -> FUNCTION type ID altaModulo . LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY

    LEFTPAR         shift and go to state 49


state 39

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY . altaModuloMain est RIGHTKEY
    (34) altaModuloMain -> .

    IF              reduce using rule 34 (altaModuloMain -> .)
    DECLARE         reduce using rule 34 (altaModuloMain -> .)
    READ            reduce using rule 34 (altaModuloMain -> .)
    WRITE           reduce using rule 34 (altaModuloMain -> .)
    ID              reduce using rule 34 (altaModuloMain -> .)
    WHILE           reduce using rule 34 (altaModuloMain -> .)
    FOR             reduce using rule 34 (altaModuloMain -> .)
    DO              reduce using rule 34 (altaModuloMain -> .)
    RIGHTKEY        reduce using rule 34 (altaModuloMain -> .)

    altaModuloMain                 shift and go to state 50

state 40

    (97) exp -> number . meteNum exp2
    (98) meteNum -> .

    LESS            reduce using rule 98 (meteNum -> .)
    GRTR            reduce using rule 98 (meteNum -> .)
    EQ              reduce using rule 98 (meteNum -> .)
    NOTEQ           reduce using rule 98 (meteNum -> .)
    AND             reduce using rule 98 (meteNum -> .)
    OR              reduce using rule 98 (meteNum -> .)
    SUM             reduce using rule 98 (meteNum -> .)
    MINUS           reduce using rule 98 (meteNum -> .)
    MULTP           reduce using rule 98 (meteNum -> .)
    DIVIDE          reduce using rule 98 (meteNum -> .)
    LEFTBRACK       reduce using rule 98 (meteNum -> .)
    COMMA           reduce using rule 98 (meteNum -> .)
    SEMICOLON       reduce using rule 98 (meteNum -> .)
    RIGHTBRACK      reduce using rule 98 (meteNum -> .)
    ID              reduce using rule 98 (meteNum -> .)
    INTEGER         reduce using rule 98 (meteNum -> .)
    RIGHTPAR        reduce using rule 98 (meteNum -> .)

    meteNum                        shift and go to state 51

state 41

    (51) assignmentDecl -> ASSGN exp .

    LEFTBRACK       reduce using rule 51 (assignmentDecl -> ASSGN exp .)
    COMMA           reduce using rule 51 (assignmentDecl -> ASSGN exp .)
    SEMICOLON       reduce using rule 51 (assignmentDecl -> ASSGN exp .)


state 42

    (52) number -> INTEGER . number2
    (53) number2 -> . DOT INTEGER
    (54) number2 -> . empty
    (117) empty -> .

    DOT             shift and go to state 54
    LESS            reduce using rule 117 (empty -> .)
    GRTR            reduce using rule 117 (empty -> .)
    EQ              reduce using rule 117 (empty -> .)
    NOTEQ           reduce using rule 117 (empty -> .)
    AND             reduce using rule 117 (empty -> .)
    OR              reduce using rule 117 (empty -> .)
    SUM             reduce using rule 117 (empty -> .)
    MINUS           reduce using rule 117 (empty -> .)
    MULTP           reduce using rule 117 (empty -> .)
    DIVIDE          reduce using rule 117 (empty -> .)
    LEFTBRACK       reduce using rule 117 (empty -> .)
    COMMA           reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)
    RIGHTBRACK      reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    INTEGER         reduce using rule 117 (empty -> .)
    RIGHTPAR        reduce using rule 117 (empty -> .)

    number2                        shift and go to state 52
    empty                          shift and go to state 53

state 43

    (95) exp -> ID . exp2 generaCuad
    (100) exp2 -> . LESS exp
    (101) exp2 -> . GRTR exp
    (102) exp2 -> . EQ exp
    (103) exp2 -> . NOTEQ exp
    (104) exp2 -> . AND exp
    (105) exp2 -> . OR exp
    (106) exp2 -> . SUM meteOper exp
    (108) exp2 -> . MINUS meteOper exp
    (109) exp2 -> . MULTP meteOper exp
    (110) exp2 -> . DIVIDE meteOper exp
    (111) exp2 -> . empty
    (117) empty -> .

    LESS            shift and go to state 57
    GRTR            shift and go to state 63
    EQ              shift and go to state 65
    NOTEQ           shift and go to state 58
    AND             shift and go to state 55
    OR              shift and go to state 61
    SUM             shift and go to state 60
    MINUS           shift and go to state 62
    MULTP           shift and go to state 64
    DIVIDE          shift and go to state 56
    LEFTBRACK       reduce using rule 117 (empty -> .)
    COMMA           reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)
    RIGHTBRACK      reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    INTEGER         reduce using rule 117 (empty -> .)
    RIGHTPAR        reduce using rule 117 (empty -> .)

    exp2                           shift and go to state 59
    empty                          shift and go to state 66

state 44

    (99) exp -> empty .

    LEFTBRACK       reduce using rule 99 (exp -> empty .)
    COMMA           reduce using rule 99 (exp -> empty .)
    SEMICOLON       reduce using rule 99 (exp -> empty .)
    RIGHTBRACK      reduce using rule 99 (exp -> empty .)
    ID              reduce using rule 99 (exp -> empty .)
    INTEGER         reduce using rule 99 (exp -> empty .)
    RIGHTPAR        reduce using rule 99 (exp -> empty .)


state 45

    (25) array -> LEFTBRACK . exp RIGHTBRACK array
    (95) exp -> . ID exp2 generaCuad
    (97) exp -> . number meteNum exp2
    (99) exp -> . empty
    (52) number -> . INTEGER number2
    (117) empty -> .

    ID              shift and go to state 43
    INTEGER         shift and go to state 42
    RIGHTBRACK      reduce using rule 117 (empty -> .)

    number                         shift and go to state 40
    exp                            shift and go to state 67
    empty                          shift and go to state 44

state 46

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 . declare3 SEMICOLON declareRecursivo
    (10) declare3 -> . COMMA ID altaVarGlobal declare3
    (24) declare3 -> . empty
    (117) empty -> .

    COMMA           shift and go to state 69
    SEMICOLON       reduce using rule 117 (empty -> .)

    declare3                       shift and go to state 68
    empty                          shift and go to state 70

state 47

    (9) declare2 -> array .

    COMMA           reduce using rule 9 (declare2 -> array .)
    SEMICOLON       reduce using rule 9 (declare2 -> array .)


state 48

    (26) array -> empty .

    COMMA           reduce using rule 26 (array -> empty .)
    SEMICOLON       reduce using rule 26 (array -> empty .)


state 49

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR . funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (17) funct2 -> . type ID altaVarLocal funct3
    (19) funct2 -> . empty
    (27) type -> . type2
    (117) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    RIGHTPAR        reduce using rule 117 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    funct2                         shift and go to state 71
    type                           shift and go to state 72
    empty                          shift and go to state 73
    type2                          shift and go to state 19

state 50

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain . est RIGHTKEY
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (66) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (71) cycles -> . while
    (72) cycles -> . empty
    (73) cycles -> . for
    (74) cycles -> . do-while
    (116) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (112) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID ASSGN exp SEMICOLON
    (64) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (65) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (117) empty -> .
    (76) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (79) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (75) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 88
    DECLARE         shift and go to state 87
    READ            shift and go to state 75
    WRITE           shift and go to state 85
    ID              shift and go to state 86
    RIGHTKEY        reduce using rule 117 (empty -> .)
    WHILE           shift and go to state 77
    FOR             shift and go to state 83
    DO              shift and go to state 74

  ! IF              [ reduce using rule 117 (empty -> .) ]
  ! DECLARE         [ reduce using rule 117 (empty -> .) ]
  ! READ            [ reduce using rule 117 (empty -> .) ]
  ! WRITE           [ reduce using rule 117 (empty -> .) ]
  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! WHILE           [ reduce using rule 117 (empty -> .) ]
  ! FOR             [ reduce using rule 117 (empty -> .) ]
  ! DO              [ reduce using rule 117 (empty -> .) ]

    conditional                    shift and go to state 76
    do-while                       shift and go to state 78
    est                            shift and go to state 79
    for                            shift and go to state 80
    llamadaAFunct                  shift and go to state 81
    input                          shift and go to state 82
    assignment                     shift and go to state 84
    cycles                         shift and go to state 89
    while                          shift and go to state 90
    empty                          shift and go to state 91
    output                         shift and go to state 92
    declareLocal                   shift and go to state 93

state 51

    (97) exp -> number meteNum . exp2
    (100) exp2 -> . LESS exp
    (101) exp2 -> . GRTR exp
    (102) exp2 -> . EQ exp
    (103) exp2 -> . NOTEQ exp
    (104) exp2 -> . AND exp
    (105) exp2 -> . OR exp
    (106) exp2 -> . SUM meteOper exp
    (108) exp2 -> . MINUS meteOper exp
    (109) exp2 -> . MULTP meteOper exp
    (110) exp2 -> . DIVIDE meteOper exp
    (111) exp2 -> . empty
    (117) empty -> .

    LESS            shift and go to state 57
    GRTR            shift and go to state 63
    EQ              shift and go to state 65
    NOTEQ           shift and go to state 58
    AND             shift and go to state 55
    OR              shift and go to state 61
    SUM             shift and go to state 60
    MINUS           shift and go to state 62
    MULTP           shift and go to state 64
    DIVIDE          shift and go to state 56
    LEFTBRACK       reduce using rule 117 (empty -> .)
    COMMA           reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)
    RIGHTBRACK      reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    INTEGER         reduce using rule 117 (empty -> .)
    RIGHTPAR        reduce using rule 117 (empty -> .)

    exp2                           shift and go to state 94
    empty                          shift and go to state 66

state 52

    (52) number -> INTEGER number2 .

    COMMA           reduce using rule 52 (number -> INTEGER number2 .)
    SEMICOLON       reduce using rule 52 (number -> INTEGER number2 .)
    LESS            reduce using rule 52 (number -> INTEGER number2 .)
    GRTR            reduce using rule 52 (number -> INTEGER number2 .)
    EQ              reduce using rule 52 (number -> INTEGER number2 .)
    NOTEQ           reduce using rule 52 (number -> INTEGER number2 .)
    AND             reduce using rule 52 (number -> INTEGER number2 .)
    OR              reduce using rule 52 (number -> INTEGER number2 .)
    SUM             reduce using rule 52 (number -> INTEGER number2 .)
    MINUS           reduce using rule 52 (number -> INTEGER number2 .)
    MULTP           reduce using rule 52 (number -> INTEGER number2 .)
    DIVIDE          reduce using rule 52 (number -> INTEGER number2 .)
    RIGHTBRACK      reduce using rule 52 (number -> INTEGER number2 .)
    LEFTBRACK       reduce using rule 52 (number -> INTEGER number2 .)
    ID              reduce using rule 52 (number -> INTEGER number2 .)
    INTEGER         reduce using rule 52 (number -> INTEGER number2 .)
    RIGHTPAR        reduce using rule 52 (number -> INTEGER number2 .)


state 53

    (54) number2 -> empty .

    LESS            reduce using rule 54 (number2 -> empty .)
    GRTR            reduce using rule 54 (number2 -> empty .)
    EQ              reduce using rule 54 (number2 -> empty .)
    NOTEQ           reduce using rule 54 (number2 -> empty .)
    AND             reduce using rule 54 (number2 -> empty .)
    OR              reduce using rule 54 (number2 -> empty .)
    SUM             reduce using rule 54 (number2 -> empty .)
    MINUS           reduce using rule 54 (number2 -> empty .)
    MULTP           reduce using rule 54 (number2 -> empty .)
    DIVIDE          reduce using rule 54 (number2 -> empty .)
    LEFTBRACK       reduce using rule 54 (number2 -> empty .)
    COMMA           reduce using rule 54 (number2 -> empty .)
    SEMICOLON       reduce using rule 54 (number2 -> empty .)
    RIGHTBRACK      reduce using rule 54 (number2 -> empty .)
    ID              reduce using rule 54 (number2 -> empty .)
    INTEGER         reduce using rule 54 (number2 -> empty .)
    RIGHTPAR        reduce using rule 54 (number2 -> empty .)


state 54

    (53) number2 -> DOT . INTEGER

    INTEGER         shift and go to state 95


state 55

    (104) exp2 -> AND . exp
    (95) exp -> . ID exp2 generaCuad
    (97) exp -> . number meteNum exp2
    (99) exp -> . empty
    (52) number -> . INTEGER number2
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    INTEGER         shift and go to state 42
    LEFTBRACK       reduce using rule 117 (empty -> .)
    COMMA           reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)
    RIGHTBRACK      reduce using rule 117 (empty -> .)
    RIGHTPAR        reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! INTEGER         [ reduce using rule 117 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 96
    empty                          shift and go to state 44

state 56

    (110) exp2 -> DIVIDE . meteOper exp
    (107) meteOper -> .

    ID              reduce using rule 107 (meteOper -> .)
    INTEGER         reduce using rule 107 (meteOper -> .)
    LEFTBRACK       reduce using rule 107 (meteOper -> .)
    COMMA           reduce using rule 107 (meteOper -> .)
    SEMICOLON       reduce using rule 107 (meteOper -> .)
    RIGHTBRACK      reduce using rule 107 (meteOper -> .)
    RIGHTPAR        reduce using rule 107 (meteOper -> .)

    meteOper                       shift and go to state 97

state 57

    (100) exp2 -> LESS . exp
    (95) exp -> . ID exp2 generaCuad
    (97) exp -> . number meteNum exp2
    (99) exp -> . empty
    (52) number -> . INTEGER number2
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    INTEGER         shift and go to state 42
    LEFTBRACK       reduce using rule 117 (empty -> .)
    COMMA           reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)
    RIGHTBRACK      reduce using rule 117 (empty -> .)
    RIGHTPAR        reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! INTEGER         [ reduce using rule 117 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 98
    empty                          shift and go to state 44

state 58

    (103) exp2 -> NOTEQ . exp
    (95) exp -> . ID exp2 generaCuad
    (97) exp -> . number meteNum exp2
    (99) exp -> . empty
    (52) number -> . INTEGER number2
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    INTEGER         shift and go to state 42
    LEFTBRACK       reduce using rule 117 (empty -> .)
    COMMA           reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)
    RIGHTBRACK      reduce using rule 117 (empty -> .)
    RIGHTPAR        reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! INTEGER         [ reduce using rule 117 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 99
    empty                          shift and go to state 44

state 59

    (95) exp -> ID exp2 . generaCuad
    (96) generaCuad -> .

    LEFTBRACK       reduce using rule 96 (generaCuad -> .)
    COMMA           reduce using rule 96 (generaCuad -> .)
    SEMICOLON       reduce using rule 96 (generaCuad -> .)
    RIGHTBRACK      reduce using rule 96 (generaCuad -> .)
    ID              reduce using rule 96 (generaCuad -> .)
    INTEGER         reduce using rule 96 (generaCuad -> .)
    RIGHTPAR        reduce using rule 96 (generaCuad -> .)

    generaCuad                     shift and go to state 100

state 60

    (106) exp2 -> SUM . meteOper exp
    (107) meteOper -> .

    ID              reduce using rule 107 (meteOper -> .)
    INTEGER         reduce using rule 107 (meteOper -> .)
    LEFTBRACK       reduce using rule 107 (meteOper -> .)
    COMMA           reduce using rule 107 (meteOper -> .)
    SEMICOLON       reduce using rule 107 (meteOper -> .)
    RIGHTBRACK      reduce using rule 107 (meteOper -> .)
    RIGHTPAR        reduce using rule 107 (meteOper -> .)

    meteOper                       shift and go to state 101

state 61

    (105) exp2 -> OR . exp
    (95) exp -> . ID exp2 generaCuad
    (97) exp -> . number meteNum exp2
    (99) exp -> . empty
    (52) number -> . INTEGER number2
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    INTEGER         shift and go to state 42
    LEFTBRACK       reduce using rule 117 (empty -> .)
    COMMA           reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)
    RIGHTBRACK      reduce using rule 117 (empty -> .)
    RIGHTPAR        reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! INTEGER         [ reduce using rule 117 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 102
    empty                          shift and go to state 44

state 62

    (108) exp2 -> MINUS . meteOper exp
    (107) meteOper -> .

    ID              reduce using rule 107 (meteOper -> .)
    INTEGER         reduce using rule 107 (meteOper -> .)
    LEFTBRACK       reduce using rule 107 (meteOper -> .)
    COMMA           reduce using rule 107 (meteOper -> .)
    SEMICOLON       reduce using rule 107 (meteOper -> .)
    RIGHTBRACK      reduce using rule 107 (meteOper -> .)
    RIGHTPAR        reduce using rule 107 (meteOper -> .)

    meteOper                       shift and go to state 103

state 63

    (101) exp2 -> GRTR . exp
    (95) exp -> . ID exp2 generaCuad
    (97) exp -> . number meteNum exp2
    (99) exp -> . empty
    (52) number -> . INTEGER number2
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    INTEGER         shift and go to state 42
    LEFTBRACK       reduce using rule 117 (empty -> .)
    COMMA           reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)
    RIGHTBRACK      reduce using rule 117 (empty -> .)
    RIGHTPAR        reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! INTEGER         [ reduce using rule 117 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 104
    empty                          shift and go to state 44

state 64

    (109) exp2 -> MULTP . meteOper exp
    (107) meteOper -> .

    ID              reduce using rule 107 (meteOper -> .)
    INTEGER         reduce using rule 107 (meteOper -> .)
    LEFTBRACK       reduce using rule 107 (meteOper -> .)
    COMMA           reduce using rule 107 (meteOper -> .)
    SEMICOLON       reduce using rule 107 (meteOper -> .)
    RIGHTBRACK      reduce using rule 107 (meteOper -> .)
    RIGHTPAR        reduce using rule 107 (meteOper -> .)

    meteOper                       shift and go to state 105

state 65

    (102) exp2 -> EQ . exp
    (95) exp -> . ID exp2 generaCuad
    (97) exp -> . number meteNum exp2
    (99) exp -> . empty
    (52) number -> . INTEGER number2
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    INTEGER         shift and go to state 42
    LEFTBRACK       reduce using rule 117 (empty -> .)
    COMMA           reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)
    RIGHTBRACK      reduce using rule 117 (empty -> .)
    RIGHTPAR        reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! INTEGER         [ reduce using rule 117 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 106
    empty                          shift and go to state 44

state 66

    (111) exp2 -> empty .

    LEFTBRACK       reduce using rule 111 (exp2 -> empty .)
    COMMA           reduce using rule 111 (exp2 -> empty .)
    SEMICOLON       reduce using rule 111 (exp2 -> empty .)
    RIGHTBRACK      reduce using rule 111 (exp2 -> empty .)
    ID              reduce using rule 111 (exp2 -> empty .)
    INTEGER         reduce using rule 111 (exp2 -> empty .)
    RIGHTPAR        reduce using rule 111 (exp2 -> empty .)


state 67

    (25) array -> LEFTBRACK exp . RIGHTBRACK array

    RIGHTBRACK      shift and go to state 107


state 68

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 . SEMICOLON declareRecursivo

    SEMICOLON       shift and go to state 108


state 69

    (10) declare3 -> COMMA . ID altaVarGlobal declare3

    ID              shift and go to state 109


state 70

    (24) declare3 -> empty .

    SEMICOLON       reduce using rule 24 (declare3 -> empty .)


state 71

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 . RIGHTPAR LEFTKEY est functReturn RIGHTKEY

    RIGHTPAR        shift and go to state 110


state 72

    (17) funct2 -> type . ID altaVarLocal funct3

    ID              shift and go to state 111


state 73

    (19) funct2 -> empty .

    RIGHTPAR        reduce using rule 19 (funct2 -> empty .)


state 74

    (75) do-while -> DO . LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    LEFTKEY         shift and go to state 112


state 75

    (116) input -> READ . LEFTPAR ID RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 113


state 76

    (35) est -> conditional . est
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (66) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (71) cycles -> . while
    (72) cycles -> . empty
    (73) cycles -> . for
    (74) cycles -> . do-while
    (116) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (112) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID ASSGN exp SEMICOLON
    (64) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (65) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (117) empty -> .
    (76) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (79) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (75) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 88
    DECLARE         shift and go to state 87
    READ            shift and go to state 75
    WRITE           shift and go to state 85
    ID              shift and go to state 86
    RIGHTKEY        reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    WHILE           shift and go to state 77
    FOR             shift and go to state 83
    DO              shift and go to state 74

  ! IF              [ reduce using rule 117 (empty -> .) ]
  ! DECLARE         [ reduce using rule 117 (empty -> .) ]
  ! READ            [ reduce using rule 117 (empty -> .) ]
  ! WRITE           [ reduce using rule 117 (empty -> .) ]
  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! WHILE           [ reduce using rule 117 (empty -> .) ]
  ! FOR             [ reduce using rule 117 (empty -> .) ]
  ! DO              [ reduce using rule 117 (empty -> .) ]

    conditional                    shift and go to state 76
    do-while                       shift and go to state 78
    est                            shift and go to state 114
    for                            shift and go to state 80
    llamadaAFunct                  shift and go to state 81
    input                          shift and go to state 82
    assignment                     shift and go to state 84
    cycles                         shift and go to state 89
    while                          shift and go to state 90
    empty                          shift and go to state 91
    output                         shift and go to state 92
    declareLocal                   shift and go to state 93

state 77

    (76) while -> WHILE . LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY

    LEFTPAR         shift and go to state 115


state 78

    (74) cycles -> do-while .

    IF              reduce using rule 74 (cycles -> do-while .)
    DECLARE         reduce using rule 74 (cycles -> do-while .)
    READ            reduce using rule 74 (cycles -> do-while .)
    WRITE           reduce using rule 74 (cycles -> do-while .)
    ID              reduce using rule 74 (cycles -> do-while .)
    WHILE           reduce using rule 74 (cycles -> do-while .)
    FOR             reduce using rule 74 (cycles -> do-while .)
    DO              reduce using rule 74 (cycles -> do-while .)
    RIGHTKEY        reduce using rule 74 (cycles -> do-while .)
    RETURN          reduce using rule 74 (cycles -> do-while .)


state 79

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est . RIGHTKEY

    RIGHTKEY        shift and go to state 116


state 80

    (73) cycles -> for .

    IF              reduce using rule 73 (cycles -> for .)
    DECLARE         reduce using rule 73 (cycles -> for .)
    READ            reduce using rule 73 (cycles -> for .)
    WRITE           reduce using rule 73 (cycles -> for .)
    ID              reduce using rule 73 (cycles -> for .)
    WHILE           reduce using rule 73 (cycles -> for .)
    FOR             reduce using rule 73 (cycles -> for .)
    DO              reduce using rule 73 (cycles -> for .)
    RIGHTKEY        reduce using rule 73 (cycles -> for .)
    RETURN          reduce using rule 73 (cycles -> for .)


state 81

    (41) est -> llamadaAFunct . est
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (66) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (71) cycles -> . while
    (72) cycles -> . empty
    (73) cycles -> . for
    (74) cycles -> . do-while
    (116) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (112) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID ASSGN exp SEMICOLON
    (64) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (65) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (117) empty -> .
    (76) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (79) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (75) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 88
    DECLARE         shift and go to state 87
    READ            shift and go to state 75
    WRITE           shift and go to state 85
    ID              shift and go to state 86
    RIGHTKEY        reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    WHILE           shift and go to state 77
    FOR             shift and go to state 83
    DO              shift and go to state 74

  ! IF              [ reduce using rule 117 (empty -> .) ]
  ! DECLARE         [ reduce using rule 117 (empty -> .) ]
  ! READ            [ reduce using rule 117 (empty -> .) ]
  ! WRITE           [ reduce using rule 117 (empty -> .) ]
  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! WHILE           [ reduce using rule 117 (empty -> .) ]
  ! FOR             [ reduce using rule 117 (empty -> .) ]
  ! DO              [ reduce using rule 117 (empty -> .) ]

    conditional                    shift and go to state 76
    do-while                       shift and go to state 78
    est                            shift and go to state 117
    for                            shift and go to state 80
    llamadaAFunct                  shift and go to state 81
    input                          shift and go to state 82
    assignment                     shift and go to state 84
    cycles                         shift and go to state 89
    while                          shift and go to state 90
    empty                          shift and go to state 91
    output                         shift and go to state 92
    declareLocal                   shift and go to state 93

state 82

    (38) est -> input . est
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (66) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (71) cycles -> . while
    (72) cycles -> . empty
    (73) cycles -> . for
    (74) cycles -> . do-while
    (116) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (112) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID ASSGN exp SEMICOLON
    (64) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (65) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (117) empty -> .
    (76) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (79) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (75) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 88
    DECLARE         shift and go to state 87
    READ            shift and go to state 75
    WRITE           shift and go to state 85
    ID              shift and go to state 86
    RIGHTKEY        reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    WHILE           shift and go to state 77
    FOR             shift and go to state 83
    DO              shift and go to state 74

  ! IF              [ reduce using rule 117 (empty -> .) ]
  ! DECLARE         [ reduce using rule 117 (empty -> .) ]
  ! READ            [ reduce using rule 117 (empty -> .) ]
  ! WRITE           [ reduce using rule 117 (empty -> .) ]
  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! WHILE           [ reduce using rule 117 (empty -> .) ]
  ! FOR             [ reduce using rule 117 (empty -> .) ]
  ! DO              [ reduce using rule 117 (empty -> .) ]

    conditional                    shift and go to state 76
    do-while                       shift and go to state 78
    est                            shift and go to state 118
    for                            shift and go to state 80
    llamadaAFunct                  shift and go to state 81
    input                          shift and go to state 82
    assignment                     shift and go to state 84
    cycles                         shift and go to state 89
    while                          shift and go to state 90
    empty                          shift and go to state 91
    output                         shift and go to state 92
    declareLocal                   shift and go to state 93

state 83

    (79) for -> FOR . LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY

    LEFTPAR         shift and go to state 119


state 84

    (40) est -> assignment . est
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (66) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (71) cycles -> . while
    (72) cycles -> . empty
    (73) cycles -> . for
    (74) cycles -> . do-while
    (116) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (112) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID ASSGN exp SEMICOLON
    (64) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (65) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (117) empty -> .
    (76) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (79) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (75) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 88
    DECLARE         shift and go to state 87
    READ            shift and go to state 75
    WRITE           shift and go to state 85
    ID              shift and go to state 86
    RIGHTKEY        reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    WHILE           shift and go to state 77
    FOR             shift and go to state 83
    DO              shift and go to state 74

  ! IF              [ reduce using rule 117 (empty -> .) ]
  ! DECLARE         [ reduce using rule 117 (empty -> .) ]
  ! READ            [ reduce using rule 117 (empty -> .) ]
  ! WRITE           [ reduce using rule 117 (empty -> .) ]
  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! WHILE           [ reduce using rule 117 (empty -> .) ]
  ! FOR             [ reduce using rule 117 (empty -> .) ]
  ! DO              [ reduce using rule 117 (empty -> .) ]

    conditional                    shift and go to state 76
    do-while                       shift and go to state 78
    est                            shift and go to state 120
    for                            shift and go to state 80
    llamadaAFunct                  shift and go to state 81
    input                          shift and go to state 82
    assignment                     shift and go to state 84
    cycles                         shift and go to state 89
    while                          shift and go to state 90
    empty                          shift and go to state 91
    output                         shift and go to state 92
    declareLocal                   shift and go to state 93

state 85

    (112) output -> WRITE . LEFTPAR output2 RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 121


state 86

    (63) assignment -> ID . ASSGN exp SEMICOLON
    (64) assignment -> ID . ASSGN llamadaAFunct SEMICOLON
    (43) llamadaAFunct -> ID . LEFTPAR llamadaAFunct2 RIGHTPAR

    ASSGN           shift and go to state 122
    LEFTPAR         shift and go to state 123


state 87

    (49) declareLocal -> DECLARE . declareRecursivoLocal
    (50) declareRecursivoLocal -> . type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (58) declareRecursivoLocal -> . empty
    (27) type -> . type2
    (117) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    IF              reduce using rule 117 (empty -> .)
    DECLARE         reduce using rule 117 (empty -> .)
    READ            reduce using rule 117 (empty -> .)
    WRITE           reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    FOR             reduce using rule 117 (empty -> .)
    DO              reduce using rule 117 (empty -> .)
    RIGHTKEY        reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    declareRecursivoLocal          shift and go to state 124
    type2                          shift and go to state 19
    type                           shift and go to state 125
    empty                          shift and go to state 126

state 88

    (66) conditional -> IF . LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse

    LEFTPAR         shift and go to state 127


state 89

    (37) est -> cycles . est
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (66) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (71) cycles -> . while
    (72) cycles -> . empty
    (73) cycles -> . for
    (74) cycles -> . do-while
    (116) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (112) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID ASSGN exp SEMICOLON
    (64) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (65) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (117) empty -> .
    (76) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (79) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (75) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 88
    DECLARE         shift and go to state 87
    READ            shift and go to state 75
    WRITE           shift and go to state 85
    ID              shift and go to state 86
    RIGHTKEY        reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    WHILE           shift and go to state 77
    FOR             shift and go to state 83
    DO              shift and go to state 74

  ! IF              [ reduce using rule 117 (empty -> .) ]
  ! DECLARE         [ reduce using rule 117 (empty -> .) ]
  ! READ            [ reduce using rule 117 (empty -> .) ]
  ! WRITE           [ reduce using rule 117 (empty -> .) ]
  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! WHILE           [ reduce using rule 117 (empty -> .) ]
  ! FOR             [ reduce using rule 117 (empty -> .) ]
  ! DO              [ reduce using rule 117 (empty -> .) ]

    conditional                    shift and go to state 76
    do-while                       shift and go to state 78
    est                            shift and go to state 128
    for                            shift and go to state 80
    llamadaAFunct                  shift and go to state 81
    input                          shift and go to state 82
    assignment                     shift and go to state 84
    cycles                         shift and go to state 89
    while                          shift and go to state 90
    empty                          shift and go to state 91
    output                         shift and go to state 92
    declareLocal                   shift and go to state 93

state 90

    (71) cycles -> while .

    IF              reduce using rule 71 (cycles -> while .)
    DECLARE         reduce using rule 71 (cycles -> while .)
    READ            reduce using rule 71 (cycles -> while .)
    WRITE           reduce using rule 71 (cycles -> while .)
    ID              reduce using rule 71 (cycles -> while .)
    WHILE           reduce using rule 71 (cycles -> while .)
    FOR             reduce using rule 71 (cycles -> while .)
    DO              reduce using rule 71 (cycles -> while .)
    RIGHTKEY        reduce using rule 71 (cycles -> while .)
    RETURN          reduce using rule 71 (cycles -> while .)


state 91

    (42) est -> empty .
    (59) declareLocal -> empty .
    (72) cycles -> empty .
    (65) assignment -> empty .
    (44) llamadaAFunct -> empty .

  ! reduce/reduce conflict for RIGHTKEY resolved using rule 42 (est -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 42 (est -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for DECLARE resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for READ resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for WRITE resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for DO resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 42 (est -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 42 (est -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for DECLARE resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for READ resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for WRITE resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for DO resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 42 (est -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 42 (est -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 44 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for DECLARE resolved using rule 44 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for READ resolved using rule 44 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for WRITE resolved using rule 44 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 44 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 44 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 44 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for DO resolved using rule 44 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 42 (est -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 42 (est -> empty .)
    RIGHTKEY        reduce using rule 42 (est -> empty .)
    RETURN          reduce using rule 42 (est -> empty .)
    IF              reduce using rule 44 (llamadaAFunct -> empty .)
    DECLARE         reduce using rule 44 (llamadaAFunct -> empty .)
    READ            reduce using rule 44 (llamadaAFunct -> empty .)
    WRITE           reduce using rule 44 (llamadaAFunct -> empty .)
    ID              reduce using rule 44 (llamadaAFunct -> empty .)
    WHILE           reduce using rule 44 (llamadaAFunct -> empty .)
    FOR             reduce using rule 44 (llamadaAFunct -> empty .)
    DO              reduce using rule 44 (llamadaAFunct -> empty .)

  ! IF              [ reduce using rule 59 (declareLocal -> empty .) ]
  ! DECLARE         [ reduce using rule 59 (declareLocal -> empty .) ]
  ! READ            [ reduce using rule 59 (declareLocal -> empty .) ]
  ! WRITE           [ reduce using rule 59 (declareLocal -> empty .) ]
  ! ID              [ reduce using rule 59 (declareLocal -> empty .) ]
  ! WHILE           [ reduce using rule 59 (declareLocal -> empty .) ]
  ! FOR             [ reduce using rule 59 (declareLocal -> empty .) ]
  ! DO              [ reduce using rule 59 (declareLocal -> empty .) ]
  ! RIGHTKEY        [ reduce using rule 59 (declareLocal -> empty .) ]
  ! RETURN          [ reduce using rule 59 (declareLocal -> empty .) ]
  ! IF              [ reduce using rule 72 (cycles -> empty .) ]
  ! DECLARE         [ reduce using rule 72 (cycles -> empty .) ]
  ! READ            [ reduce using rule 72 (cycles -> empty .) ]
  ! WRITE           [ reduce using rule 72 (cycles -> empty .) ]
  ! ID              [ reduce using rule 72 (cycles -> empty .) ]
  ! WHILE           [ reduce using rule 72 (cycles -> empty .) ]
  ! FOR             [ reduce using rule 72 (cycles -> empty .) ]
  ! DO              [ reduce using rule 72 (cycles -> empty .) ]
  ! RIGHTKEY        [ reduce using rule 72 (cycles -> empty .) ]
  ! RETURN          [ reduce using rule 72 (cycles -> empty .) ]
  ! IF              [ reduce using rule 65 (assignment -> empty .) ]
  ! DECLARE         [ reduce using rule 65 (assignment -> empty .) ]
  ! READ            [ reduce using rule 65 (assignment -> empty .) ]
  ! WRITE           [ reduce using rule 65 (assignment -> empty .) ]
  ! ID              [ reduce using rule 65 (assignment -> empty .) ]
  ! WHILE           [ reduce using rule 65 (assignment -> empty .) ]
  ! FOR             [ reduce using rule 65 (assignment -> empty .) ]
  ! DO              [ reduce using rule 65 (assignment -> empty .) ]
  ! RIGHTKEY        [ reduce using rule 65 (assignment -> empty .) ]
  ! RETURN          [ reduce using rule 65 (assignment -> empty .) ]
  ! RIGHTKEY        [ reduce using rule 44 (llamadaAFunct -> empty .) ]
  ! RETURN          [ reduce using rule 44 (llamadaAFunct -> empty .) ]


state 92

    (39) est -> output . est
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (66) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (71) cycles -> . while
    (72) cycles -> . empty
    (73) cycles -> . for
    (74) cycles -> . do-while
    (116) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (112) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID ASSGN exp SEMICOLON
    (64) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (65) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (117) empty -> .
    (76) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (79) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (75) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 88
    DECLARE         shift and go to state 87
    READ            shift and go to state 75
    WRITE           shift and go to state 85
    ID              shift and go to state 86
    RIGHTKEY        reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    WHILE           shift and go to state 77
    FOR             shift and go to state 83
    DO              shift and go to state 74

  ! IF              [ reduce using rule 117 (empty -> .) ]
  ! DECLARE         [ reduce using rule 117 (empty -> .) ]
  ! READ            [ reduce using rule 117 (empty -> .) ]
  ! WRITE           [ reduce using rule 117 (empty -> .) ]
  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! WHILE           [ reduce using rule 117 (empty -> .) ]
  ! FOR             [ reduce using rule 117 (empty -> .) ]
  ! DO              [ reduce using rule 117 (empty -> .) ]

    conditional                    shift and go to state 76
    do-while                       shift and go to state 78
    est                            shift and go to state 129
    for                            shift and go to state 80
    llamadaAFunct                  shift and go to state 81
    input                          shift and go to state 82
    assignment                     shift and go to state 84
    cycles                         shift and go to state 89
    while                          shift and go to state 90
    empty                          shift and go to state 91
    output                         shift and go to state 92
    declareLocal                   shift and go to state 93

state 93

    (36) est -> declareLocal . est
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (66) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (71) cycles -> . while
    (72) cycles -> . empty
    (73) cycles -> . for
    (74) cycles -> . do-while
    (116) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (112) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID ASSGN exp SEMICOLON
    (64) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (65) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (117) empty -> .
    (76) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (79) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (75) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 88
    DECLARE         shift and go to state 87
    READ            shift and go to state 75
    WRITE           shift and go to state 85
    ID              shift and go to state 86
    RIGHTKEY        reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    WHILE           shift and go to state 77
    FOR             shift and go to state 83
    DO              shift and go to state 74

  ! IF              [ reduce using rule 117 (empty -> .) ]
  ! DECLARE         [ reduce using rule 117 (empty -> .) ]
  ! READ            [ reduce using rule 117 (empty -> .) ]
  ! WRITE           [ reduce using rule 117 (empty -> .) ]
  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! WHILE           [ reduce using rule 117 (empty -> .) ]
  ! FOR             [ reduce using rule 117 (empty -> .) ]
  ! DO              [ reduce using rule 117 (empty -> .) ]

    conditional                    shift and go to state 76
    do-while                       shift and go to state 78
    est                            shift and go to state 130
    for                            shift and go to state 80
    llamadaAFunct                  shift and go to state 81
    input                          shift and go to state 82
    assignment                     shift and go to state 84
    declareLocal                   shift and go to state 93
    while                          shift and go to state 90
    empty                          shift and go to state 91
    output                         shift and go to state 92
    cycles                         shift and go to state 89

state 94

    (97) exp -> number meteNum exp2 .

    LEFTBRACK       reduce using rule 97 (exp -> number meteNum exp2 .)
    COMMA           reduce using rule 97 (exp -> number meteNum exp2 .)
    SEMICOLON       reduce using rule 97 (exp -> number meteNum exp2 .)
    RIGHTBRACK      reduce using rule 97 (exp -> number meteNum exp2 .)
    ID              reduce using rule 97 (exp -> number meteNum exp2 .)
    INTEGER         reduce using rule 97 (exp -> number meteNum exp2 .)
    RIGHTPAR        reduce using rule 97 (exp -> number meteNum exp2 .)


state 95

    (53) number2 -> DOT INTEGER .

    LESS            reduce using rule 53 (number2 -> DOT INTEGER .)
    GRTR            reduce using rule 53 (number2 -> DOT INTEGER .)
    EQ              reduce using rule 53 (number2 -> DOT INTEGER .)
    NOTEQ           reduce using rule 53 (number2 -> DOT INTEGER .)
    AND             reduce using rule 53 (number2 -> DOT INTEGER .)
    OR              reduce using rule 53 (number2 -> DOT INTEGER .)
    SUM             reduce using rule 53 (number2 -> DOT INTEGER .)
    MINUS           reduce using rule 53 (number2 -> DOT INTEGER .)
    MULTP           reduce using rule 53 (number2 -> DOT INTEGER .)
    DIVIDE          reduce using rule 53 (number2 -> DOT INTEGER .)
    LEFTBRACK       reduce using rule 53 (number2 -> DOT INTEGER .)
    COMMA           reduce using rule 53 (number2 -> DOT INTEGER .)
    SEMICOLON       reduce using rule 53 (number2 -> DOT INTEGER .)
    RIGHTBRACK      reduce using rule 53 (number2 -> DOT INTEGER .)
    ID              reduce using rule 53 (number2 -> DOT INTEGER .)
    INTEGER         reduce using rule 53 (number2 -> DOT INTEGER .)
    RIGHTPAR        reduce using rule 53 (number2 -> DOT INTEGER .)


state 96

    (104) exp2 -> AND exp .

    LEFTBRACK       reduce using rule 104 (exp2 -> AND exp .)
    COMMA           reduce using rule 104 (exp2 -> AND exp .)
    SEMICOLON       reduce using rule 104 (exp2 -> AND exp .)
    RIGHTBRACK      reduce using rule 104 (exp2 -> AND exp .)
    ID              reduce using rule 104 (exp2 -> AND exp .)
    INTEGER         reduce using rule 104 (exp2 -> AND exp .)
    RIGHTPAR        reduce using rule 104 (exp2 -> AND exp .)


state 97

    (110) exp2 -> DIVIDE meteOper . exp
    (95) exp -> . ID exp2 generaCuad
    (97) exp -> . number meteNum exp2
    (99) exp -> . empty
    (52) number -> . INTEGER number2
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    INTEGER         shift and go to state 42
    LEFTBRACK       reduce using rule 117 (empty -> .)
    COMMA           reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)
    RIGHTBRACK      reduce using rule 117 (empty -> .)
    RIGHTPAR        reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! INTEGER         [ reduce using rule 117 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 131
    empty                          shift and go to state 44

state 98

    (100) exp2 -> LESS exp .

    LEFTBRACK       reduce using rule 100 (exp2 -> LESS exp .)
    COMMA           reduce using rule 100 (exp2 -> LESS exp .)
    SEMICOLON       reduce using rule 100 (exp2 -> LESS exp .)
    RIGHTBRACK      reduce using rule 100 (exp2 -> LESS exp .)
    ID              reduce using rule 100 (exp2 -> LESS exp .)
    INTEGER         reduce using rule 100 (exp2 -> LESS exp .)
    RIGHTPAR        reduce using rule 100 (exp2 -> LESS exp .)


state 99

    (103) exp2 -> NOTEQ exp .

    LEFTBRACK       reduce using rule 103 (exp2 -> NOTEQ exp .)
    COMMA           reduce using rule 103 (exp2 -> NOTEQ exp .)
    SEMICOLON       reduce using rule 103 (exp2 -> NOTEQ exp .)
    RIGHTBRACK      reduce using rule 103 (exp2 -> NOTEQ exp .)
    ID              reduce using rule 103 (exp2 -> NOTEQ exp .)
    INTEGER         reduce using rule 103 (exp2 -> NOTEQ exp .)
    RIGHTPAR        reduce using rule 103 (exp2 -> NOTEQ exp .)


state 100

    (95) exp -> ID exp2 generaCuad .

    LEFTBRACK       reduce using rule 95 (exp -> ID exp2 generaCuad .)
    COMMA           reduce using rule 95 (exp -> ID exp2 generaCuad .)
    SEMICOLON       reduce using rule 95 (exp -> ID exp2 generaCuad .)
    RIGHTBRACK      reduce using rule 95 (exp -> ID exp2 generaCuad .)
    ID              reduce using rule 95 (exp -> ID exp2 generaCuad .)
    INTEGER         reduce using rule 95 (exp -> ID exp2 generaCuad .)
    RIGHTPAR        reduce using rule 95 (exp -> ID exp2 generaCuad .)


state 101

    (106) exp2 -> SUM meteOper . exp
    (95) exp -> . ID exp2 generaCuad
    (97) exp -> . number meteNum exp2
    (99) exp -> . empty
    (52) number -> . INTEGER number2
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    INTEGER         shift and go to state 42
    LEFTBRACK       reduce using rule 117 (empty -> .)
    COMMA           reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)
    RIGHTBRACK      reduce using rule 117 (empty -> .)
    RIGHTPAR        reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! INTEGER         [ reduce using rule 117 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 132
    empty                          shift and go to state 44

state 102

    (105) exp2 -> OR exp .

    LEFTBRACK       reduce using rule 105 (exp2 -> OR exp .)
    COMMA           reduce using rule 105 (exp2 -> OR exp .)
    SEMICOLON       reduce using rule 105 (exp2 -> OR exp .)
    RIGHTBRACK      reduce using rule 105 (exp2 -> OR exp .)
    ID              reduce using rule 105 (exp2 -> OR exp .)
    INTEGER         reduce using rule 105 (exp2 -> OR exp .)
    RIGHTPAR        reduce using rule 105 (exp2 -> OR exp .)


state 103

    (108) exp2 -> MINUS meteOper . exp
    (95) exp -> . ID exp2 generaCuad
    (97) exp -> . number meteNum exp2
    (99) exp -> . empty
    (52) number -> . INTEGER number2
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    INTEGER         shift and go to state 42
    LEFTBRACK       reduce using rule 117 (empty -> .)
    COMMA           reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)
    RIGHTBRACK      reduce using rule 117 (empty -> .)
    RIGHTPAR        reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! INTEGER         [ reduce using rule 117 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 133
    empty                          shift and go to state 44

state 104

    (101) exp2 -> GRTR exp .

    LEFTBRACK       reduce using rule 101 (exp2 -> GRTR exp .)
    COMMA           reduce using rule 101 (exp2 -> GRTR exp .)
    SEMICOLON       reduce using rule 101 (exp2 -> GRTR exp .)
    RIGHTBRACK      reduce using rule 101 (exp2 -> GRTR exp .)
    ID              reduce using rule 101 (exp2 -> GRTR exp .)
    INTEGER         reduce using rule 101 (exp2 -> GRTR exp .)
    RIGHTPAR        reduce using rule 101 (exp2 -> GRTR exp .)


state 105

    (109) exp2 -> MULTP meteOper . exp
    (95) exp -> . ID exp2 generaCuad
    (97) exp -> . number meteNum exp2
    (99) exp -> . empty
    (52) number -> . INTEGER number2
    (117) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    INTEGER         shift and go to state 42
    LEFTBRACK       reduce using rule 117 (empty -> .)
    COMMA           reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)
    RIGHTBRACK      reduce using rule 117 (empty -> .)
    RIGHTPAR        reduce using rule 117 (empty -> .)

  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! INTEGER         [ reduce using rule 117 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 134
    empty                          shift and go to state 44

state 106

    (102) exp2 -> EQ exp .

    LEFTBRACK       reduce using rule 102 (exp2 -> EQ exp .)
    COMMA           reduce using rule 102 (exp2 -> EQ exp .)
    SEMICOLON       reduce using rule 102 (exp2 -> EQ exp .)
    RIGHTBRACK      reduce using rule 102 (exp2 -> EQ exp .)
    ID              reduce using rule 102 (exp2 -> EQ exp .)
    INTEGER         reduce using rule 102 (exp2 -> EQ exp .)
    RIGHTPAR        reduce using rule 102 (exp2 -> EQ exp .)


state 107

    (25) array -> LEFTBRACK exp RIGHTBRACK . array
    (25) array -> . LEFTBRACK exp RIGHTBRACK array
    (26) array -> . empty
    (117) empty -> .

    LEFTBRACK       shift and go to state 45
    COMMA           reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)

    array                          shift and go to state 135
    empty                          shift and go to state 48

state 108

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON . declareRecursivo
    (8) declareRecursivo -> . type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
    (23) declareRecursivo -> . empty
    (27) type -> . type2
    (117) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    FUNCTION        reduce using rule 117 (empty -> .)
    MAIN            reduce using rule 117 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    declareRecursivo               shift and go to state 136
    type                           shift and go to state 17
    empty                          shift and go to state 18
    type2                          shift and go to state 19

state 109

    (10) declare3 -> COMMA ID . altaVarGlobal declare3
    (22) altaVarGlobal -> .

    COMMA           reduce using rule 22 (altaVarGlobal -> .)
    SEMICOLON       reduce using rule 22 (altaVarGlobal -> .)

    altaVarGlobal                  shift and go to state 137

state 110

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR . LEFTKEY est functReturn RIGHTKEY

    LEFTKEY         shift and go to state 138


state 111

    (17) funct2 -> type ID . altaVarLocal funct3
    (62) altaVarLocal -> .

    COMMA           reduce using rule 62 (altaVarLocal -> .)
    RIGHTPAR        reduce using rule 62 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 139

state 112

    (75) do-while -> DO LEFTKEY . est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (66) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (71) cycles -> . while
    (72) cycles -> . empty
    (73) cycles -> . for
    (74) cycles -> . do-while
    (116) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (112) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID ASSGN exp SEMICOLON
    (64) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (65) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (117) empty -> .
    (76) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (79) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (75) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 88
    DECLARE         shift and go to state 87
    READ            shift and go to state 75
    WRITE           shift and go to state 85
    ID              shift and go to state 86
    RIGHTKEY        reduce using rule 117 (empty -> .)
    WHILE           shift and go to state 77
    FOR             shift and go to state 83
    DO              shift and go to state 74

  ! IF              [ reduce using rule 117 (empty -> .) ]
  ! DECLARE         [ reduce using rule 117 (empty -> .) ]
  ! READ            [ reduce using rule 117 (empty -> .) ]
  ! WRITE           [ reduce using rule 117 (empty -> .) ]
  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! WHILE           [ reduce using rule 117 (empty -> .) ]
  ! FOR             [ reduce using rule 117 (empty -> .) ]
  ! DO              [ reduce using rule 117 (empty -> .) ]

    conditional                    shift and go to state 76
    do-while                       shift and go to state 78
    est                            shift and go to state 140
    for                            shift and go to state 80
    llamadaAFunct                  shift and go to state 81
    input                          shift and go to state 82
    assignment                     shift and go to state 84
    cycles                         shift and go to state 89
    while                          shift and go to state 90
    empty                          shift and go to state 91
    output                         shift and go to state 92
    declareLocal                   shift and go to state 93

state 113

    (116) input -> READ LEFTPAR . ID RIGHTPAR SEMICOLON

    ID              shift and go to state 141


state 114

    (35) est -> conditional est .

    RIGHTKEY        reduce using rule 35 (est -> conditional est .)
    RETURN          reduce using rule 35 (est -> conditional est .)


state 115

    (76) while -> WHILE LEFTPAR . while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (77) while2 -> . exp while2
    (78) while2 -> . empty
    (95) exp -> . ID exp2 generaCuad
    (97) exp -> . number meteNum exp2
    (99) exp -> . empty
    (117) empty -> .
    (52) number -> . INTEGER number2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    RIGHTPAR        reduce using rule 117 (empty -> .)
    INTEGER         shift and go to state 42

  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! INTEGER         [ reduce using rule 117 (empty -> .) ]

    number                         shift and go to state 40
    while2                         shift and go to state 142
    exp                            shift and go to state 143
    empty                          shift and go to state 144

state 116

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY .

    END             reduce using rule 33 (cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY .)


state 117

    (41) est -> llamadaAFunct est .

    RIGHTKEY        reduce using rule 41 (est -> llamadaAFunct est .)
    RETURN          reduce using rule 41 (est -> llamadaAFunct est .)


state 118

    (38) est -> input est .

    RIGHTKEY        reduce using rule 38 (est -> input est .)
    RETURN          reduce using rule 38 (est -> input est .)


state 119

    (79) for -> FOR LEFTPAR . for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) for2 -> . ID ASSGN number for3

    ID              shift and go to state 146

    for2                           shift and go to state 145

state 120

    (40) est -> assignment est .

    RIGHTKEY        reduce using rule 40 (est -> assignment est .)
    RETURN          reduce using rule 40 (est -> assignment est .)


state 121

    (112) output -> WRITE LEFTPAR . output2 RIGHTPAR SEMICOLON
    (113) output2 -> . ID output2
    (114) output2 -> . QUOTE ID QUOTE output2
    (115) output2 -> . empty
    (117) empty -> .

    ID              shift and go to state 149
    QUOTE           shift and go to state 148
    RIGHTPAR        reduce using rule 117 (empty -> .)

    output2                        shift and go to state 147
    empty                          shift and go to state 150

state 122

    (63) assignment -> ID ASSGN . exp SEMICOLON
    (64) assignment -> ID ASSGN . llamadaAFunct SEMICOLON
    (95) exp -> . ID exp2 generaCuad
    (97) exp -> . number meteNum exp2
    (99) exp -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (52) number -> . INTEGER number2
    (117) empty -> .

    ID              shift and go to state 153
    INTEGER         shift and go to state 42
    SEMICOLON       reduce using rule 117 (empty -> .)

    llamadaAFunct                  shift and go to state 151
    number                         shift and go to state 40
    exp                            shift and go to state 152
    empty                          shift and go to state 154

state 123

    (43) llamadaAFunct -> ID LEFTPAR . llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct2 -> . ID llamadaAFunct3
    (48) llamadaAFunct2 -> . empty
    (117) empty -> .

    ID              shift and go to state 156
    RIGHTPAR        reduce using rule 117 (empty -> .)

    llamadaAFunct2                 shift and go to state 155
    empty                          shift and go to state 157

state 124

    (49) declareLocal -> DECLARE declareRecursivoLocal .

    IF              reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)
    DECLARE         reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)
    READ            reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)
    WRITE           reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)
    ID              reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)
    WHILE           reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)
    FOR             reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)
    DO              reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)
    RIGHTKEY        reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)
    RETURN          reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)


state 125

    (50) declareRecursivoLocal -> type . ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal

    ID              shift and go to state 158


state 126

    (58) declareRecursivoLocal -> empty .

    IF              reduce using rule 58 (declareRecursivoLocal -> empty .)
    DECLARE         reduce using rule 58 (declareRecursivoLocal -> empty .)
    READ            reduce using rule 58 (declareRecursivoLocal -> empty .)
    WRITE           reduce using rule 58 (declareRecursivoLocal -> empty .)
    ID              reduce using rule 58 (declareRecursivoLocal -> empty .)
    WHILE           reduce using rule 58 (declareRecursivoLocal -> empty .)
    FOR             reduce using rule 58 (declareRecursivoLocal -> empty .)
    DO              reduce using rule 58 (declareRecursivoLocal -> empty .)
    RIGHTKEY        reduce using rule 58 (declareRecursivoLocal -> empty .)
    RETURN          reduce using rule 58 (declareRecursivoLocal -> empty .)


state 127

    (66) conditional -> IF LEFTPAR . conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (69) conditional2 -> . exp conditional2
    (70) conditional2 -> . empty
    (95) exp -> . ID exp2 generaCuad
    (97) exp -> . number meteNum exp2
    (99) exp -> . empty
    (117) empty -> .
    (52) number -> . INTEGER number2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    RIGHTPAR        reduce using rule 117 (empty -> .)
    INTEGER         shift and go to state 42

  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! INTEGER         [ reduce using rule 117 (empty -> .) ]

    number                         shift and go to state 40
    conditional2                   shift and go to state 161
    exp                            shift and go to state 160
    empty                          shift and go to state 159

state 128

    (37) est -> cycles est .

    RIGHTKEY        reduce using rule 37 (est -> cycles est .)
    RETURN          reduce using rule 37 (est -> cycles est .)


state 129

    (39) est -> output est .

    RIGHTKEY        reduce using rule 39 (est -> output est .)
    RETURN          reduce using rule 39 (est -> output est .)


state 130

    (36) est -> declareLocal est .

    RIGHTKEY        reduce using rule 36 (est -> declareLocal est .)
    RETURN          reduce using rule 36 (est -> declareLocal est .)


state 131

    (110) exp2 -> DIVIDE meteOper exp .

    LEFTBRACK       reduce using rule 110 (exp2 -> DIVIDE meteOper exp .)
    COMMA           reduce using rule 110 (exp2 -> DIVIDE meteOper exp .)
    SEMICOLON       reduce using rule 110 (exp2 -> DIVIDE meteOper exp .)
    RIGHTBRACK      reduce using rule 110 (exp2 -> DIVIDE meteOper exp .)
    ID              reduce using rule 110 (exp2 -> DIVIDE meteOper exp .)
    INTEGER         reduce using rule 110 (exp2 -> DIVIDE meteOper exp .)
    RIGHTPAR        reduce using rule 110 (exp2 -> DIVIDE meteOper exp .)


state 132

    (106) exp2 -> SUM meteOper exp .

    LEFTBRACK       reduce using rule 106 (exp2 -> SUM meteOper exp .)
    COMMA           reduce using rule 106 (exp2 -> SUM meteOper exp .)
    SEMICOLON       reduce using rule 106 (exp2 -> SUM meteOper exp .)
    RIGHTBRACK      reduce using rule 106 (exp2 -> SUM meteOper exp .)
    ID              reduce using rule 106 (exp2 -> SUM meteOper exp .)
    INTEGER         reduce using rule 106 (exp2 -> SUM meteOper exp .)
    RIGHTPAR        reduce using rule 106 (exp2 -> SUM meteOper exp .)


state 133

    (108) exp2 -> MINUS meteOper exp .

    LEFTBRACK       reduce using rule 108 (exp2 -> MINUS meteOper exp .)
    COMMA           reduce using rule 108 (exp2 -> MINUS meteOper exp .)
    SEMICOLON       reduce using rule 108 (exp2 -> MINUS meteOper exp .)
    RIGHTBRACK      reduce using rule 108 (exp2 -> MINUS meteOper exp .)
    ID              reduce using rule 108 (exp2 -> MINUS meteOper exp .)
    INTEGER         reduce using rule 108 (exp2 -> MINUS meteOper exp .)
    RIGHTPAR        reduce using rule 108 (exp2 -> MINUS meteOper exp .)


state 134

    (109) exp2 -> MULTP meteOper exp .

    LEFTBRACK       reduce using rule 109 (exp2 -> MULTP meteOper exp .)
    COMMA           reduce using rule 109 (exp2 -> MULTP meteOper exp .)
    SEMICOLON       reduce using rule 109 (exp2 -> MULTP meteOper exp .)
    RIGHTBRACK      reduce using rule 109 (exp2 -> MULTP meteOper exp .)
    ID              reduce using rule 109 (exp2 -> MULTP meteOper exp .)
    INTEGER         reduce using rule 109 (exp2 -> MULTP meteOper exp .)
    RIGHTPAR        reduce using rule 109 (exp2 -> MULTP meteOper exp .)


state 135

    (25) array -> LEFTBRACK exp RIGHTBRACK array .

    COMMA           reduce using rule 25 (array -> LEFTBRACK exp RIGHTBRACK array .)
    SEMICOLON       reduce using rule 25 (array -> LEFTBRACK exp RIGHTBRACK array .)


state 136

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo .

    FUNCTION        reduce using rule 8 (declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo .)
    MAIN            reduce using rule 8 (declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo .)


state 137

    (10) declare3 -> COMMA ID altaVarGlobal . declare3
    (10) declare3 -> . COMMA ID altaVarGlobal declare3
    (24) declare3 -> . empty
    (117) empty -> .

    COMMA           shift and go to state 69
    SEMICOLON       reduce using rule 117 (empty -> .)

    empty                          shift and go to state 70
    declare3                       shift and go to state 162

state 138

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY . est functReturn RIGHTKEY
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (66) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (71) cycles -> . while
    (72) cycles -> . empty
    (73) cycles -> . for
    (74) cycles -> . do-while
    (116) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (112) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID ASSGN exp SEMICOLON
    (64) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (65) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (117) empty -> .
    (76) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (79) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (75) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 88
    DECLARE         shift and go to state 87
    READ            shift and go to state 75
    WRITE           shift and go to state 85
    ID              shift and go to state 86
    RETURN          reduce using rule 117 (empty -> .)
    RIGHTKEY        reduce using rule 117 (empty -> .)
    WHILE           shift and go to state 77
    FOR             shift and go to state 83
    DO              shift and go to state 74

  ! IF              [ reduce using rule 117 (empty -> .) ]
  ! DECLARE         [ reduce using rule 117 (empty -> .) ]
  ! READ            [ reduce using rule 117 (empty -> .) ]
  ! WRITE           [ reduce using rule 117 (empty -> .) ]
  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! WHILE           [ reduce using rule 117 (empty -> .) ]
  ! FOR             [ reduce using rule 117 (empty -> .) ]
  ! DO              [ reduce using rule 117 (empty -> .) ]

    conditional                    shift and go to state 76
    do-while                       shift and go to state 78
    est                            shift and go to state 163
    for                            shift and go to state 80
    llamadaAFunct                  shift and go to state 81
    input                          shift and go to state 82
    assignment                     shift and go to state 84
    cycles                         shift and go to state 89
    while                          shift and go to state 90
    empty                          shift and go to state 91
    output                         shift and go to state 92
    declareLocal                   shift and go to state 93

state 139

    (17) funct2 -> type ID altaVarLocal . funct3
    (18) funct3 -> . COMMA type ID altaVarLocal funct3
    (20) funct3 -> . empty
    (117) empty -> .

    COMMA           shift and go to state 165
    RIGHTPAR        reduce using rule 117 (empty -> .)

    funct3                         shift and go to state 164
    empty                          shift and go to state 166

state 140

    (75) do-while -> DO LEFTKEY est . RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    RIGHTKEY        shift and go to state 167


state 141

    (116) input -> READ LEFTPAR ID . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 168


state 142

    (76) while -> WHILE LEFTPAR while2 . RIGHTPAR LEFTKEY est RIGHTKEY

    RIGHTPAR        shift and go to state 169


state 143

    (77) while2 -> exp . while2
    (77) while2 -> . exp while2
    (78) while2 -> . empty
    (95) exp -> . ID exp2 generaCuad
    (97) exp -> . number meteNum exp2
    (99) exp -> . empty
    (117) empty -> .
    (52) number -> . INTEGER number2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    RIGHTPAR        reduce using rule 117 (empty -> .)
    INTEGER         shift and go to state 42

  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! INTEGER         [ reduce using rule 117 (empty -> .) ]

    number                         shift and go to state 40
    while2                         shift and go to state 170
    exp                            shift and go to state 143
    empty                          shift and go to state 144

state 144

    (78) while2 -> empty .
    (99) exp -> empty .

  ! reduce/reduce conflict for RIGHTPAR resolved using rule 78 (while2 -> empty .)
    RIGHTPAR        reduce using rule 78 (while2 -> empty .)
    ID              reduce using rule 99 (exp -> empty .)
    INTEGER         reduce using rule 99 (exp -> empty .)

  ! RIGHTPAR        [ reduce using rule 99 (exp -> empty .) ]


state 145

    (79) for -> FOR LEFTPAR for2 . SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY

    SEMICOLON       shift and go to state 171


state 146

    (80) for2 -> ID . ASSGN number for3

    ASSGN           shift and go to state 172


state 147

    (112) output -> WRITE LEFTPAR output2 . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 173


state 148

    (114) output2 -> QUOTE . ID QUOTE output2

    ID              shift and go to state 174


state 149

    (113) output2 -> ID . output2
    (113) output2 -> . ID output2
    (114) output2 -> . QUOTE ID QUOTE output2
    (115) output2 -> . empty
    (117) empty -> .

    ID              shift and go to state 149
    QUOTE           shift and go to state 148
    RIGHTPAR        reduce using rule 117 (empty -> .)

    output2                        shift and go to state 175
    empty                          shift and go to state 150

state 150

    (115) output2 -> empty .

    RIGHTPAR        reduce using rule 115 (output2 -> empty .)


state 151

    (64) assignment -> ID ASSGN llamadaAFunct . SEMICOLON

    SEMICOLON       shift and go to state 176


state 152

    (63) assignment -> ID ASSGN exp . SEMICOLON

    SEMICOLON       shift and go to state 177


state 153

    (95) exp -> ID . exp2 generaCuad
    (43) llamadaAFunct -> ID . LEFTPAR llamadaAFunct2 RIGHTPAR
    (100) exp2 -> . LESS exp
    (101) exp2 -> . GRTR exp
    (102) exp2 -> . EQ exp
    (103) exp2 -> . NOTEQ exp
    (104) exp2 -> . AND exp
    (105) exp2 -> . OR exp
    (106) exp2 -> . SUM meteOper exp
    (108) exp2 -> . MINUS meteOper exp
    (109) exp2 -> . MULTP meteOper exp
    (110) exp2 -> . DIVIDE meteOper exp
    (111) exp2 -> . empty
    (117) empty -> .

    LEFTPAR         shift and go to state 123
    LESS            shift and go to state 57
    GRTR            shift and go to state 63
    EQ              shift and go to state 65
    NOTEQ           shift and go to state 58
    AND             shift and go to state 55
    OR              shift and go to state 61
    SUM             shift and go to state 60
    MINUS           shift and go to state 62
    MULTP           shift and go to state 64
    DIVIDE          shift and go to state 56
    SEMICOLON       reduce using rule 117 (empty -> .)

    exp2                           shift and go to state 59
    empty                          shift and go to state 66

state 154

    (99) exp -> empty .
    (44) llamadaAFunct -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 44 (llamadaAFunct -> empty .)
    SEMICOLON       reduce using rule 44 (llamadaAFunct -> empty .)

  ! SEMICOLON       [ reduce using rule 99 (exp -> empty .) ]


state 155

    (43) llamadaAFunct -> ID LEFTPAR llamadaAFunct2 . RIGHTPAR

    RIGHTPAR        shift and go to state 178


state 156

    (45) llamadaAFunct2 -> ID . llamadaAFunct3
    (46) llamadaAFunct3 -> . COMMA ID
    (47) llamadaAFunct3 -> . empty
    (117) empty -> .

    COMMA           shift and go to state 180
    RIGHTPAR        reduce using rule 117 (empty -> .)

    llamadaAFunct3                 shift and go to state 179
    empty                          shift and go to state 181

state 157

    (48) llamadaAFunct2 -> empty .

    RIGHTPAR        reduce using rule 48 (llamadaAFunct2 -> empty .)


state 158

    (50) declareRecursivoLocal -> type ID . altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (62) altaVarLocal -> .

    ASSGN           reduce using rule 62 (altaVarLocal -> .)
    LEFTBRACK       reduce using rule 62 (altaVarLocal -> .)
    COMMA           reduce using rule 62 (altaVarLocal -> .)
    SEMICOLON       reduce using rule 62 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 182

state 159

    (70) conditional2 -> empty .
    (99) exp -> empty .

  ! reduce/reduce conflict for RIGHTPAR resolved using rule 70 (conditional2 -> empty .)
    RIGHTPAR        reduce using rule 70 (conditional2 -> empty .)
    ID              reduce using rule 99 (exp -> empty .)
    INTEGER         reduce using rule 99 (exp -> empty .)

  ! RIGHTPAR        [ reduce using rule 99 (exp -> empty .) ]


state 160

    (69) conditional2 -> exp . conditional2
    (69) conditional2 -> . exp conditional2
    (70) conditional2 -> . empty
    (95) exp -> . ID exp2 generaCuad
    (97) exp -> . number meteNum exp2
    (99) exp -> . empty
    (117) empty -> .
    (52) number -> . INTEGER number2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    RIGHTPAR        reduce using rule 117 (empty -> .)
    INTEGER         shift and go to state 42

  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! INTEGER         [ reduce using rule 117 (empty -> .) ]

    number                         shift and go to state 40
    conditional2                   shift and go to state 183
    exp                            shift and go to state 160
    empty                          shift and go to state 159

state 161

    (66) conditional -> IF LEFTPAR conditional2 . RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse

    RIGHTPAR        shift and go to state 184


state 162

    (10) declare3 -> COMMA ID altaVarGlobal declare3 .

    SEMICOLON       reduce using rule 10 (declare3 -> COMMA ID altaVarGlobal declare3 .)


state 163

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est . functReturn RIGHTKEY
    (13) functReturn -> . RETURN NUMBER SEMICOLON
    (14) functReturn -> . RETURN ID SEMICOLON
    (15) functReturn -> . empty
    (117) empty -> .

    RETURN          shift and go to state 185
    RIGHTKEY        reduce using rule 117 (empty -> .)

    functReturn                    shift and go to state 186
    empty                          shift and go to state 187

state 164

    (17) funct2 -> type ID altaVarLocal funct3 .

    RIGHTPAR        reduce using rule 17 (funct2 -> type ID altaVarLocal funct3 .)


state 165

    (18) funct3 -> COMMA . type ID altaVarLocal funct3
    (27) type -> . type2
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    type                           shift and go to state 188
    type2                          shift and go to state 19

state 166

    (20) funct3 -> empty .

    RIGHTPAR        reduce using rule 20 (funct3 -> empty .)


state 167

    (75) do-while -> DO LEFTKEY est RIGHTKEY . WHILE LEFTPAR while2 RIGHTPAR

    WHILE           shift and go to state 189


state 168

    (116) input -> READ LEFTPAR ID RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 190


state 169

    (76) while -> WHILE LEFTPAR while2 RIGHTPAR . LEFTKEY est RIGHTKEY

    LEFTKEY         shift and go to state 191


state 170

    (77) while2 -> exp while2 .

    RIGHTPAR        reduce using rule 77 (while2 -> exp while2 .)


state 171

    (79) for -> FOR LEFTPAR for2 SEMICOLON . for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (83) for4 -> . expFor
    (86) expFor -> . ID expFor2
    (87) expFor -> . number
    (52) number -> . INTEGER number2

    ID              shift and go to state 194
    INTEGER         shift and go to state 42

    number                         shift and go to state 192
    expFor                         shift and go to state 193
    for4                           shift and go to state 195

state 172

    (80) for2 -> ID ASSGN . number for3
    (52) number -> . INTEGER number2

    INTEGER         shift and go to state 42

    number                         shift and go to state 196

state 173

    (112) output -> WRITE LEFTPAR output2 RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 197


state 174

    (114) output2 -> QUOTE ID . QUOTE output2

    QUOTE           shift and go to state 198


state 175

    (113) output2 -> ID output2 .

    RIGHTPAR        reduce using rule 113 (output2 -> ID output2 .)


state 176

    (64) assignment -> ID ASSGN llamadaAFunct SEMICOLON .

    IF              reduce using rule 64 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)
    DECLARE         reduce using rule 64 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)
    READ            reduce using rule 64 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)
    WRITE           reduce using rule 64 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)
    ID              reduce using rule 64 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)
    WHILE           reduce using rule 64 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)
    FOR             reduce using rule 64 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)
    DO              reduce using rule 64 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)
    RIGHTKEY        reduce using rule 64 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)
    RETURN          reduce using rule 64 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)


state 177

    (63) assignment -> ID ASSGN exp SEMICOLON .

    IF              reduce using rule 63 (assignment -> ID ASSGN exp SEMICOLON .)
    DECLARE         reduce using rule 63 (assignment -> ID ASSGN exp SEMICOLON .)
    READ            reduce using rule 63 (assignment -> ID ASSGN exp SEMICOLON .)
    WRITE           reduce using rule 63 (assignment -> ID ASSGN exp SEMICOLON .)
    ID              reduce using rule 63 (assignment -> ID ASSGN exp SEMICOLON .)
    WHILE           reduce using rule 63 (assignment -> ID ASSGN exp SEMICOLON .)
    FOR             reduce using rule 63 (assignment -> ID ASSGN exp SEMICOLON .)
    DO              reduce using rule 63 (assignment -> ID ASSGN exp SEMICOLON .)
    RIGHTKEY        reduce using rule 63 (assignment -> ID ASSGN exp SEMICOLON .)
    RETURN          reduce using rule 63 (assignment -> ID ASSGN exp SEMICOLON .)


state 178

    (43) llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .

    IF              reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    DECLARE         reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    READ            reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    WRITE           reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    ID              reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    WHILE           reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    FOR             reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    DO              reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    RIGHTKEY        reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    RETURN          reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    SEMICOLON       reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)


state 179

    (45) llamadaAFunct2 -> ID llamadaAFunct3 .

    RIGHTPAR        reduce using rule 45 (llamadaAFunct2 -> ID llamadaAFunct3 .)


state 180

    (46) llamadaAFunct3 -> COMMA . ID

    ID              shift and go to state 199


state 181

    (47) llamadaAFunct3 -> empty .

    RIGHTPAR        reduce using rule 47 (llamadaAFunct3 -> empty .)


state 182

    (50) declareRecursivoLocal -> type ID altaVarLocal . assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (51) assignmentDecl -> . ASSGN exp
    (55) assignmentDecl -> . empty
    (117) empty -> .

    ASSGN           shift and go to state 35
    LEFTBRACK       reduce using rule 117 (empty -> .)
    COMMA           reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)

    assignmentDecl                 shift and go to state 200
    empty                          shift and go to state 37

state 183

    (69) conditional2 -> exp conditional2 .

    RIGHTPAR        reduce using rule 69 (conditional2 -> exp conditional2 .)


state 184

    (66) conditional -> IF LEFTPAR conditional2 RIGHTPAR . LEFTKEY est RIGHTKEY conditionalElse

    LEFTKEY         shift and go to state 201


state 185

    (13) functReturn -> RETURN . NUMBER SEMICOLON
    (14) functReturn -> RETURN . ID SEMICOLON

    NUMBER          shift and go to state 202
    ID              shift and go to state 203


state 186

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn . RIGHTKEY

    RIGHTKEY        shift and go to state 204


state 187

    (15) functReturn -> empty .

    RIGHTKEY        reduce using rule 15 (functReturn -> empty .)


state 188

    (18) funct3 -> COMMA type . ID altaVarLocal funct3

    ID              shift and go to state 205


state 189

    (75) do-while -> DO LEFTKEY est RIGHTKEY WHILE . LEFTPAR while2 RIGHTPAR

    LEFTPAR         shift and go to state 206


state 190

    (116) input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .

    IF              reduce using rule 116 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    DECLARE         reduce using rule 116 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    READ            reduce using rule 116 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    WRITE           reduce using rule 116 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    ID              reduce using rule 116 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 116 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    FOR             reduce using rule 116 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    DO              reduce using rule 116 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    RIGHTKEY        reduce using rule 116 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    RETURN          reduce using rule 116 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)


state 191

    (76) while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY . est RIGHTKEY
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (66) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (71) cycles -> . while
    (72) cycles -> . empty
    (73) cycles -> . for
    (74) cycles -> . do-while
    (116) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (112) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID ASSGN exp SEMICOLON
    (64) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (65) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (117) empty -> .
    (76) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (79) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (75) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 88
    DECLARE         shift and go to state 87
    READ            shift and go to state 75
    WRITE           shift and go to state 85
    ID              shift and go to state 86
    RIGHTKEY        reduce using rule 117 (empty -> .)
    WHILE           shift and go to state 77
    FOR             shift and go to state 83
    DO              shift and go to state 74

  ! IF              [ reduce using rule 117 (empty -> .) ]
  ! DECLARE         [ reduce using rule 117 (empty -> .) ]
  ! READ            [ reduce using rule 117 (empty -> .) ]
  ! WRITE           [ reduce using rule 117 (empty -> .) ]
  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! WHILE           [ reduce using rule 117 (empty -> .) ]
  ! FOR             [ reduce using rule 117 (empty -> .) ]
  ! DO              [ reduce using rule 117 (empty -> .) ]

    conditional                    shift and go to state 76
    do-while                       shift and go to state 78
    est                            shift and go to state 207
    for                            shift and go to state 80
    llamadaAFunct                  shift and go to state 81
    input                          shift and go to state 82
    assignment                     shift and go to state 84
    cycles                         shift and go to state 89
    while                          shift and go to state 90
    empty                          shift and go to state 91
    output                         shift and go to state 92
    declareLocal                   shift and go to state 93

state 192

    (87) expFor -> number .

    SEMICOLON       reduce using rule 87 (expFor -> number .)


state 193

    (83) for4 -> expFor .

    SEMICOLON       reduce using rule 83 (for4 -> expFor .)


state 194

    (86) expFor -> ID . expFor2
    (88) expFor2 -> . LESS expFor
    (89) expFor2 -> . GRTR expFor
    (90) expFor2 -> . EQ expFor
    (91) expFor2 -> . NOTEQ expFor
    (92) expFor2 -> . AND expFor
    (93) expFor2 -> . OR expFor
    (94) expFor2 -> . empty
    (117) empty -> .

    LESS            shift and go to state 209
    GRTR            shift and go to state 212
    EQ              shift and go to state 213
    NOTEQ           shift and go to state 210
    AND             shift and go to state 208
    OR              shift and go to state 215
    SEMICOLON       reduce using rule 117 (empty -> .)

    empty                          shift and go to state 214
    expFor2                        shift and go to state 211

state 195

    (79) for -> FOR LEFTPAR for2 SEMICOLON for4 . SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY

    SEMICOLON       shift and go to state 216


state 196

    (80) for2 -> ID ASSGN number . for3
    (81) for3 -> . COMMA for2
    (82) for3 -> . empty
    (117) empty -> .

    COMMA           shift and go to state 217
    SEMICOLON       reduce using rule 117 (empty -> .)

    for3                           shift and go to state 218
    empty                          shift and go to state 219

state 197

    (112) output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .

    IF              reduce using rule 112 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    DECLARE         reduce using rule 112 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    READ            reduce using rule 112 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    WRITE           reduce using rule 112 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    ID              reduce using rule 112 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 112 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    FOR             reduce using rule 112 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    DO              reduce using rule 112 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    RIGHTKEY        reduce using rule 112 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    RETURN          reduce using rule 112 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)


state 198

    (114) output2 -> QUOTE ID QUOTE . output2
    (113) output2 -> . ID output2
    (114) output2 -> . QUOTE ID QUOTE output2
    (115) output2 -> . empty
    (117) empty -> .

    ID              shift and go to state 149
    QUOTE           shift and go to state 148
    RIGHTPAR        reduce using rule 117 (empty -> .)

    output2                        shift and go to state 220
    empty                          shift and go to state 150

state 199

    (46) llamadaAFunct3 -> COMMA ID .

    RIGHTPAR        reduce using rule 46 (llamadaAFunct3 -> COMMA ID .)


state 200

    (50) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl . declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (56) declare2Local -> . array
    (60) declare2Local -> . empty
    (25) array -> . LEFTBRACK exp RIGHTBRACK array
    (26) array -> . empty
    (117) empty -> .

    LEFTBRACK       shift and go to state 45
    COMMA           reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)

    declare2Local                  shift and go to state 221
    array                          shift and go to state 222
    empty                          shift and go to state 223

state 201

    (66) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY . est RIGHTKEY conditionalElse
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (66) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (71) cycles -> . while
    (72) cycles -> . empty
    (73) cycles -> . for
    (74) cycles -> . do-while
    (116) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (112) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID ASSGN exp SEMICOLON
    (64) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (65) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (117) empty -> .
    (76) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (79) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (75) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 88
    DECLARE         shift and go to state 87
    READ            shift and go to state 75
    WRITE           shift and go to state 85
    ID              shift and go to state 86
    RIGHTKEY        reduce using rule 117 (empty -> .)
    WHILE           shift and go to state 77
    FOR             shift and go to state 83
    DO              shift and go to state 74

  ! IF              [ reduce using rule 117 (empty -> .) ]
  ! DECLARE         [ reduce using rule 117 (empty -> .) ]
  ! READ            [ reduce using rule 117 (empty -> .) ]
  ! WRITE           [ reduce using rule 117 (empty -> .) ]
  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! WHILE           [ reduce using rule 117 (empty -> .) ]
  ! FOR             [ reduce using rule 117 (empty -> .) ]
  ! DO              [ reduce using rule 117 (empty -> .) ]

    conditional                    shift and go to state 76
    do-while                       shift and go to state 78
    est                            shift and go to state 224
    for                            shift and go to state 80
    llamadaAFunct                  shift and go to state 81
    input                          shift and go to state 82
    empty                          shift and go to state 91
    assignment                     shift and go to state 84
    cycles                         shift and go to state 89
    while                          shift and go to state 90
    output                         shift and go to state 92
    declareLocal                   shift and go to state 93

state 202

    (13) functReturn -> RETURN NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 225


state 203

    (14) functReturn -> RETURN ID . SEMICOLON

    SEMICOLON       shift and go to state 226


state 204

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY .

    FUNCTION        reduce using rule 12 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY .)
    MAIN            reduce using rule 12 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY .)


state 205

    (18) funct3 -> COMMA type ID . altaVarLocal funct3
    (62) altaVarLocal -> .

    COMMA           reduce using rule 62 (altaVarLocal -> .)
    RIGHTPAR        reduce using rule 62 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 227

state 206

    (75) do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR . while2 RIGHTPAR
    (77) while2 -> . exp while2
    (78) while2 -> . empty
    (95) exp -> . ID exp2 generaCuad
    (97) exp -> . number meteNum exp2
    (99) exp -> . empty
    (117) empty -> .
    (52) number -> . INTEGER number2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 43
    RIGHTPAR        reduce using rule 117 (empty -> .)
    INTEGER         shift and go to state 42

  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! INTEGER         [ reduce using rule 117 (empty -> .) ]

    number                         shift and go to state 40
    while2                         shift and go to state 228
    exp                            shift and go to state 143
    empty                          shift and go to state 144

state 207

    (76) while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 229


state 208

    (92) expFor2 -> AND . expFor
    (86) expFor -> . ID expFor2
    (87) expFor -> . number
    (52) number -> . INTEGER number2

    ID              shift and go to state 194
    INTEGER         shift and go to state 42

    expFor                         shift and go to state 230
    number                         shift and go to state 192

state 209

    (88) expFor2 -> LESS . expFor
    (86) expFor -> . ID expFor2
    (87) expFor -> . number
    (52) number -> . INTEGER number2

    ID              shift and go to state 194
    INTEGER         shift and go to state 42

    expFor                         shift and go to state 231
    number                         shift and go to state 192

state 210

    (91) expFor2 -> NOTEQ . expFor
    (86) expFor -> . ID expFor2
    (87) expFor -> . number
    (52) number -> . INTEGER number2

    ID              shift and go to state 194
    INTEGER         shift and go to state 42

    expFor                         shift and go to state 232
    number                         shift and go to state 192

state 211

    (86) expFor -> ID expFor2 .

    SEMICOLON       reduce using rule 86 (expFor -> ID expFor2 .)


state 212

    (89) expFor2 -> GRTR . expFor
    (86) expFor -> . ID expFor2
    (87) expFor -> . number
    (52) number -> . INTEGER number2

    ID              shift and go to state 194
    INTEGER         shift and go to state 42

    expFor                         shift and go to state 233
    number                         shift and go to state 192

state 213

    (90) expFor2 -> EQ . expFor
    (86) expFor -> . ID expFor2
    (87) expFor -> . number
    (52) number -> . INTEGER number2

    ID              shift and go to state 194
    INTEGER         shift and go to state 42

    expFor                         shift and go to state 234
    number                         shift and go to state 192

state 214

    (94) expFor2 -> empty .

    SEMICOLON       reduce using rule 94 (expFor2 -> empty .)


state 215

    (93) expFor2 -> OR . expFor
    (86) expFor -> . ID expFor2
    (87) expFor -> . number
    (52) number -> . INTEGER number2

    ID              shift and go to state 194
    INTEGER         shift and go to state 42

    expFor                         shift and go to state 235
    number                         shift and go to state 192

state 216

    (79) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON . parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (84) parte3For -> . ID SUM SUM
    (85) parte3For -> . ID MINUS MINUS

    ID              shift and go to state 237

    parte3For                      shift and go to state 236

state 217

    (81) for3 -> COMMA . for2
    (80) for2 -> . ID ASSGN number for3

    ID              shift and go to state 146

    for2                           shift and go to state 238

state 218

    (80) for2 -> ID ASSGN number for3 .

    SEMICOLON       reduce using rule 80 (for2 -> ID ASSGN number for3 .)


state 219

    (82) for3 -> empty .

    SEMICOLON       reduce using rule 82 (for3 -> empty .)


state 220

    (114) output2 -> QUOTE ID QUOTE output2 .

    RIGHTPAR        reduce using rule 114 (output2 -> QUOTE ID QUOTE output2 .)


state 221

    (50) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local . declare3Local SEMICOLON declareRecursivoLocal
    (57) declare3Local -> . COMMA ID altaVarLocal assignmentDecl declare3Local
    (61) declare3Local -> . empty
    (117) empty -> .

    COMMA           shift and go to state 239
    SEMICOLON       reduce using rule 117 (empty -> .)

    empty                          shift and go to state 240
    declare3Local                  shift and go to state 241

state 222

    (56) declare2Local -> array .

    COMMA           reduce using rule 56 (declare2Local -> array .)
    SEMICOLON       reduce using rule 56 (declare2Local -> array .)


state 223

    (60) declare2Local -> empty .
    (26) array -> empty .

  ! reduce/reduce conflict for COMMA resolved using rule 26 (array -> empty .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 26 (array -> empty .)
    COMMA           reduce using rule 26 (array -> empty .)
    SEMICOLON       reduce using rule 26 (array -> empty .)

  ! COMMA           [ reduce using rule 60 (declare2Local -> empty .) ]
  ! SEMICOLON       [ reduce using rule 60 (declare2Local -> empty .) ]


state 224

    (66) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est . RIGHTKEY conditionalElse

    RIGHTKEY        shift and go to state 242


state 225

    (13) functReturn -> RETURN NUMBER SEMICOLON .

    RIGHTKEY        reduce using rule 13 (functReturn -> RETURN NUMBER SEMICOLON .)


state 226

    (14) functReturn -> RETURN ID SEMICOLON .

    RIGHTKEY        reduce using rule 14 (functReturn -> RETURN ID SEMICOLON .)


state 227

    (18) funct3 -> COMMA type ID altaVarLocal . funct3
    (18) funct3 -> . COMMA type ID altaVarLocal funct3
    (20) funct3 -> . empty
    (117) empty -> .

    COMMA           shift and go to state 165
    RIGHTPAR        reduce using rule 117 (empty -> .)

    funct3                         shift and go to state 243
    empty                          shift and go to state 166

state 228

    (75) do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 . RIGHTPAR

    RIGHTPAR        shift and go to state 244


state 229

    (76) while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .

    IF              reduce using rule 76 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    DECLARE         reduce using rule 76 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    READ            reduce using rule 76 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    WRITE           reduce using rule 76 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    ID              reduce using rule 76 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    WHILE           reduce using rule 76 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    FOR             reduce using rule 76 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    DO              reduce using rule 76 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    RIGHTKEY        reduce using rule 76 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    RETURN          reduce using rule 76 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)


state 230

    (92) expFor2 -> AND expFor .

    SEMICOLON       reduce using rule 92 (expFor2 -> AND expFor .)


state 231

    (88) expFor2 -> LESS expFor .

    SEMICOLON       reduce using rule 88 (expFor2 -> LESS expFor .)


state 232

    (91) expFor2 -> NOTEQ expFor .

    SEMICOLON       reduce using rule 91 (expFor2 -> NOTEQ expFor .)


state 233

    (89) expFor2 -> GRTR expFor .

    SEMICOLON       reduce using rule 89 (expFor2 -> GRTR expFor .)


state 234

    (90) expFor2 -> EQ expFor .

    SEMICOLON       reduce using rule 90 (expFor2 -> EQ expFor .)


state 235

    (93) expFor2 -> OR expFor .

    SEMICOLON       reduce using rule 93 (expFor2 -> OR expFor .)


state 236

    (79) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For . RIGHTPAR LEFTKEY est RIGHTKEY

    RIGHTPAR        shift and go to state 245


state 237

    (84) parte3For -> ID . SUM SUM
    (85) parte3For -> ID . MINUS MINUS

    SUM             shift and go to state 246
    MINUS           shift and go to state 247


state 238

    (81) for3 -> COMMA for2 .

    SEMICOLON       reduce using rule 81 (for3 -> COMMA for2 .)


state 239

    (57) declare3Local -> COMMA . ID altaVarLocal assignmentDecl declare3Local

    ID              shift and go to state 248


state 240

    (61) declare3Local -> empty .

    SEMICOLON       reduce using rule 61 (declare3Local -> empty .)


state 241

    (50) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local . SEMICOLON declareRecursivoLocal

    SEMICOLON       shift and go to state 249


state 242

    (66) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY . conditionalElse
    (67) conditionalElse -> . ELSE LEFTKEY est RIGHTKEY
    (68) conditionalElse -> . empty
    (117) empty -> .

    ELSE            shift and go to state 251
    IF              reduce using rule 117 (empty -> .)
    DECLARE         reduce using rule 117 (empty -> .)
    READ            reduce using rule 117 (empty -> .)
    WRITE           reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    FOR             reduce using rule 117 (empty -> .)
    DO              reduce using rule 117 (empty -> .)
    RIGHTKEY        reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)

    conditionalElse                shift and go to state 250
    empty                          shift and go to state 252

state 243

    (18) funct3 -> COMMA type ID altaVarLocal funct3 .

    RIGHTPAR        reduce using rule 18 (funct3 -> COMMA type ID altaVarLocal funct3 .)


state 244

    (75) do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .

    IF              reduce using rule 75 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)
    DECLARE         reduce using rule 75 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)
    READ            reduce using rule 75 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)
    WRITE           reduce using rule 75 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)
    ID              reduce using rule 75 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)
    WHILE           reduce using rule 75 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)
    FOR             reduce using rule 75 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)
    DO              reduce using rule 75 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)
    RIGHTKEY        reduce using rule 75 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)
    RETURN          reduce using rule 75 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)


state 245

    (79) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR . LEFTKEY est RIGHTKEY

    LEFTKEY         shift and go to state 253


state 246

    (84) parte3For -> ID SUM . SUM

    SUM             shift and go to state 254


state 247

    (85) parte3For -> ID MINUS . MINUS

    MINUS           shift and go to state 255


state 248

    (57) declare3Local -> COMMA ID . altaVarLocal assignmentDecl declare3Local
    (62) altaVarLocal -> .

    ASSGN           reduce using rule 62 (altaVarLocal -> .)
    COMMA           reduce using rule 62 (altaVarLocal -> .)
    SEMICOLON       reduce using rule 62 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 256

state 249

    (50) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON . declareRecursivoLocal
    (50) declareRecursivoLocal -> . type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (58) declareRecursivoLocal -> . empty
    (27) type -> . type2
    (117) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    IF              reduce using rule 117 (empty -> .)
    DECLARE         reduce using rule 117 (empty -> .)
    READ            reduce using rule 117 (empty -> .)
    WRITE           reduce using rule 117 (empty -> .)
    ID              reduce using rule 117 (empty -> .)
    WHILE           reduce using rule 117 (empty -> .)
    FOR             reduce using rule 117 (empty -> .)
    DO              reduce using rule 117 (empty -> .)
    RIGHTKEY        reduce using rule 117 (empty -> .)
    RETURN          reduce using rule 117 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    declareRecursivoLocal          shift and go to state 257
    type2                          shift and go to state 19
    type                           shift and go to state 125
    empty                          shift and go to state 126

state 250

    (66) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .

    IF              reduce using rule 66 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)
    DECLARE         reduce using rule 66 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)
    READ            reduce using rule 66 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)
    WRITE           reduce using rule 66 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)
    ID              reduce using rule 66 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)
    WHILE           reduce using rule 66 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)
    FOR             reduce using rule 66 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)
    DO              reduce using rule 66 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)
    RIGHTKEY        reduce using rule 66 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)
    RETURN          reduce using rule 66 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)


state 251

    (67) conditionalElse -> ELSE . LEFTKEY est RIGHTKEY

    LEFTKEY         shift and go to state 258


state 252

    (68) conditionalElse -> empty .

    IF              reduce using rule 68 (conditionalElse -> empty .)
    DECLARE         reduce using rule 68 (conditionalElse -> empty .)
    READ            reduce using rule 68 (conditionalElse -> empty .)
    WRITE           reduce using rule 68 (conditionalElse -> empty .)
    ID              reduce using rule 68 (conditionalElse -> empty .)
    WHILE           reduce using rule 68 (conditionalElse -> empty .)
    FOR             reduce using rule 68 (conditionalElse -> empty .)
    DO              reduce using rule 68 (conditionalElse -> empty .)
    RIGHTKEY        reduce using rule 68 (conditionalElse -> empty .)
    RETURN          reduce using rule 68 (conditionalElse -> empty .)


state 253

    (79) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY . est RIGHTKEY
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (66) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (71) cycles -> . while
    (72) cycles -> . empty
    (73) cycles -> . for
    (74) cycles -> . do-while
    (116) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (112) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID ASSGN exp SEMICOLON
    (64) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (65) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (117) empty -> .
    (76) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (79) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (75) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 88
    DECLARE         shift and go to state 87
    READ            shift and go to state 75
    WRITE           shift and go to state 85
    ID              shift and go to state 86
    RIGHTKEY        reduce using rule 117 (empty -> .)
    WHILE           shift and go to state 77
    FOR             shift and go to state 83
    DO              shift and go to state 74

  ! IF              [ reduce using rule 117 (empty -> .) ]
  ! DECLARE         [ reduce using rule 117 (empty -> .) ]
  ! READ            [ reduce using rule 117 (empty -> .) ]
  ! WRITE           [ reduce using rule 117 (empty -> .) ]
  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! WHILE           [ reduce using rule 117 (empty -> .) ]
  ! FOR             [ reduce using rule 117 (empty -> .) ]
  ! DO              [ reduce using rule 117 (empty -> .) ]

    conditional                    shift and go to state 76
    do-while                       shift and go to state 78
    est                            shift and go to state 259
    for                            shift and go to state 80
    llamadaAFunct                  shift and go to state 81
    input                          shift and go to state 82
    assignment                     shift and go to state 84
    declareLocal                   shift and go to state 93
    while                          shift and go to state 90
    empty                          shift and go to state 91
    output                         shift and go to state 92
    cycles                         shift and go to state 89

state 254

    (84) parte3For -> ID SUM SUM .

    RIGHTPAR        reduce using rule 84 (parte3For -> ID SUM SUM .)


state 255

    (85) parte3For -> ID MINUS MINUS .

    RIGHTPAR        reduce using rule 85 (parte3For -> ID MINUS MINUS .)


state 256

    (57) declare3Local -> COMMA ID altaVarLocal . assignmentDecl declare3Local
    (51) assignmentDecl -> . ASSGN exp
    (55) assignmentDecl -> . empty
    (117) empty -> .

    ASSGN           shift and go to state 35
    COMMA           reduce using rule 117 (empty -> .)
    SEMICOLON       reduce using rule 117 (empty -> .)

    empty                          shift and go to state 37
    assignmentDecl                 shift and go to state 260

state 257

    (50) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .

    IF              reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    DECLARE         reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    READ            reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    WRITE           reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    ID              reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    WHILE           reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    FOR             reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    DO              reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    RIGHTKEY        reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    RETURN          reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)


state 258

    (67) conditionalElse -> ELSE LEFTKEY . est RIGHTKEY
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (66) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (71) cycles -> . while
    (72) cycles -> . empty
    (73) cycles -> . for
    (74) cycles -> . do-while
    (116) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (112) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID ASSGN exp SEMICOLON
    (64) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (65) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (117) empty -> .
    (76) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (79) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (75) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 88
    DECLARE         shift and go to state 87
    READ            shift and go to state 75
    WRITE           shift and go to state 85
    ID              shift and go to state 86
    RIGHTKEY        reduce using rule 117 (empty -> .)
    WHILE           shift and go to state 77
    FOR             shift and go to state 83
    DO              shift and go to state 74

  ! IF              [ reduce using rule 117 (empty -> .) ]
  ! DECLARE         [ reduce using rule 117 (empty -> .) ]
  ! READ            [ reduce using rule 117 (empty -> .) ]
  ! WRITE           [ reduce using rule 117 (empty -> .) ]
  ! ID              [ reduce using rule 117 (empty -> .) ]
  ! WHILE           [ reduce using rule 117 (empty -> .) ]
  ! FOR             [ reduce using rule 117 (empty -> .) ]
  ! DO              [ reduce using rule 117 (empty -> .) ]

    conditional                    shift and go to state 76
    do-while                       shift and go to state 78
    est                            shift and go to state 261
    for                            shift and go to state 80
    llamadaAFunct                  shift and go to state 81
    input                          shift and go to state 82
    assignment                     shift and go to state 84
    cycles                         shift and go to state 89
    while                          shift and go to state 90
    empty                          shift and go to state 91
    output                         shift and go to state 92
    declareLocal                   shift and go to state 93

state 259

    (79) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 262


state 260

    (57) declare3Local -> COMMA ID altaVarLocal assignmentDecl . declare3Local
    (57) declare3Local -> . COMMA ID altaVarLocal assignmentDecl declare3Local
    (61) declare3Local -> . empty
    (117) empty -> .

    COMMA           shift and go to state 239
    SEMICOLON       reduce using rule 117 (empty -> .)

    empty                          shift and go to state 240
    declare3Local                  shift and go to state 263

state 261

    (67) conditionalElse -> ELSE LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 264


state 262

    (79) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .

    IF              reduce using rule 79 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    DECLARE         reduce using rule 79 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    READ            reduce using rule 79 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    WRITE           reduce using rule 79 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    ID              reduce using rule 79 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    WHILE           reduce using rule 79 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    FOR             reduce using rule 79 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    DO              reduce using rule 79 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    RIGHTKEY        reduce using rule 79 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    RETURN          reduce using rule 79 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)


state 263

    (57) declare3Local -> COMMA ID altaVarLocal assignmentDecl declare3Local .

    SEMICOLON       reduce using rule 57 (declare3Local -> COMMA ID altaVarLocal assignmentDecl declare3Local .)


state 264

    (67) conditionalElse -> ELSE LEFTKEY est RIGHTKEY .

    IF              reduce using rule 67 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)
    DECLARE         reduce using rule 67 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)
    READ            reduce using rule 67 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)
    WRITE           reduce using rule 67 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)
    ID              reduce using rule 67 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)
    WHILE           reduce using rule 67 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)
    FOR             reduce using rule 67 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)
    DO              reduce using rule 67 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)
    RIGHTKEY        reduce using rule 67 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)
    RETURN          reduce using rule 67 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 50 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 50 resolved as shift
WARNING: shift/reduce conflict for READ in state 50 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 50 resolved as shift
WARNING: shift/reduce conflict for ID in state 50 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 50 resolved as shift
WARNING: shift/reduce conflict for FOR in state 50 resolved as shift
WARNING: shift/reduce conflict for DO in state 50 resolved as shift
WARNING: shift/reduce conflict for ID in state 55 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 55 resolved as shift
WARNING: shift/reduce conflict for ID in state 57 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 57 resolved as shift
WARNING: shift/reduce conflict for ID in state 58 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 58 resolved as shift
WARNING: shift/reduce conflict for ID in state 61 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 61 resolved as shift
WARNING: shift/reduce conflict for ID in state 63 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 63 resolved as shift
WARNING: shift/reduce conflict for ID in state 65 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 65 resolved as shift
WARNING: shift/reduce conflict for IF in state 76 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 76 resolved as shift
WARNING: shift/reduce conflict for READ in state 76 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 76 resolved as shift
WARNING: shift/reduce conflict for ID in state 76 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 76 resolved as shift
WARNING: shift/reduce conflict for FOR in state 76 resolved as shift
WARNING: shift/reduce conflict for DO in state 76 resolved as shift
WARNING: shift/reduce conflict for IF in state 81 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 81 resolved as shift
WARNING: shift/reduce conflict for READ in state 81 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 81 resolved as shift
WARNING: shift/reduce conflict for ID in state 81 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 81 resolved as shift
WARNING: shift/reduce conflict for FOR in state 81 resolved as shift
WARNING: shift/reduce conflict for DO in state 81 resolved as shift
WARNING: shift/reduce conflict for IF in state 82 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 82 resolved as shift
WARNING: shift/reduce conflict for READ in state 82 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 82 resolved as shift
WARNING: shift/reduce conflict for ID in state 82 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 82 resolved as shift
WARNING: shift/reduce conflict for FOR in state 82 resolved as shift
WARNING: shift/reduce conflict for DO in state 82 resolved as shift
WARNING: shift/reduce conflict for IF in state 84 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 84 resolved as shift
WARNING: shift/reduce conflict for READ in state 84 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 84 resolved as shift
WARNING: shift/reduce conflict for ID in state 84 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 84 resolved as shift
WARNING: shift/reduce conflict for FOR in state 84 resolved as shift
WARNING: shift/reduce conflict for DO in state 84 resolved as shift
WARNING: shift/reduce conflict for IF in state 89 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 89 resolved as shift
WARNING: shift/reduce conflict for READ in state 89 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 89 resolved as shift
WARNING: shift/reduce conflict for ID in state 89 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 89 resolved as shift
WARNING: shift/reduce conflict for FOR in state 89 resolved as shift
WARNING: shift/reduce conflict for DO in state 89 resolved as shift
WARNING: shift/reduce conflict for IF in state 92 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 92 resolved as shift
WARNING: shift/reduce conflict for READ in state 92 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 92 resolved as shift
WARNING: shift/reduce conflict for ID in state 92 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 92 resolved as shift
WARNING: shift/reduce conflict for FOR in state 92 resolved as shift
WARNING: shift/reduce conflict for DO in state 92 resolved as shift
WARNING: shift/reduce conflict for IF in state 93 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 93 resolved as shift
WARNING: shift/reduce conflict for READ in state 93 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 93 resolved as shift
WARNING: shift/reduce conflict for ID in state 93 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 93 resolved as shift
WARNING: shift/reduce conflict for FOR in state 93 resolved as shift
WARNING: shift/reduce conflict for DO in state 93 resolved as shift
WARNING: shift/reduce conflict for ID in state 97 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 97 resolved as shift
WARNING: shift/reduce conflict for ID in state 101 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 101 resolved as shift
WARNING: shift/reduce conflict for ID in state 103 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 103 resolved as shift
WARNING: shift/reduce conflict for ID in state 105 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 105 resolved as shift
WARNING: shift/reduce conflict for IF in state 112 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 112 resolved as shift
WARNING: shift/reduce conflict for READ in state 112 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 112 resolved as shift
WARNING: shift/reduce conflict for ID in state 112 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 112 resolved as shift
WARNING: shift/reduce conflict for FOR in state 112 resolved as shift
WARNING: shift/reduce conflict for DO in state 112 resolved as shift
WARNING: shift/reduce conflict for ID in state 115 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 115 resolved as shift
WARNING: shift/reduce conflict for ID in state 127 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 127 resolved as shift
WARNING: shift/reduce conflict for IF in state 138 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 138 resolved as shift
WARNING: shift/reduce conflict for READ in state 138 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 138 resolved as shift
WARNING: shift/reduce conflict for ID in state 138 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 138 resolved as shift
WARNING: shift/reduce conflict for FOR in state 138 resolved as shift
WARNING: shift/reduce conflict for DO in state 138 resolved as shift
WARNING: shift/reduce conflict for ID in state 143 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 143 resolved as shift
WARNING: shift/reduce conflict for ID in state 160 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 160 resolved as shift
WARNING: shift/reduce conflict for IF in state 191 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 191 resolved as shift
WARNING: shift/reduce conflict for READ in state 191 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 191 resolved as shift
WARNING: shift/reduce conflict for ID in state 191 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 191 resolved as shift
WARNING: shift/reduce conflict for FOR in state 191 resolved as shift
WARNING: shift/reduce conflict for DO in state 191 resolved as shift
WARNING: shift/reduce conflict for IF in state 201 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 201 resolved as shift
WARNING: shift/reduce conflict for READ in state 201 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 201 resolved as shift
WARNING: shift/reduce conflict for ID in state 201 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 201 resolved as shift
WARNING: shift/reduce conflict for FOR in state 201 resolved as shift
WARNING: shift/reduce conflict for DO in state 201 resolved as shift
WARNING: shift/reduce conflict for ID in state 206 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 206 resolved as shift
WARNING: shift/reduce conflict for IF in state 253 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 253 resolved as shift
WARNING: shift/reduce conflict for READ in state 253 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 253 resolved as shift
WARNING: shift/reduce conflict for ID in state 253 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 253 resolved as shift
WARNING: shift/reduce conflict for FOR in state 253 resolved as shift
WARNING: shift/reduce conflict for DO in state 253 resolved as shift
WARNING: shift/reduce conflict for IF in state 258 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 258 resolved as shift
WARNING: shift/reduce conflict for READ in state 258 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 258 resolved as shift
WARNING: shift/reduce conflict for ID in state 258 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 258 resolved as shift
WARNING: shift/reduce conflict for FOR in state 258 resolved as shift
WARNING: shift/reduce conflict for DO in state 258 resolved as shift
WARNING: reduce/reduce conflict in state 9 resolved using rule (program2 -> empty)
WARNING: rejected rule (declare -> empty) in state 9
WARNING: reduce/reduce conflict in state 91 resolved using rule (est -> empty)
WARNING: rejected rule (declareLocal -> empty) in state 91
WARNING: reduce/reduce conflict in state 91 resolved using rule (declareLocal -> empty)
WARNING: rejected rule (cycles -> empty) in state 91
WARNING: reduce/reduce conflict in state 91 resolved using rule (est -> empty)
WARNING: rejected rule (cycles -> empty) in state 91
WARNING: reduce/reduce conflict in state 91 resolved using rule (declareLocal -> empty)
WARNING: rejected rule (assignment -> empty) in state 91
WARNING: reduce/reduce conflict in state 91 resolved using rule (est -> empty)
WARNING: rejected rule (assignment -> empty) in state 91
WARNING: reduce/reduce conflict in state 91 resolved using rule (llamadaAFunct -> empty)
WARNING: rejected rule (declareLocal -> empty) in state 91
WARNING: reduce/reduce conflict in state 91 resolved using rule (est -> empty)
WARNING: rejected rule (llamadaAFunct -> empty) in state 91
WARNING: reduce/reduce conflict in state 144 resolved using rule (while2 -> empty)
WARNING: rejected rule (exp -> empty) in state 144
WARNING: reduce/reduce conflict in state 154 resolved using rule (llamadaAFunct -> empty)
WARNING: rejected rule (exp -> empty) in state 154
WARNING: reduce/reduce conflict in state 159 resolved using rule (conditional2 -> empty)
WARNING: rejected rule (exp -> empty) in state 159
WARNING: reduce/reduce conflict in state 223 resolved using rule (array -> empty)
WARNING: rejected rule (declare2Local -> empty) in state 223
WARNING: Rule (declareLocal -> empty) is never reduced
WARNING: Rule (cycles -> empty) is never reduced
WARNING: Rule (assignment -> empty) is never reduced
WARNING: Rule (declare2Local -> empty) is never reduced
