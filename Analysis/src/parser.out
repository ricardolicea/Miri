Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    NUMBER
    CIRCLIE
    MULTP
    DOT
    LESSEQ
    COLON
    GRTREQ
    CYCLE
    DIVIDE
    SPACE
    newline
    TYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON program2 cuerpo END SEMICOLON
Rule 2     program2 -> declare program3
Rule 3     program2 -> empty
Rule 4     program3 -> funct program3
Rule 5     program3 -> empty
<<<<<<< HEAD
Rule 6     declare -> DECLARE declareRecursivo
Rule 7     declareRecursivo -> type ID declare2 declare3 SEMICOLON declareRecursivo
Rule 8     declareRecursivo -> empty
Rule 9     declare -> empty
Rule 10    declare2 -> array
Rule 11    declare2 -> empty
Rule 12    declare3 -> COMMA ID declare3
Rule 13    declare3 -> empty
Rule 14    array -> LEFTBRACK exp RIGHTBRACK array
Rule 15    array -> empty
Rule 16    type -> type2
Rule 17    type2 -> INT
Rule 18    type2 -> FLOAT
Rule 19    type2 -> STRING
Rule 20    type2 -> BOOL
Rule 21    type2 -> VOID
Rule 22    cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 est RIGHTKEY
Rule 23    cuerpo2 -> cuerpo
Rule 24    cuerpo2 -> empty
Rule 25    est -> conditional
Rule 26    est -> cycles
Rule 27    est -> input
Rule 28    est -> output
Rule 29    est -> assignment
Rule 30    est -> funct
Rule 31    est -> empty
Rule 32    assignment -> ID ASSGN ID SEMICOLON
Rule 33    conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
Rule 34    conditional2 -> exp conditional2
Rule 35    conditional2 -> empty
Rule 36    cycles -> while
Rule 37    cycles -> for
Rule 38    cycles -> do-while
Rule 39    do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR
Rule 40    while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
Rule 41    while2 -> exp while2
Rule 42    while2 -> empty
Rule 43    for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
Rule 44    arithmeticOp -> SUM
Rule 45    arithmeticOp -> MINUS
Rule 46    for2 -> ID ASSGN ID for2
Rule 47    for2 -> empty
Rule 48    for3 -> exp for3
Rule 49    for3 -> empty
Rule 50    exp -> ID array exp2 SEMICOLON
Rule 51    exp2 -> LESS
Rule 52    exp2 -> GRTR
Rule 53    exp2 -> EQ
Rule 54    exp2 -> NOTEQ
Rule 55    exp2 -> AND
Rule 56    exp2 -> OR
Rule 57    exp2 -> arithmeticExp
Rule 58    arithmeticExp -> ID EQ ID arithmeticOp ID arithmeticExp
Rule 59    arithmeticExp -> empty
Rule 60    exp2 -> empty
Rule 61    output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
Rule 62    output2 -> ID output2
Rule 63    output2 -> empty
Rule 64    input -> READ LEFTPAR ID RIGHTPAR SEMICOLON
Rule 65    funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
Rule 66    funct2 -> COMMA funct type ID funct2
Rule 67    funct2 -> empty
Rule 68    empty -> <empty>

Terminals, with rules where they appear

AND                  : 55
ASSGN                : 32 46
BOOL                 : 20
=======
Rule 6     declare -> DECLARE type ID declare2 declare3 SEMICOLON
Rule 7     declare2 -> array
Rule 8     declare2 -> empty
Rule 9     declare3 -> COMMA declare3
Rule 10    declare3 -> empty
Rule 11    array -> LEFTBRACK exp RIGHTBRACK array
Rule 12    array -> empty
Rule 13    type -> TYPE type2
Rule 14    type2 -> INT
Rule 15    type2 -> FLOAT
Rule 16    type2 -> STRING
Rule 17    type2 -> BOOL
Rule 18    type2 -> VOID
Rule 19    cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 RIGHTKEY
Rule 20    cuerpo2 -> est
Rule 21    cuerpo2 -> empty
Rule 22    est -> conditional
Rule 23    est -> cycles
Rule 24    est -> input
Rule 25    est -> output
Rule 26    est -> assignment
Rule 27    est -> funct
Rule 28    assignment -> ID ASSGN ID SEMICOLON
Rule 29    conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
Rule 30    conditional2 -> exp conditional2
Rule 31    conditional2 -> empty
Rule 32    cycles -> while
Rule 33    cycles -> for
Rule 34    cycles -> do-while
Rule 35    do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR
Rule 36    while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
Rule 37    while2 -> exp while2
Rule 38    while2 -> empty
Rule 39    for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
Rule 40    arithmeticOp -> SUM
Rule 41    arithmeticOp -> MINUS
Rule 42    for2 -> ID ASSGN ID for2
Rule 43    for2 -> empty
Rule 44    for3 -> exp for3
Rule 45    for3 -> empty
Rule 46    exp -> ID array exp2 SEMICOLON
Rule 47    exp2 -> LESS
Rule 48    exp2 -> GRTR
Rule 49    exp2 -> EQ
Rule 50    exp2 -> NOTEQ
Rule 51    exp2 -> AND
Rule 52    exp2 -> OR
Rule 53    exp2 -> arithmeticExp
Rule 54    arithmeticExp -> ID EQ ID arithmeticOp ID arithmeticExp
Rule 55    arithmeticExp -> empty
Rule 56    exp2 -> empty
Rule 57    output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
Rule 58    output2 -> ID output2
Rule 59    output2 -> empty
Rule 60    input -> READ LEFTPAR ID RIGHTPAR SEMICOLON
Rule 61    funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
Rule 62    funct2 -> COMMA funct type ID funct2
Rule 63    funct2 -> empty
Rule 64    empty -> <empty>

Terminals, with rules where they appear

AND                  : 51
ARCH                 : 
ASSGN                : 28 42
BOOL                 : 17
CIRCLE               : 
CIRCLIE              : 
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20
COLON                : 
COMMA                : 12 66
CYCLE                : 
DECLARE              : 6
DIVIDE               : 
DO                   : 39
DOT                  : 
ELSE                 : 33
END                  : 1
EQ                   : 53 58
FLOAT                : 18
FOR                  : 43
FUNCTION             : 65
GRTR                 : 52
GRTREQ               : 
ID                   : 1 7 12 32 32 43 46 46 50 58 58 58 62 64 65 65 66
IF                   : 33
INT                  : 17
LEFTBRACK            : 14
LEFTKEY              : 22 33 39 40 43 65
LEFTPAR              : 22 33 39 40 43 61 64 65
LESS                 : 51
LESSEQ               : 
MAIN                 : 22
MINUS                : 45
MULTP                : 
NOTEQ                : 54
NUMBER               : 
OR                   : 56
PROGRAM              : 1
QUOTE                : 61 61
READ                 : 64
RIGHTBRACK           : 14
RIGHTKEY             : 22 33 33 39 40 43 65
RIGHTPAR             : 22 33 39 40 43 61 64 65
SEMICOLON            : 1 1 7 32 43 43 50 61 64
SPACE                : 
STRING               : 19
SUM                  : 44
TYPE                 : 
VOID                 : 21
WHILE                : 39 40 40
WRITE                : 61
error                : 
newline              : 

Nonterminals, with rules where they appear

<<<<<<< HEAD
arithmeticExp        : 57 58
arithmeticOp         : 43 43 58
array                : 10 14 50
assignment           : 29
conditional          : 25
conditional2         : 33 34
cuerpo               : 1 23
cuerpo2              : 22
cycles               : 26
declare              : 2
declare2             : 7
declare3             : 7 12
declareRecursivo     : 6 7
do-while             : 38
empty                : 3 5 8 9 11 13 15 24 31 35 42 47 49 59 60 63 67
est                  : 22 33 33 39 40 43 65
exp                  : 14 34 41 48 61
exp2                 : 50
for                  : 37
for2                 : 43 46
for3                 : 43 48
funct                : 4 30 66
funct2               : 65 66
input                : 27
output               : 28
output2              : 61 62
=======
arithmeticExp        : 53 54
arithmeticOp         : 39 39 54
array                : 7 11 46
assignment           : 26
conditional          : 22
conditional2         : 29 30
cuerpo               : 1
cuerpo2              : 19
cycles               : 23
declare              : 2
declare2             : 6
declare3             : 6 9
do-while             : 34
empty                : 3 5 8 10 12 21 31 38 43 45 55 56 59 63
est                  : 20 29 29 35 36 39 61
exp                  : 11 30 37 44 57
exp2                 : 46
for                  : 33
for2                 : 39 42
for3                 : 39 44
funct                : 4 27 62
funct2               : 61 62
input                : 24
output               : 25
output2              : 57 58
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20
program              : 0
program2             : 1
program3             : 2 4
type                 : 7 65 65 66
type2                : 16
while                : 36
while2               : 39 40 41

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON program2 cuerpo END SEMICOLON

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON program2 cuerpo END SEMICOLON

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON program2 cuerpo END SEMICOLON

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . program2 cuerpo END SEMICOLON
    (2) program2 -> . declare program3
    (3) program2 -> . empty
    (6) declare -> . DECLARE declareRecursivo
    (9) declare -> . empty
    (68) empty -> .

    DECLARE         shift and go to state 6
    MAIN            reduce using rule 68 (empty -> .)
    FUNCTION        reduce using rule 68 (empty -> .)

    program2                       shift and go to state 5
    declare                        shift and go to state 7
    empty                          shift and go to state 8

state 5

    (1) program -> PROGRAM ID SEMICOLON program2 . cuerpo END SEMICOLON
<<<<<<< HEAD
    (22) cuerpo -> . MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 est RIGHTKEY
=======
    (19) cuerpo -> . MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 RIGHTKEY
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    MAIN            shift and go to state 10

    cuerpo                         shift and go to state 9

state 6

    (6) declare -> DECLARE . declareRecursivo
    (7) declareRecursivo -> . type ID declare2 declare3 SEMICOLON declareRecursivo
    (8) declareRecursivo -> . empty
    (16) type -> . type2
    (68) empty -> .
    (17) type2 -> . INT
    (18) type2 -> . FLOAT
    (19) type2 -> . STRING
    (20) type2 -> . BOOL
    (21) type2 -> . VOID

    FUNCTION        reduce using rule 68 (empty -> .)
    MAIN            reduce using rule 68 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    declareRecursivo               shift and go to state 16
    type                           shift and go to state 17
    empty                          shift and go to state 18
    type2                          shift and go to state 19

state 7

    (2) program2 -> declare . program3
    (4) program3 -> . funct program3
    (5) program3 -> . empty
    (65) funct -> . FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (68) empty -> .

    FUNCTION        shift and go to state 20
    MAIN            reduce using rule 68 (empty -> .)

    funct                          shift and go to state 21
    program3                       shift and go to state 22
    empty                          shift and go to state 23

state 8

    (3) program2 -> empty .
    (9) declare -> empty .

  ! reduce/reduce conflict for MAIN resolved using rule 3 (program2 -> empty .)
    MAIN            reduce using rule 3 (program2 -> empty .)
    FUNCTION        reduce using rule 9 (declare -> empty .)

  ! MAIN            [ reduce using rule 9 (declare -> empty .) ]


state 9

    (1) program -> PROGRAM ID SEMICOLON program2 cuerpo . END SEMICOLON

    END             shift and go to state 24


state 10

<<<<<<< HEAD
    (22) cuerpo -> MAIN . LEFTPAR RIGHTPAR LEFTKEY cuerpo2 est RIGHTKEY
=======
    (19) cuerpo -> MAIN . LEFTPAR RIGHTPAR LEFTKEY cuerpo2 RIGHTKEY
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    LEFTPAR         shift and go to state 25


state 11

    (19) type2 -> STRING .

    ID              reduce using rule 19 (type2 -> STRING .)


state 12

    (17) type2 -> INT .

    ID              reduce using rule 17 (type2 -> INT .)


state 13

    (21) type2 -> VOID .

    ID              reduce using rule 21 (type2 -> VOID .)


state 14

    (18) type2 -> FLOAT .

    ID              reduce using rule 18 (type2 -> FLOAT .)


state 15

    (20) type2 -> BOOL .

    ID              reduce using rule 20 (type2 -> BOOL .)


state 16

    (6) declare -> DECLARE declareRecursivo .

    FUNCTION        reduce using rule 6 (declare -> DECLARE declareRecursivo .)
    MAIN            reduce using rule 6 (declare -> DECLARE declareRecursivo .)


state 17

    (7) declareRecursivo -> type . ID declare2 declare3 SEMICOLON declareRecursivo

    ID              shift and go to state 26


state 18

<<<<<<< HEAD
    (8) declareRecursivo -> empty .
=======
    (19) cuerpo -> MAIN LEFTPAR . RIGHTPAR LEFTKEY cuerpo2 RIGHTKEY
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    FUNCTION        reduce using rule 8 (declareRecursivo -> empty .)
    MAIN            reduce using rule 8 (declareRecursivo -> empty .)


state 19

    (16) type -> type2 .

    ID              reduce using rule 16 (type -> type2 .)


state 20

    (65) funct -> FUNCTION . type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (16) type -> . type2
    (17) type2 -> . INT
    (18) type2 -> . FLOAT
    (19) type2 -> . STRING
    (20) type2 -> . BOOL
    (21) type2 -> . VOID

    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    type                           shift and go to state 27
    type2                          shift and go to state 19

state 21

    (4) program3 -> funct . program3
    (4) program3 -> . funct program3
    (5) program3 -> . empty
    (65) funct -> . FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (68) empty -> .

    FUNCTION        shift and go to state 20
    MAIN            reduce using rule 68 (empty -> .)

    program3                       shift and go to state 28
    funct                          shift and go to state 21
    empty                          shift and go to state 23

state 22

    (2) program2 -> declare program3 .

    MAIN            reduce using rule 2 (program2 -> declare program3 .)


state 23

    (5) program3 -> empty .

    MAIN            reduce using rule 5 (program3 -> empty .)


state 24

    (1) program -> PROGRAM ID SEMICOLON program2 cuerpo END . SEMICOLON

    SEMICOLON       shift and go to state 29


state 25

    (22) cuerpo -> MAIN LEFTPAR . RIGHTPAR LEFTKEY cuerpo2 est RIGHTKEY

    RIGHTPAR        shift and go to state 30


state 26

    (7) declareRecursivo -> type ID . declare2 declare3 SEMICOLON declareRecursivo
    (10) declare2 -> . array
    (11) declare2 -> . empty
    (14) array -> . LEFTBRACK exp RIGHTBRACK array
    (15) array -> . empty
    (68) empty -> .

    LEFTBRACK       shift and go to state 31
    COMMA           reduce using rule 68 (empty -> .)
    SEMICOLON       reduce using rule 68 (empty -> .)

    declare2                       shift and go to state 32
    array                          shift and go to state 33
    empty                          shift and go to state 34

state 27

    (65) funct -> FUNCTION type . ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY

    ID              shift and go to state 35


state 28

    (4) program3 -> funct program3 .

    MAIN            reduce using rule 4 (program3 -> funct program3 .)


state 29

<<<<<<< HEAD
    (1) program -> PROGRAM ID SEMICOLON program2 cuerpo END SEMICOLON .
=======
    (19) cuerpo -> MAIN LEFTPAR RIGHTPAR . LEFTKEY cuerpo2 RIGHTKEY
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON program2 cuerpo END SEMICOLON .)


state 30

    (22) cuerpo -> MAIN LEFTPAR RIGHTPAR . LEFTKEY cuerpo2 est RIGHTKEY

    LEFTKEY         shift and go to state 36


state 31

    (14) array -> LEFTBRACK . exp RIGHTBRACK array
    (50) exp -> . ID array exp2 SEMICOLON

    ID              shift and go to state 38

    exp                            shift and go to state 37

state 32

    (7) declareRecursivo -> type ID declare2 . declare3 SEMICOLON declareRecursivo
    (12) declare3 -> . COMMA ID declare3
    (13) declare3 -> . empty
    (68) empty -> .

    COMMA           shift and go to state 40
    SEMICOLON       reduce using rule 68 (empty -> .)

    declare3                       shift and go to state 39
    empty                          shift and go to state 41

state 33

    (10) declare2 -> array .

    COMMA           reduce using rule 10 (declare2 -> array .)
    SEMICOLON       reduce using rule 10 (declare2 -> array .)


state 34

    (11) declare2 -> empty .
    (15) array -> empty .

  ! reduce/reduce conflict for COMMA resolved using rule 11 (declare2 -> empty .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 11 (declare2 -> empty .)
    COMMA           reduce using rule 11 (declare2 -> empty .)
    SEMICOLON       reduce using rule 11 (declare2 -> empty .)

  ! COMMA           [ reduce using rule 15 (array -> empty .) ]
  ! SEMICOLON       [ reduce using rule 15 (array -> empty .) ]


state 35

<<<<<<< HEAD
    (65) funct -> FUNCTION type ID . LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY

    LEFTPAR         shift and go to state 42
=======
    (19) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY . cuerpo2 RIGHTKEY
    (20) cuerpo2 -> . est
    (21) cuerpo2 -> . empty
    (22) est -> . conditional
    (23) est -> . cycles
    (24) est -> . input
    (25) est -> . output
    (26) est -> . assignment
    (27) est -> . funct
    (64) empty -> .
    (29) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (32) cycles -> . while
    (33) cycles -> . for
    (34) cycles -> . do-while
    (60) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (57) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (28) assignment -> . ID ASSGN ID SEMICOLON
    (61) funct -> . FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (36) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (39) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (35) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    RIGHTKEY        reduce using rule 64 (empty -> .)
    IF              shift and go to state 56
    READ            shift and go to state 44
    WRITE           shift and go to state 54
    ID              shift and go to state 55
    FUNCTION        shift and go to state 13
    WHILE           shift and go to state 46
    FOR             shift and go to state 52
    DO              shift and go to state 42

    est                            shift and go to state 48
    for                            shift and go to state 49
    output                         shift and go to state 60
    assignment                     shift and go to state 53
    conditional                    shift and go to state 45
    while                          shift and go to state 58
    do-while                       shift and go to state 47
    cuerpo2                        shift and go to state 50
    funct                          shift and go to state 43
    input                          shift and go to state 51
    cycles                         shift and go to state 57
    empty                          shift and go to state 59
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 36

<<<<<<< HEAD
    (22) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY . cuerpo2 est RIGHTKEY
    (23) cuerpo2 -> . cuerpo
    (24) cuerpo2 -> . empty
    (22) cuerpo -> . MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 est RIGHTKEY
    (68) empty -> .
=======
    RIGHTBRACK      shift and go to state 61
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    MAIN            shift and go to state 10
    IF              reduce using rule 68 (empty -> .)
    READ            reduce using rule 68 (empty -> .)
    WRITE           reduce using rule 68 (empty -> .)
    ID              reduce using rule 68 (empty -> .)
    FUNCTION        reduce using rule 68 (empty -> .)
    WHILE           reduce using rule 68 (empty -> .)
    FOR             reduce using rule 68 (empty -> .)
    DO              reduce using rule 68 (empty -> .)
    RIGHTKEY        reduce using rule 68 (empty -> .)

    cuerpo                         shift and go to state 43
    empty                          shift and go to state 45
    cuerpo2                        shift and go to state 44

state 37

    (14) array -> LEFTBRACK exp . RIGHTBRACK array

    RIGHTBRACK      shift and go to state 46

<<<<<<< HEAD
=======
    array                          shift and go to state 62
    empty                          shift and go to state 63
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

state 38

    (50) exp -> ID . array exp2 SEMICOLON
    (14) array -> . LEFTBRACK exp RIGHTBRACK array
    (15) array -> . empty
    (68) empty -> .

<<<<<<< HEAD
    LEFTBRACK       shift and go to state 31
    LESS            reduce using rule 68 (empty -> .)
    GRTR            reduce using rule 68 (empty -> .)
    EQ              reduce using rule 68 (empty -> .)
    NOTEQ           reduce using rule 68 (empty -> .)
    AND             reduce using rule 68 (empty -> .)
    OR              reduce using rule 68 (empty -> .)
    ID              reduce using rule 68 (empty -> .)
    SEMICOLON       reduce using rule 68 (empty -> .)
=======
    SEMICOLON       shift and go to state 64
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    array                          shift and go to state 47
    empty                          shift and go to state 48

state 39

    (7) declareRecursivo -> type ID declare2 declare3 . SEMICOLON declareRecursivo

    SEMICOLON       shift and go to state 49

<<<<<<< HEAD
=======
    declare3                       shift and go to state 65
    empty                          shift and go to state 40
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

state 40

    (12) declare3 -> COMMA . ID declare3

    ID              shift and go to state 50


state 41

    (13) declare3 -> empty .

    SEMICOLON       reduce using rule 13 (declare3 -> empty .)

<<<<<<< HEAD

state 42

    (65) funct -> FUNCTION type ID LEFTPAR . type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (16) type -> . type2
    (17) type2 -> . INT
    (18) type2 -> . FLOAT
    (19) type2 -> . STRING
    (20) type2 -> . BOOL
    (21) type2 -> . VOID

    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13
=======
    type                           shift and go to state 66

state 42

    (35) do-while -> DO . LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    LEFTKEY         shift and go to state 67
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    type                           shift and go to state 51
    type2                          shift and go to state 19

state 43

<<<<<<< HEAD
    (23) cuerpo2 -> cuerpo .
=======
    (27) est -> funct .

    RIGHTKEY        reduce using rule 27 (est -> funct .)

>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    IF              reduce using rule 23 (cuerpo2 -> cuerpo .)
    READ            reduce using rule 23 (cuerpo2 -> cuerpo .)
    WRITE           reduce using rule 23 (cuerpo2 -> cuerpo .)
    ID              reduce using rule 23 (cuerpo2 -> cuerpo .)
    FUNCTION        reduce using rule 23 (cuerpo2 -> cuerpo .)
    WHILE           reduce using rule 23 (cuerpo2 -> cuerpo .)
    FOR             reduce using rule 23 (cuerpo2 -> cuerpo .)
    DO              reduce using rule 23 (cuerpo2 -> cuerpo .)
    RIGHTKEY        reduce using rule 23 (cuerpo2 -> cuerpo .)

<<<<<<< HEAD

state 44
=======
    (60) input -> READ . LEFTPAR ID RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 68
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    (22) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 . est RIGHTKEY
    (25) est -> . conditional
    (26) est -> . cycles
    (27) est -> . input
    (28) est -> . output
    (29) est -> . assignment
    (30) est -> . funct
    (31) est -> . empty
    (33) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (36) cycles -> . while
    (37) cycles -> . for
    (38) cycles -> . do-while
    (64) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (61) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (32) assignment -> . ID ASSGN ID SEMICOLON
    (65) funct -> . FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (68) empty -> .
    (40) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (43) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (39) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 65
    READ            shift and go to state 54
    WRITE           shift and go to state 63
    ID              shift and go to state 64
    FUNCTION        shift and go to state 20
    RIGHTKEY        reduce using rule 68 (empty -> .)
    WHILE           shift and go to state 56
    FOR             shift and go to state 61
    DO              shift and go to state 52

    est                            shift and go to state 58
    for                            shift and go to state 59
    funct                          shift and go to state 53
    assignment                     shift and go to state 62
    conditional                    shift and go to state 55
    while                          shift and go to state 66
    do-while                       shift and go to state 57
    output                         shift and go to state 68
    input                          shift and go to state 60
    cycles                         shift and go to state 69
    empty                          shift and go to state 67

state 45

<<<<<<< HEAD
    (24) cuerpo2 -> empty .

    IF              reduce using rule 24 (cuerpo2 -> empty .)
    READ            reduce using rule 24 (cuerpo2 -> empty .)
    WRITE           reduce using rule 24 (cuerpo2 -> empty .)
    ID              reduce using rule 24 (cuerpo2 -> empty .)
    FUNCTION        reduce using rule 24 (cuerpo2 -> empty .)
    WHILE           reduce using rule 24 (cuerpo2 -> empty .)
    FOR             reduce using rule 24 (cuerpo2 -> empty .)
    DO              reduce using rule 24 (cuerpo2 -> empty .)
    RIGHTKEY        reduce using rule 24 (cuerpo2 -> empty .)
=======
    (22) est -> conditional .

    RIGHTKEY        reduce using rule 22 (est -> conditional .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 46

<<<<<<< HEAD
    (14) array -> LEFTBRACK exp RIGHTBRACK . array
    (14) array -> . LEFTBRACK exp RIGHTBRACK array
    (15) array -> . empty
    (68) empty -> .

    LEFTBRACK       shift and go to state 31
    COMMA           reduce using rule 68 (empty -> .)
    SEMICOLON       reduce using rule 68 (empty -> .)
    LESS            reduce using rule 68 (empty -> .)
    GRTR            reduce using rule 68 (empty -> .)
    EQ              reduce using rule 68 (empty -> .)
    NOTEQ           reduce using rule 68 (empty -> .)
    AND             reduce using rule 68 (empty -> .)
    OR              reduce using rule 68 (empty -> .)
    ID              reduce using rule 68 (empty -> .)

    array                          shift and go to state 70
    empty                          shift and go to state 48

state 47

    (50) exp -> ID array . exp2 SEMICOLON
    (51) exp2 -> . LESS
    (52) exp2 -> . GRTR
    (53) exp2 -> . EQ
    (54) exp2 -> . NOTEQ
    (55) exp2 -> . AND
    (56) exp2 -> . OR
    (57) exp2 -> . arithmeticExp
    (60) exp2 -> . empty
    (58) arithmeticExp -> . ID EQ ID arithmeticOp ID arithmeticExp
    (59) arithmeticExp -> . empty
    (68) empty -> .

    LESS            shift and go to state 73
    GRTR            shift and go to state 77
    EQ              shift and go to state 78
    NOTEQ           shift and go to state 74
    AND             shift and go to state 71
    OR              shift and go to state 76
    ID              shift and go to state 79
    SEMICOLON       reduce using rule 68 (empty -> .)
=======
    (36) while -> WHILE . LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY

    LEFTPAR         shift and go to state 69


state 47

    (34) cycles -> do-while .

    RIGHTKEY        reduce using rule 34 (cycles -> do-while .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    exp2                           shift and go to state 75
    arithmeticExp                  shift and go to state 72
    empty                          shift and go to state 80

state 48

<<<<<<< HEAD
    (15) array -> empty .

    LESS            reduce using rule 15 (array -> empty .)
    GRTR            reduce using rule 15 (array -> empty .)
    EQ              reduce using rule 15 (array -> empty .)
    NOTEQ           reduce using rule 15 (array -> empty .)
    AND             reduce using rule 15 (array -> empty .)
    OR              reduce using rule 15 (array -> empty .)
    ID              reduce using rule 15 (array -> empty .)
    SEMICOLON       reduce using rule 15 (array -> empty .)
    COMMA           reduce using rule 15 (array -> empty .)
=======
    (20) cuerpo2 -> est .

    RIGHTKEY        reduce using rule 20 (cuerpo2 -> est .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 49

<<<<<<< HEAD
    (7) declareRecursivo -> type ID declare2 declare3 SEMICOLON . declareRecursivo
    (7) declareRecursivo -> . type ID declare2 declare3 SEMICOLON declareRecursivo
    (8) declareRecursivo -> . empty
    (16) type -> . type2
    (68) empty -> .
    (17) type2 -> . INT
    (18) type2 -> . FLOAT
    (19) type2 -> . STRING
    (20) type2 -> . BOOL
    (21) type2 -> . VOID

    FUNCTION        reduce using rule 68 (empty -> .)
    MAIN            reduce using rule 68 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    declareRecursivo               shift and go to state 81
    type                           shift and go to state 17
    empty                          shift and go to state 18
    type2                          shift and go to state 19

state 50

    (12) declare3 -> COMMA ID . declare3
    (12) declare3 -> . COMMA ID declare3
    (13) declare3 -> . empty
    (68) empty -> .

    COMMA           shift and go to state 40
    SEMICOLON       reduce using rule 68 (empty -> .)
=======
    (33) cycles -> for .

    RIGHTKEY        reduce using rule 33 (cycles -> for .)


state 50

    (19) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 . RIGHTKEY

    RIGHTKEY        shift and go to state 70
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    declare3                       shift and go to state 82
    empty                          shift and go to state 41

state 51

<<<<<<< HEAD
    (65) funct -> FUNCTION type ID LEFTPAR type . ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY

    ID              shift and go to state 83
=======
    (24) est -> input .

    RIGHTKEY        reduce using rule 24 (est -> input .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 52

<<<<<<< HEAD
    (39) do-while -> DO . LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    LEFTKEY         shift and go to state 84
=======
    (39) for -> FOR . LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY

    LEFTPAR         shift and go to state 71
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 53

<<<<<<< HEAD
    (30) est -> funct .

    RIGHTKEY        reduce using rule 30 (est -> funct .)
=======
    (26) est -> assignment .

    RIGHTKEY        reduce using rule 26 (est -> assignment .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 54

<<<<<<< HEAD
    (64) input -> READ . LEFTPAR ID RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 85
=======
    (57) output -> WRITE . LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 72
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 55

<<<<<<< HEAD
    (25) est -> conditional .

    RIGHTKEY        reduce using rule 25 (est -> conditional .)
=======
    (28) assignment -> ID . ASSGN ID SEMICOLON

    ASSGN           shift and go to state 73
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 56

<<<<<<< HEAD
    (40) while -> WHILE . LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY

    LEFTPAR         shift and go to state 86
=======
    (29) conditional -> IF . LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY

    LEFTPAR         shift and go to state 74
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 57

<<<<<<< HEAD
    (38) cycles -> do-while .

    RIGHTKEY        reduce using rule 38 (cycles -> do-while .)
=======
    (23) est -> cycles .

    RIGHTKEY        reduce using rule 23 (est -> cycles .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 58

<<<<<<< HEAD
    (22) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 est . RIGHTKEY

    RIGHTKEY        shift and go to state 87
=======
    (32) cycles -> while .

    RIGHTKEY        reduce using rule 32 (cycles -> while .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 59

<<<<<<< HEAD
    (37) cycles -> for .

    RIGHTKEY        reduce using rule 37 (cycles -> for .)
=======
    (21) cuerpo2 -> empty .

    RIGHTKEY        reduce using rule 21 (cuerpo2 -> empty .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 60

<<<<<<< HEAD
    (27) est -> input .

    RIGHTKEY        reduce using rule 27 (est -> input .)
=======
    (25) est -> output .

    RIGHTKEY        reduce using rule 25 (est -> output .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 61

<<<<<<< HEAD
    (43) for -> FOR . LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY

    LEFTPAR         shift and go to state 88
=======
    (11) array -> LEFTBRACK exp RIGHTBRACK . array
    (11) array -> . LEFTBRACK exp RIGHTBRACK array
    (12) array -> . empty
    (64) empty -> .

    LEFTBRACK       shift and go to state 30
    COMMA           reduce using rule 64 (empty -> .)
    SEMICOLON       reduce using rule 64 (empty -> .)
    LESS            reduce using rule 64 (empty -> .)
    GRTR            reduce using rule 64 (empty -> .)
    EQ              reduce using rule 64 (empty -> .)
    NOTEQ           reduce using rule 64 (empty -> .)
    AND             reduce using rule 64 (empty -> .)
    OR              reduce using rule 64 (empty -> .)
    ID              reduce using rule 64 (empty -> .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    array                          shift and go to state 75
    empty                          shift and go to state 63

state 62

<<<<<<< HEAD
    (29) est -> assignment .

    RIGHTKEY        reduce using rule 29 (est -> assignment .)
=======
    (46) exp -> ID array . exp2 SEMICOLON
    (47) exp2 -> . LESS
    (48) exp2 -> . GRTR
    (49) exp2 -> . EQ
    (50) exp2 -> . NOTEQ
    (51) exp2 -> . AND
    (52) exp2 -> . OR
    (53) exp2 -> . arithmeticExp
    (56) exp2 -> . empty
    (54) arithmeticExp -> . ID EQ ID arithmeticOp ID arithmeticExp
    (55) arithmeticExp -> . empty
    (64) empty -> .

    LESS            shift and go to state 78
    GRTR            shift and go to state 82
    EQ              shift and go to state 83
    NOTEQ           shift and go to state 79
    AND             shift and go to state 76
    OR              shift and go to state 81
    ID              shift and go to state 84
    SEMICOLON       reduce using rule 64 (empty -> .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    exp2                           shift and go to state 80
    arithmeticExp                  shift and go to state 77
    empty                          shift and go to state 85

state 63

<<<<<<< HEAD
    (61) output -> WRITE . LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 89
=======
    (12) array -> empty .

    COMMA           reduce using rule 12 (array -> empty .)
    SEMICOLON       reduce using rule 12 (array -> empty .)
    LESS            reduce using rule 12 (array -> empty .)
    GRTR            reduce using rule 12 (array -> empty .)
    EQ              reduce using rule 12 (array -> empty .)
    NOTEQ           reduce using rule 12 (array -> empty .)
    AND             reduce using rule 12 (array -> empty .)
    OR              reduce using rule 12 (array -> empty .)
    ID              reduce using rule 12 (array -> empty .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 64

<<<<<<< HEAD
    (32) assignment -> ID . ASSGN ID SEMICOLON

    ASSGN           shift and go to state 90
=======
    (6) declare -> DECLARE type ID declare2 declare3 SEMICOLON .

    FUNCTION        reduce using rule 6 (declare -> DECLARE type ID declare2 declare3 SEMICOLON .)
    MAIN            reduce using rule 6 (declare -> DECLARE type ID declare2 declare3 SEMICOLON .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 65

<<<<<<< HEAD
    (33) conditional -> IF . LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY

    LEFTPAR         shift and go to state 91
=======
    (9) declare3 -> COMMA declare3 .

    SEMICOLON       reduce using rule 9 (declare3 -> COMMA declare3 .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 66

<<<<<<< HEAD
    (36) cycles -> while .

    RIGHTKEY        reduce using rule 36 (cycles -> while .)
=======
    (61) funct -> FUNCTION type ID LEFTPAR type . ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY

    ID              shift and go to state 86
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 67

<<<<<<< HEAD
    (31) est -> empty .

    RIGHTKEY        reduce using rule 31 (est -> empty .)
=======
    (35) do-while -> DO LEFTKEY . est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR
    (22) est -> . conditional
    (23) est -> . cycles
    (24) est -> . input
    (25) est -> . output
    (26) est -> . assignment
    (27) est -> . funct
    (29) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (32) cycles -> . while
    (33) cycles -> . for
    (34) cycles -> . do-while
    (60) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (57) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (28) assignment -> . ID ASSGN ID SEMICOLON
    (61) funct -> . FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (36) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (39) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (35) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    IF              shift and go to state 56
    READ            shift and go to state 44
    WRITE           shift and go to state 54
    ID              shift and go to state 55
    FUNCTION        shift and go to state 13
    WHILE           shift and go to state 46
    FOR             shift and go to state 52
    DO              shift and go to state 42

    est                            shift and go to state 87
    for                            shift and go to state 49
    funct                          shift and go to state 43
    assignment                     shift and go to state 53
    conditional                    shift and go to state 45
    while                          shift and go to state 58
    do-while                       shift and go to state 47
    input                          shift and go to state 51
    output                         shift and go to state 60
    cycles                         shift and go to state 57

state 68

<<<<<<< HEAD
    (28) est -> output .

    RIGHTKEY        reduce using rule 28 (est -> output .)
=======
    (60) input -> READ LEFTPAR . ID RIGHTPAR SEMICOLON

    ID              shift and go to state 88
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 69

<<<<<<< HEAD
    (26) est -> cycles .

    RIGHTKEY        reduce using rule 26 (est -> cycles .)
=======
    (36) while -> WHILE LEFTPAR . while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (37) while2 -> . exp while2
    (38) while2 -> . empty
    (46) exp -> . ID array exp2 SEMICOLON
    (64) empty -> .

    ID              shift and go to state 37
    RIGHTPAR        reduce using rule 64 (empty -> .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    while2                         shift and go to state 89
    exp                            shift and go to state 90
    empty                          shift and go to state 91

state 70

<<<<<<< HEAD
    (14) array -> LEFTBRACK exp RIGHTBRACK array .

    COMMA           reduce using rule 14 (array -> LEFTBRACK exp RIGHTBRACK array .)
    SEMICOLON       reduce using rule 14 (array -> LEFTBRACK exp RIGHTBRACK array .)
    LESS            reduce using rule 14 (array -> LEFTBRACK exp RIGHTBRACK array .)
    GRTR            reduce using rule 14 (array -> LEFTBRACK exp RIGHTBRACK array .)
    EQ              reduce using rule 14 (array -> LEFTBRACK exp RIGHTBRACK array .)
    NOTEQ           reduce using rule 14 (array -> LEFTBRACK exp RIGHTBRACK array .)
    AND             reduce using rule 14 (array -> LEFTBRACK exp RIGHTBRACK array .)
    OR              reduce using rule 14 (array -> LEFTBRACK exp RIGHTBRACK array .)
    ID              reduce using rule 14 (array -> LEFTBRACK exp RIGHTBRACK array .)
=======
    (19) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 RIGHTKEY .

    END             reduce using rule 19 (cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 RIGHTKEY .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 71

<<<<<<< HEAD
    (55) exp2 -> AND .

    SEMICOLON       reduce using rule 55 (exp2 -> AND .)
=======
    (39) for -> FOR LEFTPAR . for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (42) for2 -> . ID ASSGN ID for2
    (43) for2 -> . empty
    (64) empty -> .

    ID              shift and go to state 93
    SEMICOLON       reduce using rule 64 (empty -> .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    for2                           shift and go to state 92
    empty                          shift and go to state 94

state 72

<<<<<<< HEAD
    (57) exp2 -> arithmeticExp .

    SEMICOLON       reduce using rule 57 (exp2 -> arithmeticExp .)
=======
    (57) output -> WRITE LEFTPAR . output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (58) output2 -> . ID output2
    (59) output2 -> . empty
    (64) empty -> .

    ID              shift and go to state 96
    QUOTE           reduce using rule 64 (empty -> .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    output2                        shift and go to state 95
    empty                          shift and go to state 97

state 73

<<<<<<< HEAD
    (51) exp2 -> LESS .

    SEMICOLON       reduce using rule 51 (exp2 -> LESS .)
=======
    (28) assignment -> ID ASSGN . ID SEMICOLON

    ID              shift and go to state 98
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 74

<<<<<<< HEAD
    (54) exp2 -> NOTEQ .

    SEMICOLON       reduce using rule 54 (exp2 -> NOTEQ .)
=======
    (29) conditional -> IF LEFTPAR . conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (30) conditional2 -> . exp conditional2
    (31) conditional2 -> . empty
    (46) exp -> . ID array exp2 SEMICOLON
    (64) empty -> .

    ID              shift and go to state 37
    RIGHTPAR        reduce using rule 64 (empty -> .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    conditional2                   shift and go to state 101
    exp                            shift and go to state 100
    empty                          shift and go to state 99

state 75

<<<<<<< HEAD
    (50) exp -> ID array exp2 . SEMICOLON

    SEMICOLON       shift and go to state 92
=======
    (11) array -> LEFTBRACK exp RIGHTBRACK array .

    COMMA           reduce using rule 11 (array -> LEFTBRACK exp RIGHTBRACK array .)
    SEMICOLON       reduce using rule 11 (array -> LEFTBRACK exp RIGHTBRACK array .)
    LESS            reduce using rule 11 (array -> LEFTBRACK exp RIGHTBRACK array .)
    GRTR            reduce using rule 11 (array -> LEFTBRACK exp RIGHTBRACK array .)
    EQ              reduce using rule 11 (array -> LEFTBRACK exp RIGHTBRACK array .)
    NOTEQ           reduce using rule 11 (array -> LEFTBRACK exp RIGHTBRACK array .)
    AND             reduce using rule 11 (array -> LEFTBRACK exp RIGHTBRACK array .)
    OR              reduce using rule 11 (array -> LEFTBRACK exp RIGHTBRACK array .)
    ID              reduce using rule 11 (array -> LEFTBRACK exp RIGHTBRACK array .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 76

<<<<<<< HEAD
    (56) exp2 -> OR .

    SEMICOLON       reduce using rule 56 (exp2 -> OR .)
=======
    (51) exp2 -> AND .

    SEMICOLON       reduce using rule 51 (exp2 -> AND .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 77

<<<<<<< HEAD
    (52) exp2 -> GRTR .

    SEMICOLON       reduce using rule 52 (exp2 -> GRTR .)
=======
    (53) exp2 -> arithmeticExp .

    SEMICOLON       reduce using rule 53 (exp2 -> arithmeticExp .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 78

<<<<<<< HEAD
    (53) exp2 -> EQ .

    SEMICOLON       reduce using rule 53 (exp2 -> EQ .)
=======
    (47) exp2 -> LESS .

    SEMICOLON       reduce using rule 47 (exp2 -> LESS .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 79

<<<<<<< HEAD
    (58) arithmeticExp -> ID . EQ ID arithmeticOp ID arithmeticExp

    EQ              shift and go to state 93
=======
    (50) exp2 -> NOTEQ .

    SEMICOLON       reduce using rule 50 (exp2 -> NOTEQ .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 80

<<<<<<< HEAD
    (60) exp2 -> empty .
    (59) arithmeticExp -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 59 (arithmeticExp -> empty .)
    SEMICOLON       reduce using rule 59 (arithmeticExp -> empty .)

  ! SEMICOLON       [ reduce using rule 60 (exp2 -> empty .) ]
=======
    (46) exp -> ID array exp2 . SEMICOLON

    SEMICOLON       shift and go to state 102
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 81

<<<<<<< HEAD
    (7) declareRecursivo -> type ID declare2 declare3 SEMICOLON declareRecursivo .

    FUNCTION        reduce using rule 7 (declareRecursivo -> type ID declare2 declare3 SEMICOLON declareRecursivo .)
    MAIN            reduce using rule 7 (declareRecursivo -> type ID declare2 declare3 SEMICOLON declareRecursivo .)
=======
    (52) exp2 -> OR .

    SEMICOLON       reduce using rule 52 (exp2 -> OR .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 82

<<<<<<< HEAD
    (12) declare3 -> COMMA ID declare3 .

    SEMICOLON       reduce using rule 12 (declare3 -> COMMA ID declare3 .)
=======
    (48) exp2 -> GRTR .

    SEMICOLON       reduce using rule 48 (exp2 -> GRTR .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 83

<<<<<<< HEAD
    (65) funct -> FUNCTION type ID LEFTPAR type ID . funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (66) funct2 -> . COMMA funct type ID funct2
    (67) funct2 -> . empty
    (68) empty -> .

    COMMA           shift and go to state 95
    RIGHTPAR        reduce using rule 68 (empty -> .)
=======
    (49) exp2 -> EQ .

    SEMICOLON       reduce using rule 49 (exp2 -> EQ .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    funct2                         shift and go to state 94
    empty                          shift and go to state 96

state 84

<<<<<<< HEAD
    (39) do-while -> DO LEFTKEY . est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR
    (25) est -> . conditional
    (26) est -> . cycles
    (27) est -> . input
    (28) est -> . output
    (29) est -> . assignment
    (30) est -> . funct
    (31) est -> . empty
    (33) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (36) cycles -> . while
    (37) cycles -> . for
    (38) cycles -> . do-while
    (64) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (61) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (32) assignment -> . ID ASSGN ID SEMICOLON
    (65) funct -> . FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (68) empty -> .
    (40) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (43) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (39) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 65
    READ            shift and go to state 54
    WRITE           shift and go to state 63
    ID              shift and go to state 64
    FUNCTION        shift and go to state 20
    RIGHTKEY        reduce using rule 68 (empty -> .)
    WHILE           shift and go to state 56
    FOR             shift and go to state 61
    DO              shift and go to state 52

    est                            shift and go to state 97
    for                            shift and go to state 59
    funct                          shift and go to state 53
    assignment                     shift and go to state 62
    conditional                    shift and go to state 55
    while                          shift and go to state 66
    do-while                       shift and go to state 57
    input                          shift and go to state 60
    output                         shift and go to state 68
    cycles                         shift and go to state 69
    empty                          shift and go to state 67

state 85

    (64) input -> READ LEFTPAR . ID RIGHTPAR SEMICOLON

    ID              shift and go to state 98


state 86

    (40) while -> WHILE LEFTPAR . while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (41) while2 -> . exp while2
    (42) while2 -> . empty
    (50) exp -> . ID array exp2 SEMICOLON
    (68) empty -> .

    ID              shift and go to state 38
    RIGHTPAR        reduce using rule 68 (empty -> .)
=======
    (54) arithmeticExp -> ID . EQ ID arithmeticOp ID arithmeticExp

    EQ              shift and go to state 103


state 85

    (56) exp2 -> empty .
    (55) arithmeticExp -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 55 (arithmeticExp -> empty .)
    SEMICOLON       reduce using rule 55 (arithmeticExp -> empty .)

  ! SEMICOLON       [ reduce using rule 56 (exp2 -> empty .) ]
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    while2                         shift and go to state 99
    exp                            shift and go to state 100
    empty                          shift and go to state 101

state 86

<<<<<<< HEAD
    (22) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 est RIGHTKEY .

    IF              reduce using rule 22 (cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 est RIGHTKEY .)
    READ            reduce using rule 22 (cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 est RIGHTKEY .)
    WRITE           reduce using rule 22 (cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 est RIGHTKEY .)
    ID              reduce using rule 22 (cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 est RIGHTKEY .)
    FUNCTION        reduce using rule 22 (cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 est RIGHTKEY .)
    WHILE           reduce using rule 22 (cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 est RIGHTKEY .)
    FOR             reduce using rule 22 (cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 est RIGHTKEY .)
    DO              reduce using rule 22 (cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 est RIGHTKEY .)
    RIGHTKEY        reduce using rule 22 (cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 est RIGHTKEY .)
    END             reduce using rule 22 (cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 est RIGHTKEY .)


state 88

    (43) for -> FOR LEFTPAR . for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (46) for2 -> . ID ASSGN ID for2
    (47) for2 -> . empty
    (68) empty -> .

    ID              shift and go to state 103
    SEMICOLON       reduce using rule 68 (empty -> .)

    for2                           shift and go to state 102
    empty                          shift and go to state 104

state 89

    (61) output -> WRITE LEFTPAR . output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (62) output2 -> . ID output2
    (63) output2 -> . empty
    (68) empty -> .

    ID              shift and go to state 106
    QUOTE           reduce using rule 68 (empty -> .)

    output2                        shift and go to state 105
    empty                          shift and go to state 107

state 90

    (32) assignment -> ID ASSGN . ID SEMICOLON

    ID              shift and go to state 108


state 91

    (33) conditional -> IF LEFTPAR . conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (34) conditional2 -> . exp conditional2
    (35) conditional2 -> . empty
    (50) exp -> . ID array exp2 SEMICOLON
    (68) empty -> .

    ID              shift and go to state 38
    RIGHTPAR        reduce using rule 68 (empty -> .)

    conditional2                   shift and go to state 111
    exp                            shift and go to state 110
    empty                          shift and go to state 109

state 92

    (50) exp -> ID array exp2 SEMICOLON .

    ID              reduce using rule 50 (exp -> ID array exp2 SEMICOLON .)
    RIGHTPAR        reduce using rule 50 (exp -> ID array exp2 SEMICOLON .)
    QUOTE           reduce using rule 50 (exp -> ID array exp2 SEMICOLON .)
    SEMICOLON       reduce using rule 50 (exp -> ID array exp2 SEMICOLON .)
    RIGHTBRACK      reduce using rule 50 (exp -> ID array exp2 SEMICOLON .)


state 93
=======
    (61) funct -> FUNCTION type ID LEFTPAR type ID . funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (62) funct2 -> . COMMA funct type ID funct2
    (63) funct2 -> . empty
    (64) empty -> .

    COMMA           shift and go to state 105
    RIGHTPAR        reduce using rule 64 (empty -> .)

    funct2                         shift and go to state 104
    empty                          shift and go to state 106

state 87
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    (58) arithmeticExp -> ID EQ . ID arithmeticOp ID arithmeticExp

<<<<<<< HEAD
    ID              shift and go to state 112
=======
    RIGHTKEY        shift and go to state 107
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 88

    (65) funct -> FUNCTION type ID LEFTPAR type ID funct2 . RIGHTPAR LEFTKEY est RIGHTKEY

<<<<<<< HEAD
    RIGHTPAR        shift and go to state 113
=======
    RIGHTPAR        shift and go to state 108
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 89

    (66) funct2 -> COMMA . funct type ID funct2
    (65) funct -> . FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY

<<<<<<< HEAD
    FUNCTION        shift and go to state 20
=======
    RIGHTPAR        shift and go to state 109
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    funct                          shift and go to state 114

state 90

    (67) funct2 -> empty .

    RIGHTPAR        reduce using rule 67 (funct2 -> empty .)

<<<<<<< HEAD
=======
    while2                         shift and go to state 110
    empty                          shift and go to state 91
    exp                            shift and go to state 90
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

state 91

    (39) do-while -> DO LEFTKEY est . RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    RIGHTKEY        shift and go to state 115


state 92

    (64) input -> READ LEFTPAR ID . RIGHTPAR SEMICOLON

<<<<<<< HEAD
    RIGHTPAR        shift and go to state 116
=======
    SEMICOLON       shift and go to state 111
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 93

    (40) while -> WHILE LEFTPAR while2 . RIGHTPAR WHILE LEFTKEY est RIGHTKEY

<<<<<<< HEAD
    RIGHTPAR        shift and go to state 117
=======
    ASSGN           shift and go to state 112
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 94

    (41) while2 -> exp . while2
    (41) while2 -> . exp while2
    (42) while2 -> . empty
    (50) exp -> . ID array exp2 SEMICOLON
    (68) empty -> .

    ID              shift and go to state 38
    RIGHTPAR        reduce using rule 68 (empty -> .)

    while2                         shift and go to state 118
    empty                          shift and go to state 101
    exp                            shift and go to state 100

state 95

    (42) while2 -> empty .

<<<<<<< HEAD
    RIGHTPAR        reduce using rule 42 (while2 -> empty .)
=======
    QUOTE           shift and go to state 113
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 96

    (43) for -> FOR LEFTPAR for2 . SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY

<<<<<<< HEAD
    SEMICOLON       shift and go to state 119

=======
    ID              shift and go to state 96
    QUOTE           reduce using rule 64 (empty -> .)

    output2                        shift and go to state 114
    empty                          shift and go to state 97
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

state 97

    (46) for2 -> ID . ASSGN ID for2

    ASSGN           shift and go to state 120


state 98

    (47) for2 -> empty .

<<<<<<< HEAD
    SEMICOLON       reduce using rule 47 (for2 -> empty .)
=======
    SEMICOLON       shift and go to state 115
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 99

    (61) output -> WRITE LEFTPAR output2 . QUOTE exp QUOTE RIGHTPAR SEMICOLON

    QUOTE           shift and go to state 121


state 100

    (62) output2 -> ID . output2
    (62) output2 -> . ID output2
    (63) output2 -> . empty
    (68) empty -> .

    ID              shift and go to state 106
    QUOTE           reduce using rule 68 (empty -> .)

<<<<<<< HEAD
    output2                        shift and go to state 122
    empty                          shift and go to state 107
=======
    empty                          shift and go to state 99
    conditional2                   shift and go to state 116
    exp                            shift and go to state 100
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

state 101

    (63) output2 -> empty .

<<<<<<< HEAD
    QUOTE           reduce using rule 63 (output2 -> empty .)
=======
    RIGHTPAR        shift and go to state 117
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 102

<<<<<<< HEAD
    (32) assignment -> ID ASSGN ID . SEMICOLON

    SEMICOLON       shift and go to state 123
=======
    (46) exp -> ID array exp2 SEMICOLON .

    QUOTE           reduce using rule 46 (exp -> ID array exp2 SEMICOLON .)
    ID              reduce using rule 46 (exp -> ID array exp2 SEMICOLON .)
    SEMICOLON       reduce using rule 46 (exp -> ID array exp2 SEMICOLON .)
    RIGHTPAR        reduce using rule 46 (exp -> ID array exp2 SEMICOLON .)
    RIGHTBRACK      reduce using rule 46 (exp -> ID array exp2 SEMICOLON .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 103

<<<<<<< HEAD
    (35) conditional2 -> empty .

    RIGHTPAR        reduce using rule 35 (conditional2 -> empty .)
=======
    (54) arithmeticExp -> ID EQ . ID arithmeticOp ID arithmeticExp

    ID              shift and go to state 118
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 104

<<<<<<< HEAD
    (34) conditional2 -> exp . conditional2
    (34) conditional2 -> . exp conditional2
    (35) conditional2 -> . empty
    (50) exp -> . ID array exp2 SEMICOLON
    (68) empty -> .

    ID              shift and go to state 38
    RIGHTPAR        reduce using rule 68 (empty -> .)

    empty                          shift and go to state 109
    conditional2                   shift and go to state 124
    exp                            shift and go to state 110
=======
    (61) funct -> FUNCTION type ID LEFTPAR type ID funct2 . RIGHTPAR LEFTKEY est RIGHTKEY

    RIGHTPAR        shift and go to state 119

>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

state 105

    (62) funct2 -> COMMA . funct type ID funct2
    (61) funct -> . FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY

    FUNCTION        shift and go to state 13

    funct                          shift and go to state 120

state 106

    (63) funct2 -> empty .

    RIGHTPAR        reduce using rule 63 (funct2 -> empty .)


state 107

    (33) conditional -> IF LEFTPAR conditional2 . RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY

<<<<<<< HEAD
    RIGHTPAR        shift and go to state 125
=======
    WHILE           shift and go to state 121
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 108

    (58) arithmeticExp -> ID EQ ID . arithmeticOp ID arithmeticExp
    (44) arithmeticOp -> . SUM
    (45) arithmeticOp -> . MINUS

<<<<<<< HEAD
    SUM             shift and go to state 127
    MINUS           shift and go to state 128
=======
    SEMICOLON       shift and go to state 122
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    arithmeticOp                   shift and go to state 126

state 109

    (65) funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR . LEFTKEY est RIGHTKEY

<<<<<<< HEAD
    LEFTKEY         shift and go to state 129
=======
    WHILE           shift and go to state 123
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 110

    (66) funct2 -> COMMA funct . type ID funct2
    (16) type -> . type2
    (17) type2 -> . INT
    (18) type2 -> . FLOAT
    (19) type2 -> . STRING
    (20) type2 -> . BOOL
    (21) type2 -> . VOID

    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    type2                          shift and go to state 19
    type                           shift and go to state 130

state 111

    (39) do-while -> DO LEFTKEY est RIGHTKEY . WHILE LEFTPAR while2 RIGHTPAR

    WHILE           shift and go to state 131

<<<<<<< HEAD
=======
    exp                            shift and go to state 124
    for3                           shift and go to state 125
    empty                          shift and go to state 126
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

state 112

    (64) input -> READ LEFTPAR ID RIGHTPAR . SEMICOLON

<<<<<<< HEAD
    SEMICOLON       shift and go to state 132
=======
    ID              shift and go to state 127
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 113

    (40) while -> WHILE LEFTPAR while2 RIGHTPAR . WHILE LEFTKEY est RIGHTKEY

    WHILE           shift and go to state 133

<<<<<<< HEAD
=======
    exp                            shift and go to state 128
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

state 114

    (41) while2 -> exp while2 .

    RIGHTPAR        reduce using rule 41 (while2 -> exp while2 .)


state 115

    (43) for -> FOR LEFTPAR for2 SEMICOLON . for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (48) for3 -> . exp for3
    (49) for3 -> . empty
    (50) exp -> . ID array exp2 SEMICOLON
    (68) empty -> .

    ID              shift and go to state 38
    SEMICOLON       reduce using rule 68 (empty -> .)

    exp                            shift and go to state 134
    for3                           shift and go to state 135
    empty                          shift and go to state 136

state 116

    (46) for2 -> ID ASSGN . ID for2

    ID              shift and go to state 137


state 117

    (61) output -> WRITE LEFTPAR output2 QUOTE . exp QUOTE RIGHTPAR SEMICOLON
    (50) exp -> . ID array exp2 SEMICOLON

<<<<<<< HEAD
    ID              shift and go to state 38

    exp                            shift and go to state 138

state 122

    (62) output2 -> ID output2 .

    QUOTE           reduce using rule 62 (output2 -> ID output2 .)


state 123

    (32) assignment -> ID ASSGN ID SEMICOLON .

    RIGHTKEY        reduce using rule 32 (assignment -> ID ASSGN ID SEMICOLON .)
=======
    LEFTKEY         shift and go to state 129

>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

state 118

    (54) arithmeticExp -> ID EQ ID . arithmeticOp ID arithmeticExp
    (40) arithmeticOp -> . SUM
    (41) arithmeticOp -> . MINUS

<<<<<<< HEAD
    (34) conditional2 -> exp conditional2 .

    RIGHTPAR        reduce using rule 34 (conditional2 -> exp conditional2 .)
=======
    SUM             shift and go to state 131
    MINUS           shift and go to state 132

    arithmeticOp                   shift and go to state 130
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

state 119

    (61) funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR . LEFTKEY est RIGHTKEY

<<<<<<< HEAD
    (33) conditional -> IF LEFTPAR conditional2 RIGHTPAR . LEFTKEY est RIGHTKEY ELSE est RIGHTKEY

    LEFTKEY         shift and go to state 139
=======
    LEFTKEY         shift and go to state 133
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 120

<<<<<<< HEAD
    (58) arithmeticExp -> ID EQ ID arithmeticOp . ID arithmeticExp

    ID              shift and go to state 140
=======
    (62) funct2 -> COMMA funct . type ID funct2
    (13) type -> . TYPE type2

    TYPE            shift and go to state 11
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    type                           shift and go to state 134

state 121

    (44) arithmeticOp -> SUM .

<<<<<<< HEAD
    RIGHTPAR        reduce using rule 44 (arithmeticOp -> SUM .)
    ID              reduce using rule 44 (arithmeticOp -> SUM .)
    SUM             reduce using rule 44 (arithmeticOp -> SUM .)
    MINUS           reduce using rule 44 (arithmeticOp -> SUM .)
=======
    LEFTPAR         shift and go to state 135
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 122

    (45) arithmeticOp -> MINUS .

    RIGHTPAR        reduce using rule 45 (arithmeticOp -> MINUS .)
    ID              reduce using rule 45 (arithmeticOp -> MINUS .)
    SUM             reduce using rule 45 (arithmeticOp -> MINUS .)
    MINUS           reduce using rule 45 (arithmeticOp -> MINUS .)


state 123

<<<<<<< HEAD
    (65) funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY . est RIGHTKEY
    (25) est -> . conditional
    (26) est -> . cycles
    (27) est -> . input
    (28) est -> . output
    (29) est -> . assignment
    (30) est -> . funct
    (31) est -> . empty
    (33) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (36) cycles -> . while
    (37) cycles -> . for
    (38) cycles -> . do-while
    (64) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (61) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (32) assignment -> . ID ASSGN ID SEMICOLON
    (65) funct -> . FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (68) empty -> .
    (40) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (43) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (39) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 65
    READ            shift and go to state 54
    WRITE           shift and go to state 63
    ID              shift and go to state 64
    FUNCTION        shift and go to state 20
    RIGHTKEY        reduce using rule 68 (empty -> .)
    WHILE           shift and go to state 56
    FOR             shift and go to state 61
    DO              shift and go to state 52

    est                            shift and go to state 141
    for                            shift and go to state 59
    funct                          shift and go to state 53
    assignment                     shift and go to state 62
    conditional                    shift and go to state 55
    while                          shift and go to state 66
    do-while                       shift and go to state 57
    output                         shift and go to state 68
    input                          shift and go to state 60
    cycles                         shift and go to state 69
    empty                          shift and go to state 67
=======
    (36) while -> WHILE LEFTPAR while2 RIGHTPAR WHILE . LEFTKEY est RIGHTKEY

    LEFTKEY         shift and go to state 136

>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

state 124

    (66) funct2 -> COMMA funct type . ID funct2

    ID              shift and go to state 142

<<<<<<< HEAD
=======
    for3                           shift and go to state 137
    empty                          shift and go to state 126
    exp                            shift and go to state 124
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

state 125

    (39) do-while -> DO LEFTKEY est RIGHTKEY WHILE . LEFTPAR while2 RIGHTPAR

<<<<<<< HEAD
    LEFTPAR         shift and go to state 143
=======
    SEMICOLON       shift and go to state 138
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 126

    (64) input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .

    RIGHTKEY        reduce using rule 64 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)


state 127

    (40) while -> WHILE LEFTPAR while2 RIGHTPAR WHILE . LEFTKEY est RIGHTKEY

<<<<<<< HEAD
    LEFTKEY         shift and go to state 144

=======
    ID              shift and go to state 93
    SEMICOLON       reduce using rule 64 (empty -> .)

    for2                           shift and go to state 139
    empty                          shift and go to state 94
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

state 128

    (48) for3 -> exp . for3
    (48) for3 -> . exp for3
    (49) for3 -> . empty
    (50) exp -> . ID array exp2 SEMICOLON
    (68) empty -> .

<<<<<<< HEAD
    ID              shift and go to state 38
    SEMICOLON       reduce using rule 68 (empty -> .)
=======
    QUOTE           shift and go to state 140
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    for3                           shift and go to state 145
    empty                          shift and go to state 136
    exp                            shift and go to state 134

state 129

<<<<<<< HEAD
    (43) for -> FOR LEFTPAR for2 SEMICOLON for3 . SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY

    SEMICOLON       shift and go to state 146

=======
    (29) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY . est RIGHTKEY ELSE est RIGHTKEY
    (22) est -> . conditional
    (23) est -> . cycles
    (24) est -> . input
    (25) est -> . output
    (26) est -> . assignment
    (27) est -> . funct
    (29) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (32) cycles -> . while
    (33) cycles -> . for
    (34) cycles -> . do-while
    (60) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (57) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (28) assignment -> . ID ASSGN ID SEMICOLON
    (61) funct -> . FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (36) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (39) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (35) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 56
    READ            shift and go to state 44
    WRITE           shift and go to state 54
    ID              shift and go to state 55
    FUNCTION        shift and go to state 13
    WHILE           shift and go to state 46
    FOR             shift and go to state 52
    DO              shift and go to state 42

    est                            shift and go to state 141
    for                            shift and go to state 49
    funct                          shift and go to state 43
    assignment                     shift and go to state 53
    conditional                    shift and go to state 45
    while                          shift and go to state 58
    do-while                       shift and go to state 47
    output                         shift and go to state 60
    input                          shift and go to state 51
    cycles                         shift and go to state 57
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

state 130

<<<<<<< HEAD
    (49) for3 -> empty .

    SEMICOLON       reduce using rule 49 (for3 -> empty .)
=======
    (54) arithmeticExp -> ID EQ ID arithmeticOp . ID arithmeticExp

    ID              shift and go to state 142
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 131

<<<<<<< HEAD
    (46) for2 -> ID ASSGN ID . for2
    (46) for2 -> . ID ASSGN ID for2
    (47) for2 -> . empty
    (68) empty -> .

    ID              shift and go to state 103
    SEMICOLON       reduce using rule 68 (empty -> .)
=======
    (40) arithmeticOp -> SUM .

    SUM             reduce using rule 40 (arithmeticOp -> SUM .)
    MINUS           reduce using rule 40 (arithmeticOp -> SUM .)
    ID              reduce using rule 40 (arithmeticOp -> SUM .)
    RIGHTPAR        reduce using rule 40 (arithmeticOp -> SUM .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    for2                           shift and go to state 147
    empty                          shift and go to state 104

state 132

<<<<<<< HEAD
    (61) output -> WRITE LEFTPAR output2 QUOTE exp . QUOTE RIGHTPAR SEMICOLON

    QUOTE           shift and go to state 148
=======
    (41) arithmeticOp -> MINUS .

    SUM             reduce using rule 41 (arithmeticOp -> MINUS .)
    MINUS           reduce using rule 41 (arithmeticOp -> MINUS .)
    ID              reduce using rule 41 (arithmeticOp -> MINUS .)
    RIGHTPAR        reduce using rule 41 (arithmeticOp -> MINUS .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 133

    (61) funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY . est RIGHTKEY
    (22) est -> . conditional
    (23) est -> . cycles
    (24) est -> . input
    (25) est -> . output
    (26) est -> . assignment
    (27) est -> . funct
    (29) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (32) cycles -> . while
    (33) cycles -> . for
    (34) cycles -> . do-while
    (60) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (57) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (28) assignment -> . ID ASSGN ID SEMICOLON
    (61) funct -> . FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (36) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (39) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (35) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 56
    READ            shift and go to state 44
    WRITE           shift and go to state 54
    ID              shift and go to state 55
    FUNCTION        shift and go to state 13
    WHILE           shift and go to state 46
    FOR             shift and go to state 52
    DO              shift and go to state 42

    est                            shift and go to state 143
    for                            shift and go to state 49
    funct                          shift and go to state 43
    assignment                     shift and go to state 53
    conditional                    shift and go to state 45
    while                          shift and go to state 58
    do-while                       shift and go to state 47
    output                         shift and go to state 60
    input                          shift and go to state 51
    cycles                         shift and go to state 57

state 134

    (62) funct2 -> COMMA funct type . ID funct2

    ID              shift and go to state 144


state 135

    (33) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY . est RIGHTKEY ELSE est RIGHTKEY
    (25) est -> . conditional
    (26) est -> . cycles
    (27) est -> . input
    (28) est -> . output
    (29) est -> . assignment
    (30) est -> . funct
    (31) est -> . empty
    (33) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (36) cycles -> . while
    (37) cycles -> . for
    (38) cycles -> . do-while
    (64) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (61) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (32) assignment -> . ID ASSGN ID SEMICOLON
    (65) funct -> . FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (68) empty -> .
    (40) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (43) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (39) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 65
    READ            shift and go to state 54
    WRITE           shift and go to state 63
    ID              shift and go to state 64
    FUNCTION        shift and go to state 20
    RIGHTKEY        reduce using rule 68 (empty -> .)
    WHILE           shift and go to state 56
    FOR             shift and go to state 61
    DO              shift and go to state 52

    est                            shift and go to state 149
    for                            shift and go to state 59
    funct                          shift and go to state 53
    assignment                     shift and go to state 62
    conditional                    shift and go to state 55
    while                          shift and go to state 66
    do-while                       shift and go to state 57
    empty                          shift and go to state 67
    output                         shift and go to state 68
    input                          shift and go to state 60
    cycles                         shift and go to state 69

state 140

<<<<<<< HEAD
    (58) arithmeticExp -> ID EQ ID arithmeticOp ID . arithmeticExp
    (58) arithmeticExp -> . ID EQ ID arithmeticOp ID arithmeticExp
    (59) arithmeticExp -> . empty
    (68) empty -> .

    ID              shift and go to state 79
    SEMICOLON       reduce using rule 68 (empty -> .)

    arithmeticExp                  shift and go to state 150
    empty                          shift and go to state 151
=======
    while2                         shift and go to state 145
    exp                            shift and go to state 90
    empty                          shift and go to state 91

state 136

    (36) while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY . est RIGHTKEY
    (22) est -> . conditional
    (23) est -> . cycles
    (24) est -> . input
    (25) est -> . output
    (26) est -> . assignment
    (27) est -> . funct
    (29) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (32) cycles -> . while
    (33) cycles -> . for
    (34) cycles -> . do-while
    (60) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (57) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (28) assignment -> . ID ASSGN ID SEMICOLON
    (61) funct -> . FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (36) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (39) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (35) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 56
    READ            shift and go to state 44
    WRITE           shift and go to state 54
    ID              shift and go to state 55
    FUNCTION        shift and go to state 13
    WHILE           shift and go to state 46
    FOR             shift and go to state 52
    DO              shift and go to state 42

    est                            shift and go to state 146
    for                            shift and go to state 49
    funct                          shift and go to state 43
    assignment                     shift and go to state 53
    conditional                    shift and go to state 45
    while                          shift and go to state 58
    do-while                       shift and go to state 47
    input                          shift and go to state 51
    output                         shift and go to state 60
    cycles                         shift and go to state 57
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

state 137

    (65) funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 152


state 138

    (66) funct2 -> COMMA funct type ID . funct2
    (66) funct2 -> . COMMA funct type ID funct2
    (67) funct2 -> . empty
    (68) empty -> .

<<<<<<< HEAD
    COMMA           shift and go to state 95
    RIGHTPAR        reduce using rule 68 (empty -> .)
=======
    ID              shift and go to state 147
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    funct2                         shift and go to state 153
    empty                          shift and go to state 96

state 139

    (39) do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR . while2 RIGHTPAR
    (41) while2 -> . exp while2
    (42) while2 -> . empty
    (50) exp -> . ID array exp2 SEMICOLON
    (68) empty -> .

    ID              shift and go to state 38
    RIGHTPAR        reduce using rule 68 (empty -> .)

    while2                         shift and go to state 154
    exp                            shift and go to state 100
    empty                          shift and go to state 101

state 140

<<<<<<< HEAD
    (40) while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY . est RIGHTKEY
    (25) est -> . conditional
    (26) est -> . cycles
    (27) est -> . input
    (28) est -> . output
    (29) est -> . assignment
    (30) est -> . funct
    (31) est -> . empty
    (33) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (36) cycles -> . while
    (37) cycles -> . for
    (38) cycles -> . do-while
    (64) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (61) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (32) assignment -> . ID ASSGN ID SEMICOLON
    (65) funct -> . FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (68) empty -> .
    (40) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (43) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (39) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 65
    READ            shift and go to state 54
    WRITE           shift and go to state 63
    ID              shift and go to state 64
    FUNCTION        shift and go to state 20
    RIGHTKEY        reduce using rule 68 (empty -> .)
    WHILE           shift and go to state 56
    FOR             shift and go to state 61
    DO              shift and go to state 52

    est                            shift and go to state 155
    for                            shift and go to state 59
    funct                          shift and go to state 53
    assignment                     shift and go to state 62
    conditional                    shift and go to state 55
    while                          shift and go to state 66
    do-while                       shift and go to state 57
    input                          shift and go to state 60
    output                         shift and go to state 68
    cycles                         shift and go to state 69
    empty                          shift and go to state 67
=======
    (57) output -> WRITE LEFTPAR output2 QUOTE exp QUOTE . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 148

>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

state 141

    (48) for3 -> exp for3 .

<<<<<<< HEAD
    SEMICOLON       reduce using rule 48 (for3 -> exp for3 .)
=======
    RIGHTKEY        shift and go to state 149


state 142

    (54) arithmeticExp -> ID EQ ID arithmeticOp ID . arithmeticExp
    (54) arithmeticExp -> . ID EQ ID arithmeticOp ID arithmeticExp
    (55) arithmeticExp -> . empty
    (64) empty -> .

    ID              shift and go to state 84
    SEMICOLON       reduce using rule 64 (empty -> .)

    arithmeticExp                  shift and go to state 150
    empty                          shift and go to state 151

state 143

    (61) funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 152


state 144

    (62) funct2 -> COMMA funct type ID . funct2
    (62) funct2 -> . COMMA funct type ID funct2
    (63) funct2 -> . empty
    (64) empty -> .

    COMMA           shift and go to state 105
    RIGHTPAR        reduce using rule 64 (empty -> .)

    funct2                         shift and go to state 153
    empty                          shift and go to state 106

state 145

    (35) do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 . RIGHTPAR

    RIGHTPAR        shift and go to state 154
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 146

<<<<<<< HEAD
    (43) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON . ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY

    ID              shift and go to state 156
=======
    (36) while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 155
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 147

<<<<<<< HEAD
    (46) for2 -> ID ASSGN ID for2 .

    SEMICOLON       reduce using rule 46 (for2 -> ID ASSGN ID for2 .)
=======
    (39) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID . arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (40) arithmeticOp -> . SUM
    (41) arithmeticOp -> . MINUS

    SUM             shift and go to state 131
    MINUS           shift and go to state 132
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    arithmeticOp                   shift and go to state 156

state 148

<<<<<<< HEAD
    (61) output -> WRITE LEFTPAR output2 QUOTE exp QUOTE . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 157
=======
    (57) output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 157
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 149

<<<<<<< HEAD
    (33) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est . RIGHTKEY ELSE est RIGHTKEY

    RIGHTKEY        shift and go to state 158
=======
    (29) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY . ELSE est RIGHTKEY

    ELSE            shift and go to state 158
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 150

<<<<<<< HEAD
    (58) arithmeticExp -> ID EQ ID arithmeticOp ID arithmeticExp .

    SEMICOLON       reduce using rule 58 (arithmeticExp -> ID EQ ID arithmeticOp ID arithmeticExp .)
=======
    (54) arithmeticExp -> ID EQ ID arithmeticOp ID arithmeticExp .

    SEMICOLON       reduce using rule 54 (arithmeticExp -> ID EQ ID arithmeticOp ID arithmeticExp .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 151

<<<<<<< HEAD
    (59) arithmeticExp -> empty .

    SEMICOLON       reduce using rule 59 (arithmeticExp -> empty .)
=======
    (55) arithmeticExp -> empty .

    SEMICOLON       reduce using rule 55 (arithmeticExp -> empty .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 152

<<<<<<< HEAD
    (65) funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY .

    RIGHTKEY        reduce using rule 65 (funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    FUNCTION        reduce using rule 65 (funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    MAIN            reduce using rule 65 (funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    INT             reduce using rule 65 (funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    FLOAT           reduce using rule 65 (funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    STRING          reduce using rule 65 (funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    BOOL            reduce using rule 65 (funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    VOID            reduce using rule 65 (funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
=======
    (61) funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY .

    TYPE            reduce using rule 61 (funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    RIGHTKEY        reduce using rule 61 (funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    FUNCTION        reduce using rule 61 (funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    MAIN            reduce using rule 61 (funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 153

<<<<<<< HEAD
    (66) funct2 -> COMMA funct type ID funct2 .

    RIGHTPAR        reduce using rule 66 (funct2 -> COMMA funct type ID funct2 .)
=======
    (62) funct2 -> COMMA funct type ID funct2 .

    RIGHTPAR        reduce using rule 62 (funct2 -> COMMA funct type ID funct2 .)
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 154

<<<<<<< HEAD
    (39) do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 . RIGHTPAR

    RIGHTPAR        shift and go to state 159


state 155

    (40) while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est . RIGHTKEY
=======
    (35) do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    RIGHTKEY        shift and go to state 160


state 155

    (43) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID . arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (44) arithmeticOp -> . SUM
    (45) arithmeticOp -> . MINUS

    SUM             shift and go to state 127
    MINUS           shift and go to state 128

    arithmeticOp                   shift and go to state 161

state 156

    (61) output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR . SEMICOLON

<<<<<<< HEAD
    SEMICOLON       shift and go to state 162

=======
    SUM             shift and go to state 131
    MINUS           shift and go to state 132

    arithmeticOp                   shift and go to state 159
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

state 157

    (33) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY . ELSE est RIGHTKEY

    ELSE            shift and go to state 163


state 158

<<<<<<< HEAD
    (39) do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .

    RIGHTKEY        reduce using rule 39 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)

=======
    (29) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE . est RIGHTKEY
    (22) est -> . conditional
    (23) est -> . cycles
    (24) est -> . input
    (25) est -> . output
    (26) est -> . assignment
    (27) est -> . funct
    (29) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (32) cycles -> . while
    (33) cycles -> . for
    (34) cycles -> . do-while
    (60) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (57) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (28) assignment -> . ID ASSGN ID SEMICOLON
    (61) funct -> . FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (36) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (39) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (35) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 56
    READ            shift and go to state 44
    WRITE           shift and go to state 54
    ID              shift and go to state 55
    FUNCTION        shift and go to state 13
    WHILE           shift and go to state 46
    FOR             shift and go to state 52
    DO              shift and go to state 42

    est                            shift and go to state 160
    for                            shift and go to state 49
    funct                          shift and go to state 43
    assignment                     shift and go to state 53
    conditional                    shift and go to state 45
    while                          shift and go to state 58
    do-while                       shift and go to state 47
    output                         shift and go to state 60
    input                          shift and go to state 51
    cycles                         shift and go to state 57
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

state 159

    (40) while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY .

<<<<<<< HEAD
    RIGHTKEY        reduce using rule 40 (while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY .)
=======
    RIGHTPAR        shift and go to state 161
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 160

    (43) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp . arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (44) arithmeticOp -> . SUM
    (45) arithmeticOp -> . MINUS

<<<<<<< HEAD
    SUM             shift and go to state 127
    MINUS           shift and go to state 128
=======
    RIGHTKEY        shift and go to state 162
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

    arithmeticOp                   shift and go to state 164

state 161

    (61) output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON .

<<<<<<< HEAD
    RIGHTKEY        reduce using rule 61 (output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON .)
=======
    LEFTKEY         shift and go to state 163
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 162

    (33) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE . est RIGHTKEY
    (25) est -> . conditional
    (26) est -> . cycles
    (27) est -> . input
    (28) est -> . output
    (29) est -> . assignment
    (30) est -> . funct
    (31) est -> . empty
    (33) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (36) cycles -> . while
    (37) cycles -> . for
    (38) cycles -> . do-while
    (64) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (61) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (32) assignment -> . ID ASSGN ID SEMICOLON
    (65) funct -> . FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (68) empty -> .
    (40) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (43) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (39) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 65
    READ            shift and go to state 54
    WRITE           shift and go to state 63
    ID              shift and go to state 64
    FUNCTION        shift and go to state 20
    RIGHTKEY        reduce using rule 68 (empty -> .)
    WHILE           shift and go to state 56
    FOR             shift and go to state 61
    DO              shift and go to state 52

    est                            shift and go to state 165
    for                            shift and go to state 59
    funct                          shift and go to state 53
    assignment                     shift and go to state 62
    conditional                    shift and go to state 55
    while                          shift and go to state 66
    do-while                       shift and go to state 57
    empty                          shift and go to state 67
    output                         shift and go to state 68
    input                          shift and go to state 60
    cycles                         shift and go to state 69

state 163

<<<<<<< HEAD
    (43) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp . RIGHTPAR LEFTKEY est RIGHTKEY

    RIGHTPAR        shift and go to state 166

=======
    (39) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY . est RIGHTKEY
    (22) est -> . conditional
    (23) est -> . cycles
    (24) est -> . input
    (25) est -> . output
    (26) est -> . assignment
    (27) est -> . funct
    (29) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (32) cycles -> . while
    (33) cycles -> . for
    (34) cycles -> . do-while
    (60) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (57) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (28) assignment -> . ID ASSGN ID SEMICOLON
    (61) funct -> . FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (36) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (39) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (35) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 56
    READ            shift and go to state 44
    WRITE           shift and go to state 54
    ID              shift and go to state 55
    FUNCTION        shift and go to state 13
    WHILE           shift and go to state 46
    FOR             shift and go to state 52
    DO              shift and go to state 42

    est                            shift and go to state 164
    for                            shift and go to state 49
    output                         shift and go to state 60
    assignment                     shift and go to state 53
    conditional                    shift and go to state 45
    funct                          shift and go to state 43
    while                          shift and go to state 58
    do-while                       shift and go to state 47
    input                          shift and go to state 51
    cycles                         shift and go to state 57
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

state 164

    (33) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est . RIGHTKEY

<<<<<<< HEAD
    RIGHTKEY        shift and go to state 167
=======
    RIGHTKEY        shift and go to state 165
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20


state 165

    (43) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR . LEFTKEY est RIGHTKEY

    LEFTKEY         shift and go to state 168


state 167

    (33) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY .

    RIGHTKEY        reduce using rule 33 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY .)


state 168

    (43) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY . est RIGHTKEY
    (25) est -> . conditional
    (26) est -> . cycles
    (27) est -> . input
    (28) est -> . output
    (29) est -> . assignment
    (30) est -> . funct
    (31) est -> . empty
    (33) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (36) cycles -> . while
    (37) cycles -> . for
    (38) cycles -> . do-while
    (64) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (61) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (32) assignment -> . ID ASSGN ID SEMICOLON
    (65) funct -> . FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (68) empty -> .
    (40) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (43) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (39) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 65
    READ            shift and go to state 54
    WRITE           shift and go to state 63
    ID              shift and go to state 64
    FUNCTION        shift and go to state 20
    RIGHTKEY        reduce using rule 68 (empty -> .)
    WHILE           shift and go to state 56
    FOR             shift and go to state 61
    DO              shift and go to state 52

    est                            shift and go to state 169
    for                            shift and go to state 59
    output                         shift and go to state 68
    assignment                     shift and go to state 62
    conditional                    shift and go to state 55
    funct                          shift and go to state 53
    while                          shift and go to state 66
    do-while                       shift and go to state 57
    input                          shift and go to state 60
    cycles                         shift and go to state 69
    empty                          shift and go to state 67

state 169

    (43) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 170


state 170

    (43) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY .

    RIGHTKEY        reduce using rule 43 (for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
<<<<<<< HEAD
WARNING: reduce/reduce conflict in state 8 resolved using rule (program2 -> empty)
WARNING: rejected rule (declare -> empty) in state 8
WARNING: reduce/reduce conflict in state 34 resolved using rule (declare2 -> empty)
WARNING: rejected rule (array -> empty) in state 34
WARNING: reduce/reduce conflict in state 80 resolved using rule (arithmeticExp -> empty)
WARNING: rejected rule (exp2 -> empty) in state 80
=======
WARNING: reduce/reduce conflict in state 33 resolved using rule (declare2 -> empty)
WARNING: rejected rule (array -> empty) in state 33
WARNING: reduce/reduce conflict in state 85 resolved using rule (arithmeticExp -> empty)
WARNING: rejected rule (exp2 -> empty) in state 85
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20
WARNING: Rule (exp2 -> empty) is never reduced
