Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    LESSEQ
    COLON
    GRTREQ
    CYCLE
    SPACE
    newline
    FLOATNUMB
    TYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON
Rule 2     goToMainQuad -> <empty>
Rule 3     altaPrograma -> <empty>
Rule 4     program2 -> declare program3
Rule 5     program2 -> empty
Rule 6     declare -> DECLARE declareRecursivo
Rule 7     declare -> empty
Rule 8     declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
Rule 9     declare2 -> array
Rule 10    declare3 -> COMMA ID altaVarGlobal declare3
Rule 11    program3 -> funct program3
Rule 12    funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
Rule 13    functReturn -> RETURN NUMBER SEMICOLON
Rule 14    functReturn -> RETURN ID SEMICOLON
Rule 15    functReturn -> empty
Rule 16    altaModulo -> <empty>
Rule 17    funct2 -> type ID altaVarLocal funct3
Rule 18    funct3 -> COMMA type ID altaVarLocal funct3
Rule 19    funct2 -> empty
Rule 20    funct3 -> empty
Rule 21    program3 -> empty
Rule 22    altaVarGlobal -> <empty>
Rule 23    declareRecursivo -> empty
Rule 24    declare3 -> empty
Rule 25    array -> LEFTBRACK exp RIGHTBRACK array
Rule 26    array -> empty
Rule 27    type -> type2
Rule 28    type2 -> INT
Rule 29    type2 -> FLOAT
Rule 30    type2 -> STRING
Rule 31    type2 -> BOOL
Rule 32    type2 -> VOID
Rule 33    cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY
Rule 34    altaModuloMain -> <empty>
Rule 35    est -> conditional est
Rule 36    est -> declareLocal est
Rule 37    est -> cycles est
Rule 38    est -> input est
Rule 39    est -> output est
Rule 40    est -> assignment est
Rule 41    est -> llamadaAFunct est
Rule 42    est -> empty
Rule 43    llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR
Rule 44    llamadaAFunct -> empty
Rule 45    llamadaAFunct2 -> ID llamadaAFunct3
Rule 46    llamadaAFunct3 -> COMMA ID
Rule 47    llamadaAFunct3 -> empty
Rule 48    llamadaAFunct2 -> empty
Rule 49    declareLocal -> DECLARE declareRecursivoLocal
Rule 50    declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
Rule 51    assignmentDecl -> ASSGN number
Rule 52    number -> INTEGER number2
Rule 53    number2 -> DOT INTEGER
Rule 54    number2 -> empty
Rule 55    assignmentDecl -> empty
Rule 56    declare2Local -> array
Rule 57    declare3Local -> COMMA ID altaVarLocal assignmentDecl declare3Local
Rule 58    declareRecursivoLocal -> empty
Rule 59    declareLocal -> empty
Rule 60    declare2Local -> empty
Rule 61    declare3Local -> empty
Rule 62    altaVarLocal -> <empty>
Rule 63    assignment -> ID ASSGN exp SEMICOLON
Rule 64    assignment -> ID ASSGN llamadaAFunct SEMICOLON
Rule 65    assignment -> empty
Rule 66    conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
Rule 67    conditionalElse -> ELSE LEFTKEY est RIGHTKEY
Rule 68    conditionalElse -> empty
Rule 69    conditional2 -> exp conditional2
Rule 70    conditional2 -> empty
Rule 71    cycles -> while
Rule 72    cycles -> empty
Rule 73    cycles -> for
Rule 74    cycles -> do-while
Rule 75    do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR
Rule 76    while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
Rule 77    while2 -> exp while2
Rule 78    while2 -> empty
Rule 79    for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
Rule 80    for2 -> ID ASSGN number for3
Rule 81    for3 -> COMMA for2
Rule 82    for3 -> empty
Rule 83    for4 -> expFor
Rule 84    parte3For -> ID SUM SUM
Rule 85    parte3For -> ID MINUS MINUS
Rule 86    expFor -> ID expFor2
Rule 87    expFor -> number
Rule 88    expFor2 -> LESS expFor
Rule 89    expFor2 -> GRTR expFor
Rule 90    expFor2 -> EQ expFor
Rule 91    expFor2 -> NOTEQ expFor
Rule 92    expFor2 -> AND expFor
Rule 93    expFor2 -> OR expFor
Rule 94    expFor2 -> empty
Rule 95    exp -> ID exp2
Rule 96    exp -> number exp2
Rule 97    exp -> empty
Rule 98    exp2 -> LESS exp
Rule 99    exp2 -> GRTR exp
Rule 100   exp2 -> EQ exp
Rule 101   exp2 -> NOTEQ exp
Rule 102   exp2 -> AND exp
Rule 103   exp2 -> OR exp
Rule 104   exp2 -> SUM exp
Rule 105   exp2 -> MINUS exp
Rule 106   exp2 -> MULTP exp
Rule 107   exp2 -> DIVIDE exp
Rule 108   exp2 -> empty
Rule 109   output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
Rule 110   output2 -> ID output2
Rule 111   output2 -> QUOTE ID QUOTE output2
Rule 112   output2 -> empty
Rule 113   input -> READ LEFTPAR ID RIGHTPAR SEMICOLON
Rule 114   empty -> <empty>

Terminals, with rules where they appear

AND                  : 92 102
ASSGN                : 51 63 64 80
BOOL                 : 31
COLON                : 
COMMA                : 10 18 46 57 81
CYCLE                : 
DECLARE              : 6 49
DIVIDE               : 107
DO                   : 75
DOT                  : 53
ELSE                 : 67
END                  : 1
EQ                   : 90 100
FLOAT                : 29
FLOATNUMB            : 
FOR                  : 79
FUNCTION             : 12
GRTR                 : 89 99
GRTREQ               : 
ID                   : 1 8 10 12 14 17 18 43 45 46 50 57 63 64 80 84 85 86 95 110 111 113
IF                   : 66
INT                  : 28
INTEGER              : 52 53
LEFTBRACK            : 25
LEFTKEY              : 12 33 66 67 75 76 79
LEFTPAR              : 12 33 43 66 75 76 79 109 113
LESS                 : 88 98
LESSEQ               : 
MAIN                 : 33
MINUS                : 85 85 105
MULTP                : 106
NOTEQ                : 91 101
NUMBER               : 13
OR                   : 93 103
PROGRAM              : 1
QUOTE                : 111 111
READ                 : 113
RETURN               : 13 14
RIGHTBRACK           : 25
RIGHTKEY             : 12 33 66 67 75 76 79
RIGHTPAR             : 12 33 43 66 75 76 79 109 113
SEMICOLON            : 1 1 8 13 14 50 63 64 79 79 109 113
SPACE                : 
STRING               : 30
SUM                  : 84 84 104
TYPE                 : 
VOID                 : 32
WHILE                : 75 76
WRITE                : 109
error                : 
newline              : 

Nonterminals, with rules where they appear

altaModulo           : 12
altaModuloMain       : 33
altaPrograma         : 1
altaVarGlobal        : 8 10
altaVarLocal         : 17 18 50 57
array                : 9 25 56
assignment           : 40
assignmentDecl       : 8 50 57
conditional          : 35
conditional2         : 66 69
conditionalElse      : 66
cuerpo               : 1
cycles               : 37
declare              : 4
declare2             : 8
declare2Local        : 50
declare3             : 8 10
declare3Local        : 50 57
declareLocal         : 36
declareRecursivo     : 6 8
declareRecursivoLocal : 49 50
do-while             : 74
empty                : 5 7 15 19 20 21 23 24 26 42 44 47 48 54 55 58 59 60 61 65 68 70 72 78 82 94 97 108 112
est                  : 12 33 35 36 37 38 39 40 41 66 67 75 76 79
exp                  : 25 63 69 77 98 99 100 101 102 103 104 105 106 107
exp2                 : 95 96
expFor               : 83 88 89 90 91 92 93
expFor2              : 86
for                  : 73
for2                 : 79 81
for3                 : 80
for4                 : 79
funct                : 11
funct2               : 12
funct3               : 17 18
functReturn          : 12
goToMainQuad         : 1
input                : 38
llamadaAFunct        : 41 64
llamadaAFunct2       : 43
llamadaAFunct3       : 45
number               : 51 80 87 96
number2              : 52
output               : 39
output2              : 109 110 111
parte3For            : 79
program              : 0
program2             : 1
program3             : 4 11
type                 : 8 12 17 18 50
type2                : 27
while                : 71
while2               : 75 76 77

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON
    (3) altaPrograma -> .

    SEMICOLON       reduce using rule 3 (altaPrograma -> .)

    altaPrograma                   shift and go to state 4

state 4

    (1) program -> PROGRAM ID altaPrograma . SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON

    SEMICOLON       shift and go to state 5


state 5

    (1) program -> PROGRAM ID altaPrograma SEMICOLON . program2 goToMainQuad cuerpo END SEMICOLON
    (4) program2 -> . declare program3
    (5) program2 -> . empty
    (6) declare -> . DECLARE declareRecursivo
    (7) declare -> . empty
    (114) empty -> .

    DECLARE         shift and go to state 7
    MAIN            reduce using rule 114 (empty -> .)
    FUNCTION        reduce using rule 114 (empty -> .)

    program2                       shift and go to state 6
    declare                        shift and go to state 8
    empty                          shift and go to state 9

state 6

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 . goToMainQuad cuerpo END SEMICOLON
    (2) goToMainQuad -> .

    MAIN            reduce using rule 2 (goToMainQuad -> .)

    goToMainQuad                   shift and go to state 10

state 7

    (6) declare -> DECLARE . declareRecursivo
    (8) declareRecursivo -> . type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
    (23) declareRecursivo -> . empty
    (27) type -> . type2
    (114) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    FUNCTION        reduce using rule 114 (empty -> .)
    MAIN            reduce using rule 114 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    declareRecursivo               shift and go to state 16
    type                           shift and go to state 17
    empty                          shift and go to state 18
    type2                          shift and go to state 19

state 8

    (4) program2 -> declare . program3
    (11) program3 -> . funct program3
    (21) program3 -> . empty
    (12) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (114) empty -> .

    FUNCTION        shift and go to state 20
    MAIN            reduce using rule 114 (empty -> .)

    funct                          shift and go to state 21
    program3                       shift and go to state 22
    empty                          shift and go to state 23

state 9

    (5) program2 -> empty .
    (7) declare -> empty .

  ! reduce/reduce conflict for MAIN resolved using rule 5 (program2 -> empty .)
    MAIN            reduce using rule 5 (program2 -> empty .)
    FUNCTION        reduce using rule 7 (declare -> empty .)

  ! MAIN            [ reduce using rule 7 (declare -> empty .) ]


state 10

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad . cuerpo END SEMICOLON
    (33) cuerpo -> . MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY

    MAIN            shift and go to state 25

    cuerpo                         shift and go to state 24

state 11

    (30) type2 -> STRING .

    ID              reduce using rule 30 (type2 -> STRING .)


state 12

    (28) type2 -> INT .

    ID              reduce using rule 28 (type2 -> INT .)


state 13

    (32) type2 -> VOID .

    ID              reduce using rule 32 (type2 -> VOID .)


state 14

    (29) type2 -> FLOAT .

    ID              reduce using rule 29 (type2 -> FLOAT .)


state 15

    (31) type2 -> BOOL .

    ID              reduce using rule 31 (type2 -> BOOL .)


state 16

    (6) declare -> DECLARE declareRecursivo .

    FUNCTION        reduce using rule 6 (declare -> DECLARE declareRecursivo .)
    MAIN            reduce using rule 6 (declare -> DECLARE declareRecursivo .)


state 17

    (8) declareRecursivo -> type . ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo

    ID              shift and go to state 26


state 18

    (23) declareRecursivo -> empty .

    FUNCTION        reduce using rule 23 (declareRecursivo -> empty .)
    MAIN            reduce using rule 23 (declareRecursivo -> empty .)


state 19

    (27) type -> type2 .

    ID              reduce using rule 27 (type -> type2 .)


state 20

    (12) funct -> FUNCTION . type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (27) type -> . type2
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    type                           shift and go to state 27
    type2                          shift and go to state 19

state 21

    (11) program3 -> funct . program3
    (11) program3 -> . funct program3
    (21) program3 -> . empty
    (12) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (114) empty -> .

    FUNCTION        shift and go to state 20
    MAIN            reduce using rule 114 (empty -> .)

    program3                       shift and go to state 28
    funct                          shift and go to state 21
    empty                          shift and go to state 23

state 22

    (4) program2 -> declare program3 .

    MAIN            reduce using rule 4 (program2 -> declare program3 .)


state 23

    (21) program3 -> empty .

    MAIN            reduce using rule 21 (program3 -> empty .)


state 24

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo . END SEMICOLON

    END             shift and go to state 29


state 25

    (33) cuerpo -> MAIN . LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY

    LEFTPAR         shift and go to state 30


state 26

    (8) declareRecursivo -> type ID . altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
    (22) altaVarGlobal -> .

    ASSGN           reduce using rule 22 (altaVarGlobal -> .)
    LEFTBRACK       reduce using rule 22 (altaVarGlobal -> .)
    COMMA           reduce using rule 22 (altaVarGlobal -> .)
    SEMICOLON       reduce using rule 22 (altaVarGlobal -> .)

    altaVarGlobal                  shift and go to state 31

state 27

    (12) funct -> FUNCTION type . ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY

    ID              shift and go to state 32


state 28

    (11) program3 -> funct program3 .

    MAIN            reduce using rule 11 (program3 -> funct program3 .)


state 29

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END . SEMICOLON

    SEMICOLON       shift and go to state 33


state 30

    (33) cuerpo -> MAIN LEFTPAR . RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY

    RIGHTPAR        shift and go to state 34


state 31

    (8) declareRecursivo -> type ID altaVarGlobal . assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
    (51) assignmentDecl -> . ASSGN number
    (55) assignmentDecl -> . empty
    (114) empty -> .

    ASSGN           shift and go to state 35
    LEFTBRACK       reduce using rule 114 (empty -> .)
    COMMA           reduce using rule 114 (empty -> .)
    SEMICOLON       reduce using rule 114 (empty -> .)

    assignmentDecl                 shift and go to state 36
    empty                          shift and go to state 37

state 32

    (12) funct -> FUNCTION type ID . altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (16) altaModulo -> .

    LEFTPAR         reduce using rule 16 (altaModulo -> .)

    altaModulo                     shift and go to state 38

state 33

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON .

    $end            reduce using rule 1 (program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON .)


state 34

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR . LEFTKEY altaModuloMain est RIGHTKEY

    LEFTKEY         shift and go to state 39


state 35

    (51) assignmentDecl -> ASSGN . number
    (52) number -> . INTEGER number2

    INTEGER         shift and go to state 41

    number                         shift and go to state 40

state 36

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl . declare2 declare3 SEMICOLON declareRecursivo
    (9) declare2 -> . array
    (25) array -> . LEFTBRACK exp RIGHTBRACK array
    (26) array -> . empty
    (114) empty -> .

    LEFTBRACK       shift and go to state 42
    COMMA           reduce using rule 114 (empty -> .)
    SEMICOLON       reduce using rule 114 (empty -> .)

    declare2                       shift and go to state 43
    array                          shift and go to state 44
    empty                          shift and go to state 45

state 37

    (55) assignmentDecl -> empty .

    LEFTBRACK       reduce using rule 55 (assignmentDecl -> empty .)
    COMMA           reduce using rule 55 (assignmentDecl -> empty .)
    SEMICOLON       reduce using rule 55 (assignmentDecl -> empty .)


state 38

    (12) funct -> FUNCTION type ID altaModulo . LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY

    LEFTPAR         shift and go to state 46


state 39

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY . altaModuloMain est RIGHTKEY
    (34) altaModuloMain -> .

    IF              reduce using rule 34 (altaModuloMain -> .)
    DECLARE         reduce using rule 34 (altaModuloMain -> .)
    READ            reduce using rule 34 (altaModuloMain -> .)
    WRITE           reduce using rule 34 (altaModuloMain -> .)
    ID              reduce using rule 34 (altaModuloMain -> .)
    WHILE           reduce using rule 34 (altaModuloMain -> .)
    FOR             reduce using rule 34 (altaModuloMain -> .)
    DO              reduce using rule 34 (altaModuloMain -> .)
    RIGHTKEY        reduce using rule 34 (altaModuloMain -> .)

    altaModuloMain                 shift and go to state 47

state 40

    (51) assignmentDecl -> ASSGN number .

    LEFTBRACK       reduce using rule 51 (assignmentDecl -> ASSGN number .)
    COMMA           reduce using rule 51 (assignmentDecl -> ASSGN number .)
    SEMICOLON       reduce using rule 51 (assignmentDecl -> ASSGN number .)


state 41

    (52) number -> INTEGER . number2
    (53) number2 -> . DOT INTEGER
    (54) number2 -> . empty
    (114) empty -> .

    DOT             shift and go to state 50
    LEFTBRACK       reduce using rule 114 (empty -> .)
    COMMA           reduce using rule 114 (empty -> .)
    SEMICOLON       reduce using rule 114 (empty -> .)
    LESS            reduce using rule 114 (empty -> .)
    GRTR            reduce using rule 114 (empty -> .)
    EQ              reduce using rule 114 (empty -> .)
    NOTEQ           reduce using rule 114 (empty -> .)
    AND             reduce using rule 114 (empty -> .)
    OR              reduce using rule 114 (empty -> .)
    SUM             reduce using rule 114 (empty -> .)
    MINUS           reduce using rule 114 (empty -> .)
    MULTP           reduce using rule 114 (empty -> .)
    DIVIDE          reduce using rule 114 (empty -> .)
    RIGHTBRACK      reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    INTEGER         reduce using rule 114 (empty -> .)
    RIGHTPAR        reduce using rule 114 (empty -> .)

    number2                        shift and go to state 48
    empty                          shift and go to state 49

state 42

    (25) array -> LEFTBRACK . exp RIGHTBRACK array
    (95) exp -> . ID exp2
    (96) exp -> . number exp2
    (97) exp -> . empty
    (52) number -> . INTEGER number2
    (114) empty -> .

    ID              shift and go to state 53
    INTEGER         shift and go to state 41
    RIGHTBRACK      reduce using rule 114 (empty -> .)

    number                         shift and go to state 51
    exp                            shift and go to state 52
    empty                          shift and go to state 54

state 43

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 . declare3 SEMICOLON declareRecursivo
    (10) declare3 -> . COMMA ID altaVarGlobal declare3
    (24) declare3 -> . empty
    (114) empty -> .

    COMMA           shift and go to state 56
    SEMICOLON       reduce using rule 114 (empty -> .)

    declare3                       shift and go to state 55
    empty                          shift and go to state 57

state 44

    (9) declare2 -> array .

    COMMA           reduce using rule 9 (declare2 -> array .)
    SEMICOLON       reduce using rule 9 (declare2 -> array .)


state 45

    (26) array -> empty .

    COMMA           reduce using rule 26 (array -> empty .)
    SEMICOLON       reduce using rule 26 (array -> empty .)


state 46

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR . funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (17) funct2 -> . type ID altaVarLocal funct3
    (19) funct2 -> . empty
    (27) type -> . type2
    (114) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    RIGHTPAR        reduce using rule 114 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    funct2                         shift and go to state 58
    type                           shift and go to state 59
    empty                          shift and go to state 60
    type2                          shift and go to state 19

state 47

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain . est RIGHTKEY
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (66) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (71) cycles -> . while
    (72) cycles -> . empty
    (73) cycles -> . for
    (74) cycles -> . do-while
    (113) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (109) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID ASSGN exp SEMICOLON
    (64) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (65) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (114) empty -> .
    (76) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (79) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (75) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 75
    DECLARE         shift and go to state 74
    READ            shift and go to state 62
    WRITE           shift and go to state 72
    ID              shift and go to state 73
    RIGHTKEY        reduce using rule 114 (empty -> .)
    WHILE           shift and go to state 64
    FOR             shift and go to state 70
    DO              shift and go to state 61

  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! DECLARE         [ reduce using rule 114 (empty -> .) ]
  ! READ            [ reduce using rule 114 (empty -> .) ]
  ! WRITE           [ reduce using rule 114 (empty -> .) ]
  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! DO              [ reduce using rule 114 (empty -> .) ]

    conditional                    shift and go to state 63
    do-while                       shift and go to state 65
    est                            shift and go to state 66
    for                            shift and go to state 67
    llamadaAFunct                  shift and go to state 68
    input                          shift and go to state 69
    assignment                     shift and go to state 71
    cycles                         shift and go to state 76
    while                          shift and go to state 77
    empty                          shift and go to state 78
    output                         shift and go to state 79
    declareLocal                   shift and go to state 80

state 48

    (52) number -> INTEGER number2 .

    SEMICOLON       reduce using rule 52 (number -> INTEGER number2 .)
    LESS            reduce using rule 52 (number -> INTEGER number2 .)
    GRTR            reduce using rule 52 (number -> INTEGER number2 .)
    EQ              reduce using rule 52 (number -> INTEGER number2 .)
    NOTEQ           reduce using rule 52 (number -> INTEGER number2 .)
    AND             reduce using rule 52 (number -> INTEGER number2 .)
    OR              reduce using rule 52 (number -> INTEGER number2 .)
    SUM             reduce using rule 52 (number -> INTEGER number2 .)
    MINUS           reduce using rule 52 (number -> INTEGER number2 .)
    MULTP           reduce using rule 52 (number -> INTEGER number2 .)
    DIVIDE          reduce using rule 52 (number -> INTEGER number2 .)
    RIGHTBRACK      reduce using rule 52 (number -> INTEGER number2 .)
    ID              reduce using rule 52 (number -> INTEGER number2 .)
    INTEGER         reduce using rule 52 (number -> INTEGER number2 .)
    RIGHTPAR        reduce using rule 52 (number -> INTEGER number2 .)
    COMMA           reduce using rule 52 (number -> INTEGER number2 .)
    LEFTBRACK       reduce using rule 52 (number -> INTEGER number2 .)


state 49

    (54) number2 -> empty .

    LEFTBRACK       reduce using rule 54 (number2 -> empty .)
    COMMA           reduce using rule 54 (number2 -> empty .)
    SEMICOLON       reduce using rule 54 (number2 -> empty .)
    LESS            reduce using rule 54 (number2 -> empty .)
    GRTR            reduce using rule 54 (number2 -> empty .)
    EQ              reduce using rule 54 (number2 -> empty .)
    NOTEQ           reduce using rule 54 (number2 -> empty .)
    AND             reduce using rule 54 (number2 -> empty .)
    OR              reduce using rule 54 (number2 -> empty .)
    SUM             reduce using rule 54 (number2 -> empty .)
    MINUS           reduce using rule 54 (number2 -> empty .)
    MULTP           reduce using rule 54 (number2 -> empty .)
    DIVIDE          reduce using rule 54 (number2 -> empty .)
    RIGHTBRACK      reduce using rule 54 (number2 -> empty .)
    ID              reduce using rule 54 (number2 -> empty .)
    INTEGER         reduce using rule 54 (number2 -> empty .)
    RIGHTPAR        reduce using rule 54 (number2 -> empty .)


state 50

    (53) number2 -> DOT . INTEGER

    INTEGER         shift and go to state 81


state 51

    (96) exp -> number . exp2
    (98) exp2 -> . LESS exp
    (99) exp2 -> . GRTR exp
    (100) exp2 -> . EQ exp
    (101) exp2 -> . NOTEQ exp
    (102) exp2 -> . AND exp
    (103) exp2 -> . OR exp
    (104) exp2 -> . SUM exp
    (105) exp2 -> . MINUS exp
    (106) exp2 -> . MULTP exp
    (107) exp2 -> . DIVIDE exp
    (108) exp2 -> . empty
    (114) empty -> .

    LESS            shift and go to state 84
    GRTR            shift and go to state 89
    EQ              shift and go to state 91
    NOTEQ           shift and go to state 85
    AND             shift and go to state 82
    OR              shift and go to state 92
    SUM             shift and go to state 87
    MINUS           shift and go to state 88
    MULTP           shift and go to state 90
    DIVIDE          shift and go to state 83
    RIGHTBRACK      reduce using rule 114 (empty -> .)
    SEMICOLON       reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    INTEGER         reduce using rule 114 (empty -> .)
    RIGHTPAR        reduce using rule 114 (empty -> .)

    exp2                           shift and go to state 86
    empty                          shift and go to state 93

state 52

    (25) array -> LEFTBRACK exp . RIGHTBRACK array

    RIGHTBRACK      shift and go to state 94


state 53

    (95) exp -> ID . exp2
    (98) exp2 -> . LESS exp
    (99) exp2 -> . GRTR exp
    (100) exp2 -> . EQ exp
    (101) exp2 -> . NOTEQ exp
    (102) exp2 -> . AND exp
    (103) exp2 -> . OR exp
    (104) exp2 -> . SUM exp
    (105) exp2 -> . MINUS exp
    (106) exp2 -> . MULTP exp
    (107) exp2 -> . DIVIDE exp
    (108) exp2 -> . empty
    (114) empty -> .

    LESS            shift and go to state 84
    GRTR            shift and go to state 89
    EQ              shift and go to state 91
    NOTEQ           shift and go to state 85
    AND             shift and go to state 82
    OR              shift and go to state 92
    SUM             shift and go to state 87
    MINUS           shift and go to state 88
    MULTP           shift and go to state 90
    DIVIDE          shift and go to state 83
    RIGHTBRACK      reduce using rule 114 (empty -> .)
    SEMICOLON       reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    INTEGER         reduce using rule 114 (empty -> .)
    RIGHTPAR        reduce using rule 114 (empty -> .)

    exp2                           shift and go to state 95
    empty                          shift and go to state 93

state 54

    (97) exp -> empty .

    RIGHTBRACK      reduce using rule 97 (exp -> empty .)
    SEMICOLON       reduce using rule 97 (exp -> empty .)
    ID              reduce using rule 97 (exp -> empty .)
    INTEGER         reduce using rule 97 (exp -> empty .)
    RIGHTPAR        reduce using rule 97 (exp -> empty .)


state 55

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 . SEMICOLON declareRecursivo

    SEMICOLON       shift and go to state 96


state 56

    (10) declare3 -> COMMA . ID altaVarGlobal declare3

    ID              shift and go to state 97


state 57

    (24) declare3 -> empty .

    SEMICOLON       reduce using rule 24 (declare3 -> empty .)


state 58

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 . RIGHTPAR LEFTKEY est functReturn RIGHTKEY

    RIGHTPAR        shift and go to state 98


state 59

    (17) funct2 -> type . ID altaVarLocal funct3

    ID              shift and go to state 99


state 60

    (19) funct2 -> empty .

    RIGHTPAR        reduce using rule 19 (funct2 -> empty .)


state 61

    (75) do-while -> DO . LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    LEFTKEY         shift and go to state 100


state 62

    (113) input -> READ . LEFTPAR ID RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 101


state 63

    (35) est -> conditional . est
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (66) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (71) cycles -> . while
    (72) cycles -> . empty
    (73) cycles -> . for
    (74) cycles -> . do-while
    (113) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (109) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID ASSGN exp SEMICOLON
    (64) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (65) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (114) empty -> .
    (76) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (79) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (75) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 75
    DECLARE         shift and go to state 74
    READ            shift and go to state 62
    WRITE           shift and go to state 72
    ID              shift and go to state 73
    RIGHTKEY        reduce using rule 114 (empty -> .)
    RETURN          reduce using rule 114 (empty -> .)
    WHILE           shift and go to state 64
    FOR             shift and go to state 70
    DO              shift and go to state 61

  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! DECLARE         [ reduce using rule 114 (empty -> .) ]
  ! READ            [ reduce using rule 114 (empty -> .) ]
  ! WRITE           [ reduce using rule 114 (empty -> .) ]
  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! DO              [ reduce using rule 114 (empty -> .) ]

    conditional                    shift and go to state 63
    do-while                       shift and go to state 65
    est                            shift and go to state 102
    for                            shift and go to state 67
    llamadaAFunct                  shift and go to state 68
    input                          shift and go to state 69
    assignment                     shift and go to state 71
    cycles                         shift and go to state 76
    while                          shift and go to state 77
    empty                          shift and go to state 78
    output                         shift and go to state 79
    declareLocal                   shift and go to state 80

state 64

    (76) while -> WHILE . LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY

    LEFTPAR         shift and go to state 103


state 65

    (74) cycles -> do-while .

    IF              reduce using rule 74 (cycles -> do-while .)
    DECLARE         reduce using rule 74 (cycles -> do-while .)
    READ            reduce using rule 74 (cycles -> do-while .)
    WRITE           reduce using rule 74 (cycles -> do-while .)
    ID              reduce using rule 74 (cycles -> do-while .)
    WHILE           reduce using rule 74 (cycles -> do-while .)
    FOR             reduce using rule 74 (cycles -> do-while .)
    DO              reduce using rule 74 (cycles -> do-while .)
    RIGHTKEY        reduce using rule 74 (cycles -> do-while .)
    RETURN          reduce using rule 74 (cycles -> do-while .)


state 66

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est . RIGHTKEY

    RIGHTKEY        shift and go to state 104


state 67

    (73) cycles -> for .

    IF              reduce using rule 73 (cycles -> for .)
    DECLARE         reduce using rule 73 (cycles -> for .)
    READ            reduce using rule 73 (cycles -> for .)
    WRITE           reduce using rule 73 (cycles -> for .)
    ID              reduce using rule 73 (cycles -> for .)
    WHILE           reduce using rule 73 (cycles -> for .)
    FOR             reduce using rule 73 (cycles -> for .)
    DO              reduce using rule 73 (cycles -> for .)
    RIGHTKEY        reduce using rule 73 (cycles -> for .)
    RETURN          reduce using rule 73 (cycles -> for .)


state 68

    (41) est -> llamadaAFunct . est
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (66) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (71) cycles -> . while
    (72) cycles -> . empty
    (73) cycles -> . for
    (74) cycles -> . do-while
    (113) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (109) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID ASSGN exp SEMICOLON
    (64) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (65) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (114) empty -> .
    (76) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (79) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (75) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 75
    DECLARE         shift and go to state 74
    READ            shift and go to state 62
    WRITE           shift and go to state 72
    ID              shift and go to state 73
    RIGHTKEY        reduce using rule 114 (empty -> .)
    RETURN          reduce using rule 114 (empty -> .)
    WHILE           shift and go to state 64
    FOR             shift and go to state 70
    DO              shift and go to state 61

  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! DECLARE         [ reduce using rule 114 (empty -> .) ]
  ! READ            [ reduce using rule 114 (empty -> .) ]
  ! WRITE           [ reduce using rule 114 (empty -> .) ]
  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! DO              [ reduce using rule 114 (empty -> .) ]

    conditional                    shift and go to state 63
    do-while                       shift and go to state 65
    est                            shift and go to state 105
    for                            shift and go to state 67
    llamadaAFunct                  shift and go to state 68
    input                          shift and go to state 69
    assignment                     shift and go to state 71
    cycles                         shift and go to state 76
    while                          shift and go to state 77
    empty                          shift and go to state 78
    output                         shift and go to state 79
    declareLocal                   shift and go to state 80

state 69

    (38) est -> input . est
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (66) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (71) cycles -> . while
    (72) cycles -> . empty
    (73) cycles -> . for
    (74) cycles -> . do-while
    (113) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (109) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID ASSGN exp SEMICOLON
    (64) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (65) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (114) empty -> .
    (76) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (79) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (75) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 75
    DECLARE         shift and go to state 74
    READ            shift and go to state 62
    WRITE           shift and go to state 72
    ID              shift and go to state 73
    RIGHTKEY        reduce using rule 114 (empty -> .)
    RETURN          reduce using rule 114 (empty -> .)
    WHILE           shift and go to state 64
    FOR             shift and go to state 70
    DO              shift and go to state 61

  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! DECLARE         [ reduce using rule 114 (empty -> .) ]
  ! READ            [ reduce using rule 114 (empty -> .) ]
  ! WRITE           [ reduce using rule 114 (empty -> .) ]
  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! DO              [ reduce using rule 114 (empty -> .) ]

    conditional                    shift and go to state 63
    do-while                       shift and go to state 65
    est                            shift and go to state 106
    for                            shift and go to state 67
    llamadaAFunct                  shift and go to state 68
    input                          shift and go to state 69
    assignment                     shift and go to state 71
    cycles                         shift and go to state 76
    while                          shift and go to state 77
    empty                          shift and go to state 78
    output                         shift and go to state 79
    declareLocal                   shift and go to state 80

state 70

    (79) for -> FOR . LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY

    LEFTPAR         shift and go to state 107


state 71

    (40) est -> assignment . est
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (66) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (71) cycles -> . while
    (72) cycles -> . empty
    (73) cycles -> . for
    (74) cycles -> . do-while
    (113) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (109) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID ASSGN exp SEMICOLON
    (64) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (65) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (114) empty -> .
    (76) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (79) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (75) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 75
    DECLARE         shift and go to state 74
    READ            shift and go to state 62
    WRITE           shift and go to state 72
    ID              shift and go to state 73
    RIGHTKEY        reduce using rule 114 (empty -> .)
    RETURN          reduce using rule 114 (empty -> .)
    WHILE           shift and go to state 64
    FOR             shift and go to state 70
    DO              shift and go to state 61

  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! DECLARE         [ reduce using rule 114 (empty -> .) ]
  ! READ            [ reduce using rule 114 (empty -> .) ]
  ! WRITE           [ reduce using rule 114 (empty -> .) ]
  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! DO              [ reduce using rule 114 (empty -> .) ]

    conditional                    shift and go to state 63
    do-while                       shift and go to state 65
    est                            shift and go to state 108
    for                            shift and go to state 67
    llamadaAFunct                  shift and go to state 68
    input                          shift and go to state 69
    assignment                     shift and go to state 71
    cycles                         shift and go to state 76
    while                          shift and go to state 77
    empty                          shift and go to state 78
    output                         shift and go to state 79
    declareLocal                   shift and go to state 80

state 72

    (109) output -> WRITE . LEFTPAR output2 RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 109


state 73

    (63) assignment -> ID . ASSGN exp SEMICOLON
    (64) assignment -> ID . ASSGN llamadaAFunct SEMICOLON
    (43) llamadaAFunct -> ID . LEFTPAR llamadaAFunct2 RIGHTPAR

    ASSGN           shift and go to state 110
    LEFTPAR         shift and go to state 111


state 74

    (49) declareLocal -> DECLARE . declareRecursivoLocal
    (50) declareRecursivoLocal -> . type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (58) declareRecursivoLocal -> . empty
    (27) type -> . type2
    (114) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    IF              reduce using rule 114 (empty -> .)
    DECLARE         reduce using rule 114 (empty -> .)
    READ            reduce using rule 114 (empty -> .)
    WRITE           reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    WHILE           reduce using rule 114 (empty -> .)
    FOR             reduce using rule 114 (empty -> .)
    DO              reduce using rule 114 (empty -> .)
    RIGHTKEY        reduce using rule 114 (empty -> .)
    RETURN          reduce using rule 114 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    declareRecursivoLocal          shift and go to state 112
    type2                          shift and go to state 19
    type                           shift and go to state 113
    empty                          shift and go to state 114

state 75

    (66) conditional -> IF . LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse

    LEFTPAR         shift and go to state 115


state 76

    (37) est -> cycles . est
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (66) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (71) cycles -> . while
    (72) cycles -> . empty
    (73) cycles -> . for
    (74) cycles -> . do-while
    (113) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (109) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID ASSGN exp SEMICOLON
    (64) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (65) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (114) empty -> .
    (76) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (79) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (75) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 75
    DECLARE         shift and go to state 74
    READ            shift and go to state 62
    WRITE           shift and go to state 72
    ID              shift and go to state 73
    RIGHTKEY        reduce using rule 114 (empty -> .)
    RETURN          reduce using rule 114 (empty -> .)
    WHILE           shift and go to state 64
    FOR             shift and go to state 70
    DO              shift and go to state 61

  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! DECLARE         [ reduce using rule 114 (empty -> .) ]
  ! READ            [ reduce using rule 114 (empty -> .) ]
  ! WRITE           [ reduce using rule 114 (empty -> .) ]
  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! DO              [ reduce using rule 114 (empty -> .) ]

    conditional                    shift and go to state 63
    do-while                       shift and go to state 65
    est                            shift and go to state 116
    for                            shift and go to state 67
    llamadaAFunct                  shift and go to state 68
    input                          shift and go to state 69
    assignment                     shift and go to state 71
    cycles                         shift and go to state 76
    while                          shift and go to state 77
    empty                          shift and go to state 78
    output                         shift and go to state 79
    declareLocal                   shift and go to state 80

state 77

    (71) cycles -> while .

    IF              reduce using rule 71 (cycles -> while .)
    DECLARE         reduce using rule 71 (cycles -> while .)
    READ            reduce using rule 71 (cycles -> while .)
    WRITE           reduce using rule 71 (cycles -> while .)
    ID              reduce using rule 71 (cycles -> while .)
    WHILE           reduce using rule 71 (cycles -> while .)
    FOR             reduce using rule 71 (cycles -> while .)
    DO              reduce using rule 71 (cycles -> while .)
    RIGHTKEY        reduce using rule 71 (cycles -> while .)
    RETURN          reduce using rule 71 (cycles -> while .)


state 78

    (42) est -> empty .
    (59) declareLocal -> empty .
    (72) cycles -> empty .
    (65) assignment -> empty .
    (44) llamadaAFunct -> empty .

  ! reduce/reduce conflict for RIGHTKEY resolved using rule 42 (est -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 42 (est -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for DECLARE resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for READ resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for WRITE resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for DO resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 42 (est -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 42 (est -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for DECLARE resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for READ resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for WRITE resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for DO resolved using rule 59 (declareLocal -> empty .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 42 (est -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 42 (est -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 44 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for DECLARE resolved using rule 44 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for READ resolved using rule 44 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for WRITE resolved using rule 44 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 44 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 44 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 44 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for DO resolved using rule 44 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 42 (est -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 42 (est -> empty .)
    RIGHTKEY        reduce using rule 42 (est -> empty .)
    RETURN          reduce using rule 42 (est -> empty .)
    IF              reduce using rule 44 (llamadaAFunct -> empty .)
    DECLARE         reduce using rule 44 (llamadaAFunct -> empty .)
    READ            reduce using rule 44 (llamadaAFunct -> empty .)
    WRITE           reduce using rule 44 (llamadaAFunct -> empty .)
    ID              reduce using rule 44 (llamadaAFunct -> empty .)
    WHILE           reduce using rule 44 (llamadaAFunct -> empty .)
    FOR             reduce using rule 44 (llamadaAFunct -> empty .)
    DO              reduce using rule 44 (llamadaAFunct -> empty .)

  ! IF              [ reduce using rule 59 (declareLocal -> empty .) ]
  ! DECLARE         [ reduce using rule 59 (declareLocal -> empty .) ]
  ! READ            [ reduce using rule 59 (declareLocal -> empty .) ]
  ! WRITE           [ reduce using rule 59 (declareLocal -> empty .) ]
  ! ID              [ reduce using rule 59 (declareLocal -> empty .) ]
  ! WHILE           [ reduce using rule 59 (declareLocal -> empty .) ]
  ! FOR             [ reduce using rule 59 (declareLocal -> empty .) ]
  ! DO              [ reduce using rule 59 (declareLocal -> empty .) ]
  ! RIGHTKEY        [ reduce using rule 59 (declareLocal -> empty .) ]
  ! RETURN          [ reduce using rule 59 (declareLocal -> empty .) ]
  ! IF              [ reduce using rule 72 (cycles -> empty .) ]
  ! DECLARE         [ reduce using rule 72 (cycles -> empty .) ]
  ! READ            [ reduce using rule 72 (cycles -> empty .) ]
  ! WRITE           [ reduce using rule 72 (cycles -> empty .) ]
  ! ID              [ reduce using rule 72 (cycles -> empty .) ]
  ! WHILE           [ reduce using rule 72 (cycles -> empty .) ]
  ! FOR             [ reduce using rule 72 (cycles -> empty .) ]
  ! DO              [ reduce using rule 72 (cycles -> empty .) ]
  ! RIGHTKEY        [ reduce using rule 72 (cycles -> empty .) ]
  ! RETURN          [ reduce using rule 72 (cycles -> empty .) ]
  ! IF              [ reduce using rule 65 (assignment -> empty .) ]
  ! DECLARE         [ reduce using rule 65 (assignment -> empty .) ]
  ! READ            [ reduce using rule 65 (assignment -> empty .) ]
  ! WRITE           [ reduce using rule 65 (assignment -> empty .) ]
  ! ID              [ reduce using rule 65 (assignment -> empty .) ]
  ! WHILE           [ reduce using rule 65 (assignment -> empty .) ]
  ! FOR             [ reduce using rule 65 (assignment -> empty .) ]
  ! DO              [ reduce using rule 65 (assignment -> empty .) ]
  ! RIGHTKEY        [ reduce using rule 65 (assignment -> empty .) ]
  ! RETURN          [ reduce using rule 65 (assignment -> empty .) ]
  ! RIGHTKEY        [ reduce using rule 44 (llamadaAFunct -> empty .) ]
  ! RETURN          [ reduce using rule 44 (llamadaAFunct -> empty .) ]


state 79

    (39) est -> output . est
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (66) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (71) cycles -> . while
    (72) cycles -> . empty
    (73) cycles -> . for
    (74) cycles -> . do-while
    (113) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (109) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID ASSGN exp SEMICOLON
    (64) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (65) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (114) empty -> .
    (76) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (79) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (75) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 75
    DECLARE         shift and go to state 74
    READ            shift and go to state 62
    WRITE           shift and go to state 72
    ID              shift and go to state 73
    RIGHTKEY        reduce using rule 114 (empty -> .)
    RETURN          reduce using rule 114 (empty -> .)
    WHILE           shift and go to state 64
    FOR             shift and go to state 70
    DO              shift and go to state 61

  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! DECLARE         [ reduce using rule 114 (empty -> .) ]
  ! READ            [ reduce using rule 114 (empty -> .) ]
  ! WRITE           [ reduce using rule 114 (empty -> .) ]
  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! DO              [ reduce using rule 114 (empty -> .) ]

    conditional                    shift and go to state 63
    do-while                       shift and go to state 65
    est                            shift and go to state 117
    for                            shift and go to state 67
    llamadaAFunct                  shift and go to state 68
    input                          shift and go to state 69
    assignment                     shift and go to state 71
    cycles                         shift and go to state 76
    while                          shift and go to state 77
    empty                          shift and go to state 78
    output                         shift and go to state 79
    declareLocal                   shift and go to state 80

state 80

    (36) est -> declareLocal . est
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (66) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (71) cycles -> . while
    (72) cycles -> . empty
    (73) cycles -> . for
    (74) cycles -> . do-while
    (113) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (109) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID ASSGN exp SEMICOLON
    (64) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (65) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (114) empty -> .
    (76) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (79) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (75) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 75
    DECLARE         shift and go to state 74
    READ            shift and go to state 62
    WRITE           shift and go to state 72
    ID              shift and go to state 73
    RIGHTKEY        reduce using rule 114 (empty -> .)
    RETURN          reduce using rule 114 (empty -> .)
    WHILE           shift and go to state 64
    FOR             shift and go to state 70
    DO              shift and go to state 61

  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! DECLARE         [ reduce using rule 114 (empty -> .) ]
  ! READ            [ reduce using rule 114 (empty -> .) ]
  ! WRITE           [ reduce using rule 114 (empty -> .) ]
  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! DO              [ reduce using rule 114 (empty -> .) ]

    conditional                    shift and go to state 63
    do-while                       shift and go to state 65
    est                            shift and go to state 118
    for                            shift and go to state 67
    llamadaAFunct                  shift and go to state 68
    input                          shift and go to state 69
    assignment                     shift and go to state 71
    declareLocal                   shift and go to state 80
    while                          shift and go to state 77
    empty                          shift and go to state 78
    output                         shift and go to state 79
    cycles                         shift and go to state 76

state 81

    (53) number2 -> DOT INTEGER .

    LEFTBRACK       reduce using rule 53 (number2 -> DOT INTEGER .)
    COMMA           reduce using rule 53 (number2 -> DOT INTEGER .)
    SEMICOLON       reduce using rule 53 (number2 -> DOT INTEGER .)
    LESS            reduce using rule 53 (number2 -> DOT INTEGER .)
    GRTR            reduce using rule 53 (number2 -> DOT INTEGER .)
    EQ              reduce using rule 53 (number2 -> DOT INTEGER .)
    NOTEQ           reduce using rule 53 (number2 -> DOT INTEGER .)
    AND             reduce using rule 53 (number2 -> DOT INTEGER .)
    OR              reduce using rule 53 (number2 -> DOT INTEGER .)
    SUM             reduce using rule 53 (number2 -> DOT INTEGER .)
    MINUS           reduce using rule 53 (number2 -> DOT INTEGER .)
    MULTP           reduce using rule 53 (number2 -> DOT INTEGER .)
    DIVIDE          reduce using rule 53 (number2 -> DOT INTEGER .)
    RIGHTBRACK      reduce using rule 53 (number2 -> DOT INTEGER .)
    ID              reduce using rule 53 (number2 -> DOT INTEGER .)
    INTEGER         reduce using rule 53 (number2 -> DOT INTEGER .)
    RIGHTPAR        reduce using rule 53 (number2 -> DOT INTEGER .)


state 82

    (102) exp2 -> AND . exp
    (95) exp -> . ID exp2
    (96) exp -> . number exp2
    (97) exp -> . empty
    (52) number -> . INTEGER number2
    (114) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 53
    INTEGER         shift and go to state 41
    RIGHTBRACK      reduce using rule 114 (empty -> .)
    SEMICOLON       reduce using rule 114 (empty -> .)
    RIGHTPAR        reduce using rule 114 (empty -> .)

  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! INTEGER         [ reduce using rule 114 (empty -> .) ]

    empty                          shift and go to state 54
    number                         shift and go to state 51
    exp                            shift and go to state 119

state 83

    (107) exp2 -> DIVIDE . exp
    (95) exp -> . ID exp2
    (96) exp -> . number exp2
    (97) exp -> . empty
    (52) number -> . INTEGER number2
    (114) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 53
    INTEGER         shift and go to state 41
    RIGHTBRACK      reduce using rule 114 (empty -> .)
    SEMICOLON       reduce using rule 114 (empty -> .)
    RIGHTPAR        reduce using rule 114 (empty -> .)

  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! INTEGER         [ reduce using rule 114 (empty -> .) ]

    empty                          shift and go to state 54
    number                         shift and go to state 51
    exp                            shift and go to state 120

state 84

    (98) exp2 -> LESS . exp
    (95) exp -> . ID exp2
    (96) exp -> . number exp2
    (97) exp -> . empty
    (52) number -> . INTEGER number2
    (114) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 53
    INTEGER         shift and go to state 41
    RIGHTBRACK      reduce using rule 114 (empty -> .)
    SEMICOLON       reduce using rule 114 (empty -> .)
    RIGHTPAR        reduce using rule 114 (empty -> .)

  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! INTEGER         [ reduce using rule 114 (empty -> .) ]

    empty                          shift and go to state 54
    number                         shift and go to state 51
    exp                            shift and go to state 121

state 85

    (101) exp2 -> NOTEQ . exp
    (95) exp -> . ID exp2
    (96) exp -> . number exp2
    (97) exp -> . empty
    (52) number -> . INTEGER number2
    (114) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 53
    INTEGER         shift and go to state 41
    RIGHTBRACK      reduce using rule 114 (empty -> .)
    SEMICOLON       reduce using rule 114 (empty -> .)
    RIGHTPAR        reduce using rule 114 (empty -> .)

  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! INTEGER         [ reduce using rule 114 (empty -> .) ]

    empty                          shift and go to state 54
    number                         shift and go to state 51
    exp                            shift and go to state 122

state 86

    (96) exp -> number exp2 .

    ID              reduce using rule 96 (exp -> number exp2 .)
    INTEGER         reduce using rule 96 (exp -> number exp2 .)
    RIGHTPAR        reduce using rule 96 (exp -> number exp2 .)
    RIGHTBRACK      reduce using rule 96 (exp -> number exp2 .)
    SEMICOLON       reduce using rule 96 (exp -> number exp2 .)


state 87

    (104) exp2 -> SUM . exp
    (95) exp -> . ID exp2
    (96) exp -> . number exp2
    (97) exp -> . empty
    (52) number -> . INTEGER number2
    (114) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 53
    INTEGER         shift and go to state 41
    RIGHTBRACK      reduce using rule 114 (empty -> .)
    SEMICOLON       reduce using rule 114 (empty -> .)
    RIGHTPAR        reduce using rule 114 (empty -> .)

  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! INTEGER         [ reduce using rule 114 (empty -> .) ]

    empty                          shift and go to state 54
    number                         shift and go to state 51
    exp                            shift and go to state 123

state 88

    (105) exp2 -> MINUS . exp
    (95) exp -> . ID exp2
    (96) exp -> . number exp2
    (97) exp -> . empty
    (52) number -> . INTEGER number2
    (114) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 53
    INTEGER         shift and go to state 41
    RIGHTBRACK      reduce using rule 114 (empty -> .)
    SEMICOLON       reduce using rule 114 (empty -> .)
    RIGHTPAR        reduce using rule 114 (empty -> .)

  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! INTEGER         [ reduce using rule 114 (empty -> .) ]

    empty                          shift and go to state 54
    number                         shift and go to state 51
    exp                            shift and go to state 124

state 89

    (99) exp2 -> GRTR . exp
    (95) exp -> . ID exp2
    (96) exp -> . number exp2
    (97) exp -> . empty
    (52) number -> . INTEGER number2
    (114) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 53
    INTEGER         shift and go to state 41
    RIGHTBRACK      reduce using rule 114 (empty -> .)
    SEMICOLON       reduce using rule 114 (empty -> .)
    RIGHTPAR        reduce using rule 114 (empty -> .)

  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! INTEGER         [ reduce using rule 114 (empty -> .) ]

    empty                          shift and go to state 54
    number                         shift and go to state 51
    exp                            shift and go to state 125

state 90

    (106) exp2 -> MULTP . exp
    (95) exp -> . ID exp2
    (96) exp -> . number exp2
    (97) exp -> . empty
    (52) number -> . INTEGER number2
    (114) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 53
    INTEGER         shift and go to state 41
    RIGHTBRACK      reduce using rule 114 (empty -> .)
    SEMICOLON       reduce using rule 114 (empty -> .)
    RIGHTPAR        reduce using rule 114 (empty -> .)

  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! INTEGER         [ reduce using rule 114 (empty -> .) ]

    empty                          shift and go to state 54
    number                         shift and go to state 51
    exp                            shift and go to state 126

state 91

    (100) exp2 -> EQ . exp
    (95) exp -> . ID exp2
    (96) exp -> . number exp2
    (97) exp -> . empty
    (52) number -> . INTEGER number2
    (114) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 53
    INTEGER         shift and go to state 41
    RIGHTBRACK      reduce using rule 114 (empty -> .)
    SEMICOLON       reduce using rule 114 (empty -> .)
    RIGHTPAR        reduce using rule 114 (empty -> .)

  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! INTEGER         [ reduce using rule 114 (empty -> .) ]

    empty                          shift and go to state 54
    number                         shift and go to state 51
    exp                            shift and go to state 127

state 92

    (103) exp2 -> OR . exp
    (95) exp -> . ID exp2
    (96) exp -> . number exp2
    (97) exp -> . empty
    (52) number -> . INTEGER number2
    (114) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 53
    INTEGER         shift and go to state 41
    RIGHTBRACK      reduce using rule 114 (empty -> .)
    SEMICOLON       reduce using rule 114 (empty -> .)
    RIGHTPAR        reduce using rule 114 (empty -> .)

  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! INTEGER         [ reduce using rule 114 (empty -> .) ]

    empty                          shift and go to state 54
    number                         shift and go to state 51
    exp                            shift and go to state 128

state 93

    (108) exp2 -> empty .

    RIGHTBRACK      reduce using rule 108 (exp2 -> empty .)
    SEMICOLON       reduce using rule 108 (exp2 -> empty .)
    ID              reduce using rule 108 (exp2 -> empty .)
    INTEGER         reduce using rule 108 (exp2 -> empty .)
    RIGHTPAR        reduce using rule 108 (exp2 -> empty .)


state 94

    (25) array -> LEFTBRACK exp RIGHTBRACK . array
    (25) array -> . LEFTBRACK exp RIGHTBRACK array
    (26) array -> . empty
    (114) empty -> .

    LEFTBRACK       shift and go to state 42
    COMMA           reduce using rule 114 (empty -> .)
    SEMICOLON       reduce using rule 114 (empty -> .)

    array                          shift and go to state 129
    empty                          shift and go to state 45

state 95

    (95) exp -> ID exp2 .

    ID              reduce using rule 95 (exp -> ID exp2 .)
    INTEGER         reduce using rule 95 (exp -> ID exp2 .)
    RIGHTPAR        reduce using rule 95 (exp -> ID exp2 .)
    RIGHTBRACK      reduce using rule 95 (exp -> ID exp2 .)
    SEMICOLON       reduce using rule 95 (exp -> ID exp2 .)


state 96

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON . declareRecursivo
    (8) declareRecursivo -> . type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
    (23) declareRecursivo -> . empty
    (27) type -> . type2
    (114) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    FUNCTION        reduce using rule 114 (empty -> .)
    MAIN            reduce using rule 114 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    declareRecursivo               shift and go to state 130
    type                           shift and go to state 17
    empty                          shift and go to state 18
    type2                          shift and go to state 19

state 97

    (10) declare3 -> COMMA ID . altaVarGlobal declare3
    (22) altaVarGlobal -> .

    COMMA           reduce using rule 22 (altaVarGlobal -> .)
    SEMICOLON       reduce using rule 22 (altaVarGlobal -> .)

    altaVarGlobal                  shift and go to state 131

state 98

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR . LEFTKEY est functReturn RIGHTKEY

    LEFTKEY         shift and go to state 132


state 99

    (17) funct2 -> type ID . altaVarLocal funct3
    (62) altaVarLocal -> .

    COMMA           reduce using rule 62 (altaVarLocal -> .)
    RIGHTPAR        reduce using rule 62 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 133

state 100

    (75) do-while -> DO LEFTKEY . est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (66) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (71) cycles -> . while
    (72) cycles -> . empty
    (73) cycles -> . for
    (74) cycles -> . do-while
    (113) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (109) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID ASSGN exp SEMICOLON
    (64) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (65) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (114) empty -> .
    (76) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (79) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (75) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 75
    DECLARE         shift and go to state 74
    READ            shift and go to state 62
    WRITE           shift and go to state 72
    ID              shift and go to state 73
    RIGHTKEY        reduce using rule 114 (empty -> .)
    WHILE           shift and go to state 64
    FOR             shift and go to state 70
    DO              shift and go to state 61

  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! DECLARE         [ reduce using rule 114 (empty -> .) ]
  ! READ            [ reduce using rule 114 (empty -> .) ]
  ! WRITE           [ reduce using rule 114 (empty -> .) ]
  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! DO              [ reduce using rule 114 (empty -> .) ]

    conditional                    shift and go to state 63
    do-while                       shift and go to state 65
    est                            shift and go to state 134
    for                            shift and go to state 67
    llamadaAFunct                  shift and go to state 68
    input                          shift and go to state 69
    assignment                     shift and go to state 71
    cycles                         shift and go to state 76
    while                          shift and go to state 77
    empty                          shift and go to state 78
    output                         shift and go to state 79
    declareLocal                   shift and go to state 80

state 101

    (113) input -> READ LEFTPAR . ID RIGHTPAR SEMICOLON

    ID              shift and go to state 135


state 102

    (35) est -> conditional est .

    RIGHTKEY        reduce using rule 35 (est -> conditional est .)
    RETURN          reduce using rule 35 (est -> conditional est .)


state 103

    (76) while -> WHILE LEFTPAR . while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (77) while2 -> . exp while2
    (78) while2 -> . empty
    (95) exp -> . ID exp2
    (96) exp -> . number exp2
    (97) exp -> . empty
    (114) empty -> .
    (52) number -> . INTEGER number2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 53
    RIGHTPAR        reduce using rule 114 (empty -> .)
    INTEGER         shift and go to state 41

  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! INTEGER         [ reduce using rule 114 (empty -> .) ]

    number                         shift and go to state 51
    while2                         shift and go to state 136
    exp                            shift and go to state 137
    empty                          shift and go to state 138

state 104

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY .

    END             reduce using rule 33 (cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY .)


state 105

    (41) est -> llamadaAFunct est .

    RIGHTKEY        reduce using rule 41 (est -> llamadaAFunct est .)
    RETURN          reduce using rule 41 (est -> llamadaAFunct est .)


state 106

    (38) est -> input est .

    RIGHTKEY        reduce using rule 38 (est -> input est .)
    RETURN          reduce using rule 38 (est -> input est .)


state 107

    (79) for -> FOR LEFTPAR . for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) for2 -> . ID ASSGN number for3

    ID              shift and go to state 140

    for2                           shift and go to state 139

state 108

    (40) est -> assignment est .

    RIGHTKEY        reduce using rule 40 (est -> assignment est .)
    RETURN          reduce using rule 40 (est -> assignment est .)


state 109

    (109) output -> WRITE LEFTPAR . output2 RIGHTPAR SEMICOLON
    (110) output2 -> . ID output2
    (111) output2 -> . QUOTE ID QUOTE output2
    (112) output2 -> . empty
    (114) empty -> .

    ID              shift and go to state 143
    QUOTE           shift and go to state 142
    RIGHTPAR        reduce using rule 114 (empty -> .)

    output2                        shift and go to state 141
    empty                          shift and go to state 144

state 110

    (63) assignment -> ID ASSGN . exp SEMICOLON
    (64) assignment -> ID ASSGN . llamadaAFunct SEMICOLON
    (95) exp -> . ID exp2
    (96) exp -> . number exp2
    (97) exp -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (52) number -> . INTEGER number2
    (114) empty -> .

    ID              shift and go to state 147
    INTEGER         shift and go to state 41
    SEMICOLON       reduce using rule 114 (empty -> .)

    llamadaAFunct                  shift and go to state 145
    number                         shift and go to state 51
    exp                            shift and go to state 146
    empty                          shift and go to state 148

state 111

    (43) llamadaAFunct -> ID LEFTPAR . llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct2 -> . ID llamadaAFunct3
    (48) llamadaAFunct2 -> . empty
    (114) empty -> .

    ID              shift and go to state 150
    RIGHTPAR        reduce using rule 114 (empty -> .)

    llamadaAFunct2                 shift and go to state 149
    empty                          shift and go to state 151

state 112

    (49) declareLocal -> DECLARE declareRecursivoLocal .

    IF              reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)
    DECLARE         reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)
    READ            reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)
    WRITE           reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)
    ID              reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)
    WHILE           reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)
    FOR             reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)
    DO              reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)
    RIGHTKEY        reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)
    RETURN          reduce using rule 49 (declareLocal -> DECLARE declareRecursivoLocal .)


state 113

    (50) declareRecursivoLocal -> type . ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal

    ID              shift and go to state 152


state 114

    (58) declareRecursivoLocal -> empty .

    IF              reduce using rule 58 (declareRecursivoLocal -> empty .)
    DECLARE         reduce using rule 58 (declareRecursivoLocal -> empty .)
    READ            reduce using rule 58 (declareRecursivoLocal -> empty .)
    WRITE           reduce using rule 58 (declareRecursivoLocal -> empty .)
    ID              reduce using rule 58 (declareRecursivoLocal -> empty .)
    WHILE           reduce using rule 58 (declareRecursivoLocal -> empty .)
    FOR             reduce using rule 58 (declareRecursivoLocal -> empty .)
    DO              reduce using rule 58 (declareRecursivoLocal -> empty .)
    RIGHTKEY        reduce using rule 58 (declareRecursivoLocal -> empty .)
    RETURN          reduce using rule 58 (declareRecursivoLocal -> empty .)


state 115

    (66) conditional -> IF LEFTPAR . conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (69) conditional2 -> . exp conditional2
    (70) conditional2 -> . empty
    (95) exp -> . ID exp2
    (96) exp -> . number exp2
    (97) exp -> . empty
    (114) empty -> .
    (52) number -> . INTEGER number2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 53
    RIGHTPAR        reduce using rule 114 (empty -> .)
    INTEGER         shift and go to state 41

  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! INTEGER         [ reduce using rule 114 (empty -> .) ]

    number                         shift and go to state 51
    conditional2                   shift and go to state 155
    exp                            shift and go to state 154
    empty                          shift and go to state 153

state 116

    (37) est -> cycles est .

    RIGHTKEY        reduce using rule 37 (est -> cycles est .)
    RETURN          reduce using rule 37 (est -> cycles est .)


state 117

    (39) est -> output est .

    RIGHTKEY        reduce using rule 39 (est -> output est .)
    RETURN          reduce using rule 39 (est -> output est .)


state 118

    (36) est -> declareLocal est .

    RIGHTKEY        reduce using rule 36 (est -> declareLocal est .)
    RETURN          reduce using rule 36 (est -> declareLocal est .)


state 119

    (102) exp2 -> AND exp .

    RIGHTBRACK      reduce using rule 102 (exp2 -> AND exp .)
    SEMICOLON       reduce using rule 102 (exp2 -> AND exp .)
    ID              reduce using rule 102 (exp2 -> AND exp .)
    INTEGER         reduce using rule 102 (exp2 -> AND exp .)
    RIGHTPAR        reduce using rule 102 (exp2 -> AND exp .)


state 120

    (107) exp2 -> DIVIDE exp .

    RIGHTBRACK      reduce using rule 107 (exp2 -> DIVIDE exp .)
    SEMICOLON       reduce using rule 107 (exp2 -> DIVIDE exp .)
    ID              reduce using rule 107 (exp2 -> DIVIDE exp .)
    INTEGER         reduce using rule 107 (exp2 -> DIVIDE exp .)
    RIGHTPAR        reduce using rule 107 (exp2 -> DIVIDE exp .)


state 121

    (98) exp2 -> LESS exp .

    RIGHTBRACK      reduce using rule 98 (exp2 -> LESS exp .)
    SEMICOLON       reduce using rule 98 (exp2 -> LESS exp .)
    ID              reduce using rule 98 (exp2 -> LESS exp .)
    INTEGER         reduce using rule 98 (exp2 -> LESS exp .)
    RIGHTPAR        reduce using rule 98 (exp2 -> LESS exp .)


state 122

    (101) exp2 -> NOTEQ exp .

    RIGHTBRACK      reduce using rule 101 (exp2 -> NOTEQ exp .)
    SEMICOLON       reduce using rule 101 (exp2 -> NOTEQ exp .)
    ID              reduce using rule 101 (exp2 -> NOTEQ exp .)
    INTEGER         reduce using rule 101 (exp2 -> NOTEQ exp .)
    RIGHTPAR        reduce using rule 101 (exp2 -> NOTEQ exp .)


state 123

    (104) exp2 -> SUM exp .

    RIGHTBRACK      reduce using rule 104 (exp2 -> SUM exp .)
    SEMICOLON       reduce using rule 104 (exp2 -> SUM exp .)
    ID              reduce using rule 104 (exp2 -> SUM exp .)
    INTEGER         reduce using rule 104 (exp2 -> SUM exp .)
    RIGHTPAR        reduce using rule 104 (exp2 -> SUM exp .)


state 124

    (105) exp2 -> MINUS exp .

    RIGHTBRACK      reduce using rule 105 (exp2 -> MINUS exp .)
    SEMICOLON       reduce using rule 105 (exp2 -> MINUS exp .)
    ID              reduce using rule 105 (exp2 -> MINUS exp .)
    INTEGER         reduce using rule 105 (exp2 -> MINUS exp .)
    RIGHTPAR        reduce using rule 105 (exp2 -> MINUS exp .)


state 125

    (99) exp2 -> GRTR exp .

    RIGHTBRACK      reduce using rule 99 (exp2 -> GRTR exp .)
    SEMICOLON       reduce using rule 99 (exp2 -> GRTR exp .)
    ID              reduce using rule 99 (exp2 -> GRTR exp .)
    INTEGER         reduce using rule 99 (exp2 -> GRTR exp .)
    RIGHTPAR        reduce using rule 99 (exp2 -> GRTR exp .)


state 126

    (106) exp2 -> MULTP exp .

    RIGHTBRACK      reduce using rule 106 (exp2 -> MULTP exp .)
    SEMICOLON       reduce using rule 106 (exp2 -> MULTP exp .)
    ID              reduce using rule 106 (exp2 -> MULTP exp .)
    INTEGER         reduce using rule 106 (exp2 -> MULTP exp .)
    RIGHTPAR        reduce using rule 106 (exp2 -> MULTP exp .)


state 127

    (100) exp2 -> EQ exp .

    RIGHTBRACK      reduce using rule 100 (exp2 -> EQ exp .)
    SEMICOLON       reduce using rule 100 (exp2 -> EQ exp .)
    ID              reduce using rule 100 (exp2 -> EQ exp .)
    INTEGER         reduce using rule 100 (exp2 -> EQ exp .)
    RIGHTPAR        reduce using rule 100 (exp2 -> EQ exp .)


state 128

    (103) exp2 -> OR exp .

    RIGHTBRACK      reduce using rule 103 (exp2 -> OR exp .)
    SEMICOLON       reduce using rule 103 (exp2 -> OR exp .)
    ID              reduce using rule 103 (exp2 -> OR exp .)
    INTEGER         reduce using rule 103 (exp2 -> OR exp .)
    RIGHTPAR        reduce using rule 103 (exp2 -> OR exp .)


state 129

    (25) array -> LEFTBRACK exp RIGHTBRACK array .

    COMMA           reduce using rule 25 (array -> LEFTBRACK exp RIGHTBRACK array .)
    SEMICOLON       reduce using rule 25 (array -> LEFTBRACK exp RIGHTBRACK array .)


state 130

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo .

    FUNCTION        reduce using rule 8 (declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo .)
    MAIN            reduce using rule 8 (declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo .)


state 131

    (10) declare3 -> COMMA ID altaVarGlobal . declare3
    (10) declare3 -> . COMMA ID altaVarGlobal declare3
    (24) declare3 -> . empty
    (114) empty -> .

    COMMA           shift and go to state 56
    SEMICOLON       reduce using rule 114 (empty -> .)

    empty                          shift and go to state 57
    declare3                       shift and go to state 156

state 132

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY . est functReturn RIGHTKEY
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (66) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (71) cycles -> . while
    (72) cycles -> . empty
    (73) cycles -> . for
    (74) cycles -> . do-while
    (113) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (109) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID ASSGN exp SEMICOLON
    (64) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (65) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (114) empty -> .
    (76) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (79) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (75) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 75
    DECLARE         shift and go to state 74
    READ            shift and go to state 62
    WRITE           shift and go to state 72
    ID              shift and go to state 73
    RETURN          reduce using rule 114 (empty -> .)
    RIGHTKEY        reduce using rule 114 (empty -> .)
    WHILE           shift and go to state 64
    FOR             shift and go to state 70
    DO              shift and go to state 61

  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! DECLARE         [ reduce using rule 114 (empty -> .) ]
  ! READ            [ reduce using rule 114 (empty -> .) ]
  ! WRITE           [ reduce using rule 114 (empty -> .) ]
  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! DO              [ reduce using rule 114 (empty -> .) ]

    conditional                    shift and go to state 63
    do-while                       shift and go to state 65
    est                            shift and go to state 157
    for                            shift and go to state 67
    llamadaAFunct                  shift and go to state 68
    input                          shift and go to state 69
    assignment                     shift and go to state 71
    cycles                         shift and go to state 76
    while                          shift and go to state 77
    empty                          shift and go to state 78
    output                         shift and go to state 79
    declareLocal                   shift and go to state 80

state 133

    (17) funct2 -> type ID altaVarLocal . funct3
    (18) funct3 -> . COMMA type ID altaVarLocal funct3
    (20) funct3 -> . empty
    (114) empty -> .

    COMMA           shift and go to state 159
    RIGHTPAR        reduce using rule 114 (empty -> .)

    funct3                         shift and go to state 158
    empty                          shift and go to state 160

state 134

    (75) do-while -> DO LEFTKEY est . RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    RIGHTKEY        shift and go to state 161


state 135

    (113) input -> READ LEFTPAR ID . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 162


state 136

    (76) while -> WHILE LEFTPAR while2 . RIGHTPAR LEFTKEY est RIGHTKEY

    RIGHTPAR        shift and go to state 163


state 137

    (77) while2 -> exp . while2
    (77) while2 -> . exp while2
    (78) while2 -> . empty
    (95) exp -> . ID exp2
    (96) exp -> . number exp2
    (97) exp -> . empty
    (114) empty -> .
    (52) number -> . INTEGER number2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 53
    RIGHTPAR        reduce using rule 114 (empty -> .)
    INTEGER         shift and go to state 41

  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! INTEGER         [ reduce using rule 114 (empty -> .) ]

    number                         shift and go to state 51
    while2                         shift and go to state 164
    exp                            shift and go to state 137
    empty                          shift and go to state 138

state 138

    (78) while2 -> empty .
    (97) exp -> empty .

  ! reduce/reduce conflict for RIGHTPAR resolved using rule 78 (while2 -> empty .)
    RIGHTPAR        reduce using rule 78 (while2 -> empty .)
    ID              reduce using rule 97 (exp -> empty .)
    INTEGER         reduce using rule 97 (exp -> empty .)

  ! RIGHTPAR        [ reduce using rule 97 (exp -> empty .) ]


state 139

    (79) for -> FOR LEFTPAR for2 . SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY

    SEMICOLON       shift and go to state 165


state 140

    (80) for2 -> ID . ASSGN number for3

    ASSGN           shift and go to state 166


state 141

    (109) output -> WRITE LEFTPAR output2 . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 167


state 142

    (111) output2 -> QUOTE . ID QUOTE output2

    ID              shift and go to state 168


state 143

    (110) output2 -> ID . output2
    (110) output2 -> . ID output2
    (111) output2 -> . QUOTE ID QUOTE output2
    (112) output2 -> . empty
    (114) empty -> .

    ID              shift and go to state 143
    QUOTE           shift and go to state 142
    RIGHTPAR        reduce using rule 114 (empty -> .)

    output2                        shift and go to state 169
    empty                          shift and go to state 144

state 144

    (112) output2 -> empty .

    RIGHTPAR        reduce using rule 112 (output2 -> empty .)


state 145

    (64) assignment -> ID ASSGN llamadaAFunct . SEMICOLON

    SEMICOLON       shift and go to state 170


state 146

    (63) assignment -> ID ASSGN exp . SEMICOLON

    SEMICOLON       shift and go to state 171


state 147

    (95) exp -> ID . exp2
    (43) llamadaAFunct -> ID . LEFTPAR llamadaAFunct2 RIGHTPAR
    (98) exp2 -> . LESS exp
    (99) exp2 -> . GRTR exp
    (100) exp2 -> . EQ exp
    (101) exp2 -> . NOTEQ exp
    (102) exp2 -> . AND exp
    (103) exp2 -> . OR exp
    (104) exp2 -> . SUM exp
    (105) exp2 -> . MINUS exp
    (106) exp2 -> . MULTP exp
    (107) exp2 -> . DIVIDE exp
    (108) exp2 -> . empty
    (114) empty -> .

    LEFTPAR         shift and go to state 111
    LESS            shift and go to state 84
    GRTR            shift and go to state 89
    EQ              shift and go to state 91
    NOTEQ           shift and go to state 85
    AND             shift and go to state 82
    OR              shift and go to state 92
    SUM             shift and go to state 87
    MINUS           shift and go to state 88
    MULTP           shift and go to state 90
    DIVIDE          shift and go to state 83
    SEMICOLON       reduce using rule 114 (empty -> .)

    exp2                           shift and go to state 95
    empty                          shift and go to state 93

state 148

    (97) exp -> empty .
    (44) llamadaAFunct -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 44 (llamadaAFunct -> empty .)
    SEMICOLON       reduce using rule 44 (llamadaAFunct -> empty .)

  ! SEMICOLON       [ reduce using rule 97 (exp -> empty .) ]


state 149

    (43) llamadaAFunct -> ID LEFTPAR llamadaAFunct2 . RIGHTPAR

    RIGHTPAR        shift and go to state 172


state 150

    (45) llamadaAFunct2 -> ID . llamadaAFunct3
    (46) llamadaAFunct3 -> . COMMA ID
    (47) llamadaAFunct3 -> . empty
    (114) empty -> .

    COMMA           shift and go to state 174
    RIGHTPAR        reduce using rule 114 (empty -> .)

    llamadaAFunct3                 shift and go to state 173
    empty                          shift and go to state 175

state 151

    (48) llamadaAFunct2 -> empty .

    RIGHTPAR        reduce using rule 48 (llamadaAFunct2 -> empty .)


state 152

    (50) declareRecursivoLocal -> type ID . altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (62) altaVarLocal -> .

    ASSGN           reduce using rule 62 (altaVarLocal -> .)
    LEFTBRACK       reduce using rule 62 (altaVarLocal -> .)
    COMMA           reduce using rule 62 (altaVarLocal -> .)
    SEMICOLON       reduce using rule 62 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 176

state 153

    (70) conditional2 -> empty .
    (97) exp -> empty .

  ! reduce/reduce conflict for RIGHTPAR resolved using rule 70 (conditional2 -> empty .)
    RIGHTPAR        reduce using rule 70 (conditional2 -> empty .)
    ID              reduce using rule 97 (exp -> empty .)
    INTEGER         reduce using rule 97 (exp -> empty .)

  ! RIGHTPAR        [ reduce using rule 97 (exp -> empty .) ]


state 154

    (69) conditional2 -> exp . conditional2
    (69) conditional2 -> . exp conditional2
    (70) conditional2 -> . empty
    (95) exp -> . ID exp2
    (96) exp -> . number exp2
    (97) exp -> . empty
    (114) empty -> .
    (52) number -> . INTEGER number2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 53
    RIGHTPAR        reduce using rule 114 (empty -> .)
    INTEGER         shift and go to state 41

  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! INTEGER         [ reduce using rule 114 (empty -> .) ]

    number                         shift and go to state 51
    conditional2                   shift and go to state 177
    exp                            shift and go to state 154
    empty                          shift and go to state 153

state 155

    (66) conditional -> IF LEFTPAR conditional2 . RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse

    RIGHTPAR        shift and go to state 178


state 156

    (10) declare3 -> COMMA ID altaVarGlobal declare3 .

    SEMICOLON       reduce using rule 10 (declare3 -> COMMA ID altaVarGlobal declare3 .)


state 157

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est . functReturn RIGHTKEY
    (13) functReturn -> . RETURN NUMBER SEMICOLON
    (14) functReturn -> . RETURN ID SEMICOLON
    (15) functReturn -> . empty
    (114) empty -> .

    RETURN          shift and go to state 179
    RIGHTKEY        reduce using rule 114 (empty -> .)

    functReturn                    shift and go to state 180
    empty                          shift and go to state 181

state 158

    (17) funct2 -> type ID altaVarLocal funct3 .

    RIGHTPAR        reduce using rule 17 (funct2 -> type ID altaVarLocal funct3 .)


state 159

    (18) funct3 -> COMMA . type ID altaVarLocal funct3
    (27) type -> . type2
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    type                           shift and go to state 182
    type2                          shift and go to state 19

state 160

    (20) funct3 -> empty .

    RIGHTPAR        reduce using rule 20 (funct3 -> empty .)


state 161

    (75) do-while -> DO LEFTKEY est RIGHTKEY . WHILE LEFTPAR while2 RIGHTPAR

    WHILE           shift and go to state 183


state 162

    (113) input -> READ LEFTPAR ID RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 184


state 163

    (76) while -> WHILE LEFTPAR while2 RIGHTPAR . LEFTKEY est RIGHTKEY

    LEFTKEY         shift and go to state 185


state 164

    (77) while2 -> exp while2 .

    RIGHTPAR        reduce using rule 77 (while2 -> exp while2 .)


state 165

    (79) for -> FOR LEFTPAR for2 SEMICOLON . for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (83) for4 -> . expFor
    (86) expFor -> . ID expFor2
    (87) expFor -> . number
    (52) number -> . INTEGER number2

    ID              shift and go to state 188
    INTEGER         shift and go to state 41

    number                         shift and go to state 186
    expFor                         shift and go to state 187
    for4                           shift and go to state 189

state 166

    (80) for2 -> ID ASSGN . number for3
    (52) number -> . INTEGER number2

    INTEGER         shift and go to state 41

    number                         shift and go to state 190

state 167

    (109) output -> WRITE LEFTPAR output2 RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 191


state 168

    (111) output2 -> QUOTE ID . QUOTE output2

    QUOTE           shift and go to state 192


state 169

    (110) output2 -> ID output2 .

    RIGHTPAR        reduce using rule 110 (output2 -> ID output2 .)


state 170

    (64) assignment -> ID ASSGN llamadaAFunct SEMICOLON .

    IF              reduce using rule 64 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)
    DECLARE         reduce using rule 64 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)
    READ            reduce using rule 64 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)
    WRITE           reduce using rule 64 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)
    ID              reduce using rule 64 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)
    WHILE           reduce using rule 64 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)
    FOR             reduce using rule 64 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)
    DO              reduce using rule 64 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)
    RIGHTKEY        reduce using rule 64 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)
    RETURN          reduce using rule 64 (assignment -> ID ASSGN llamadaAFunct SEMICOLON .)


state 171

    (63) assignment -> ID ASSGN exp SEMICOLON .

    IF              reduce using rule 63 (assignment -> ID ASSGN exp SEMICOLON .)
    DECLARE         reduce using rule 63 (assignment -> ID ASSGN exp SEMICOLON .)
    READ            reduce using rule 63 (assignment -> ID ASSGN exp SEMICOLON .)
    WRITE           reduce using rule 63 (assignment -> ID ASSGN exp SEMICOLON .)
    ID              reduce using rule 63 (assignment -> ID ASSGN exp SEMICOLON .)
    WHILE           reduce using rule 63 (assignment -> ID ASSGN exp SEMICOLON .)
    FOR             reduce using rule 63 (assignment -> ID ASSGN exp SEMICOLON .)
    DO              reduce using rule 63 (assignment -> ID ASSGN exp SEMICOLON .)
    RIGHTKEY        reduce using rule 63 (assignment -> ID ASSGN exp SEMICOLON .)
    RETURN          reduce using rule 63 (assignment -> ID ASSGN exp SEMICOLON .)


state 172

    (43) llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .

    IF              reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    DECLARE         reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    READ            reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    WRITE           reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    ID              reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    WHILE           reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    FOR             reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    DO              reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    RIGHTKEY        reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    RETURN          reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    SEMICOLON       reduce using rule 43 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)


state 173

    (45) llamadaAFunct2 -> ID llamadaAFunct3 .

    RIGHTPAR        reduce using rule 45 (llamadaAFunct2 -> ID llamadaAFunct3 .)


state 174

    (46) llamadaAFunct3 -> COMMA . ID

    ID              shift and go to state 193


state 175

    (47) llamadaAFunct3 -> empty .

    RIGHTPAR        reduce using rule 47 (llamadaAFunct3 -> empty .)


state 176

    (50) declareRecursivoLocal -> type ID altaVarLocal . assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (51) assignmentDecl -> . ASSGN number
    (55) assignmentDecl -> . empty
    (114) empty -> .

    ASSGN           shift and go to state 35
    LEFTBRACK       reduce using rule 114 (empty -> .)
    COMMA           reduce using rule 114 (empty -> .)
    SEMICOLON       reduce using rule 114 (empty -> .)

    assignmentDecl                 shift and go to state 194
    empty                          shift and go to state 37

state 177

    (69) conditional2 -> exp conditional2 .

    RIGHTPAR        reduce using rule 69 (conditional2 -> exp conditional2 .)


state 178

    (66) conditional -> IF LEFTPAR conditional2 RIGHTPAR . LEFTKEY est RIGHTKEY conditionalElse

    LEFTKEY         shift and go to state 195


state 179

    (13) functReturn -> RETURN . NUMBER SEMICOLON
    (14) functReturn -> RETURN . ID SEMICOLON

    NUMBER          shift and go to state 196
    ID              shift and go to state 197


state 180

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn . RIGHTKEY

    RIGHTKEY        shift and go to state 198


state 181

    (15) functReturn -> empty .

    RIGHTKEY        reduce using rule 15 (functReturn -> empty .)


state 182

    (18) funct3 -> COMMA type . ID altaVarLocal funct3

    ID              shift and go to state 199


state 183

    (75) do-while -> DO LEFTKEY est RIGHTKEY WHILE . LEFTPAR while2 RIGHTPAR

    LEFTPAR         shift and go to state 200


state 184

    (113) input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .

    IF              reduce using rule 113 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    DECLARE         reduce using rule 113 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    READ            reduce using rule 113 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    WRITE           reduce using rule 113 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    ID              reduce using rule 113 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 113 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    FOR             reduce using rule 113 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    DO              reduce using rule 113 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    RIGHTKEY        reduce using rule 113 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    RETURN          reduce using rule 113 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)


state 185

    (76) while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY . est RIGHTKEY
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (66) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (71) cycles -> . while
    (72) cycles -> . empty
    (73) cycles -> . for
    (74) cycles -> . do-while
    (113) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (109) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID ASSGN exp SEMICOLON
    (64) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (65) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (114) empty -> .
    (76) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (79) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (75) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 75
    DECLARE         shift and go to state 74
    READ            shift and go to state 62
    WRITE           shift and go to state 72
    ID              shift and go to state 73
    RIGHTKEY        reduce using rule 114 (empty -> .)
    WHILE           shift and go to state 64
    FOR             shift and go to state 70
    DO              shift and go to state 61

  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! DECLARE         [ reduce using rule 114 (empty -> .) ]
  ! READ            [ reduce using rule 114 (empty -> .) ]
  ! WRITE           [ reduce using rule 114 (empty -> .) ]
  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! DO              [ reduce using rule 114 (empty -> .) ]

    conditional                    shift and go to state 63
    do-while                       shift and go to state 65
    est                            shift and go to state 201
    for                            shift and go to state 67
    llamadaAFunct                  shift and go to state 68
    input                          shift and go to state 69
    assignment                     shift and go to state 71
    cycles                         shift and go to state 76
    while                          shift and go to state 77
    empty                          shift and go to state 78
    output                         shift and go to state 79
    declareLocal                   shift and go to state 80

state 186

    (87) expFor -> number .

    SEMICOLON       reduce using rule 87 (expFor -> number .)


state 187

    (83) for4 -> expFor .

    SEMICOLON       reduce using rule 83 (for4 -> expFor .)


state 188

    (86) expFor -> ID . expFor2
    (88) expFor2 -> . LESS expFor
    (89) expFor2 -> . GRTR expFor
    (90) expFor2 -> . EQ expFor
    (91) expFor2 -> . NOTEQ expFor
    (92) expFor2 -> . AND expFor
    (93) expFor2 -> . OR expFor
    (94) expFor2 -> . empty
    (114) empty -> .

    LESS            shift and go to state 203
    GRTR            shift and go to state 206
    EQ              shift and go to state 207
    NOTEQ           shift and go to state 204
    AND             shift and go to state 202
    OR              shift and go to state 209
    SEMICOLON       reduce using rule 114 (empty -> .)

    empty                          shift and go to state 208
    expFor2                        shift and go to state 205

state 189

    (79) for -> FOR LEFTPAR for2 SEMICOLON for4 . SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY

    SEMICOLON       shift and go to state 210


state 190

    (80) for2 -> ID ASSGN number . for3
    (81) for3 -> . COMMA for2
    (82) for3 -> . empty
    (114) empty -> .

    COMMA           shift and go to state 211
    SEMICOLON       reduce using rule 114 (empty -> .)

    for3                           shift and go to state 212
    empty                          shift and go to state 213

state 191

    (109) output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .

    IF              reduce using rule 109 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    DECLARE         reduce using rule 109 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    READ            reduce using rule 109 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    WRITE           reduce using rule 109 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    ID              reduce using rule 109 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 109 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    FOR             reduce using rule 109 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    DO              reduce using rule 109 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    RIGHTKEY        reduce using rule 109 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    RETURN          reduce using rule 109 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)


state 192

    (111) output2 -> QUOTE ID QUOTE . output2
    (110) output2 -> . ID output2
    (111) output2 -> . QUOTE ID QUOTE output2
    (112) output2 -> . empty
    (114) empty -> .

    ID              shift and go to state 143
    QUOTE           shift and go to state 142
    RIGHTPAR        reduce using rule 114 (empty -> .)

    output2                        shift and go to state 214
    empty                          shift and go to state 144

state 193

    (46) llamadaAFunct3 -> COMMA ID .

    RIGHTPAR        reduce using rule 46 (llamadaAFunct3 -> COMMA ID .)


state 194

    (50) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl . declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (56) declare2Local -> . array
    (60) declare2Local -> . empty
    (25) array -> . LEFTBRACK exp RIGHTBRACK array
    (26) array -> . empty
    (114) empty -> .

    LEFTBRACK       shift and go to state 42
    COMMA           reduce using rule 114 (empty -> .)
    SEMICOLON       reduce using rule 114 (empty -> .)

    declare2Local                  shift and go to state 215
    array                          shift and go to state 216
    empty                          shift and go to state 217

state 195

    (66) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY . est RIGHTKEY conditionalElse
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (66) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (71) cycles -> . while
    (72) cycles -> . empty
    (73) cycles -> . for
    (74) cycles -> . do-while
    (113) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (109) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID ASSGN exp SEMICOLON
    (64) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (65) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (114) empty -> .
    (76) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (79) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (75) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 75
    DECLARE         shift and go to state 74
    READ            shift and go to state 62
    WRITE           shift and go to state 72
    ID              shift and go to state 73
    RIGHTKEY        reduce using rule 114 (empty -> .)
    WHILE           shift and go to state 64
    FOR             shift and go to state 70
    DO              shift and go to state 61

  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! DECLARE         [ reduce using rule 114 (empty -> .) ]
  ! READ            [ reduce using rule 114 (empty -> .) ]
  ! WRITE           [ reduce using rule 114 (empty -> .) ]
  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! DO              [ reduce using rule 114 (empty -> .) ]

    conditional                    shift and go to state 63
    do-while                       shift and go to state 65
    est                            shift and go to state 218
    for                            shift and go to state 67
    llamadaAFunct                  shift and go to state 68
    input                          shift and go to state 69
    empty                          shift and go to state 78
    assignment                     shift and go to state 71
    cycles                         shift and go to state 76
    while                          shift and go to state 77
    output                         shift and go to state 79
    declareLocal                   shift and go to state 80

state 196

    (13) functReturn -> RETURN NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 219


state 197

    (14) functReturn -> RETURN ID . SEMICOLON

    SEMICOLON       shift and go to state 220


state 198

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY .

    FUNCTION        reduce using rule 12 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY .)
    MAIN            reduce using rule 12 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY .)


state 199

    (18) funct3 -> COMMA type ID . altaVarLocal funct3
    (62) altaVarLocal -> .

    COMMA           reduce using rule 62 (altaVarLocal -> .)
    RIGHTPAR        reduce using rule 62 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 221

state 200

    (75) do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR . while2 RIGHTPAR
    (77) while2 -> . exp while2
    (78) while2 -> . empty
    (95) exp -> . ID exp2
    (96) exp -> . number exp2
    (97) exp -> . empty
    (114) empty -> .
    (52) number -> . INTEGER number2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 53
    RIGHTPAR        reduce using rule 114 (empty -> .)
    INTEGER         shift and go to state 41

  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! INTEGER         [ reduce using rule 114 (empty -> .) ]

    number                         shift and go to state 51
    while2                         shift and go to state 222
    exp                            shift and go to state 137
    empty                          shift and go to state 138

state 201

    (76) while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 223


state 202

    (92) expFor2 -> AND . expFor
    (86) expFor -> . ID expFor2
    (87) expFor -> . number
    (52) number -> . INTEGER number2

    ID              shift and go to state 188
    INTEGER         shift and go to state 41

    expFor                         shift and go to state 224
    number                         shift and go to state 186

state 203

    (88) expFor2 -> LESS . expFor
    (86) expFor -> . ID expFor2
    (87) expFor -> . number
    (52) number -> . INTEGER number2

    ID              shift and go to state 188
    INTEGER         shift and go to state 41

    expFor                         shift and go to state 225
    number                         shift and go to state 186

state 204

    (91) expFor2 -> NOTEQ . expFor
    (86) expFor -> . ID expFor2
    (87) expFor -> . number
    (52) number -> . INTEGER number2

    ID              shift and go to state 188
    INTEGER         shift and go to state 41

    expFor                         shift and go to state 226
    number                         shift and go to state 186

state 205

    (86) expFor -> ID expFor2 .

    SEMICOLON       reduce using rule 86 (expFor -> ID expFor2 .)


state 206

    (89) expFor2 -> GRTR . expFor
    (86) expFor -> . ID expFor2
    (87) expFor -> . number
    (52) number -> . INTEGER number2

    ID              shift and go to state 188
    INTEGER         shift and go to state 41

    expFor                         shift and go to state 227
    number                         shift and go to state 186

state 207

    (90) expFor2 -> EQ . expFor
    (86) expFor -> . ID expFor2
    (87) expFor -> . number
    (52) number -> . INTEGER number2

    ID              shift and go to state 188
    INTEGER         shift and go to state 41

    expFor                         shift and go to state 228
    number                         shift and go to state 186

state 208

    (94) expFor2 -> empty .

    SEMICOLON       reduce using rule 94 (expFor2 -> empty .)


state 209

    (93) expFor2 -> OR . expFor
    (86) expFor -> . ID expFor2
    (87) expFor -> . number
    (52) number -> . INTEGER number2

    ID              shift and go to state 188
    INTEGER         shift and go to state 41

    expFor                         shift and go to state 229
    number                         shift and go to state 186

state 210

    (79) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON . parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (84) parte3For -> . ID SUM SUM
    (85) parte3For -> . ID MINUS MINUS

    ID              shift and go to state 231

    parte3For                      shift and go to state 230

state 211

    (81) for3 -> COMMA . for2
    (80) for2 -> . ID ASSGN number for3

    ID              shift and go to state 140

    for2                           shift and go to state 232

state 212

    (80) for2 -> ID ASSGN number for3 .

    SEMICOLON       reduce using rule 80 (for2 -> ID ASSGN number for3 .)


state 213

    (82) for3 -> empty .

    SEMICOLON       reduce using rule 82 (for3 -> empty .)


state 214

    (111) output2 -> QUOTE ID QUOTE output2 .

    RIGHTPAR        reduce using rule 111 (output2 -> QUOTE ID QUOTE output2 .)


state 215

    (50) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local . declare3Local SEMICOLON declareRecursivoLocal
    (57) declare3Local -> . COMMA ID altaVarLocal assignmentDecl declare3Local
    (61) declare3Local -> . empty
    (114) empty -> .

    COMMA           shift and go to state 233
    SEMICOLON       reduce using rule 114 (empty -> .)

    empty                          shift and go to state 234
    declare3Local                  shift and go to state 235

state 216

    (56) declare2Local -> array .

    COMMA           reduce using rule 56 (declare2Local -> array .)
    SEMICOLON       reduce using rule 56 (declare2Local -> array .)


state 217

    (60) declare2Local -> empty .
    (26) array -> empty .

  ! reduce/reduce conflict for COMMA resolved using rule 26 (array -> empty .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 26 (array -> empty .)
    COMMA           reduce using rule 26 (array -> empty .)
    SEMICOLON       reduce using rule 26 (array -> empty .)

  ! COMMA           [ reduce using rule 60 (declare2Local -> empty .) ]
  ! SEMICOLON       [ reduce using rule 60 (declare2Local -> empty .) ]


state 218

    (66) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est . RIGHTKEY conditionalElse

    RIGHTKEY        shift and go to state 236


state 219

    (13) functReturn -> RETURN NUMBER SEMICOLON .

    RIGHTKEY        reduce using rule 13 (functReturn -> RETURN NUMBER SEMICOLON .)


state 220

    (14) functReturn -> RETURN ID SEMICOLON .

    RIGHTKEY        reduce using rule 14 (functReturn -> RETURN ID SEMICOLON .)


state 221

    (18) funct3 -> COMMA type ID altaVarLocal . funct3
    (18) funct3 -> . COMMA type ID altaVarLocal funct3
    (20) funct3 -> . empty
    (114) empty -> .

    COMMA           shift and go to state 159
    RIGHTPAR        reduce using rule 114 (empty -> .)

    funct3                         shift and go to state 237
    empty                          shift and go to state 160

state 222

    (75) do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 . RIGHTPAR

    RIGHTPAR        shift and go to state 238


state 223

    (76) while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .

    IF              reduce using rule 76 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    DECLARE         reduce using rule 76 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    READ            reduce using rule 76 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    WRITE           reduce using rule 76 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    ID              reduce using rule 76 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    WHILE           reduce using rule 76 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    FOR             reduce using rule 76 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    DO              reduce using rule 76 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    RIGHTKEY        reduce using rule 76 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    RETURN          reduce using rule 76 (while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY .)


state 224

    (92) expFor2 -> AND expFor .

    SEMICOLON       reduce using rule 92 (expFor2 -> AND expFor .)


state 225

    (88) expFor2 -> LESS expFor .

    SEMICOLON       reduce using rule 88 (expFor2 -> LESS expFor .)


state 226

    (91) expFor2 -> NOTEQ expFor .

    SEMICOLON       reduce using rule 91 (expFor2 -> NOTEQ expFor .)


state 227

    (89) expFor2 -> GRTR expFor .

    SEMICOLON       reduce using rule 89 (expFor2 -> GRTR expFor .)


state 228

    (90) expFor2 -> EQ expFor .

    SEMICOLON       reduce using rule 90 (expFor2 -> EQ expFor .)


state 229

    (93) expFor2 -> OR expFor .

    SEMICOLON       reduce using rule 93 (expFor2 -> OR expFor .)


state 230

    (79) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For . RIGHTPAR LEFTKEY est RIGHTKEY

    RIGHTPAR        shift and go to state 239


state 231

    (84) parte3For -> ID . SUM SUM
    (85) parte3For -> ID . MINUS MINUS

    SUM             shift and go to state 240
    MINUS           shift and go to state 241


state 232

    (81) for3 -> COMMA for2 .

    SEMICOLON       reduce using rule 81 (for3 -> COMMA for2 .)


state 233

    (57) declare3Local -> COMMA . ID altaVarLocal assignmentDecl declare3Local

    ID              shift and go to state 242


state 234

    (61) declare3Local -> empty .

    SEMICOLON       reduce using rule 61 (declare3Local -> empty .)


state 235

    (50) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local . SEMICOLON declareRecursivoLocal

    SEMICOLON       shift and go to state 243


state 236

    (66) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY . conditionalElse
    (67) conditionalElse -> . ELSE LEFTKEY est RIGHTKEY
    (68) conditionalElse -> . empty
    (114) empty -> .

    ELSE            shift and go to state 245
    IF              reduce using rule 114 (empty -> .)
    DECLARE         reduce using rule 114 (empty -> .)
    READ            reduce using rule 114 (empty -> .)
    WRITE           reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    WHILE           reduce using rule 114 (empty -> .)
    FOR             reduce using rule 114 (empty -> .)
    DO              reduce using rule 114 (empty -> .)
    RIGHTKEY        reduce using rule 114 (empty -> .)
    RETURN          reduce using rule 114 (empty -> .)

    conditionalElse                shift and go to state 244
    empty                          shift and go to state 246

state 237

    (18) funct3 -> COMMA type ID altaVarLocal funct3 .

    RIGHTPAR        reduce using rule 18 (funct3 -> COMMA type ID altaVarLocal funct3 .)


state 238

    (75) do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .

    IF              reduce using rule 75 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)
    DECLARE         reduce using rule 75 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)
    READ            reduce using rule 75 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)
    WRITE           reduce using rule 75 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)
    ID              reduce using rule 75 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)
    WHILE           reduce using rule 75 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)
    FOR             reduce using rule 75 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)
    DO              reduce using rule 75 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)
    RIGHTKEY        reduce using rule 75 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)
    RETURN          reduce using rule 75 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)


state 239

    (79) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR . LEFTKEY est RIGHTKEY

    LEFTKEY         shift and go to state 247


state 240

    (84) parte3For -> ID SUM . SUM

    SUM             shift and go to state 248


state 241

    (85) parte3For -> ID MINUS . MINUS

    MINUS           shift and go to state 249


state 242

    (57) declare3Local -> COMMA ID . altaVarLocal assignmentDecl declare3Local
    (62) altaVarLocal -> .

    ASSGN           reduce using rule 62 (altaVarLocal -> .)
    COMMA           reduce using rule 62 (altaVarLocal -> .)
    SEMICOLON       reduce using rule 62 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 250

state 243

    (50) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON . declareRecursivoLocal
    (50) declareRecursivoLocal -> . type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (58) declareRecursivoLocal -> . empty
    (27) type -> . type2
    (114) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    IF              reduce using rule 114 (empty -> .)
    DECLARE         reduce using rule 114 (empty -> .)
    READ            reduce using rule 114 (empty -> .)
    WRITE           reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    WHILE           reduce using rule 114 (empty -> .)
    FOR             reduce using rule 114 (empty -> .)
    DO              reduce using rule 114 (empty -> .)
    RIGHTKEY        reduce using rule 114 (empty -> .)
    RETURN          reduce using rule 114 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    declareRecursivoLocal          shift and go to state 251
    type2                          shift and go to state 19
    type                           shift and go to state 113
    empty                          shift and go to state 114

state 244

    (66) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .

    IF              reduce using rule 66 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)
    DECLARE         reduce using rule 66 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)
    READ            reduce using rule 66 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)
    WRITE           reduce using rule 66 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)
    ID              reduce using rule 66 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)
    WHILE           reduce using rule 66 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)
    FOR             reduce using rule 66 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)
    DO              reduce using rule 66 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)
    RIGHTKEY        reduce using rule 66 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)
    RETURN          reduce using rule 66 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse .)


state 245

    (67) conditionalElse -> ELSE . LEFTKEY est RIGHTKEY

    LEFTKEY         shift and go to state 252


state 246

    (68) conditionalElse -> empty .

    IF              reduce using rule 68 (conditionalElse -> empty .)
    DECLARE         reduce using rule 68 (conditionalElse -> empty .)
    READ            reduce using rule 68 (conditionalElse -> empty .)
    WRITE           reduce using rule 68 (conditionalElse -> empty .)
    ID              reduce using rule 68 (conditionalElse -> empty .)
    WHILE           reduce using rule 68 (conditionalElse -> empty .)
    FOR             reduce using rule 68 (conditionalElse -> empty .)
    DO              reduce using rule 68 (conditionalElse -> empty .)
    RIGHTKEY        reduce using rule 68 (conditionalElse -> empty .)
    RETURN          reduce using rule 68 (conditionalElse -> empty .)


state 247

    (79) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY . est RIGHTKEY
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (66) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (71) cycles -> . while
    (72) cycles -> . empty
    (73) cycles -> . for
    (74) cycles -> . do-while
    (113) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (109) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID ASSGN exp SEMICOLON
    (64) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (65) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (114) empty -> .
    (76) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (79) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (75) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 75
    DECLARE         shift and go to state 74
    READ            shift and go to state 62
    WRITE           shift and go to state 72
    ID              shift and go to state 73
    RIGHTKEY        reduce using rule 114 (empty -> .)
    WHILE           shift and go to state 64
    FOR             shift and go to state 70
    DO              shift and go to state 61

  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! DECLARE         [ reduce using rule 114 (empty -> .) ]
  ! READ            [ reduce using rule 114 (empty -> .) ]
  ! WRITE           [ reduce using rule 114 (empty -> .) ]
  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! DO              [ reduce using rule 114 (empty -> .) ]

    conditional                    shift and go to state 63
    do-while                       shift and go to state 65
    est                            shift and go to state 253
    for                            shift and go to state 67
    llamadaAFunct                  shift and go to state 68
    input                          shift and go to state 69
    assignment                     shift and go to state 71
    declareLocal                   shift and go to state 80
    while                          shift and go to state 77
    empty                          shift and go to state 78
    output                         shift and go to state 79
    cycles                         shift and go to state 76

state 248

    (84) parte3For -> ID SUM SUM .

    RIGHTPAR        reduce using rule 84 (parte3For -> ID SUM SUM .)


state 249

    (85) parte3For -> ID MINUS MINUS .

    RIGHTPAR        reduce using rule 85 (parte3For -> ID MINUS MINUS .)


state 250

    (57) declare3Local -> COMMA ID altaVarLocal . assignmentDecl declare3Local
    (51) assignmentDecl -> . ASSGN number
    (55) assignmentDecl -> . empty
    (114) empty -> .

    ASSGN           shift and go to state 35
    COMMA           reduce using rule 114 (empty -> .)
    SEMICOLON       reduce using rule 114 (empty -> .)

    assignmentDecl                 shift and go to state 254
    empty                          shift and go to state 37

state 251

    (50) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .

    IF              reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    DECLARE         reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    READ            reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    WRITE           reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    ID              reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    WHILE           reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    FOR             reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    DO              reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    RIGHTKEY        reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    RETURN          reduce using rule 50 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)


state 252

    (67) conditionalElse -> ELSE LEFTKEY . est RIGHTKEY
    (35) est -> . conditional est
    (36) est -> . declareLocal est
    (37) est -> . cycles est
    (38) est -> . input est
    (39) est -> . output est
    (40) est -> . assignment est
    (41) est -> . llamadaAFunct est
    (42) est -> . empty
    (66) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse
    (49) declareLocal -> . DECLARE declareRecursivoLocal
    (59) declareLocal -> . empty
    (71) cycles -> . while
    (72) cycles -> . empty
    (73) cycles -> . for
    (74) cycles -> . do-while
    (113) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (109) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (63) assignment -> . ID ASSGN exp SEMICOLON
    (64) assignment -> . ID ASSGN llamadaAFunct SEMICOLON
    (65) assignment -> . empty
    (43) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (44) llamadaAFunct -> . empty
    (114) empty -> .
    (76) while -> . WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY
    (79) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (75) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 75
    DECLARE         shift and go to state 74
    READ            shift and go to state 62
    WRITE           shift and go to state 72
    ID              shift and go to state 73
    RIGHTKEY        reduce using rule 114 (empty -> .)
    WHILE           shift and go to state 64
    FOR             shift and go to state 70
    DO              shift and go to state 61

  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! DECLARE         [ reduce using rule 114 (empty -> .) ]
  ! READ            [ reduce using rule 114 (empty -> .) ]
  ! WRITE           [ reduce using rule 114 (empty -> .) ]
  ! ID              [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! DO              [ reduce using rule 114 (empty -> .) ]

    conditional                    shift and go to state 63
    do-while                       shift and go to state 65
    est                            shift and go to state 255
    for                            shift and go to state 67
    llamadaAFunct                  shift and go to state 68
    input                          shift and go to state 69
    assignment                     shift and go to state 71
    cycles                         shift and go to state 76
    while                          shift and go to state 77
    empty                          shift and go to state 78
    output                         shift and go to state 79
    declareLocal                   shift and go to state 80

state 253

    (79) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 256


state 254

    (57) declare3Local -> COMMA ID altaVarLocal assignmentDecl . declare3Local
    (57) declare3Local -> . COMMA ID altaVarLocal assignmentDecl declare3Local
    (61) declare3Local -> . empty
    (114) empty -> .

    COMMA           shift and go to state 233
    SEMICOLON       reduce using rule 114 (empty -> .)

    empty                          shift and go to state 234
    declare3Local                  shift and go to state 257

state 255

    (67) conditionalElse -> ELSE LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 258


state 256

    (79) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .

    IF              reduce using rule 79 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    DECLARE         reduce using rule 79 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    READ            reduce using rule 79 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    WRITE           reduce using rule 79 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    ID              reduce using rule 79 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    WHILE           reduce using rule 79 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    FOR             reduce using rule 79 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    DO              reduce using rule 79 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    RETURN          reduce using rule 79 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    RIGHTKEY        reduce using rule 79 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)


state 257

    (57) declare3Local -> COMMA ID altaVarLocal assignmentDecl declare3Local .

    SEMICOLON       reduce using rule 57 (declare3Local -> COMMA ID altaVarLocal assignmentDecl declare3Local .)


state 258

    (67) conditionalElse -> ELSE LEFTKEY est RIGHTKEY .

    IF              reduce using rule 67 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)
    DECLARE         reduce using rule 67 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)
    READ            reduce using rule 67 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)
    WRITE           reduce using rule 67 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)
    ID              reduce using rule 67 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)
    WHILE           reduce using rule 67 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)
    FOR             reduce using rule 67 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)
    DO              reduce using rule 67 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)
    RIGHTKEY        reduce using rule 67 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)
    RETURN          reduce using rule 67 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 47 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 47 resolved as shift
WARNING: shift/reduce conflict for READ in state 47 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 47 resolved as shift
WARNING: shift/reduce conflict for ID in state 47 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 47 resolved as shift
WARNING: shift/reduce conflict for FOR in state 47 resolved as shift
WARNING: shift/reduce conflict for DO in state 47 resolved as shift
WARNING: shift/reduce conflict for IF in state 63 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 63 resolved as shift
WARNING: shift/reduce conflict for READ in state 63 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 63 resolved as shift
WARNING: shift/reduce conflict for ID in state 63 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 63 resolved as shift
WARNING: shift/reduce conflict for FOR in state 63 resolved as shift
WARNING: shift/reduce conflict for DO in state 63 resolved as shift
WARNING: shift/reduce conflict for IF in state 68 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 68 resolved as shift
WARNING: shift/reduce conflict for READ in state 68 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 68 resolved as shift
WARNING: shift/reduce conflict for ID in state 68 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 68 resolved as shift
WARNING: shift/reduce conflict for FOR in state 68 resolved as shift
WARNING: shift/reduce conflict for DO in state 68 resolved as shift
WARNING: shift/reduce conflict for IF in state 69 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 69 resolved as shift
WARNING: shift/reduce conflict for READ in state 69 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 69 resolved as shift
WARNING: shift/reduce conflict for ID in state 69 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 69 resolved as shift
WARNING: shift/reduce conflict for FOR in state 69 resolved as shift
WARNING: shift/reduce conflict for DO in state 69 resolved as shift
WARNING: shift/reduce conflict for IF in state 71 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 71 resolved as shift
WARNING: shift/reduce conflict for READ in state 71 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 71 resolved as shift
WARNING: shift/reduce conflict for ID in state 71 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 71 resolved as shift
WARNING: shift/reduce conflict for FOR in state 71 resolved as shift
WARNING: shift/reduce conflict for DO in state 71 resolved as shift
WARNING: shift/reduce conflict for IF in state 76 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 76 resolved as shift
WARNING: shift/reduce conflict for READ in state 76 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 76 resolved as shift
WARNING: shift/reduce conflict for ID in state 76 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 76 resolved as shift
WARNING: shift/reduce conflict for FOR in state 76 resolved as shift
WARNING: shift/reduce conflict for DO in state 76 resolved as shift
WARNING: shift/reduce conflict for IF in state 79 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 79 resolved as shift
WARNING: shift/reduce conflict for READ in state 79 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 79 resolved as shift
WARNING: shift/reduce conflict for ID in state 79 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 79 resolved as shift
WARNING: shift/reduce conflict for FOR in state 79 resolved as shift
WARNING: shift/reduce conflict for DO in state 79 resolved as shift
WARNING: shift/reduce conflict for IF in state 80 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 80 resolved as shift
WARNING: shift/reduce conflict for READ in state 80 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 80 resolved as shift
WARNING: shift/reduce conflict for ID in state 80 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 80 resolved as shift
WARNING: shift/reduce conflict for FOR in state 80 resolved as shift
WARNING: shift/reduce conflict for DO in state 80 resolved as shift
WARNING: shift/reduce conflict for ID in state 82 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 82 resolved as shift
WARNING: shift/reduce conflict for ID in state 83 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 83 resolved as shift
WARNING: shift/reduce conflict for ID in state 84 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 84 resolved as shift
WARNING: shift/reduce conflict for ID in state 85 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 85 resolved as shift
WARNING: shift/reduce conflict for ID in state 87 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 87 resolved as shift
WARNING: shift/reduce conflict for ID in state 88 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 88 resolved as shift
WARNING: shift/reduce conflict for ID in state 89 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 89 resolved as shift
WARNING: shift/reduce conflict for ID in state 90 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 90 resolved as shift
WARNING: shift/reduce conflict for ID in state 91 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 91 resolved as shift
WARNING: shift/reduce conflict for ID in state 92 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 92 resolved as shift
WARNING: shift/reduce conflict for IF in state 100 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 100 resolved as shift
WARNING: shift/reduce conflict for READ in state 100 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 100 resolved as shift
WARNING: shift/reduce conflict for ID in state 100 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 100 resolved as shift
WARNING: shift/reduce conflict for FOR in state 100 resolved as shift
WARNING: shift/reduce conflict for DO in state 100 resolved as shift
WARNING: shift/reduce conflict for ID in state 103 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 103 resolved as shift
WARNING: shift/reduce conflict for ID in state 115 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 115 resolved as shift
WARNING: shift/reduce conflict for IF in state 132 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 132 resolved as shift
WARNING: shift/reduce conflict for READ in state 132 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 132 resolved as shift
WARNING: shift/reduce conflict for ID in state 132 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 132 resolved as shift
WARNING: shift/reduce conflict for FOR in state 132 resolved as shift
WARNING: shift/reduce conflict for DO in state 132 resolved as shift
WARNING: shift/reduce conflict for ID in state 137 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 137 resolved as shift
WARNING: shift/reduce conflict for ID in state 154 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 154 resolved as shift
WARNING: shift/reduce conflict for IF in state 185 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 185 resolved as shift
WARNING: shift/reduce conflict for READ in state 185 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 185 resolved as shift
WARNING: shift/reduce conflict for ID in state 185 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 185 resolved as shift
WARNING: shift/reduce conflict for FOR in state 185 resolved as shift
WARNING: shift/reduce conflict for DO in state 185 resolved as shift
WARNING: shift/reduce conflict for IF in state 195 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 195 resolved as shift
WARNING: shift/reduce conflict for READ in state 195 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 195 resolved as shift
WARNING: shift/reduce conflict for ID in state 195 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 195 resolved as shift
WARNING: shift/reduce conflict for FOR in state 195 resolved as shift
WARNING: shift/reduce conflict for DO in state 195 resolved as shift
WARNING: shift/reduce conflict for ID in state 200 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 200 resolved as shift
WARNING: shift/reduce conflict for IF in state 247 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 247 resolved as shift
WARNING: shift/reduce conflict for READ in state 247 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 247 resolved as shift
WARNING: shift/reduce conflict for ID in state 247 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 247 resolved as shift
WARNING: shift/reduce conflict for FOR in state 247 resolved as shift
WARNING: shift/reduce conflict for DO in state 247 resolved as shift
WARNING: shift/reduce conflict for IF in state 252 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 252 resolved as shift
WARNING: shift/reduce conflict for READ in state 252 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 252 resolved as shift
WARNING: shift/reduce conflict for ID in state 252 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 252 resolved as shift
WARNING: shift/reduce conflict for FOR in state 252 resolved as shift
WARNING: shift/reduce conflict for DO in state 252 resolved as shift
WARNING: reduce/reduce conflict in state 9 resolved using rule (program2 -> empty)
WARNING: rejected rule (declare -> empty) in state 9
WARNING: reduce/reduce conflict in state 78 resolved using rule (est -> empty)
WARNING: rejected rule (declareLocal -> empty) in state 78
WARNING: reduce/reduce conflict in state 78 resolved using rule (declareLocal -> empty)
WARNING: rejected rule (cycles -> empty) in state 78
WARNING: reduce/reduce conflict in state 78 resolved using rule (est -> empty)
WARNING: rejected rule (cycles -> empty) in state 78
WARNING: reduce/reduce conflict in state 78 resolved using rule (declareLocal -> empty)
WARNING: rejected rule (assignment -> empty) in state 78
WARNING: reduce/reduce conflict in state 78 resolved using rule (est -> empty)
WARNING: rejected rule (assignment -> empty) in state 78
WARNING: reduce/reduce conflict in state 78 resolved using rule (llamadaAFunct -> empty)
WARNING: rejected rule (declareLocal -> empty) in state 78
WARNING: reduce/reduce conflict in state 78 resolved using rule (est -> empty)
WARNING: rejected rule (llamadaAFunct -> empty) in state 78
WARNING: reduce/reduce conflict in state 138 resolved using rule (while2 -> empty)
WARNING: rejected rule (exp -> empty) in state 138
WARNING: reduce/reduce conflict in state 148 resolved using rule (llamadaAFunct -> empty)
WARNING: rejected rule (exp -> empty) in state 148
WARNING: reduce/reduce conflict in state 153 resolved using rule (conditional2 -> empty)
WARNING: rejected rule (exp -> empty) in state 153
WARNING: reduce/reduce conflict in state 217 resolved using rule (array -> empty)
WARNING: rejected rule (declare2Local -> empty) in state 217
WARNING: Rule (declareLocal -> empty) is never reduced
WARNING: Rule (cycles -> empty) is never reduced
WARNING: Rule (assignment -> empty) is never reduced
WARNING: Rule (declare2Local -> empty) is never reduced
