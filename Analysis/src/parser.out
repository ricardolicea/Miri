Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    LESSEQ
    COLON
    GRTREQ
    CYCLE
    SPACE
    newline
    FLOATNUMB
    TYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON
Rule 2     goToMainQuad -> <empty>
Rule 3     altaPrograma -> <empty>
Rule 4     program2 -> declare program3
Rule 5     program2 -> empty
Rule 6     declare -> DECLARE declareRecursivo
Rule 7     declare -> empty
Rule 8     declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
Rule 9     declare2 -> array
Rule 10    declare3 -> COMMA ID altaVarGlobal declare3
Rule 11    program3 -> funct program3
Rule 12    funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
Rule 13    functReturn -> RETURN NUMBER SEMICOLON
Rule 14    functReturn -> RETURN ID SEMICOLON
Rule 15    functReturn -> empty
Rule 16    altaModulo -> <empty>
Rule 17    funct2 -> type ID altaVarLocal funct3
Rule 18    funct3 -> COMMA type ID altaVarLocal funct3
Rule 19    funct2 -> empty
Rule 20    funct3 -> empty
Rule 21    program3 -> empty
Rule 22    altaVarGlobal -> <empty>
Rule 23    declareRecursivo -> empty
Rule 24    declare3 -> empty
Rule 25    array -> LEFTBRACK exp RIGHTBRACK array
Rule 26    array -> empty
Rule 27    type -> type2
Rule 28    type2 -> INT
Rule 29    type2 -> FLOAT
Rule 30    type2 -> STRING
Rule 31    type2 -> BOOL
Rule 32    type2 -> VOID
Rule 33    cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY llenaMain altaModuloMain est RIGHTKEY
Rule 34    llenaMain -> <empty>
Rule 35    altaModuloMain -> <empty>
Rule 36    est -> conditional est
Rule 37    est -> declareLocal est
Rule 38    est -> cycles est
Rule 39    est -> input est
Rule 40    est -> output est
Rule 41    est -> assignment est
Rule 42    est -> llamadaAFunct est
Rule 43    est -> empty
Rule 44    llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR
Rule 45    llamadaAFunct -> empty
Rule 46    llamadaAFunct2 -> ID llamadaAFunct3
Rule 47    llamadaAFunct3 -> COMMA ID
Rule 48    llamadaAFunct3 -> empty
Rule 49    llamadaAFunct2 -> empty
Rule 50    declareLocal -> DECLARE declareRecursivoLocal
Rule 51    declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
Rule 52    assignmentDecl -> ASSGN exp
Rule 53    number -> INTEGER number2
Rule 54    number2 -> DOT INTEGER
Rule 55    number2 -> empty
Rule 56    assignmentDecl -> empty
Rule 57    declare2Local -> array
Rule 58    declare3Local -> COMMA ID altaVarLocal assignmentDecl declare3Local
Rule 59    declareRecursivoLocal -> empty
Rule 60    declareLocal -> empty
Rule 61    declare2Local -> empty
Rule 62    declare3Local -> empty
Rule 63    altaVarLocal -> <empty>
Rule 64    assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON
Rule 65    assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON
Rule 66    meteVar -> <empty>
Rule 67    assignment -> empty
Rule 68    conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
Rule 69    gotoFCuad -> <empty>
Rule 70    gotoCuad -> <empty>
Rule 71    conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto
Rule 72    llenaGoto -> <empty>
Rule 73    conditionalElse -> empty
Rule 74    conditional2 -> exp conditional2
Rule 75    conditional2 -> empty
Rule 76    cycles -> while
Rule 77    cycles -> empty
Rule 78    cycles -> for
Rule 79    cycles -> do-while
Rule 80    do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad
Rule 81    gotoVCuad -> <empty>
Rule 82    meteSalto -> <empty>
Rule 83    while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
Rule 84    llenaCuadF -> <empty>
Rule 85    while2 -> exp while2
Rule 86    while2 -> empty
Rule 87    for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
Rule 88    for2 -> ID ASSGN number for3
Rule 89    for3 -> COMMA for2
Rule 90    for3 -> empty
Rule 91    for4 -> expFor
Rule 92    parte3For -> ID SUM SUM
Rule 93    parte3For -> ID MINUS MINUS
Rule 94    expFor -> ID expFor2
Rule 95    expFor -> number
Rule 96    expFor2 -> LESS expFor
Rule 97    expFor2 -> GRTR expFor
Rule 98    expFor2 -> EQ expFor
Rule 99    expFor2 -> NOTEQ expFor
Rule 100   expFor2 -> AND expFor
Rule 101   expFor2 -> OR expFor
Rule 102   expFor2 -> empty
Rule 103   exp -> ID meteExp exp2
Rule 104   exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
Rule 105   metePar -> <empty>
Rule 106   sacaPar -> <empty>
Rule 107   meteExp -> <empty>
Rule 108   generaCuad -> <empty>
Rule 109   exp -> number meteNum exp2
Rule 110   meteNum -> <empty>
Rule 111   exp -> empty
Rule 112   exp2 -> LESS meteOper exp
Rule 113   exp2 -> GRTR meteOper exp
Rule 114   exp2 -> EQ meteOper exp
Rule 115   exp2 -> NOTEQ meteOper exp
Rule 116   exp2 -> AND meteOper exp
Rule 117   exp2 -> OR meteOper exp
Rule 118   exp2 -> SUM meteOper exp
Rule 119   meteOper -> <empty>
Rule 120   exp2 -> MINUS meteOper exp
Rule 121   exp2 -> MULTP meteOper exp
Rule 122   exp2 -> DIVIDE meteOper exp
Rule 123   exp2 -> empty
Rule 124   output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
Rule 125   output2 -> ID output2
Rule 126   output2 -> QUOTE ID QUOTE output2
Rule 127   output2 -> empty
Rule 128   input -> READ LEFTPAR ID RIGHTPAR SEMICOLON
Rule 129   empty -> <empty>
Rule 130   circulo -> LEFTPAR INTEGER COMMA STRING COMMA BOOL COMMA INTEGER COMMA INTEGER RIGHTPAR SEMICOLON
Rule 131   cuadro -> LEFTPAR INTEGER COMMA STRING COMMA BOOL COMMA INTEGER COMMA INTEGER RIGHTPAR SEMICOLON
Rule 132   triangulo -> LEFTPAR INTEGER COMMA INTEGER COMMA INTEGER COMMA STRING COMMA BOOL COMMA INTEGER COMMA INTEGER COMMA INTEGER RIGHTPAR SEMICOLON
Rule 133   linea -> LEFTPAR INTEGER COMMA STRING COMMA INTEGER COMMA INTEGER COMMA INTEGER COMMA INTEGER RIGHTPAR SEMICOLON
Rule 134   rectangulo -> LEFTPAR INTEGER COMMA INTEGER COMMA STRING COMMA BOOL COMMA INTEGER COMMA INTEGER COMMA INTEGER RIGHTPAR SEMICOLON

Terminals, with rules where they appear

AND                  : 100 116
ASSGN                : 52 64 65 88
BOOL                 : 31 130 131 132 134
COLON                : 
COMMA                : 10 18 47 58 89 130 130 130 130 131 131 131 131 132 132 132 132 132 132 132 133 133 133 133 133 134 134 134 134 134 134
CYCLE                : 
DECLARE              : 6 50
DIVIDE               : 122
DO                   : 80
DOT                  : 54
ELSE                 : 71
END                  : 1
EQ                   : 98 114
FLOAT                : 29
FLOATNUMB            : 
FOR                  : 87
FUNCTION             : 12
GRTR                 : 97 113
GRTREQ               : 
ID                   : 1 8 10 12 14 17 18 44 46 47 51 58 64 65 88 92 93 94 103 125 126 128
IF                   : 68
INT                  : 28
INTEGER              : 53 54 130 130 130 131 131 131 132 132 132 132 132 132 133 133 133 133 133 134 134 134 134 134
LEFTBRACK            : 25
LEFTKEY              : 12 33 68 71 80 83 87
LEFTPAR              : 12 33 44 68 80 83 87 104 124 128 130 131 132 133 134
LESS                 : 96 112
LESSEQ               : 
MAIN                 : 33
MINUS                : 93 93 120
MULTP                : 121
NOTEQ                : 99 115
NUMBER               : 13
OR                   : 101 117
PROGRAM              : 1
QUOTE                : 126 126
READ                 : 128
RETURN               : 13 14
RIGHTBRACK           : 25
RIGHTKEY             : 12 33 68 71 80 83 87
RIGHTPAR             : 12 33 44 68 80 83 87 104 124 128 130 131 132 133 134
SEMICOLON            : 1 1 8 13 14 51 64 65 87 87 124 128 130 131 132 133 134
SPACE                : 
STRING               : 30 130 131 132 133 134
SUM                  : 92 92 118
TYPE                 : 
VOID                 : 32
WHILE                : 80 83
WRITE                : 124
error                : 
newline              : 

Nonterminals, with rules where they appear

altaModulo           : 12
altaModuloMain       : 33
altaPrograma         : 1
altaVarGlobal        : 8 10
altaVarLocal         : 17 18 51 58
array                : 9 25 57
assignment           : 41
assignmentDecl       : 8 51 58
circulo              : 
conditional          : 36
conditional2         : 68 74
conditionalElse      : 68
cuadro               : 
cuerpo               : 1
cycles               : 38
declare              : 4
declare2             : 8
declare2Local        : 51
declare3             : 8 10
declare3Local        : 51 58
declareLocal         : 37
declareRecursivo     : 6 8
declareRecursivoLocal : 50 51
do-while             : 79
empty                : 5 7 15 19 20 21 23 24 26 43 45 48 49 55 56 59 60 61 62 67 73 75 77 86 90 102 111 123 127
est                  : 12 33 36 37 38 39 40 41 42 68 71 80 83 87
exp                  : 25 52 64 74 85 104 112 113 114 115 116 117 118 120 121 122
exp2                 : 103 104 109
expFor               : 91 96 97 98 99 100 101
expFor2              : 94
for                  : 78
for2                 : 87 89
for3                 : 88
for4                 : 87
funct                : 11
funct2               : 12
funct3               : 17 18
functReturn          : 12
generaCuad           : 64 104
goToMainQuad         : 1
gotoCuad             : 68
gotoFCuad            : 68 83
gotoVCuad            : 80
input                : 39
linea                : 
llamadaAFunct        : 42 65
llamadaAFunct2       : 44
llamadaAFunct3       : 46
llenaCuadF           : 83
llenaGoto            : 71
llenaMain            : 33
meteExp              : 103
meteNum              : 109
meteOper             : 112 113 114 115 116 117 118 120 121 122
metePar              : 104
meteSalto            : 80
meteVar              : 64 65
number               : 88 95 109
number2              : 53
output               : 40
output2              : 124 125 126
parte3For            : 87
program              : 0
program2             : 1
program3             : 4 11
rectangulo           : 
sacaPar              : 104
triangulo            : 
type                 : 8 12 17 18 51
type2                : 27
while                : 76
while2               : 80 83 85

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON
    (3) altaPrograma -> .

    SEMICOLON       reduce using rule 3 (altaPrograma -> .)

    altaPrograma                   shift and go to state 4

state 4

    (1) program -> PROGRAM ID altaPrograma . SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON

    SEMICOLON       shift and go to state 5


state 5

    (1) program -> PROGRAM ID altaPrograma SEMICOLON . program2 goToMainQuad cuerpo END SEMICOLON
    (4) program2 -> . declare program3
    (5) program2 -> . empty
    (6) declare -> . DECLARE declareRecursivo
    (7) declare -> . empty
    (129) empty -> .

    DECLARE         shift and go to state 7
    MAIN            reduce using rule 129 (empty -> .)
    FUNCTION        reduce using rule 129 (empty -> .)

    program2                       shift and go to state 6
    declare                        shift and go to state 8
    empty                          shift and go to state 9

state 6

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 . goToMainQuad cuerpo END SEMICOLON
    (2) goToMainQuad -> .

    MAIN            reduce using rule 2 (goToMainQuad -> .)

    goToMainQuad                   shift and go to state 10

state 7

    (6) declare -> DECLARE . declareRecursivo
    (8) declareRecursivo -> . type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
    (23) declareRecursivo -> . empty
    (27) type -> . type2
    (129) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    FUNCTION        reduce using rule 129 (empty -> .)
    MAIN            reduce using rule 129 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    declareRecursivo               shift and go to state 16
    type                           shift and go to state 17
    empty                          shift and go to state 18
    type2                          shift and go to state 19

state 8

    (4) program2 -> declare . program3
    (11) program3 -> . funct program3
    (21) program3 -> . empty
    (12) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (129) empty -> .

    FUNCTION        shift and go to state 20
    MAIN            reduce using rule 129 (empty -> .)

    funct                          shift and go to state 21
    program3                       shift and go to state 22
    empty                          shift and go to state 23

state 9

    (5) program2 -> empty .
    (7) declare -> empty .

  ! reduce/reduce conflict for MAIN resolved using rule 5 (program2 -> empty .)
    MAIN            reduce using rule 5 (program2 -> empty .)
    FUNCTION        reduce using rule 7 (declare -> empty .)

  ! MAIN            [ reduce using rule 7 (declare -> empty .) ]


state 10

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad . cuerpo END SEMICOLON
    (33) cuerpo -> . MAIN LEFTPAR RIGHTPAR LEFTKEY llenaMain altaModuloMain est RIGHTKEY

    MAIN            shift and go to state 25

    cuerpo                         shift and go to state 24

state 11

    (30) type2 -> STRING .

    ID              reduce using rule 30 (type2 -> STRING .)


state 12

    (28) type2 -> INT .

    ID              reduce using rule 28 (type2 -> INT .)


state 13

    (32) type2 -> VOID .

    ID              reduce using rule 32 (type2 -> VOID .)


state 14

    (29) type2 -> FLOAT .

    ID              reduce using rule 29 (type2 -> FLOAT .)


state 15

    (31) type2 -> BOOL .

    ID              reduce using rule 31 (type2 -> BOOL .)


state 16

    (6) declare -> DECLARE declareRecursivo .

    FUNCTION        reduce using rule 6 (declare -> DECLARE declareRecursivo .)
    MAIN            reduce using rule 6 (declare -> DECLARE declareRecursivo .)


state 17

    (8) declareRecursivo -> type . ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo

    ID              shift and go to state 26


state 18

    (23) declareRecursivo -> empty .

    FUNCTION        reduce using rule 23 (declareRecursivo -> empty .)
    MAIN            reduce using rule 23 (declareRecursivo -> empty .)


state 19

    (27) type -> type2 .

    ID              reduce using rule 27 (type -> type2 .)


state 20

    (12) funct -> FUNCTION . type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (27) type -> . type2
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    type                           shift and go to state 27
    type2                          shift and go to state 19

state 21

    (11) program3 -> funct . program3
    (11) program3 -> . funct program3
    (21) program3 -> . empty
    (12) funct -> . FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (129) empty -> .

    FUNCTION        shift and go to state 20
    MAIN            reduce using rule 129 (empty -> .)

    program3                       shift and go to state 28
    funct                          shift and go to state 21
    empty                          shift and go to state 23

state 22

    (4) program2 -> declare program3 .

    MAIN            reduce using rule 4 (program2 -> declare program3 .)


state 23

    (21) program3 -> empty .

    MAIN            reduce using rule 21 (program3 -> empty .)


state 24

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo . END SEMICOLON

    END             shift and go to state 29


state 25

    (33) cuerpo -> MAIN . LEFTPAR RIGHTPAR LEFTKEY llenaMain altaModuloMain est RIGHTKEY

    LEFTPAR         shift and go to state 30


state 26

    (8) declareRecursivo -> type ID . altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
    (22) altaVarGlobal -> .

    ASSGN           reduce using rule 22 (altaVarGlobal -> .)
    LEFTBRACK       reduce using rule 22 (altaVarGlobal -> .)
    COMMA           reduce using rule 22 (altaVarGlobal -> .)
    SEMICOLON       reduce using rule 22 (altaVarGlobal -> .)

    altaVarGlobal                  shift and go to state 31

state 27

    (12) funct -> FUNCTION type . ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY

    ID              shift and go to state 32


state 28

    (11) program3 -> funct program3 .

    MAIN            reduce using rule 11 (program3 -> funct program3 .)


state 29

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END . SEMICOLON

    SEMICOLON       shift and go to state 33


state 30

    (33) cuerpo -> MAIN LEFTPAR . RIGHTPAR LEFTKEY llenaMain altaModuloMain est RIGHTKEY

    RIGHTPAR        shift and go to state 34


state 31

    (8) declareRecursivo -> type ID altaVarGlobal . assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
    (52) assignmentDecl -> . ASSGN exp
    (56) assignmentDecl -> . empty
    (129) empty -> .

    ASSGN           shift and go to state 35
    LEFTBRACK       reduce using rule 129 (empty -> .)
    COMMA           reduce using rule 129 (empty -> .)
    SEMICOLON       reduce using rule 129 (empty -> .)

    assignmentDecl                 shift and go to state 36
    empty                          shift and go to state 37

state 32

    (12) funct -> FUNCTION type ID . altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (16) altaModulo -> .

    LEFTPAR         reduce using rule 16 (altaModulo -> .)

    altaModulo                     shift and go to state 38

state 33

    (1) program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON .

    $end            reduce using rule 1 (program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON .)


state 34

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR . LEFTKEY llenaMain altaModuloMain est RIGHTKEY

    LEFTKEY         shift and go to state 39


state 35

    (52) assignmentDecl -> ASSGN . exp
    (103) exp -> . ID meteExp exp2
    (104) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (109) exp -> . number meteNum exp2
    (111) exp -> . empty
    (53) number -> . INTEGER number2
    (129) empty -> .

    ID              shift and go to state 44
    LEFTPAR         shift and go to state 41
    INTEGER         shift and go to state 43
    LEFTBRACK       reduce using rule 129 (empty -> .)
    COMMA           reduce using rule 129 (empty -> .)
    SEMICOLON       reduce using rule 129 (empty -> .)

    number                         shift and go to state 40
    exp                            shift and go to state 42
    empty                          shift and go to state 45

state 36

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl . declare2 declare3 SEMICOLON declareRecursivo
    (9) declare2 -> . array
    (25) array -> . LEFTBRACK exp RIGHTBRACK array
    (26) array -> . empty
    (129) empty -> .

    LEFTBRACK       shift and go to state 46
    COMMA           reduce using rule 129 (empty -> .)
    SEMICOLON       reduce using rule 129 (empty -> .)

    declare2                       shift and go to state 47
    array                          shift and go to state 48
    empty                          shift and go to state 49

state 37

    (56) assignmentDecl -> empty .

    LEFTBRACK       reduce using rule 56 (assignmentDecl -> empty .)
    COMMA           reduce using rule 56 (assignmentDecl -> empty .)
    SEMICOLON       reduce using rule 56 (assignmentDecl -> empty .)


state 38

    (12) funct -> FUNCTION type ID altaModulo . LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY

    LEFTPAR         shift and go to state 50


state 39

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY . llenaMain altaModuloMain est RIGHTKEY
    (34) llenaMain -> .

    IF              reduce using rule 34 (llenaMain -> .)
    DECLARE         reduce using rule 34 (llenaMain -> .)
    READ            reduce using rule 34 (llenaMain -> .)
    WRITE           reduce using rule 34 (llenaMain -> .)
    ID              reduce using rule 34 (llenaMain -> .)
    WHILE           reduce using rule 34 (llenaMain -> .)
    FOR             reduce using rule 34 (llenaMain -> .)
    DO              reduce using rule 34 (llenaMain -> .)
    RIGHTKEY        reduce using rule 34 (llenaMain -> .)

    llenaMain                      shift and go to state 51

state 40

    (109) exp -> number . meteNum exp2
    (110) meteNum -> .

    LESS            reduce using rule 110 (meteNum -> .)
    GRTR            reduce using rule 110 (meteNum -> .)
    EQ              reduce using rule 110 (meteNum -> .)
    NOTEQ           reduce using rule 110 (meteNum -> .)
    AND             reduce using rule 110 (meteNum -> .)
    OR              reduce using rule 110 (meteNum -> .)
    SUM             reduce using rule 110 (meteNum -> .)
    MINUS           reduce using rule 110 (meteNum -> .)
    MULTP           reduce using rule 110 (meteNum -> .)
    DIVIDE          reduce using rule 110 (meteNum -> .)
    LEFTBRACK       reduce using rule 110 (meteNum -> .)
    COMMA           reduce using rule 110 (meteNum -> .)
    SEMICOLON       reduce using rule 110 (meteNum -> .)
    RIGHTBRACK      reduce using rule 110 (meteNum -> .)
    RIGHTPAR        reduce using rule 110 (meteNum -> .)
    ID              reduce using rule 110 (meteNum -> .)
    LEFTPAR         reduce using rule 110 (meteNum -> .)
    INTEGER         reduce using rule 110 (meteNum -> .)

    meteNum                        shift and go to state 52

state 41

    (104) exp -> LEFTPAR . metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (105) metePar -> .

    ID              reduce using rule 105 (metePar -> .)
    LEFTPAR         reduce using rule 105 (metePar -> .)
    INTEGER         reduce using rule 105 (metePar -> .)
    RIGHTPAR        reduce using rule 105 (metePar -> .)

    metePar                        shift and go to state 53

state 42

    (52) assignmentDecl -> ASSGN exp .

    LEFTBRACK       reduce using rule 52 (assignmentDecl -> ASSGN exp .)
    COMMA           reduce using rule 52 (assignmentDecl -> ASSGN exp .)
    SEMICOLON       reduce using rule 52 (assignmentDecl -> ASSGN exp .)


state 43

    (53) number -> INTEGER . number2
    (54) number2 -> . DOT INTEGER
    (55) number2 -> . empty
    (129) empty -> .

    DOT             shift and go to state 56
    LESS            reduce using rule 129 (empty -> .)
    GRTR            reduce using rule 129 (empty -> .)
    EQ              reduce using rule 129 (empty -> .)
    NOTEQ           reduce using rule 129 (empty -> .)
    AND             reduce using rule 129 (empty -> .)
    OR              reduce using rule 129 (empty -> .)
    SUM             reduce using rule 129 (empty -> .)
    MINUS           reduce using rule 129 (empty -> .)
    MULTP           reduce using rule 129 (empty -> .)
    DIVIDE          reduce using rule 129 (empty -> .)
    LEFTBRACK       reduce using rule 129 (empty -> .)
    COMMA           reduce using rule 129 (empty -> .)
    SEMICOLON       reduce using rule 129 (empty -> .)
    RIGHTBRACK      reduce using rule 129 (empty -> .)
    RIGHTPAR        reduce using rule 129 (empty -> .)
    ID              reduce using rule 129 (empty -> .)
    LEFTPAR         reduce using rule 129 (empty -> .)
    INTEGER         reduce using rule 129 (empty -> .)

    number2                        shift and go to state 54
    empty                          shift and go to state 55

state 44

    (103) exp -> ID . meteExp exp2
    (107) meteExp -> .

    LESS            reduce using rule 107 (meteExp -> .)
    GRTR            reduce using rule 107 (meteExp -> .)
    EQ              reduce using rule 107 (meteExp -> .)
    NOTEQ           reduce using rule 107 (meteExp -> .)
    AND             reduce using rule 107 (meteExp -> .)
    OR              reduce using rule 107 (meteExp -> .)
    SUM             reduce using rule 107 (meteExp -> .)
    MINUS           reduce using rule 107 (meteExp -> .)
    MULTP           reduce using rule 107 (meteExp -> .)
    DIVIDE          reduce using rule 107 (meteExp -> .)
    LEFTBRACK       reduce using rule 107 (meteExp -> .)
    COMMA           reduce using rule 107 (meteExp -> .)
    SEMICOLON       reduce using rule 107 (meteExp -> .)
    RIGHTBRACK      reduce using rule 107 (meteExp -> .)
    RIGHTPAR        reduce using rule 107 (meteExp -> .)
    ID              reduce using rule 107 (meteExp -> .)
    LEFTPAR         reduce using rule 107 (meteExp -> .)
    INTEGER         reduce using rule 107 (meteExp -> .)

    meteExp                        shift and go to state 57

state 45

    (111) exp -> empty .

    RIGHTPAR        reduce using rule 111 (exp -> empty .)
    LEFTBRACK       reduce using rule 111 (exp -> empty .)
    COMMA           reduce using rule 111 (exp -> empty .)
    SEMICOLON       reduce using rule 111 (exp -> empty .)
    RIGHTBRACK      reduce using rule 111 (exp -> empty .)
    ID              reduce using rule 111 (exp -> empty .)
    LEFTPAR         reduce using rule 111 (exp -> empty .)
    INTEGER         reduce using rule 111 (exp -> empty .)


state 46

    (25) array -> LEFTBRACK . exp RIGHTBRACK array
    (103) exp -> . ID meteExp exp2
    (104) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (109) exp -> . number meteNum exp2
    (111) exp -> . empty
    (53) number -> . INTEGER number2
    (129) empty -> .

    ID              shift and go to state 44
    LEFTPAR         shift and go to state 41
    INTEGER         shift and go to state 43
    RIGHTBRACK      reduce using rule 129 (empty -> .)

    number                         shift and go to state 40
    exp                            shift and go to state 58
    empty                          shift and go to state 45

state 47

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 . declare3 SEMICOLON declareRecursivo
    (10) declare3 -> . COMMA ID altaVarGlobal declare3
    (24) declare3 -> . empty
    (129) empty -> .

    COMMA           shift and go to state 60
    SEMICOLON       reduce using rule 129 (empty -> .)

    declare3                       shift and go to state 59
    empty                          shift and go to state 61

state 48

    (9) declare2 -> array .

    COMMA           reduce using rule 9 (declare2 -> array .)
    SEMICOLON       reduce using rule 9 (declare2 -> array .)


state 49

    (26) array -> empty .

    COMMA           reduce using rule 26 (array -> empty .)
    SEMICOLON       reduce using rule 26 (array -> empty .)


state 50

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR . funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY
    (17) funct2 -> . type ID altaVarLocal funct3
    (19) funct2 -> . empty
    (27) type -> . type2
    (129) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    RIGHTPAR        reduce using rule 129 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    funct2                         shift and go to state 62
    type                           shift and go to state 63
    empty                          shift and go to state 64
    type2                          shift and go to state 19

state 51

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY llenaMain . altaModuloMain est RIGHTKEY
    (35) altaModuloMain -> .

    IF              reduce using rule 35 (altaModuloMain -> .)
    DECLARE         reduce using rule 35 (altaModuloMain -> .)
    READ            reduce using rule 35 (altaModuloMain -> .)
    WRITE           reduce using rule 35 (altaModuloMain -> .)
    ID              reduce using rule 35 (altaModuloMain -> .)
    WHILE           reduce using rule 35 (altaModuloMain -> .)
    FOR             reduce using rule 35 (altaModuloMain -> .)
    DO              reduce using rule 35 (altaModuloMain -> .)
    RIGHTKEY        reduce using rule 35 (altaModuloMain -> .)

    altaModuloMain                 shift and go to state 65

state 52

    (109) exp -> number meteNum . exp2
    (112) exp2 -> . LESS meteOper exp
    (113) exp2 -> . GRTR meteOper exp
    (114) exp2 -> . EQ meteOper exp
    (115) exp2 -> . NOTEQ meteOper exp
    (116) exp2 -> . AND meteOper exp
    (117) exp2 -> . OR meteOper exp
    (118) exp2 -> . SUM meteOper exp
    (120) exp2 -> . MINUS meteOper exp
    (121) exp2 -> . MULTP meteOper exp
    (122) exp2 -> . DIVIDE meteOper exp
    (123) exp2 -> . empty
    (129) empty -> .

    LESS            shift and go to state 68
    GRTR            shift and go to state 73
    EQ              shift and go to state 75
    NOTEQ           shift and go to state 69
    AND             shift and go to state 66
    OR              shift and go to state 76
    SUM             shift and go to state 71
    MINUS           shift and go to state 72
    MULTP           shift and go to state 74
    DIVIDE          shift and go to state 67
    LEFTBRACK       reduce using rule 129 (empty -> .)
    COMMA           reduce using rule 129 (empty -> .)
    SEMICOLON       reduce using rule 129 (empty -> .)
    RIGHTBRACK      reduce using rule 129 (empty -> .)
    RIGHTPAR        reduce using rule 129 (empty -> .)
    ID              reduce using rule 129 (empty -> .)
    LEFTPAR         reduce using rule 129 (empty -> .)
    INTEGER         reduce using rule 129 (empty -> .)

    exp2                           shift and go to state 70
    empty                          shift and go to state 77

state 53

    (104) exp -> LEFTPAR metePar . exp RIGHTPAR sacaPar exp2 generaCuad
    (103) exp -> . ID meteExp exp2
    (104) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (109) exp -> . number meteNum exp2
    (111) exp -> . empty
    (53) number -> . INTEGER number2
    (129) empty -> .

    ID              shift and go to state 44
    LEFTPAR         shift and go to state 41
    INTEGER         shift and go to state 43
    RIGHTPAR        reduce using rule 129 (empty -> .)

    number                         shift and go to state 40
    exp                            shift and go to state 78
    empty                          shift and go to state 45

state 54

    (53) number -> INTEGER number2 .

    LESS            reduce using rule 53 (number -> INTEGER number2 .)
    GRTR            reduce using rule 53 (number -> INTEGER number2 .)
    EQ              reduce using rule 53 (number -> INTEGER number2 .)
    NOTEQ           reduce using rule 53 (number -> INTEGER number2 .)
    AND             reduce using rule 53 (number -> INTEGER number2 .)
    OR              reduce using rule 53 (number -> INTEGER number2 .)
    SUM             reduce using rule 53 (number -> INTEGER number2 .)
    MINUS           reduce using rule 53 (number -> INTEGER number2 .)
    MULTP           reduce using rule 53 (number -> INTEGER number2 .)
    DIVIDE          reduce using rule 53 (number -> INTEGER number2 .)
    ID              reduce using rule 53 (number -> INTEGER number2 .)
    LEFTPAR         reduce using rule 53 (number -> INTEGER number2 .)
    INTEGER         reduce using rule 53 (number -> INTEGER number2 .)
    RIGHTPAR        reduce using rule 53 (number -> INTEGER number2 .)
    LEFTBRACK       reduce using rule 53 (number -> INTEGER number2 .)
    COMMA           reduce using rule 53 (number -> INTEGER number2 .)
    SEMICOLON       reduce using rule 53 (number -> INTEGER number2 .)
    RIGHTBRACK      reduce using rule 53 (number -> INTEGER number2 .)


state 55

    (55) number2 -> empty .

    LESS            reduce using rule 55 (number2 -> empty .)
    GRTR            reduce using rule 55 (number2 -> empty .)
    EQ              reduce using rule 55 (number2 -> empty .)
    NOTEQ           reduce using rule 55 (number2 -> empty .)
    AND             reduce using rule 55 (number2 -> empty .)
    OR              reduce using rule 55 (number2 -> empty .)
    SUM             reduce using rule 55 (number2 -> empty .)
    MINUS           reduce using rule 55 (number2 -> empty .)
    MULTP           reduce using rule 55 (number2 -> empty .)
    DIVIDE          reduce using rule 55 (number2 -> empty .)
    LEFTBRACK       reduce using rule 55 (number2 -> empty .)
    COMMA           reduce using rule 55 (number2 -> empty .)
    SEMICOLON       reduce using rule 55 (number2 -> empty .)
    RIGHTBRACK      reduce using rule 55 (number2 -> empty .)
    RIGHTPAR        reduce using rule 55 (number2 -> empty .)
    ID              reduce using rule 55 (number2 -> empty .)
    LEFTPAR         reduce using rule 55 (number2 -> empty .)
    INTEGER         reduce using rule 55 (number2 -> empty .)


state 56

    (54) number2 -> DOT . INTEGER

    INTEGER         shift and go to state 79


state 57

    (103) exp -> ID meteExp . exp2
    (112) exp2 -> . LESS meteOper exp
    (113) exp2 -> . GRTR meteOper exp
    (114) exp2 -> . EQ meteOper exp
    (115) exp2 -> . NOTEQ meteOper exp
    (116) exp2 -> . AND meteOper exp
    (117) exp2 -> . OR meteOper exp
    (118) exp2 -> . SUM meteOper exp
    (120) exp2 -> . MINUS meteOper exp
    (121) exp2 -> . MULTP meteOper exp
    (122) exp2 -> . DIVIDE meteOper exp
    (123) exp2 -> . empty
    (129) empty -> .

    LESS            shift and go to state 68
    GRTR            shift and go to state 73
    EQ              shift and go to state 75
    NOTEQ           shift and go to state 69
    AND             shift and go to state 66
    OR              shift and go to state 76
    SUM             shift and go to state 71
    MINUS           shift and go to state 72
    MULTP           shift and go to state 74
    DIVIDE          shift and go to state 67
    LEFTBRACK       reduce using rule 129 (empty -> .)
    COMMA           reduce using rule 129 (empty -> .)
    SEMICOLON       reduce using rule 129 (empty -> .)
    RIGHTBRACK      reduce using rule 129 (empty -> .)
    RIGHTPAR        reduce using rule 129 (empty -> .)
    ID              reduce using rule 129 (empty -> .)
    LEFTPAR         reduce using rule 129 (empty -> .)
    INTEGER         reduce using rule 129 (empty -> .)

    exp2                           shift and go to state 80
    empty                          shift and go to state 77

state 58

    (25) array -> LEFTBRACK exp . RIGHTBRACK array

    RIGHTBRACK      shift and go to state 81


state 59

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 . SEMICOLON declareRecursivo

    SEMICOLON       shift and go to state 82


state 60

    (10) declare3 -> COMMA . ID altaVarGlobal declare3

    ID              shift and go to state 83


state 61

    (24) declare3 -> empty .

    SEMICOLON       reduce using rule 24 (declare3 -> empty .)


state 62

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 . RIGHTPAR LEFTKEY est functReturn RIGHTKEY

    RIGHTPAR        shift and go to state 84


state 63

    (17) funct2 -> type . ID altaVarLocal funct3

    ID              shift and go to state 85


state 64

    (19) funct2 -> empty .

    RIGHTPAR        reduce using rule 19 (funct2 -> empty .)


state 65

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY llenaMain altaModuloMain . est RIGHTKEY
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . for
    (79) cycles -> . do-while
    (128) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (124) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (129) empty -> .
    (83) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (87) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 100
    DECLARE         shift and go to state 99
    READ            shift and go to state 87
    WRITE           shift and go to state 97
    ID              shift and go to state 98
    RIGHTKEY        reduce using rule 129 (empty -> .)
    WHILE           shift and go to state 89
    FOR             shift and go to state 95
    DO              shift and go to state 86

  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! DECLARE         [ reduce using rule 129 (empty -> .) ]
  ! READ            [ reduce using rule 129 (empty -> .) ]
  ! WRITE           [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! DO              [ reduce using rule 129 (empty -> .) ]

    conditional                    shift and go to state 88
    do-while                       shift and go to state 90
    est                            shift and go to state 91
    for                            shift and go to state 92
    llamadaAFunct                  shift and go to state 93
    input                          shift and go to state 94
    assignment                     shift and go to state 96
    cycles                         shift and go to state 101
    while                          shift and go to state 102
    empty                          shift and go to state 103
    output                         shift and go to state 104
    declareLocal                   shift and go to state 105

state 66

    (116) exp2 -> AND . meteOper exp
    (119) meteOper -> .

    ID              reduce using rule 119 (meteOper -> .)
    LEFTPAR         reduce using rule 119 (meteOper -> .)
    INTEGER         reduce using rule 119 (meteOper -> .)
    LEFTBRACK       reduce using rule 119 (meteOper -> .)
    COMMA           reduce using rule 119 (meteOper -> .)
    SEMICOLON       reduce using rule 119 (meteOper -> .)
    RIGHTBRACK      reduce using rule 119 (meteOper -> .)
    RIGHTPAR        reduce using rule 119 (meteOper -> .)

    meteOper                       shift and go to state 106

state 67

    (122) exp2 -> DIVIDE . meteOper exp
    (119) meteOper -> .

    ID              reduce using rule 119 (meteOper -> .)
    LEFTPAR         reduce using rule 119 (meteOper -> .)
    INTEGER         reduce using rule 119 (meteOper -> .)
    LEFTBRACK       reduce using rule 119 (meteOper -> .)
    COMMA           reduce using rule 119 (meteOper -> .)
    SEMICOLON       reduce using rule 119 (meteOper -> .)
    RIGHTBRACK      reduce using rule 119 (meteOper -> .)
    RIGHTPAR        reduce using rule 119 (meteOper -> .)

    meteOper                       shift and go to state 107

state 68

    (112) exp2 -> LESS . meteOper exp
    (119) meteOper -> .

    ID              reduce using rule 119 (meteOper -> .)
    LEFTPAR         reduce using rule 119 (meteOper -> .)
    INTEGER         reduce using rule 119 (meteOper -> .)
    LEFTBRACK       reduce using rule 119 (meteOper -> .)
    COMMA           reduce using rule 119 (meteOper -> .)
    SEMICOLON       reduce using rule 119 (meteOper -> .)
    RIGHTBRACK      reduce using rule 119 (meteOper -> .)
    RIGHTPAR        reduce using rule 119 (meteOper -> .)

    meteOper                       shift and go to state 108

state 69

    (115) exp2 -> NOTEQ . meteOper exp
    (119) meteOper -> .

    ID              reduce using rule 119 (meteOper -> .)
    LEFTPAR         reduce using rule 119 (meteOper -> .)
    INTEGER         reduce using rule 119 (meteOper -> .)
    LEFTBRACK       reduce using rule 119 (meteOper -> .)
    COMMA           reduce using rule 119 (meteOper -> .)
    SEMICOLON       reduce using rule 119 (meteOper -> .)
    RIGHTBRACK      reduce using rule 119 (meteOper -> .)
    RIGHTPAR        reduce using rule 119 (meteOper -> .)

    meteOper                       shift and go to state 109

state 70

    (109) exp -> number meteNum exp2 .

    RIGHTPAR        reduce using rule 109 (exp -> number meteNum exp2 .)
    ID              reduce using rule 109 (exp -> number meteNum exp2 .)
    LEFTPAR         reduce using rule 109 (exp -> number meteNum exp2 .)
    INTEGER         reduce using rule 109 (exp -> number meteNum exp2 .)
    LEFTBRACK       reduce using rule 109 (exp -> number meteNum exp2 .)
    COMMA           reduce using rule 109 (exp -> number meteNum exp2 .)
    SEMICOLON       reduce using rule 109 (exp -> number meteNum exp2 .)
    RIGHTBRACK      reduce using rule 109 (exp -> number meteNum exp2 .)


state 71

    (118) exp2 -> SUM . meteOper exp
    (119) meteOper -> .

    ID              reduce using rule 119 (meteOper -> .)
    LEFTPAR         reduce using rule 119 (meteOper -> .)
    INTEGER         reduce using rule 119 (meteOper -> .)
    LEFTBRACK       reduce using rule 119 (meteOper -> .)
    COMMA           reduce using rule 119 (meteOper -> .)
    SEMICOLON       reduce using rule 119 (meteOper -> .)
    RIGHTBRACK      reduce using rule 119 (meteOper -> .)
    RIGHTPAR        reduce using rule 119 (meteOper -> .)

    meteOper                       shift and go to state 110

state 72

    (120) exp2 -> MINUS . meteOper exp
    (119) meteOper -> .

    ID              reduce using rule 119 (meteOper -> .)
    LEFTPAR         reduce using rule 119 (meteOper -> .)
    INTEGER         reduce using rule 119 (meteOper -> .)
    LEFTBRACK       reduce using rule 119 (meteOper -> .)
    COMMA           reduce using rule 119 (meteOper -> .)
    SEMICOLON       reduce using rule 119 (meteOper -> .)
    RIGHTBRACK      reduce using rule 119 (meteOper -> .)
    RIGHTPAR        reduce using rule 119 (meteOper -> .)

    meteOper                       shift and go to state 111

state 73

    (113) exp2 -> GRTR . meteOper exp
    (119) meteOper -> .

    ID              reduce using rule 119 (meteOper -> .)
    LEFTPAR         reduce using rule 119 (meteOper -> .)
    INTEGER         reduce using rule 119 (meteOper -> .)
    LEFTBRACK       reduce using rule 119 (meteOper -> .)
    COMMA           reduce using rule 119 (meteOper -> .)
    SEMICOLON       reduce using rule 119 (meteOper -> .)
    RIGHTBRACK      reduce using rule 119 (meteOper -> .)
    RIGHTPAR        reduce using rule 119 (meteOper -> .)

    meteOper                       shift and go to state 112

state 74

    (121) exp2 -> MULTP . meteOper exp
    (119) meteOper -> .

    ID              reduce using rule 119 (meteOper -> .)
    LEFTPAR         reduce using rule 119 (meteOper -> .)
    INTEGER         reduce using rule 119 (meteOper -> .)
    LEFTBRACK       reduce using rule 119 (meteOper -> .)
    COMMA           reduce using rule 119 (meteOper -> .)
    SEMICOLON       reduce using rule 119 (meteOper -> .)
    RIGHTBRACK      reduce using rule 119 (meteOper -> .)
    RIGHTPAR        reduce using rule 119 (meteOper -> .)

    meteOper                       shift and go to state 113

state 75

    (114) exp2 -> EQ . meteOper exp
    (119) meteOper -> .

    ID              reduce using rule 119 (meteOper -> .)
    LEFTPAR         reduce using rule 119 (meteOper -> .)
    INTEGER         reduce using rule 119 (meteOper -> .)
    LEFTBRACK       reduce using rule 119 (meteOper -> .)
    COMMA           reduce using rule 119 (meteOper -> .)
    SEMICOLON       reduce using rule 119 (meteOper -> .)
    RIGHTBRACK      reduce using rule 119 (meteOper -> .)
    RIGHTPAR        reduce using rule 119 (meteOper -> .)

    meteOper                       shift and go to state 114

state 76

    (117) exp2 -> OR . meteOper exp
    (119) meteOper -> .

    ID              reduce using rule 119 (meteOper -> .)
    LEFTPAR         reduce using rule 119 (meteOper -> .)
    INTEGER         reduce using rule 119 (meteOper -> .)
    LEFTBRACK       reduce using rule 119 (meteOper -> .)
    COMMA           reduce using rule 119 (meteOper -> .)
    SEMICOLON       reduce using rule 119 (meteOper -> .)
    RIGHTBRACK      reduce using rule 119 (meteOper -> .)
    RIGHTPAR        reduce using rule 119 (meteOper -> .)

    meteOper                       shift and go to state 115

state 77

    (123) exp2 -> empty .

    LEFTBRACK       reduce using rule 123 (exp2 -> empty .)
    COMMA           reduce using rule 123 (exp2 -> empty .)
    SEMICOLON       reduce using rule 123 (exp2 -> empty .)
    RIGHTBRACK      reduce using rule 123 (exp2 -> empty .)
    RIGHTPAR        reduce using rule 123 (exp2 -> empty .)
    ID              reduce using rule 123 (exp2 -> empty .)
    LEFTPAR         reduce using rule 123 (exp2 -> empty .)
    INTEGER         reduce using rule 123 (exp2 -> empty .)


state 78

    (104) exp -> LEFTPAR metePar exp . RIGHTPAR sacaPar exp2 generaCuad

    RIGHTPAR        shift and go to state 116


state 79

    (54) number2 -> DOT INTEGER .

    LESS            reduce using rule 54 (number2 -> DOT INTEGER .)
    GRTR            reduce using rule 54 (number2 -> DOT INTEGER .)
    EQ              reduce using rule 54 (number2 -> DOT INTEGER .)
    NOTEQ           reduce using rule 54 (number2 -> DOT INTEGER .)
    AND             reduce using rule 54 (number2 -> DOT INTEGER .)
    OR              reduce using rule 54 (number2 -> DOT INTEGER .)
    SUM             reduce using rule 54 (number2 -> DOT INTEGER .)
    MINUS           reduce using rule 54 (number2 -> DOT INTEGER .)
    MULTP           reduce using rule 54 (number2 -> DOT INTEGER .)
    DIVIDE          reduce using rule 54 (number2 -> DOT INTEGER .)
    LEFTBRACK       reduce using rule 54 (number2 -> DOT INTEGER .)
    COMMA           reduce using rule 54 (number2 -> DOT INTEGER .)
    SEMICOLON       reduce using rule 54 (number2 -> DOT INTEGER .)
    RIGHTBRACK      reduce using rule 54 (number2 -> DOT INTEGER .)
    RIGHTPAR        reduce using rule 54 (number2 -> DOT INTEGER .)
    ID              reduce using rule 54 (number2 -> DOT INTEGER .)
    LEFTPAR         reduce using rule 54 (number2 -> DOT INTEGER .)
    INTEGER         reduce using rule 54 (number2 -> DOT INTEGER .)


state 80

    (103) exp -> ID meteExp exp2 .

    RIGHTPAR        reduce using rule 103 (exp -> ID meteExp exp2 .)
    ID              reduce using rule 103 (exp -> ID meteExp exp2 .)
    LEFTPAR         reduce using rule 103 (exp -> ID meteExp exp2 .)
    INTEGER         reduce using rule 103 (exp -> ID meteExp exp2 .)
    LEFTBRACK       reduce using rule 103 (exp -> ID meteExp exp2 .)
    COMMA           reduce using rule 103 (exp -> ID meteExp exp2 .)
    SEMICOLON       reduce using rule 103 (exp -> ID meteExp exp2 .)
    RIGHTBRACK      reduce using rule 103 (exp -> ID meteExp exp2 .)


state 81

    (25) array -> LEFTBRACK exp RIGHTBRACK . array
    (25) array -> . LEFTBRACK exp RIGHTBRACK array
    (26) array -> . empty
    (129) empty -> .

    LEFTBRACK       shift and go to state 46
    COMMA           reduce using rule 129 (empty -> .)
    SEMICOLON       reduce using rule 129 (empty -> .)

    array                          shift and go to state 117
    empty                          shift and go to state 49

state 82

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON . declareRecursivo
    (8) declareRecursivo -> . type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo
    (23) declareRecursivo -> . empty
    (27) type -> . type2
    (129) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    FUNCTION        reduce using rule 129 (empty -> .)
    MAIN            reduce using rule 129 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    declareRecursivo               shift and go to state 118
    type                           shift and go to state 17
    empty                          shift and go to state 18
    type2                          shift and go to state 19

state 83

    (10) declare3 -> COMMA ID . altaVarGlobal declare3
    (22) altaVarGlobal -> .

    COMMA           reduce using rule 22 (altaVarGlobal -> .)
    SEMICOLON       reduce using rule 22 (altaVarGlobal -> .)

    altaVarGlobal                  shift and go to state 119

state 84

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR . LEFTKEY est functReturn RIGHTKEY

    LEFTKEY         shift and go to state 120


state 85

    (17) funct2 -> type ID . altaVarLocal funct3
    (63) altaVarLocal -> .

    COMMA           reduce using rule 63 (altaVarLocal -> .)
    RIGHTPAR        reduce using rule 63 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 121

state 86

    (80) do-while -> DO . meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad
    (82) meteSalto -> .

    LEFTKEY         reduce using rule 82 (meteSalto -> .)

    meteSalto                      shift and go to state 122

state 87

    (128) input -> READ . LEFTPAR ID RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 123


state 88

    (36) est -> conditional . est
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . for
    (79) cycles -> . do-while
    (128) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (124) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (129) empty -> .
    (83) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (87) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 100
    DECLARE         shift and go to state 99
    READ            shift and go to state 87
    WRITE           shift and go to state 97
    ID              shift and go to state 98
    RIGHTKEY        reduce using rule 129 (empty -> .)
    RETURN          reduce using rule 129 (empty -> .)
    WHILE           shift and go to state 89
    FOR             shift and go to state 95
    DO              shift and go to state 86

  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! DECLARE         [ reduce using rule 129 (empty -> .) ]
  ! READ            [ reduce using rule 129 (empty -> .) ]
  ! WRITE           [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! DO              [ reduce using rule 129 (empty -> .) ]

    conditional                    shift and go to state 88
    do-while                       shift and go to state 90
    est                            shift and go to state 124
    for                            shift and go to state 92
    llamadaAFunct                  shift and go to state 93
    input                          shift and go to state 94
    assignment                     shift and go to state 96
    cycles                         shift and go to state 101
    while                          shift and go to state 102
    empty                          shift and go to state 103
    output                         shift and go to state 104
    declareLocal                   shift and go to state 105

state 89

    (83) while -> WHILE . LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF

    LEFTPAR         shift and go to state 125


state 90

    (79) cycles -> do-while .

    IF              reduce using rule 79 (cycles -> do-while .)
    DECLARE         reduce using rule 79 (cycles -> do-while .)
    READ            reduce using rule 79 (cycles -> do-while .)
    WRITE           reduce using rule 79 (cycles -> do-while .)
    ID              reduce using rule 79 (cycles -> do-while .)
    WHILE           reduce using rule 79 (cycles -> do-while .)
    FOR             reduce using rule 79 (cycles -> do-while .)
    DO              reduce using rule 79 (cycles -> do-while .)
    RIGHTKEY        reduce using rule 79 (cycles -> do-while .)
    RETURN          reduce using rule 79 (cycles -> do-while .)


state 91

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY llenaMain altaModuloMain est . RIGHTKEY

    RIGHTKEY        shift and go to state 126


state 92

    (78) cycles -> for .

    IF              reduce using rule 78 (cycles -> for .)
    DECLARE         reduce using rule 78 (cycles -> for .)
    READ            reduce using rule 78 (cycles -> for .)
    WRITE           reduce using rule 78 (cycles -> for .)
    ID              reduce using rule 78 (cycles -> for .)
    WHILE           reduce using rule 78 (cycles -> for .)
    FOR             reduce using rule 78 (cycles -> for .)
    DO              reduce using rule 78 (cycles -> for .)
    RIGHTKEY        reduce using rule 78 (cycles -> for .)
    RETURN          reduce using rule 78 (cycles -> for .)


state 93

    (42) est -> llamadaAFunct . est
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . for
    (79) cycles -> . do-while
    (128) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (124) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (129) empty -> .
    (83) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (87) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 100
    DECLARE         shift and go to state 99
    READ            shift and go to state 87
    WRITE           shift and go to state 97
    ID              shift and go to state 98
    RIGHTKEY        reduce using rule 129 (empty -> .)
    RETURN          reduce using rule 129 (empty -> .)
    WHILE           shift and go to state 89
    FOR             shift and go to state 95
    DO              shift and go to state 86

  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! DECLARE         [ reduce using rule 129 (empty -> .) ]
  ! READ            [ reduce using rule 129 (empty -> .) ]
  ! WRITE           [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! DO              [ reduce using rule 129 (empty -> .) ]

    conditional                    shift and go to state 88
    do-while                       shift and go to state 90
    est                            shift and go to state 127
    for                            shift and go to state 92
    llamadaAFunct                  shift and go to state 93
    input                          shift and go to state 94
    assignment                     shift and go to state 96
    cycles                         shift and go to state 101
    while                          shift and go to state 102
    empty                          shift and go to state 103
    output                         shift and go to state 104
    declareLocal                   shift and go to state 105

state 94

    (39) est -> input . est
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . for
    (79) cycles -> . do-while
    (128) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (124) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (129) empty -> .
    (83) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (87) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 100
    DECLARE         shift and go to state 99
    READ            shift and go to state 87
    WRITE           shift and go to state 97
    ID              shift and go to state 98
    RIGHTKEY        reduce using rule 129 (empty -> .)
    RETURN          reduce using rule 129 (empty -> .)
    WHILE           shift and go to state 89
    FOR             shift and go to state 95
    DO              shift and go to state 86

  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! DECLARE         [ reduce using rule 129 (empty -> .) ]
  ! READ            [ reduce using rule 129 (empty -> .) ]
  ! WRITE           [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! DO              [ reduce using rule 129 (empty -> .) ]

    conditional                    shift and go to state 88
    do-while                       shift and go to state 90
    est                            shift and go to state 128
    for                            shift and go to state 92
    llamadaAFunct                  shift and go to state 93
    input                          shift and go to state 94
    assignment                     shift and go to state 96
    cycles                         shift and go to state 101
    while                          shift and go to state 102
    empty                          shift and go to state 103
    output                         shift and go to state 104
    declareLocal                   shift and go to state 105

state 95

    (87) for -> FOR . LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY

    LEFTPAR         shift and go to state 129


state 96

    (41) est -> assignment . est
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . for
    (79) cycles -> . do-while
    (128) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (124) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (129) empty -> .
    (83) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (87) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 100
    DECLARE         shift and go to state 99
    READ            shift and go to state 87
    WRITE           shift and go to state 97
    ID              shift and go to state 98
    RIGHTKEY        reduce using rule 129 (empty -> .)
    RETURN          reduce using rule 129 (empty -> .)
    WHILE           shift and go to state 89
    FOR             shift and go to state 95
    DO              shift and go to state 86

  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! DECLARE         [ reduce using rule 129 (empty -> .) ]
  ! READ            [ reduce using rule 129 (empty -> .) ]
  ! WRITE           [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! DO              [ reduce using rule 129 (empty -> .) ]

    conditional                    shift and go to state 88
    do-while                       shift and go to state 90
    est                            shift and go to state 130
    for                            shift and go to state 92
    llamadaAFunct                  shift and go to state 93
    input                          shift and go to state 94
    assignment                     shift and go to state 96
    cycles                         shift and go to state 101
    while                          shift and go to state 102
    empty                          shift and go to state 103
    output                         shift and go to state 104
    declareLocal                   shift and go to state 105

state 97

    (124) output -> WRITE . LEFTPAR output2 RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 131


state 98

    (64) assignment -> ID . ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> ID . ASSGN meteVar llamadaAFunct SEMICOLON
    (44) llamadaAFunct -> ID . LEFTPAR llamadaAFunct2 RIGHTPAR

    ASSGN           shift and go to state 132
    LEFTPAR         shift and go to state 133


state 99

    (50) declareLocal -> DECLARE . declareRecursivoLocal
    (51) declareRecursivoLocal -> . type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (59) declareRecursivoLocal -> . empty
    (27) type -> . type2
    (129) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    IF              reduce using rule 129 (empty -> .)
    DECLARE         reduce using rule 129 (empty -> .)
    READ            reduce using rule 129 (empty -> .)
    WRITE           reduce using rule 129 (empty -> .)
    ID              reduce using rule 129 (empty -> .)
    WHILE           reduce using rule 129 (empty -> .)
    FOR             reduce using rule 129 (empty -> .)
    DO              reduce using rule 129 (empty -> .)
    RIGHTKEY        reduce using rule 129 (empty -> .)
    RETURN          reduce using rule 129 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    declareRecursivoLocal          shift and go to state 134
    type2                          shift and go to state 19
    type                           shift and go to state 135
    empty                          shift and go to state 136

state 100

    (68) conditional -> IF . LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse

    LEFTPAR         shift and go to state 137


state 101

    (38) est -> cycles . est
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . for
    (79) cycles -> . do-while
    (128) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (124) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (129) empty -> .
    (83) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (87) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 100
    DECLARE         shift and go to state 99
    READ            shift and go to state 87
    WRITE           shift and go to state 97
    ID              shift and go to state 98
    RIGHTKEY        reduce using rule 129 (empty -> .)
    RETURN          reduce using rule 129 (empty -> .)
    WHILE           shift and go to state 89
    FOR             shift and go to state 95
    DO              shift and go to state 86

  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! DECLARE         [ reduce using rule 129 (empty -> .) ]
  ! READ            [ reduce using rule 129 (empty -> .) ]
  ! WRITE           [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! DO              [ reduce using rule 129 (empty -> .) ]

    conditional                    shift and go to state 88
    do-while                       shift and go to state 90
    est                            shift and go to state 138
    for                            shift and go to state 92
    llamadaAFunct                  shift and go to state 93
    input                          shift and go to state 94
    assignment                     shift and go to state 96
    cycles                         shift and go to state 101
    while                          shift and go to state 102
    empty                          shift and go to state 103
    output                         shift and go to state 104
    declareLocal                   shift and go to state 105

state 102

    (76) cycles -> while .

    IF              reduce using rule 76 (cycles -> while .)
    DECLARE         reduce using rule 76 (cycles -> while .)
    READ            reduce using rule 76 (cycles -> while .)
    WRITE           reduce using rule 76 (cycles -> while .)
    ID              reduce using rule 76 (cycles -> while .)
    WHILE           reduce using rule 76 (cycles -> while .)
    FOR             reduce using rule 76 (cycles -> while .)
    DO              reduce using rule 76 (cycles -> while .)
    RIGHTKEY        reduce using rule 76 (cycles -> while .)
    RETURN          reduce using rule 76 (cycles -> while .)


state 103

    (43) est -> empty .
    (60) declareLocal -> empty .
    (77) cycles -> empty .
    (67) assignment -> empty .
    (45) llamadaAFunct -> empty .

  ! reduce/reduce conflict for RIGHTKEY resolved using rule 43 (est -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 43 (est -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for DECLARE resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for READ resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for WRITE resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for DO resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 43 (est -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 43 (est -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for DECLARE resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for READ resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for WRITE resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for DO resolved using rule 60 (declareLocal -> empty .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 43 (est -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 43 (est -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 45 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for DECLARE resolved using rule 45 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for READ resolved using rule 45 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for WRITE resolved using rule 45 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 45 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 45 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 45 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for DO resolved using rule 45 (llamadaAFunct -> empty .)
  ! reduce/reduce conflict for RIGHTKEY resolved using rule 43 (est -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 43 (est -> empty .)
    RIGHTKEY        reduce using rule 43 (est -> empty .)
    RETURN          reduce using rule 43 (est -> empty .)
    IF              reduce using rule 45 (llamadaAFunct -> empty .)
    DECLARE         reduce using rule 45 (llamadaAFunct -> empty .)
    READ            reduce using rule 45 (llamadaAFunct -> empty .)
    WRITE           reduce using rule 45 (llamadaAFunct -> empty .)
    ID              reduce using rule 45 (llamadaAFunct -> empty .)
    WHILE           reduce using rule 45 (llamadaAFunct -> empty .)
    FOR             reduce using rule 45 (llamadaAFunct -> empty .)
    DO              reduce using rule 45 (llamadaAFunct -> empty .)

  ! IF              [ reduce using rule 60 (declareLocal -> empty .) ]
  ! DECLARE         [ reduce using rule 60 (declareLocal -> empty .) ]
  ! READ            [ reduce using rule 60 (declareLocal -> empty .) ]
  ! WRITE           [ reduce using rule 60 (declareLocal -> empty .) ]
  ! ID              [ reduce using rule 60 (declareLocal -> empty .) ]
  ! WHILE           [ reduce using rule 60 (declareLocal -> empty .) ]
  ! FOR             [ reduce using rule 60 (declareLocal -> empty .) ]
  ! DO              [ reduce using rule 60 (declareLocal -> empty .) ]
  ! RIGHTKEY        [ reduce using rule 60 (declareLocal -> empty .) ]
  ! RETURN          [ reduce using rule 60 (declareLocal -> empty .) ]
  ! IF              [ reduce using rule 77 (cycles -> empty .) ]
  ! DECLARE         [ reduce using rule 77 (cycles -> empty .) ]
  ! READ            [ reduce using rule 77 (cycles -> empty .) ]
  ! WRITE           [ reduce using rule 77 (cycles -> empty .) ]
  ! ID              [ reduce using rule 77 (cycles -> empty .) ]
  ! WHILE           [ reduce using rule 77 (cycles -> empty .) ]
  ! FOR             [ reduce using rule 77 (cycles -> empty .) ]
  ! DO              [ reduce using rule 77 (cycles -> empty .) ]
  ! RIGHTKEY        [ reduce using rule 77 (cycles -> empty .) ]
  ! RETURN          [ reduce using rule 77 (cycles -> empty .) ]
  ! IF              [ reduce using rule 67 (assignment -> empty .) ]
  ! DECLARE         [ reduce using rule 67 (assignment -> empty .) ]
  ! READ            [ reduce using rule 67 (assignment -> empty .) ]
  ! WRITE           [ reduce using rule 67 (assignment -> empty .) ]
  ! ID              [ reduce using rule 67 (assignment -> empty .) ]
  ! WHILE           [ reduce using rule 67 (assignment -> empty .) ]
  ! FOR             [ reduce using rule 67 (assignment -> empty .) ]
  ! DO              [ reduce using rule 67 (assignment -> empty .) ]
  ! RIGHTKEY        [ reduce using rule 67 (assignment -> empty .) ]
  ! RETURN          [ reduce using rule 67 (assignment -> empty .) ]
  ! RIGHTKEY        [ reduce using rule 45 (llamadaAFunct -> empty .) ]
  ! RETURN          [ reduce using rule 45 (llamadaAFunct -> empty .) ]


state 104

    (40) est -> output . est
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . for
    (79) cycles -> . do-while
    (128) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (124) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (129) empty -> .
    (83) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (87) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 100
    DECLARE         shift and go to state 99
    READ            shift and go to state 87
    WRITE           shift and go to state 97
    ID              shift and go to state 98
    RIGHTKEY        reduce using rule 129 (empty -> .)
    RETURN          reduce using rule 129 (empty -> .)
    WHILE           shift and go to state 89
    FOR             shift and go to state 95
    DO              shift and go to state 86

  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! DECLARE         [ reduce using rule 129 (empty -> .) ]
  ! READ            [ reduce using rule 129 (empty -> .) ]
  ! WRITE           [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! DO              [ reduce using rule 129 (empty -> .) ]

    conditional                    shift and go to state 88
    do-while                       shift and go to state 90
    est                            shift and go to state 139
    for                            shift and go to state 92
    llamadaAFunct                  shift and go to state 93
    input                          shift and go to state 94
    assignment                     shift and go to state 96
    cycles                         shift and go to state 101
    while                          shift and go to state 102
    empty                          shift and go to state 103
    output                         shift and go to state 104
    declareLocal                   shift and go to state 105

state 105

    (37) est -> declareLocal . est
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . for
    (79) cycles -> . do-while
    (128) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (124) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (129) empty -> .
    (83) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (87) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 100
    DECLARE         shift and go to state 99
    READ            shift and go to state 87
    WRITE           shift and go to state 97
    ID              shift and go to state 98
    RIGHTKEY        reduce using rule 129 (empty -> .)
    RETURN          reduce using rule 129 (empty -> .)
    WHILE           shift and go to state 89
    FOR             shift and go to state 95
    DO              shift and go to state 86

  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! DECLARE         [ reduce using rule 129 (empty -> .) ]
  ! READ            [ reduce using rule 129 (empty -> .) ]
  ! WRITE           [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! DO              [ reduce using rule 129 (empty -> .) ]

    conditional                    shift and go to state 88
    do-while                       shift and go to state 90
    est                            shift and go to state 140
    for                            shift and go to state 92
    llamadaAFunct                  shift and go to state 93
    input                          shift and go to state 94
    assignment                     shift and go to state 96
    declareLocal                   shift and go to state 105
    while                          shift and go to state 102
    empty                          shift and go to state 103
    output                         shift and go to state 104
    cycles                         shift and go to state 101

state 106

    (116) exp2 -> AND meteOper . exp
    (103) exp -> . ID meteExp exp2
    (104) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (109) exp -> . number meteNum exp2
    (111) exp -> . empty
    (53) number -> . INTEGER number2
    (129) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 44
    LEFTPAR         shift and go to state 41
    INTEGER         shift and go to state 43
    LEFTBRACK       reduce using rule 129 (empty -> .)
    COMMA           reduce using rule 129 (empty -> .)
    SEMICOLON       reduce using rule 129 (empty -> .)
    RIGHTBRACK      reduce using rule 129 (empty -> .)
    RIGHTPAR        reduce using rule 129 (empty -> .)

  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 141
    empty                          shift and go to state 45

state 107

    (122) exp2 -> DIVIDE meteOper . exp
    (103) exp -> . ID meteExp exp2
    (104) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (109) exp -> . number meteNum exp2
    (111) exp -> . empty
    (53) number -> . INTEGER number2
    (129) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 44
    LEFTPAR         shift and go to state 41
    INTEGER         shift and go to state 43
    LEFTBRACK       reduce using rule 129 (empty -> .)
    COMMA           reduce using rule 129 (empty -> .)
    SEMICOLON       reduce using rule 129 (empty -> .)
    RIGHTBRACK      reduce using rule 129 (empty -> .)
    RIGHTPAR        reduce using rule 129 (empty -> .)

  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 142
    empty                          shift and go to state 45

state 108

    (112) exp2 -> LESS meteOper . exp
    (103) exp -> . ID meteExp exp2
    (104) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (109) exp -> . number meteNum exp2
    (111) exp -> . empty
    (53) number -> . INTEGER number2
    (129) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 44
    LEFTPAR         shift and go to state 41
    INTEGER         shift and go to state 43
    LEFTBRACK       reduce using rule 129 (empty -> .)
    COMMA           reduce using rule 129 (empty -> .)
    SEMICOLON       reduce using rule 129 (empty -> .)
    RIGHTBRACK      reduce using rule 129 (empty -> .)
    RIGHTPAR        reduce using rule 129 (empty -> .)

  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 143
    empty                          shift and go to state 45

state 109

    (115) exp2 -> NOTEQ meteOper . exp
    (103) exp -> . ID meteExp exp2
    (104) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (109) exp -> . number meteNum exp2
    (111) exp -> . empty
    (53) number -> . INTEGER number2
    (129) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 44
    LEFTPAR         shift and go to state 41
    INTEGER         shift and go to state 43
    LEFTBRACK       reduce using rule 129 (empty -> .)
    COMMA           reduce using rule 129 (empty -> .)
    SEMICOLON       reduce using rule 129 (empty -> .)
    RIGHTBRACK      reduce using rule 129 (empty -> .)
    RIGHTPAR        reduce using rule 129 (empty -> .)

  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 144
    empty                          shift and go to state 45

state 110

    (118) exp2 -> SUM meteOper . exp
    (103) exp -> . ID meteExp exp2
    (104) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (109) exp -> . number meteNum exp2
    (111) exp -> . empty
    (53) number -> . INTEGER number2
    (129) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 44
    LEFTPAR         shift and go to state 41
    INTEGER         shift and go to state 43
    LEFTBRACK       reduce using rule 129 (empty -> .)
    COMMA           reduce using rule 129 (empty -> .)
    SEMICOLON       reduce using rule 129 (empty -> .)
    RIGHTBRACK      reduce using rule 129 (empty -> .)
    RIGHTPAR        reduce using rule 129 (empty -> .)

  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 145
    empty                          shift and go to state 45

state 111

    (120) exp2 -> MINUS meteOper . exp
    (103) exp -> . ID meteExp exp2
    (104) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (109) exp -> . number meteNum exp2
    (111) exp -> . empty
    (53) number -> . INTEGER number2
    (129) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 44
    LEFTPAR         shift and go to state 41
    INTEGER         shift and go to state 43
    LEFTBRACK       reduce using rule 129 (empty -> .)
    COMMA           reduce using rule 129 (empty -> .)
    SEMICOLON       reduce using rule 129 (empty -> .)
    RIGHTBRACK      reduce using rule 129 (empty -> .)
    RIGHTPAR        reduce using rule 129 (empty -> .)

  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 146
    empty                          shift and go to state 45

state 112

    (113) exp2 -> GRTR meteOper . exp
    (103) exp -> . ID meteExp exp2
    (104) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (109) exp -> . number meteNum exp2
    (111) exp -> . empty
    (53) number -> . INTEGER number2
    (129) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 44
    LEFTPAR         shift and go to state 41
    INTEGER         shift and go to state 43
    LEFTBRACK       reduce using rule 129 (empty -> .)
    COMMA           reduce using rule 129 (empty -> .)
    SEMICOLON       reduce using rule 129 (empty -> .)
    RIGHTBRACK      reduce using rule 129 (empty -> .)
    RIGHTPAR        reduce using rule 129 (empty -> .)

  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 147
    empty                          shift and go to state 45

state 113

    (121) exp2 -> MULTP meteOper . exp
    (103) exp -> . ID meteExp exp2
    (104) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (109) exp -> . number meteNum exp2
    (111) exp -> . empty
    (53) number -> . INTEGER number2
    (129) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 44
    LEFTPAR         shift and go to state 41
    INTEGER         shift and go to state 43
    LEFTBRACK       reduce using rule 129 (empty -> .)
    COMMA           reduce using rule 129 (empty -> .)
    SEMICOLON       reduce using rule 129 (empty -> .)
    RIGHTBRACK      reduce using rule 129 (empty -> .)
    RIGHTPAR        reduce using rule 129 (empty -> .)

  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 148
    empty                          shift and go to state 45

state 114

    (114) exp2 -> EQ meteOper . exp
    (103) exp -> . ID meteExp exp2
    (104) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (109) exp -> . number meteNum exp2
    (111) exp -> . empty
    (53) number -> . INTEGER number2
    (129) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 44
    LEFTPAR         shift and go to state 41
    INTEGER         shift and go to state 43
    LEFTBRACK       reduce using rule 129 (empty -> .)
    COMMA           reduce using rule 129 (empty -> .)
    SEMICOLON       reduce using rule 129 (empty -> .)
    RIGHTBRACK      reduce using rule 129 (empty -> .)
    RIGHTPAR        reduce using rule 129 (empty -> .)

  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 149
    empty                          shift and go to state 45

state 115

    (117) exp2 -> OR meteOper . exp
    (103) exp -> . ID meteExp exp2
    (104) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (109) exp -> . number meteNum exp2
    (111) exp -> . empty
    (53) number -> . INTEGER number2
    (129) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 44
    LEFTPAR         shift and go to state 41
    INTEGER         shift and go to state 43
    LEFTBRACK       reduce using rule 129 (empty -> .)
    COMMA           reduce using rule 129 (empty -> .)
    SEMICOLON       reduce using rule 129 (empty -> .)
    RIGHTBRACK      reduce using rule 129 (empty -> .)
    RIGHTPAR        reduce using rule 129 (empty -> .)

  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]

    number                         shift and go to state 40
    exp                            shift and go to state 150
    empty                          shift and go to state 45

state 116

    (104) exp -> LEFTPAR metePar exp RIGHTPAR . sacaPar exp2 generaCuad
    (106) sacaPar -> .

    LESS            reduce using rule 106 (sacaPar -> .)
    GRTR            reduce using rule 106 (sacaPar -> .)
    EQ              reduce using rule 106 (sacaPar -> .)
    NOTEQ           reduce using rule 106 (sacaPar -> .)
    AND             reduce using rule 106 (sacaPar -> .)
    OR              reduce using rule 106 (sacaPar -> .)
    SUM             reduce using rule 106 (sacaPar -> .)
    MINUS           reduce using rule 106 (sacaPar -> .)
    MULTP           reduce using rule 106 (sacaPar -> .)
    DIVIDE          reduce using rule 106 (sacaPar -> .)
    LEFTBRACK       reduce using rule 106 (sacaPar -> .)
    COMMA           reduce using rule 106 (sacaPar -> .)
    SEMICOLON       reduce using rule 106 (sacaPar -> .)
    RIGHTBRACK      reduce using rule 106 (sacaPar -> .)
    RIGHTPAR        reduce using rule 106 (sacaPar -> .)
    ID              reduce using rule 106 (sacaPar -> .)
    LEFTPAR         reduce using rule 106 (sacaPar -> .)
    INTEGER         reduce using rule 106 (sacaPar -> .)

    sacaPar                        shift and go to state 151

state 117

    (25) array -> LEFTBRACK exp RIGHTBRACK array .

    COMMA           reduce using rule 25 (array -> LEFTBRACK exp RIGHTBRACK array .)
    SEMICOLON       reduce using rule 25 (array -> LEFTBRACK exp RIGHTBRACK array .)


state 118

    (8) declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo .

    FUNCTION        reduce using rule 8 (declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo .)
    MAIN            reduce using rule 8 (declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo .)


state 119

    (10) declare3 -> COMMA ID altaVarGlobal . declare3
    (10) declare3 -> . COMMA ID altaVarGlobal declare3
    (24) declare3 -> . empty
    (129) empty -> .

    COMMA           shift and go to state 60
    SEMICOLON       reduce using rule 129 (empty -> .)

    empty                          shift and go to state 61
    declare3                       shift and go to state 152

state 120

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY . est functReturn RIGHTKEY
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . for
    (79) cycles -> . do-while
    (128) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (124) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (129) empty -> .
    (83) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (87) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 100
    DECLARE         shift and go to state 99
    READ            shift and go to state 87
    WRITE           shift and go to state 97
    ID              shift and go to state 98
    RETURN          reduce using rule 129 (empty -> .)
    RIGHTKEY        reduce using rule 129 (empty -> .)
    WHILE           shift and go to state 89
    FOR             shift and go to state 95
    DO              shift and go to state 86

  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! DECLARE         [ reduce using rule 129 (empty -> .) ]
  ! READ            [ reduce using rule 129 (empty -> .) ]
  ! WRITE           [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! DO              [ reduce using rule 129 (empty -> .) ]

    conditional                    shift and go to state 88
    do-while                       shift and go to state 90
    est                            shift and go to state 153
    for                            shift and go to state 92
    llamadaAFunct                  shift and go to state 93
    input                          shift and go to state 94
    assignment                     shift and go to state 96
    cycles                         shift and go to state 101
    while                          shift and go to state 102
    empty                          shift and go to state 103
    output                         shift and go to state 104
    declareLocal                   shift and go to state 105

state 121

    (17) funct2 -> type ID altaVarLocal . funct3
    (18) funct3 -> . COMMA type ID altaVarLocal funct3
    (20) funct3 -> . empty
    (129) empty -> .

    COMMA           shift and go to state 155
    RIGHTPAR        reduce using rule 129 (empty -> .)

    funct3                         shift and go to state 154
    empty                          shift and go to state 156

state 122

    (80) do-while -> DO meteSalto . LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

    LEFTKEY         shift and go to state 157


state 123

    (128) input -> READ LEFTPAR . ID RIGHTPAR SEMICOLON

    ID              shift and go to state 158


state 124

    (36) est -> conditional est .

    RIGHTKEY        reduce using rule 36 (est -> conditional est .)
    RETURN          reduce using rule 36 (est -> conditional est .)


state 125

    (83) while -> WHILE LEFTPAR . while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (85) while2 -> . exp while2
    (86) while2 -> . empty
    (103) exp -> . ID meteExp exp2
    (104) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (109) exp -> . number meteNum exp2
    (111) exp -> . empty
    (129) empty -> .
    (53) number -> . INTEGER number2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 44
    LEFTPAR         shift and go to state 41
    RIGHTPAR        reduce using rule 129 (empty -> .)
    INTEGER         shift and go to state 43

  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]

    number                         shift and go to state 40
    while2                         shift and go to state 159
    exp                            shift and go to state 160
    empty                          shift and go to state 161

state 126

    (33) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY llenaMain altaModuloMain est RIGHTKEY .

    END             reduce using rule 33 (cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY llenaMain altaModuloMain est RIGHTKEY .)


state 127

    (42) est -> llamadaAFunct est .

    RIGHTKEY        reduce using rule 42 (est -> llamadaAFunct est .)
    RETURN          reduce using rule 42 (est -> llamadaAFunct est .)


state 128

    (39) est -> input est .

    RIGHTKEY        reduce using rule 39 (est -> input est .)
    RETURN          reduce using rule 39 (est -> input est .)


state 129

    (87) for -> FOR LEFTPAR . for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (88) for2 -> . ID ASSGN number for3

    ID              shift and go to state 163

    for2                           shift and go to state 162

state 130

    (41) est -> assignment est .

    RIGHTKEY        reduce using rule 41 (est -> assignment est .)
    RETURN          reduce using rule 41 (est -> assignment est .)


state 131

    (124) output -> WRITE LEFTPAR . output2 RIGHTPAR SEMICOLON
    (125) output2 -> . ID output2
    (126) output2 -> . QUOTE ID QUOTE output2
    (127) output2 -> . empty
    (129) empty -> .

    ID              shift and go to state 166
    QUOTE           shift and go to state 165
    RIGHTPAR        reduce using rule 129 (empty -> .)

    output2                        shift and go to state 164
    empty                          shift and go to state 167

state 132

    (64) assignment -> ID ASSGN . meteVar exp generaCuad SEMICOLON
    (65) assignment -> ID ASSGN . meteVar llamadaAFunct SEMICOLON
    (66) meteVar -> .

    ID              reduce using rule 66 (meteVar -> .)
    LEFTPAR         reduce using rule 66 (meteVar -> .)
    INTEGER         reduce using rule 66 (meteVar -> .)
    SEMICOLON       reduce using rule 66 (meteVar -> .)

    meteVar                        shift and go to state 168

state 133

    (44) llamadaAFunct -> ID LEFTPAR . llamadaAFunct2 RIGHTPAR
    (46) llamadaAFunct2 -> . ID llamadaAFunct3
    (49) llamadaAFunct2 -> . empty
    (129) empty -> .

    ID              shift and go to state 170
    RIGHTPAR        reduce using rule 129 (empty -> .)

    llamadaAFunct2                 shift and go to state 169
    empty                          shift and go to state 171

state 134

    (50) declareLocal -> DECLARE declareRecursivoLocal .

    IF              reduce using rule 50 (declareLocal -> DECLARE declareRecursivoLocal .)
    DECLARE         reduce using rule 50 (declareLocal -> DECLARE declareRecursivoLocal .)
    READ            reduce using rule 50 (declareLocal -> DECLARE declareRecursivoLocal .)
    WRITE           reduce using rule 50 (declareLocal -> DECLARE declareRecursivoLocal .)
    ID              reduce using rule 50 (declareLocal -> DECLARE declareRecursivoLocal .)
    WHILE           reduce using rule 50 (declareLocal -> DECLARE declareRecursivoLocal .)
    FOR             reduce using rule 50 (declareLocal -> DECLARE declareRecursivoLocal .)
    DO              reduce using rule 50 (declareLocal -> DECLARE declareRecursivoLocal .)
    RIGHTKEY        reduce using rule 50 (declareLocal -> DECLARE declareRecursivoLocal .)
    RETURN          reduce using rule 50 (declareLocal -> DECLARE declareRecursivoLocal .)


state 135

    (51) declareRecursivoLocal -> type . ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal

    ID              shift and go to state 172


state 136

    (59) declareRecursivoLocal -> empty .

    IF              reduce using rule 59 (declareRecursivoLocal -> empty .)
    DECLARE         reduce using rule 59 (declareRecursivoLocal -> empty .)
    READ            reduce using rule 59 (declareRecursivoLocal -> empty .)
    WRITE           reduce using rule 59 (declareRecursivoLocal -> empty .)
    ID              reduce using rule 59 (declareRecursivoLocal -> empty .)
    WHILE           reduce using rule 59 (declareRecursivoLocal -> empty .)
    FOR             reduce using rule 59 (declareRecursivoLocal -> empty .)
    DO              reduce using rule 59 (declareRecursivoLocal -> empty .)
    RIGHTKEY        reduce using rule 59 (declareRecursivoLocal -> empty .)
    RETURN          reduce using rule 59 (declareRecursivoLocal -> empty .)


state 137

    (68) conditional -> IF LEFTPAR . conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (74) conditional2 -> . exp conditional2
    (75) conditional2 -> . empty
    (103) exp -> . ID meteExp exp2
    (104) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (109) exp -> . number meteNum exp2
    (111) exp -> . empty
    (129) empty -> .
    (53) number -> . INTEGER number2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 44
    LEFTPAR         shift and go to state 41
    RIGHTPAR        reduce using rule 129 (empty -> .)
    INTEGER         shift and go to state 43

  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]

    exp                            shift and go to state 175
    number                         shift and go to state 40
    empty                          shift and go to state 173
    conditional2                   shift and go to state 174

state 138

    (38) est -> cycles est .

    RIGHTKEY        reduce using rule 38 (est -> cycles est .)
    RETURN          reduce using rule 38 (est -> cycles est .)


state 139

    (40) est -> output est .

    RIGHTKEY        reduce using rule 40 (est -> output est .)
    RETURN          reduce using rule 40 (est -> output est .)


state 140

    (37) est -> declareLocal est .

    RIGHTKEY        reduce using rule 37 (est -> declareLocal est .)
    RETURN          reduce using rule 37 (est -> declareLocal est .)


state 141

    (116) exp2 -> AND meteOper exp .

    LEFTBRACK       reduce using rule 116 (exp2 -> AND meteOper exp .)
    COMMA           reduce using rule 116 (exp2 -> AND meteOper exp .)
    SEMICOLON       reduce using rule 116 (exp2 -> AND meteOper exp .)
    RIGHTBRACK      reduce using rule 116 (exp2 -> AND meteOper exp .)
    RIGHTPAR        reduce using rule 116 (exp2 -> AND meteOper exp .)
    ID              reduce using rule 116 (exp2 -> AND meteOper exp .)
    LEFTPAR         reduce using rule 116 (exp2 -> AND meteOper exp .)
    INTEGER         reduce using rule 116 (exp2 -> AND meteOper exp .)


state 142

    (122) exp2 -> DIVIDE meteOper exp .

    LEFTBRACK       reduce using rule 122 (exp2 -> DIVIDE meteOper exp .)
    COMMA           reduce using rule 122 (exp2 -> DIVIDE meteOper exp .)
    SEMICOLON       reduce using rule 122 (exp2 -> DIVIDE meteOper exp .)
    RIGHTBRACK      reduce using rule 122 (exp2 -> DIVIDE meteOper exp .)
    RIGHTPAR        reduce using rule 122 (exp2 -> DIVIDE meteOper exp .)
    ID              reduce using rule 122 (exp2 -> DIVIDE meteOper exp .)
    LEFTPAR         reduce using rule 122 (exp2 -> DIVIDE meteOper exp .)
    INTEGER         reduce using rule 122 (exp2 -> DIVIDE meteOper exp .)


state 143

    (112) exp2 -> LESS meteOper exp .

    LEFTBRACK       reduce using rule 112 (exp2 -> LESS meteOper exp .)
    COMMA           reduce using rule 112 (exp2 -> LESS meteOper exp .)
    SEMICOLON       reduce using rule 112 (exp2 -> LESS meteOper exp .)
    RIGHTBRACK      reduce using rule 112 (exp2 -> LESS meteOper exp .)
    RIGHTPAR        reduce using rule 112 (exp2 -> LESS meteOper exp .)
    ID              reduce using rule 112 (exp2 -> LESS meteOper exp .)
    LEFTPAR         reduce using rule 112 (exp2 -> LESS meteOper exp .)
    INTEGER         reduce using rule 112 (exp2 -> LESS meteOper exp .)


state 144

    (115) exp2 -> NOTEQ meteOper exp .

    LEFTBRACK       reduce using rule 115 (exp2 -> NOTEQ meteOper exp .)
    COMMA           reduce using rule 115 (exp2 -> NOTEQ meteOper exp .)
    SEMICOLON       reduce using rule 115 (exp2 -> NOTEQ meteOper exp .)
    RIGHTBRACK      reduce using rule 115 (exp2 -> NOTEQ meteOper exp .)
    RIGHTPAR        reduce using rule 115 (exp2 -> NOTEQ meteOper exp .)
    ID              reduce using rule 115 (exp2 -> NOTEQ meteOper exp .)
    LEFTPAR         reduce using rule 115 (exp2 -> NOTEQ meteOper exp .)
    INTEGER         reduce using rule 115 (exp2 -> NOTEQ meteOper exp .)


state 145

    (118) exp2 -> SUM meteOper exp .

    LEFTBRACK       reduce using rule 118 (exp2 -> SUM meteOper exp .)
    COMMA           reduce using rule 118 (exp2 -> SUM meteOper exp .)
    SEMICOLON       reduce using rule 118 (exp2 -> SUM meteOper exp .)
    RIGHTBRACK      reduce using rule 118 (exp2 -> SUM meteOper exp .)
    RIGHTPAR        reduce using rule 118 (exp2 -> SUM meteOper exp .)
    ID              reduce using rule 118 (exp2 -> SUM meteOper exp .)
    LEFTPAR         reduce using rule 118 (exp2 -> SUM meteOper exp .)
    INTEGER         reduce using rule 118 (exp2 -> SUM meteOper exp .)


state 146

    (120) exp2 -> MINUS meteOper exp .

    LEFTBRACK       reduce using rule 120 (exp2 -> MINUS meteOper exp .)
    COMMA           reduce using rule 120 (exp2 -> MINUS meteOper exp .)
    SEMICOLON       reduce using rule 120 (exp2 -> MINUS meteOper exp .)
    RIGHTBRACK      reduce using rule 120 (exp2 -> MINUS meteOper exp .)
    RIGHTPAR        reduce using rule 120 (exp2 -> MINUS meteOper exp .)
    ID              reduce using rule 120 (exp2 -> MINUS meteOper exp .)
    LEFTPAR         reduce using rule 120 (exp2 -> MINUS meteOper exp .)
    INTEGER         reduce using rule 120 (exp2 -> MINUS meteOper exp .)


state 147

    (113) exp2 -> GRTR meteOper exp .

    LEFTBRACK       reduce using rule 113 (exp2 -> GRTR meteOper exp .)
    COMMA           reduce using rule 113 (exp2 -> GRTR meteOper exp .)
    SEMICOLON       reduce using rule 113 (exp2 -> GRTR meteOper exp .)
    RIGHTBRACK      reduce using rule 113 (exp2 -> GRTR meteOper exp .)
    RIGHTPAR        reduce using rule 113 (exp2 -> GRTR meteOper exp .)
    ID              reduce using rule 113 (exp2 -> GRTR meteOper exp .)
    LEFTPAR         reduce using rule 113 (exp2 -> GRTR meteOper exp .)
    INTEGER         reduce using rule 113 (exp2 -> GRTR meteOper exp .)


state 148

    (121) exp2 -> MULTP meteOper exp .

    LEFTBRACK       reduce using rule 121 (exp2 -> MULTP meteOper exp .)
    COMMA           reduce using rule 121 (exp2 -> MULTP meteOper exp .)
    SEMICOLON       reduce using rule 121 (exp2 -> MULTP meteOper exp .)
    RIGHTBRACK      reduce using rule 121 (exp2 -> MULTP meteOper exp .)
    RIGHTPAR        reduce using rule 121 (exp2 -> MULTP meteOper exp .)
    ID              reduce using rule 121 (exp2 -> MULTP meteOper exp .)
    LEFTPAR         reduce using rule 121 (exp2 -> MULTP meteOper exp .)
    INTEGER         reduce using rule 121 (exp2 -> MULTP meteOper exp .)


state 149

    (114) exp2 -> EQ meteOper exp .

    LEFTBRACK       reduce using rule 114 (exp2 -> EQ meteOper exp .)
    COMMA           reduce using rule 114 (exp2 -> EQ meteOper exp .)
    SEMICOLON       reduce using rule 114 (exp2 -> EQ meteOper exp .)
    RIGHTBRACK      reduce using rule 114 (exp2 -> EQ meteOper exp .)
    RIGHTPAR        reduce using rule 114 (exp2 -> EQ meteOper exp .)
    ID              reduce using rule 114 (exp2 -> EQ meteOper exp .)
    LEFTPAR         reduce using rule 114 (exp2 -> EQ meteOper exp .)
    INTEGER         reduce using rule 114 (exp2 -> EQ meteOper exp .)


state 150

    (117) exp2 -> OR meteOper exp .

    LEFTBRACK       reduce using rule 117 (exp2 -> OR meteOper exp .)
    COMMA           reduce using rule 117 (exp2 -> OR meteOper exp .)
    SEMICOLON       reduce using rule 117 (exp2 -> OR meteOper exp .)
    RIGHTBRACK      reduce using rule 117 (exp2 -> OR meteOper exp .)
    RIGHTPAR        reduce using rule 117 (exp2 -> OR meteOper exp .)
    ID              reduce using rule 117 (exp2 -> OR meteOper exp .)
    LEFTPAR         reduce using rule 117 (exp2 -> OR meteOper exp .)
    INTEGER         reduce using rule 117 (exp2 -> OR meteOper exp .)


state 151

    (104) exp -> LEFTPAR metePar exp RIGHTPAR sacaPar . exp2 generaCuad
    (112) exp2 -> . LESS meteOper exp
    (113) exp2 -> . GRTR meteOper exp
    (114) exp2 -> . EQ meteOper exp
    (115) exp2 -> . NOTEQ meteOper exp
    (116) exp2 -> . AND meteOper exp
    (117) exp2 -> . OR meteOper exp
    (118) exp2 -> . SUM meteOper exp
    (120) exp2 -> . MINUS meteOper exp
    (121) exp2 -> . MULTP meteOper exp
    (122) exp2 -> . DIVIDE meteOper exp
    (123) exp2 -> . empty
    (129) empty -> .

    LESS            shift and go to state 68
    GRTR            shift and go to state 73
    EQ              shift and go to state 75
    NOTEQ           shift and go to state 69
    AND             shift and go to state 66
    OR              shift and go to state 76
    SUM             shift and go to state 71
    MINUS           shift and go to state 72
    MULTP           shift and go to state 74
    DIVIDE          shift and go to state 67
    LEFTBRACK       reduce using rule 129 (empty -> .)
    COMMA           reduce using rule 129 (empty -> .)
    SEMICOLON       reduce using rule 129 (empty -> .)
    RIGHTBRACK      reduce using rule 129 (empty -> .)
    RIGHTPAR        reduce using rule 129 (empty -> .)
    ID              reduce using rule 129 (empty -> .)
    LEFTPAR         reduce using rule 129 (empty -> .)
    INTEGER         reduce using rule 129 (empty -> .)

    exp2                           shift and go to state 176
    empty                          shift and go to state 77

state 152

    (10) declare3 -> COMMA ID altaVarGlobal declare3 .

    SEMICOLON       reduce using rule 10 (declare3 -> COMMA ID altaVarGlobal declare3 .)


state 153

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est . functReturn RIGHTKEY
    (13) functReturn -> . RETURN NUMBER SEMICOLON
    (14) functReturn -> . RETURN ID SEMICOLON
    (15) functReturn -> . empty
    (129) empty -> .

    RETURN          shift and go to state 177
    RIGHTKEY        reduce using rule 129 (empty -> .)

    functReturn                    shift and go to state 178
    empty                          shift and go to state 179

state 154

    (17) funct2 -> type ID altaVarLocal funct3 .

    RIGHTPAR        reduce using rule 17 (funct2 -> type ID altaVarLocal funct3 .)


state 155

    (18) funct3 -> COMMA . type ID altaVarLocal funct3
    (27) type -> . type2
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    type                           shift and go to state 180
    type2                          shift and go to state 19

state 156

    (20) funct3 -> empty .

    RIGHTPAR        reduce using rule 20 (funct3 -> empty .)


state 157

    (80) do-while -> DO meteSalto LEFTKEY . est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . for
    (79) cycles -> . do-while
    (128) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (124) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (129) empty -> .
    (83) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (87) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 100
    DECLARE         shift and go to state 99
    READ            shift and go to state 87
    WRITE           shift and go to state 97
    ID              shift and go to state 98
    RIGHTKEY        reduce using rule 129 (empty -> .)
    WHILE           shift and go to state 89
    FOR             shift and go to state 95
    DO              shift and go to state 86

  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! DECLARE         [ reduce using rule 129 (empty -> .) ]
  ! READ            [ reduce using rule 129 (empty -> .) ]
  ! WRITE           [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! DO              [ reduce using rule 129 (empty -> .) ]

    conditional                    shift and go to state 88
    do-while                       shift and go to state 90
    est                            shift and go to state 181
    for                            shift and go to state 92
    llamadaAFunct                  shift and go to state 93
    input                          shift and go to state 94
    assignment                     shift and go to state 96
    declareLocal                   shift and go to state 105
    while                          shift and go to state 102
    empty                          shift and go to state 103
    output                         shift and go to state 104
    cycles                         shift and go to state 101

state 158

    (128) input -> READ LEFTPAR ID . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 182


state 159

    (83) while -> WHILE LEFTPAR while2 . RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF

    RIGHTPAR        shift and go to state 183


state 160

    (85) while2 -> exp . while2
    (85) while2 -> . exp while2
    (86) while2 -> . empty
    (103) exp -> . ID meteExp exp2
    (104) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (109) exp -> . number meteNum exp2
    (111) exp -> . empty
    (129) empty -> .
    (53) number -> . INTEGER number2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 44
    LEFTPAR         shift and go to state 41
    RIGHTPAR        reduce using rule 129 (empty -> .)
    INTEGER         shift and go to state 43

  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]

    number                         shift and go to state 40
    while2                         shift and go to state 184
    exp                            shift and go to state 160
    empty                          shift and go to state 161

state 161

    (86) while2 -> empty .
    (111) exp -> empty .

  ! reduce/reduce conflict for RIGHTPAR resolved using rule 86 (while2 -> empty .)
    RIGHTPAR        reduce using rule 86 (while2 -> empty .)
    ID              reduce using rule 111 (exp -> empty .)
    LEFTPAR         reduce using rule 111 (exp -> empty .)
    INTEGER         reduce using rule 111 (exp -> empty .)

  ! RIGHTPAR        [ reduce using rule 111 (exp -> empty .) ]


state 162

    (87) for -> FOR LEFTPAR for2 . SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY

    SEMICOLON       shift and go to state 185


state 163

    (88) for2 -> ID . ASSGN number for3

    ASSGN           shift and go to state 186


state 164

    (124) output -> WRITE LEFTPAR output2 . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 187


state 165

    (126) output2 -> QUOTE . ID QUOTE output2

    ID              shift and go to state 188


state 166

    (125) output2 -> ID . output2
    (125) output2 -> . ID output2
    (126) output2 -> . QUOTE ID QUOTE output2
    (127) output2 -> . empty
    (129) empty -> .

    ID              shift and go to state 166
    QUOTE           shift and go to state 165
    RIGHTPAR        reduce using rule 129 (empty -> .)

    output2                        shift and go to state 189
    empty                          shift and go to state 167

state 167

    (127) output2 -> empty .

    RIGHTPAR        reduce using rule 127 (output2 -> empty .)


state 168

    (64) assignment -> ID ASSGN meteVar . exp generaCuad SEMICOLON
    (65) assignment -> ID ASSGN meteVar . llamadaAFunct SEMICOLON
    (103) exp -> . ID meteExp exp2
    (104) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (109) exp -> . number meteNum exp2
    (111) exp -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (53) number -> . INTEGER number2
    (129) empty -> .

    ID              shift and go to state 192
    LEFTPAR         shift and go to state 41
    INTEGER         shift and go to state 43
    SEMICOLON       reduce using rule 129 (empty -> .)

    llamadaAFunct                  shift and go to state 190
    number                         shift and go to state 40
    exp                            shift and go to state 191
    empty                          shift and go to state 193

state 169

    (44) llamadaAFunct -> ID LEFTPAR llamadaAFunct2 . RIGHTPAR

    RIGHTPAR        shift and go to state 194


state 170

    (46) llamadaAFunct2 -> ID . llamadaAFunct3
    (47) llamadaAFunct3 -> . COMMA ID
    (48) llamadaAFunct3 -> . empty
    (129) empty -> .

    COMMA           shift and go to state 196
    RIGHTPAR        reduce using rule 129 (empty -> .)

    llamadaAFunct3                 shift and go to state 195
    empty                          shift and go to state 197

state 171

    (49) llamadaAFunct2 -> empty .

    RIGHTPAR        reduce using rule 49 (llamadaAFunct2 -> empty .)


state 172

    (51) declareRecursivoLocal -> type ID . altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (63) altaVarLocal -> .

    ASSGN           reduce using rule 63 (altaVarLocal -> .)
    LEFTBRACK       reduce using rule 63 (altaVarLocal -> .)
    COMMA           reduce using rule 63 (altaVarLocal -> .)
    SEMICOLON       reduce using rule 63 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 198

state 173

    (75) conditional2 -> empty .
    (111) exp -> empty .

  ! reduce/reduce conflict for RIGHTPAR resolved using rule 75 (conditional2 -> empty .)
    RIGHTPAR        reduce using rule 75 (conditional2 -> empty .)
    ID              reduce using rule 111 (exp -> empty .)
    LEFTPAR         reduce using rule 111 (exp -> empty .)
    INTEGER         reduce using rule 111 (exp -> empty .)

  ! RIGHTPAR        [ reduce using rule 111 (exp -> empty .) ]


state 174

    (68) conditional -> IF LEFTPAR conditional2 . RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse

    RIGHTPAR        shift and go to state 199


state 175

    (74) conditional2 -> exp . conditional2
    (74) conditional2 -> . exp conditional2
    (75) conditional2 -> . empty
    (103) exp -> . ID meteExp exp2
    (104) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (109) exp -> . number meteNum exp2
    (111) exp -> . empty
    (129) empty -> .
    (53) number -> . INTEGER number2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 44
    LEFTPAR         shift and go to state 41
    RIGHTPAR        reduce using rule 129 (empty -> .)
    INTEGER         shift and go to state 43

  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]

    number                         shift and go to state 40
    conditional2                   shift and go to state 200
    exp                            shift and go to state 175
    empty                          shift and go to state 173

state 176

    (104) exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 . generaCuad
    (108) generaCuad -> .

    LEFTBRACK       reduce using rule 108 (generaCuad -> .)
    COMMA           reduce using rule 108 (generaCuad -> .)
    SEMICOLON       reduce using rule 108 (generaCuad -> .)
    RIGHTBRACK      reduce using rule 108 (generaCuad -> .)
    RIGHTPAR        reduce using rule 108 (generaCuad -> .)
    ID              reduce using rule 108 (generaCuad -> .)
    LEFTPAR         reduce using rule 108 (generaCuad -> .)
    INTEGER         reduce using rule 108 (generaCuad -> .)

    generaCuad                     shift and go to state 201

state 177

    (13) functReturn -> RETURN . NUMBER SEMICOLON
    (14) functReturn -> RETURN . ID SEMICOLON

    NUMBER          shift and go to state 202
    ID              shift and go to state 203


state 178

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn . RIGHTKEY

    RIGHTKEY        shift and go to state 204


state 179

    (15) functReturn -> empty .

    RIGHTKEY        reduce using rule 15 (functReturn -> empty .)


state 180

    (18) funct3 -> COMMA type . ID altaVarLocal funct3

    ID              shift and go to state 205


state 181

    (80) do-while -> DO meteSalto LEFTKEY est . RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

    RIGHTKEY        shift and go to state 206


state 182

    (128) input -> READ LEFTPAR ID RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 207


state 183

    (83) while -> WHILE LEFTPAR while2 RIGHTPAR . gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (69) gotoFCuad -> .

    LEFTKEY         reduce using rule 69 (gotoFCuad -> .)

    gotoFCuad                      shift and go to state 208

state 184

    (85) while2 -> exp while2 .

    RIGHTPAR        reduce using rule 85 (while2 -> exp while2 .)


state 185

    (87) for -> FOR LEFTPAR for2 SEMICOLON . for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (91) for4 -> . expFor
    (94) expFor -> . ID expFor2
    (95) expFor -> . number
    (53) number -> . INTEGER number2

    ID              shift and go to state 211
    INTEGER         shift and go to state 43

    number                         shift and go to state 209
    expFor                         shift and go to state 210
    for4                           shift and go to state 212

state 186

    (88) for2 -> ID ASSGN . number for3
    (53) number -> . INTEGER number2

    INTEGER         shift and go to state 43

    number                         shift and go to state 213

state 187

    (124) output -> WRITE LEFTPAR output2 RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 214


state 188

    (126) output2 -> QUOTE ID . QUOTE output2

    QUOTE           shift and go to state 215


state 189

    (125) output2 -> ID output2 .

    RIGHTPAR        reduce using rule 125 (output2 -> ID output2 .)


state 190

    (65) assignment -> ID ASSGN meteVar llamadaAFunct . SEMICOLON

    SEMICOLON       shift and go to state 216


state 191

    (64) assignment -> ID ASSGN meteVar exp . generaCuad SEMICOLON
    (108) generaCuad -> .

    SEMICOLON       reduce using rule 108 (generaCuad -> .)

    generaCuad                     shift and go to state 217

state 192

    (103) exp -> ID . meteExp exp2
    (44) llamadaAFunct -> ID . LEFTPAR llamadaAFunct2 RIGHTPAR
    (107) meteExp -> .

    LEFTPAR         shift and go to state 133
    LESS            reduce using rule 107 (meteExp -> .)
    GRTR            reduce using rule 107 (meteExp -> .)
    EQ              reduce using rule 107 (meteExp -> .)
    NOTEQ           reduce using rule 107 (meteExp -> .)
    AND             reduce using rule 107 (meteExp -> .)
    OR              reduce using rule 107 (meteExp -> .)
    SUM             reduce using rule 107 (meteExp -> .)
    MINUS           reduce using rule 107 (meteExp -> .)
    MULTP           reduce using rule 107 (meteExp -> .)
    DIVIDE          reduce using rule 107 (meteExp -> .)
    SEMICOLON       reduce using rule 107 (meteExp -> .)

    meteExp                        shift and go to state 57

state 193

    (111) exp -> empty .
    (45) llamadaAFunct -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 45 (llamadaAFunct -> empty .)
    SEMICOLON       reduce using rule 45 (llamadaAFunct -> empty .)

  ! SEMICOLON       [ reduce using rule 111 (exp -> empty .) ]


state 194

    (44) llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .

    IF              reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    DECLARE         reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    READ            reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    WRITE           reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    ID              reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    WHILE           reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    FOR             reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    DO              reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    RIGHTKEY        reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    RETURN          reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)
    SEMICOLON       reduce using rule 44 (llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR .)


state 195

    (46) llamadaAFunct2 -> ID llamadaAFunct3 .

    RIGHTPAR        reduce using rule 46 (llamadaAFunct2 -> ID llamadaAFunct3 .)


state 196

    (47) llamadaAFunct3 -> COMMA . ID

    ID              shift and go to state 218


state 197

    (48) llamadaAFunct3 -> empty .

    RIGHTPAR        reduce using rule 48 (llamadaAFunct3 -> empty .)


state 198

    (51) declareRecursivoLocal -> type ID altaVarLocal . assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (52) assignmentDecl -> . ASSGN exp
    (56) assignmentDecl -> . empty
    (129) empty -> .

    ASSGN           shift and go to state 35
    LEFTBRACK       reduce using rule 129 (empty -> .)
    COMMA           reduce using rule 129 (empty -> .)
    SEMICOLON       reduce using rule 129 (empty -> .)

    assignmentDecl                 shift and go to state 219
    empty                          shift and go to state 37

state 199

    (68) conditional -> IF LEFTPAR conditional2 RIGHTPAR . gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (69) gotoFCuad -> .

    LEFTKEY         reduce using rule 69 (gotoFCuad -> .)

    gotoFCuad                      shift and go to state 220

state 200

    (74) conditional2 -> exp conditional2 .

    RIGHTPAR        reduce using rule 74 (conditional2 -> exp conditional2 .)


state 201

    (104) exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .

    RIGHTPAR        reduce using rule 104 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    ID              reduce using rule 104 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    LEFTPAR         reduce using rule 104 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    INTEGER         reduce using rule 104 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    LEFTBRACK       reduce using rule 104 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    COMMA           reduce using rule 104 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    SEMICOLON       reduce using rule 104 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)
    RIGHTBRACK      reduce using rule 104 (exp -> LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad .)


state 202

    (13) functReturn -> RETURN NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 221


state 203

    (14) functReturn -> RETURN ID . SEMICOLON

    SEMICOLON       shift and go to state 222


state 204

    (12) funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY .

    FUNCTION        reduce using rule 12 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY .)
    MAIN            reduce using rule 12 (funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY .)


state 205

    (18) funct3 -> COMMA type ID . altaVarLocal funct3
    (63) altaVarLocal -> .

    COMMA           reduce using rule 63 (altaVarLocal -> .)
    RIGHTPAR        reduce using rule 63 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 223

state 206

    (80) do-while -> DO meteSalto LEFTKEY est RIGHTKEY . WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

    WHILE           shift and go to state 224


state 207

    (128) input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .

    IF              reduce using rule 128 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    DECLARE         reduce using rule 128 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    READ            reduce using rule 128 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    WRITE           reduce using rule 128 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    ID              reduce using rule 128 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 128 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    FOR             reduce using rule 128 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    DO              reduce using rule 128 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    RIGHTKEY        reduce using rule 128 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)
    RETURN          reduce using rule 128 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)


state 208

    (83) while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad . LEFTKEY est RIGHTKEY llenaCuadF

    LEFTKEY         shift and go to state 225


state 209

    (95) expFor -> number .

    SEMICOLON       reduce using rule 95 (expFor -> number .)


state 210

    (91) for4 -> expFor .

    SEMICOLON       reduce using rule 91 (for4 -> expFor .)


state 211

    (94) expFor -> ID . expFor2
    (96) expFor2 -> . LESS expFor
    (97) expFor2 -> . GRTR expFor
    (98) expFor2 -> . EQ expFor
    (99) expFor2 -> . NOTEQ expFor
    (100) expFor2 -> . AND expFor
    (101) expFor2 -> . OR expFor
    (102) expFor2 -> . empty
    (129) empty -> .

    LESS            shift and go to state 227
    GRTR            shift and go to state 230
    EQ              shift and go to state 231
    NOTEQ           shift and go to state 228
    AND             shift and go to state 226
    OR              shift and go to state 233
    SEMICOLON       reduce using rule 129 (empty -> .)

    empty                          shift and go to state 232
    expFor2                        shift and go to state 229

state 212

    (87) for -> FOR LEFTPAR for2 SEMICOLON for4 . SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY

    SEMICOLON       shift and go to state 234


state 213

    (88) for2 -> ID ASSGN number . for3
    (89) for3 -> . COMMA for2
    (90) for3 -> . empty
    (129) empty -> .

    COMMA           shift and go to state 235
    SEMICOLON       reduce using rule 129 (empty -> .)

    for3                           shift and go to state 236
    empty                          shift and go to state 237

state 214

    (124) output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .

    IF              reduce using rule 124 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    DECLARE         reduce using rule 124 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    READ            reduce using rule 124 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    WRITE           reduce using rule 124 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    ID              reduce using rule 124 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 124 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    FOR             reduce using rule 124 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    DO              reduce using rule 124 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    RIGHTKEY        reduce using rule 124 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)
    RETURN          reduce using rule 124 (output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON .)


state 215

    (126) output2 -> QUOTE ID QUOTE . output2
    (125) output2 -> . ID output2
    (126) output2 -> . QUOTE ID QUOTE output2
    (127) output2 -> . empty
    (129) empty -> .

    ID              shift and go to state 166
    QUOTE           shift and go to state 165
    RIGHTPAR        reduce using rule 129 (empty -> .)

    output2                        shift and go to state 238
    empty                          shift and go to state 167

state 216

    (65) assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .

    IF              reduce using rule 65 (assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .)
    DECLARE         reduce using rule 65 (assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .)
    READ            reduce using rule 65 (assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .)
    WRITE           reduce using rule 65 (assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .)
    ID              reduce using rule 65 (assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .)
    WHILE           reduce using rule 65 (assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .)
    FOR             reduce using rule 65 (assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .)
    DO              reduce using rule 65 (assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .)
    RIGHTKEY        reduce using rule 65 (assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .)
    RETURN          reduce using rule 65 (assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON .)


state 217

    (64) assignment -> ID ASSGN meteVar exp generaCuad . SEMICOLON

    SEMICOLON       shift and go to state 239


state 218

    (47) llamadaAFunct3 -> COMMA ID .

    RIGHTPAR        reduce using rule 47 (llamadaAFunct3 -> COMMA ID .)


state 219

    (51) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl . declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (57) declare2Local -> . array
    (61) declare2Local -> . empty
    (25) array -> . LEFTBRACK exp RIGHTBRACK array
    (26) array -> . empty
    (129) empty -> .

    LEFTBRACK       shift and go to state 46
    COMMA           reduce using rule 129 (empty -> .)
    SEMICOLON       reduce using rule 129 (empty -> .)

    declare2Local                  shift and go to state 240
    array                          shift and go to state 241
    empty                          shift and go to state 242

state 220

    (68) conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad . LEFTKEY est RIGHTKEY gotoCuad conditionalElse

    LEFTKEY         shift and go to state 243


state 221

    (13) functReturn -> RETURN NUMBER SEMICOLON .

    RIGHTKEY        reduce using rule 13 (functReturn -> RETURN NUMBER SEMICOLON .)


state 222

    (14) functReturn -> RETURN ID SEMICOLON .

    RIGHTKEY        reduce using rule 14 (functReturn -> RETURN ID SEMICOLON .)


state 223

    (18) funct3 -> COMMA type ID altaVarLocal . funct3
    (18) funct3 -> . COMMA type ID altaVarLocal funct3
    (20) funct3 -> . empty
    (129) empty -> .

    COMMA           shift and go to state 155
    RIGHTPAR        reduce using rule 129 (empty -> .)

    funct3                         shift and go to state 244
    empty                          shift and go to state 156

state 224

    (80) do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE . LEFTPAR while2 RIGHTPAR gotoVCuad

    LEFTPAR         shift and go to state 245


state 225

    (83) while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY . est RIGHTKEY llenaCuadF
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . for
    (79) cycles -> . do-while
    (128) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (124) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (129) empty -> .
    (83) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (87) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 100
    DECLARE         shift and go to state 99
    READ            shift and go to state 87
    WRITE           shift and go to state 97
    ID              shift and go to state 98
    RIGHTKEY        reduce using rule 129 (empty -> .)
    WHILE           shift and go to state 89
    FOR             shift and go to state 95
    DO              shift and go to state 86

  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! DECLARE         [ reduce using rule 129 (empty -> .) ]
  ! READ            [ reduce using rule 129 (empty -> .) ]
  ! WRITE           [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! DO              [ reduce using rule 129 (empty -> .) ]

    conditional                    shift and go to state 88
    do-while                       shift and go to state 90
    est                            shift and go to state 246
    for                            shift and go to state 92
    llamadaAFunct                  shift and go to state 93
    input                          shift and go to state 94
    assignment                     shift and go to state 96
    declareLocal                   shift and go to state 105
    while                          shift and go to state 102
    empty                          shift and go to state 103
    output                         shift and go to state 104
    cycles                         shift and go to state 101

state 226

    (100) expFor2 -> AND . expFor
    (94) expFor -> . ID expFor2
    (95) expFor -> . number
    (53) number -> . INTEGER number2

    ID              shift and go to state 211
    INTEGER         shift and go to state 43

    expFor                         shift and go to state 247
    number                         shift and go to state 209

state 227

    (96) expFor2 -> LESS . expFor
    (94) expFor -> . ID expFor2
    (95) expFor -> . number
    (53) number -> . INTEGER number2

    ID              shift and go to state 211
    INTEGER         shift and go to state 43

    expFor                         shift and go to state 248
    number                         shift and go to state 209

state 228

    (99) expFor2 -> NOTEQ . expFor
    (94) expFor -> . ID expFor2
    (95) expFor -> . number
    (53) number -> . INTEGER number2

    ID              shift and go to state 211
    INTEGER         shift and go to state 43

    expFor                         shift and go to state 249
    number                         shift and go to state 209

state 229

    (94) expFor -> ID expFor2 .

    SEMICOLON       reduce using rule 94 (expFor -> ID expFor2 .)


state 230

    (97) expFor2 -> GRTR . expFor
    (94) expFor -> . ID expFor2
    (95) expFor -> . number
    (53) number -> . INTEGER number2

    ID              shift and go to state 211
    INTEGER         shift and go to state 43

    expFor                         shift and go to state 250
    number                         shift and go to state 209

state 231

    (98) expFor2 -> EQ . expFor
    (94) expFor -> . ID expFor2
    (95) expFor -> . number
    (53) number -> . INTEGER number2

    ID              shift and go to state 211
    INTEGER         shift and go to state 43

    expFor                         shift and go to state 251
    number                         shift and go to state 209

state 232

    (102) expFor2 -> empty .

    SEMICOLON       reduce using rule 102 (expFor2 -> empty .)


state 233

    (101) expFor2 -> OR . expFor
    (94) expFor -> . ID expFor2
    (95) expFor -> . number
    (53) number -> . INTEGER number2

    ID              shift and go to state 211
    INTEGER         shift and go to state 43

    expFor                         shift and go to state 252
    number                         shift and go to state 209

state 234

    (87) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON . parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (92) parte3For -> . ID SUM SUM
    (93) parte3For -> . ID MINUS MINUS

    ID              shift and go to state 254

    parte3For                      shift and go to state 253

state 235

    (89) for3 -> COMMA . for2
    (88) for2 -> . ID ASSGN number for3

    ID              shift and go to state 163

    for2                           shift and go to state 255

state 236

    (88) for2 -> ID ASSGN number for3 .

    SEMICOLON       reduce using rule 88 (for2 -> ID ASSGN number for3 .)


state 237

    (90) for3 -> empty .

    SEMICOLON       reduce using rule 90 (for3 -> empty .)


state 238

    (126) output2 -> QUOTE ID QUOTE output2 .

    RIGHTPAR        reduce using rule 126 (output2 -> QUOTE ID QUOTE output2 .)


state 239

    (64) assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .

    IF              reduce using rule 64 (assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .)
    DECLARE         reduce using rule 64 (assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .)
    READ            reduce using rule 64 (assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .)
    WRITE           reduce using rule 64 (assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .)
    ID              reduce using rule 64 (assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .)
    WHILE           reduce using rule 64 (assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .)
    FOR             reduce using rule 64 (assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .)
    DO              reduce using rule 64 (assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .)
    RIGHTKEY        reduce using rule 64 (assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .)
    RETURN          reduce using rule 64 (assignment -> ID ASSGN meteVar exp generaCuad SEMICOLON .)


state 240

    (51) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local . declare3Local SEMICOLON declareRecursivoLocal
    (58) declare3Local -> . COMMA ID altaVarLocal assignmentDecl declare3Local
    (62) declare3Local -> . empty
    (129) empty -> .

    COMMA           shift and go to state 256
    SEMICOLON       reduce using rule 129 (empty -> .)

    empty                          shift and go to state 257
    declare3Local                  shift and go to state 258

state 241

    (57) declare2Local -> array .

    COMMA           reduce using rule 57 (declare2Local -> array .)
    SEMICOLON       reduce using rule 57 (declare2Local -> array .)


state 242

    (61) declare2Local -> empty .
    (26) array -> empty .

  ! reduce/reduce conflict for COMMA resolved using rule 26 (array -> empty .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 26 (array -> empty .)
    COMMA           reduce using rule 26 (array -> empty .)
    SEMICOLON       reduce using rule 26 (array -> empty .)

  ! COMMA           [ reduce using rule 61 (declare2Local -> empty .) ]
  ! SEMICOLON       [ reduce using rule 61 (declare2Local -> empty .) ]


state 243

    (68) conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY . est RIGHTKEY gotoCuad conditionalElse
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . for
    (79) cycles -> . do-while
    (128) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (124) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (129) empty -> .
    (83) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (87) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 100
    DECLARE         shift and go to state 99
    READ            shift and go to state 87
    WRITE           shift and go to state 97
    ID              shift and go to state 98
    RIGHTKEY        reduce using rule 129 (empty -> .)
    WHILE           shift and go to state 89
    FOR             shift and go to state 95
    DO              shift and go to state 86

  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! DECLARE         [ reduce using rule 129 (empty -> .) ]
  ! READ            [ reduce using rule 129 (empty -> .) ]
  ! WRITE           [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! DO              [ reduce using rule 129 (empty -> .) ]

    conditional                    shift and go to state 88
    do-while                       shift and go to state 90
    est                            shift and go to state 259
    for                            shift and go to state 92
    llamadaAFunct                  shift and go to state 93
    input                          shift and go to state 94
    empty                          shift and go to state 103
    assignment                     shift and go to state 96
    cycles                         shift and go to state 101
    while                          shift and go to state 102
    output                         shift and go to state 104
    declareLocal                   shift and go to state 105

state 244

    (18) funct3 -> COMMA type ID altaVarLocal funct3 .

    RIGHTPAR        reduce using rule 18 (funct3 -> COMMA type ID altaVarLocal funct3 .)


state 245

    (80) do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR . while2 RIGHTPAR gotoVCuad
    (85) while2 -> . exp while2
    (86) while2 -> . empty
    (103) exp -> . ID meteExp exp2
    (104) exp -> . LEFTPAR metePar exp RIGHTPAR sacaPar exp2 generaCuad
    (109) exp -> . number meteNum exp2
    (111) exp -> . empty
    (129) empty -> .
    (53) number -> . INTEGER number2

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
    ID              shift and go to state 44
    LEFTPAR         shift and go to state 41
    RIGHTPAR        reduce using rule 129 (empty -> .)
    INTEGER         shift and go to state 43

  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 129 (empty -> .) ]
  ! INTEGER         [ reduce using rule 129 (empty -> .) ]

    number                         shift and go to state 40
    while2                         shift and go to state 260
    exp                            shift and go to state 160
    empty                          shift and go to state 161

state 246

    (83) while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est . RIGHTKEY llenaCuadF

    RIGHTKEY        shift and go to state 261


state 247

    (100) expFor2 -> AND expFor .

    SEMICOLON       reduce using rule 100 (expFor2 -> AND expFor .)


state 248

    (96) expFor2 -> LESS expFor .

    SEMICOLON       reduce using rule 96 (expFor2 -> LESS expFor .)


state 249

    (99) expFor2 -> NOTEQ expFor .

    SEMICOLON       reduce using rule 99 (expFor2 -> NOTEQ expFor .)


state 250

    (97) expFor2 -> GRTR expFor .

    SEMICOLON       reduce using rule 97 (expFor2 -> GRTR expFor .)


state 251

    (98) expFor2 -> EQ expFor .

    SEMICOLON       reduce using rule 98 (expFor2 -> EQ expFor .)


state 252

    (101) expFor2 -> OR expFor .

    SEMICOLON       reduce using rule 101 (expFor2 -> OR expFor .)


state 253

    (87) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For . RIGHTPAR LEFTKEY est RIGHTKEY

    RIGHTPAR        shift and go to state 262


state 254

    (92) parte3For -> ID . SUM SUM
    (93) parte3For -> ID . MINUS MINUS

    SUM             shift and go to state 263
    MINUS           shift and go to state 264


state 255

    (89) for3 -> COMMA for2 .

    SEMICOLON       reduce using rule 89 (for3 -> COMMA for2 .)


state 256

    (58) declare3Local -> COMMA . ID altaVarLocal assignmentDecl declare3Local

    ID              shift and go to state 265


state 257

    (62) declare3Local -> empty .

    SEMICOLON       reduce using rule 62 (declare3Local -> empty .)


state 258

    (51) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local . SEMICOLON declareRecursivoLocal

    SEMICOLON       shift and go to state 266


state 259

    (68) conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est . RIGHTKEY gotoCuad conditionalElse

    RIGHTKEY        shift and go to state 267


state 260

    (80) do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 . RIGHTPAR gotoVCuad

    RIGHTPAR        shift and go to state 268


state 261

    (83) while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY . llenaCuadF
    (84) llenaCuadF -> .

    IF              reduce using rule 84 (llenaCuadF -> .)
    DECLARE         reduce using rule 84 (llenaCuadF -> .)
    READ            reduce using rule 84 (llenaCuadF -> .)
    WRITE           reduce using rule 84 (llenaCuadF -> .)
    ID              reduce using rule 84 (llenaCuadF -> .)
    WHILE           reduce using rule 84 (llenaCuadF -> .)
    FOR             reduce using rule 84 (llenaCuadF -> .)
    DO              reduce using rule 84 (llenaCuadF -> .)
    RIGHTKEY        reduce using rule 84 (llenaCuadF -> .)
    RETURN          reduce using rule 84 (llenaCuadF -> .)

    llenaCuadF                     shift and go to state 269

state 262

    (87) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR . LEFTKEY est RIGHTKEY

    LEFTKEY         shift and go to state 270


state 263

    (92) parte3For -> ID SUM . SUM

    SUM             shift and go to state 271


state 264

    (93) parte3For -> ID MINUS . MINUS

    MINUS           shift and go to state 272


state 265

    (58) declare3Local -> COMMA ID . altaVarLocal assignmentDecl declare3Local
    (63) altaVarLocal -> .

    ASSGN           reduce using rule 63 (altaVarLocal -> .)
    COMMA           reduce using rule 63 (altaVarLocal -> .)
    SEMICOLON       reduce using rule 63 (altaVarLocal -> .)

    altaVarLocal                   shift and go to state 273

state 266

    (51) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON . declareRecursivoLocal
    (51) declareRecursivoLocal -> . type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal
    (59) declareRecursivoLocal -> . empty
    (27) type -> . type2
    (129) empty -> .
    (28) type2 -> . INT
    (29) type2 -> . FLOAT
    (30) type2 -> . STRING
    (31) type2 -> . BOOL
    (32) type2 -> . VOID

    IF              reduce using rule 129 (empty -> .)
    DECLARE         reduce using rule 129 (empty -> .)
    READ            reduce using rule 129 (empty -> .)
    WRITE           reduce using rule 129 (empty -> .)
    ID              reduce using rule 129 (empty -> .)
    WHILE           reduce using rule 129 (empty -> .)
    FOR             reduce using rule 129 (empty -> .)
    DO              reduce using rule 129 (empty -> .)
    RIGHTKEY        reduce using rule 129 (empty -> .)
    RETURN          reduce using rule 129 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    STRING          shift and go to state 11
    BOOL            shift and go to state 15
    VOID            shift and go to state 13

    declareRecursivoLocal          shift and go to state 274
    type2                          shift and go to state 19
    type                           shift and go to state 135
    empty                          shift and go to state 136

state 267

    (68) conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY . gotoCuad conditionalElse
    (70) gotoCuad -> .

    ELSE            reduce using rule 70 (gotoCuad -> .)
    IF              reduce using rule 70 (gotoCuad -> .)
    DECLARE         reduce using rule 70 (gotoCuad -> .)
    READ            reduce using rule 70 (gotoCuad -> .)
    WRITE           reduce using rule 70 (gotoCuad -> .)
    ID              reduce using rule 70 (gotoCuad -> .)
    WHILE           reduce using rule 70 (gotoCuad -> .)
    FOR             reduce using rule 70 (gotoCuad -> .)
    DO              reduce using rule 70 (gotoCuad -> .)
    RIGHTKEY        reduce using rule 70 (gotoCuad -> .)
    RETURN          reduce using rule 70 (gotoCuad -> .)

    gotoCuad                       shift and go to state 275

state 268

    (80) do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR . gotoVCuad
    (81) gotoVCuad -> .

    IF              reduce using rule 81 (gotoVCuad -> .)
    DECLARE         reduce using rule 81 (gotoVCuad -> .)
    READ            reduce using rule 81 (gotoVCuad -> .)
    WRITE           reduce using rule 81 (gotoVCuad -> .)
    ID              reduce using rule 81 (gotoVCuad -> .)
    WHILE           reduce using rule 81 (gotoVCuad -> .)
    FOR             reduce using rule 81 (gotoVCuad -> .)
    DO              reduce using rule 81 (gotoVCuad -> .)
    RIGHTKEY        reduce using rule 81 (gotoVCuad -> .)
    RETURN          reduce using rule 81 (gotoVCuad -> .)

    gotoVCuad                      shift and go to state 276

state 269

    (83) while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .

    IF              reduce using rule 83 (while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .)
    DECLARE         reduce using rule 83 (while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .)
    READ            reduce using rule 83 (while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .)
    WRITE           reduce using rule 83 (while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .)
    ID              reduce using rule 83 (while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .)
    WHILE           reduce using rule 83 (while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .)
    FOR             reduce using rule 83 (while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .)
    DO              reduce using rule 83 (while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .)
    RIGHTKEY        reduce using rule 83 (while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .)
    RETURN          reduce using rule 83 (while -> WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF .)


state 270

    (87) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY . est RIGHTKEY
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . for
    (79) cycles -> . do-while
    (128) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (124) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (129) empty -> .
    (83) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (87) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 100
    DECLARE         shift and go to state 99
    READ            shift and go to state 87
    WRITE           shift and go to state 97
    ID              shift and go to state 98
    RIGHTKEY        reduce using rule 129 (empty -> .)
    WHILE           shift and go to state 89
    FOR             shift and go to state 95
    DO              shift and go to state 86

  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! DECLARE         [ reduce using rule 129 (empty -> .) ]
  ! READ            [ reduce using rule 129 (empty -> .) ]
  ! WRITE           [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! DO              [ reduce using rule 129 (empty -> .) ]

    conditional                    shift and go to state 88
    do-while                       shift and go to state 90
    est                            shift and go to state 277
    for                            shift and go to state 92
    llamadaAFunct                  shift and go to state 93
    input                          shift and go to state 94
    assignment                     shift and go to state 96
    declareLocal                   shift and go to state 105
    while                          shift and go to state 102
    empty                          shift and go to state 103
    output                         shift and go to state 104
    cycles                         shift and go to state 101

state 271

    (92) parte3For -> ID SUM SUM .

    RIGHTPAR        reduce using rule 92 (parte3For -> ID SUM SUM .)


state 272

    (93) parte3For -> ID MINUS MINUS .

    RIGHTPAR        reduce using rule 93 (parte3For -> ID MINUS MINUS .)


state 273

    (58) declare3Local -> COMMA ID altaVarLocal . assignmentDecl declare3Local
    (52) assignmentDecl -> . ASSGN exp
    (56) assignmentDecl -> . empty
    (129) empty -> .

    ASSGN           shift and go to state 35
    COMMA           reduce using rule 129 (empty -> .)
    SEMICOLON       reduce using rule 129 (empty -> .)

    empty                          shift and go to state 37
    assignmentDecl                 shift and go to state 278

state 274

    (51) declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .

    IF              reduce using rule 51 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    DECLARE         reduce using rule 51 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    READ            reduce using rule 51 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    WRITE           reduce using rule 51 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    ID              reduce using rule 51 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    WHILE           reduce using rule 51 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    FOR             reduce using rule 51 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    DO              reduce using rule 51 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    RIGHTKEY        reduce using rule 51 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)
    RETURN          reduce using rule 51 (declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal .)


state 275

    (68) conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad . conditionalElse
    (71) conditionalElse -> . ELSE LEFTKEY est RIGHTKEY llenaGoto
    (73) conditionalElse -> . empty
    (129) empty -> .

    ELSE            shift and go to state 281
    IF              reduce using rule 129 (empty -> .)
    DECLARE         reduce using rule 129 (empty -> .)
    READ            reduce using rule 129 (empty -> .)
    WRITE           reduce using rule 129 (empty -> .)
    ID              reduce using rule 129 (empty -> .)
    WHILE           reduce using rule 129 (empty -> .)
    FOR             reduce using rule 129 (empty -> .)
    DO              reduce using rule 129 (empty -> .)
    RIGHTKEY        reduce using rule 129 (empty -> .)
    RETURN          reduce using rule 129 (empty -> .)

    conditionalElse                shift and go to state 279
    empty                          shift and go to state 280

state 276

    (80) do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .

    IF              reduce using rule 80 (do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .)
    DECLARE         reduce using rule 80 (do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .)
    READ            reduce using rule 80 (do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .)
    WRITE           reduce using rule 80 (do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .)
    ID              reduce using rule 80 (do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .)
    WHILE           reduce using rule 80 (do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .)
    FOR             reduce using rule 80 (do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .)
    DO              reduce using rule 80 (do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .)
    RIGHTKEY        reduce using rule 80 (do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .)
    RETURN          reduce using rule 80 (do-while -> DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad .)


state 277

    (87) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 282


state 278

    (58) declare3Local -> COMMA ID altaVarLocal assignmentDecl . declare3Local
    (58) declare3Local -> . COMMA ID altaVarLocal assignmentDecl declare3Local
    (62) declare3Local -> . empty
    (129) empty -> .

    COMMA           shift and go to state 256
    SEMICOLON       reduce using rule 129 (empty -> .)

    empty                          shift and go to state 257
    declare3Local                  shift and go to state 283

state 279

    (68) conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .

    IF              reduce using rule 68 (conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .)
    DECLARE         reduce using rule 68 (conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .)
    READ            reduce using rule 68 (conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .)
    WRITE           reduce using rule 68 (conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .)
    ID              reduce using rule 68 (conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .)
    WHILE           reduce using rule 68 (conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .)
    FOR             reduce using rule 68 (conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .)
    DO              reduce using rule 68 (conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .)
    RIGHTKEY        reduce using rule 68 (conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .)
    RETURN          reduce using rule 68 (conditional -> IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse .)


state 280

    (73) conditionalElse -> empty .

    IF              reduce using rule 73 (conditionalElse -> empty .)
    DECLARE         reduce using rule 73 (conditionalElse -> empty .)
    READ            reduce using rule 73 (conditionalElse -> empty .)
    WRITE           reduce using rule 73 (conditionalElse -> empty .)
    ID              reduce using rule 73 (conditionalElse -> empty .)
    WHILE           reduce using rule 73 (conditionalElse -> empty .)
    FOR             reduce using rule 73 (conditionalElse -> empty .)
    DO              reduce using rule 73 (conditionalElse -> empty .)
    RIGHTKEY        reduce using rule 73 (conditionalElse -> empty .)
    RETURN          reduce using rule 73 (conditionalElse -> empty .)


state 281

    (71) conditionalElse -> ELSE . LEFTKEY est RIGHTKEY llenaGoto

    LEFTKEY         shift and go to state 284


state 282

    (87) for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .

    IF              reduce using rule 87 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    DECLARE         reduce using rule 87 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    READ            reduce using rule 87 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    WRITE           reduce using rule 87 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    ID              reduce using rule 87 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    WHILE           reduce using rule 87 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    FOR             reduce using rule 87 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    DO              reduce using rule 87 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    RIGHTKEY        reduce using rule 87 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)
    RETURN          reduce using rule 87 (for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY .)


state 283

    (58) declare3Local -> COMMA ID altaVarLocal assignmentDecl declare3Local .

    SEMICOLON       reduce using rule 58 (declare3Local -> COMMA ID altaVarLocal assignmentDecl declare3Local .)


state 284

    (71) conditionalElse -> ELSE LEFTKEY . est RIGHTKEY llenaGoto
    (36) est -> . conditional est
    (37) est -> . declareLocal est
    (38) est -> . cycles est
    (39) est -> . input est
    (40) est -> . output est
    (41) est -> . assignment est
    (42) est -> . llamadaAFunct est
    (43) est -> . empty
    (68) conditional -> . IF LEFTPAR conditional2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY gotoCuad conditionalElse
    (50) declareLocal -> . DECLARE declareRecursivoLocal
    (60) declareLocal -> . empty
    (76) cycles -> . while
    (77) cycles -> . empty
    (78) cycles -> . for
    (79) cycles -> . do-while
    (128) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (124) output -> . WRITE LEFTPAR output2 RIGHTPAR SEMICOLON
    (64) assignment -> . ID ASSGN meteVar exp generaCuad SEMICOLON
    (65) assignment -> . ID ASSGN meteVar llamadaAFunct SEMICOLON
    (67) assignment -> . empty
    (44) llamadaAFunct -> . ID LEFTPAR llamadaAFunct2 RIGHTPAR
    (45) llamadaAFunct -> . empty
    (129) empty -> .
    (83) while -> . WHILE LEFTPAR while2 RIGHTPAR gotoFCuad LEFTKEY est RIGHTKEY llenaCuadF
    (87) for -> . FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY
    (80) do-while -> . DO meteSalto LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR gotoVCuad

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DECLARE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DO resolved as shift
    IF              shift and go to state 100
    DECLARE         shift and go to state 99
    READ            shift and go to state 87
    WRITE           shift and go to state 97
    ID              shift and go to state 98
    RIGHTKEY        reduce using rule 129 (empty -> .)
    WHILE           shift and go to state 89
    FOR             shift and go to state 95
    DO              shift and go to state 86

  ! IF              [ reduce using rule 129 (empty -> .) ]
  ! DECLARE         [ reduce using rule 129 (empty -> .) ]
  ! READ            [ reduce using rule 129 (empty -> .) ]
  ! WRITE           [ reduce using rule 129 (empty -> .) ]
  ! ID              [ reduce using rule 129 (empty -> .) ]
  ! WHILE           [ reduce using rule 129 (empty -> .) ]
  ! FOR             [ reduce using rule 129 (empty -> .) ]
  ! DO              [ reduce using rule 129 (empty -> .) ]

    conditional                    shift and go to state 88
    do-while                       shift and go to state 90
    est                            shift and go to state 285
    for                            shift and go to state 92
    llamadaAFunct                  shift and go to state 93
    input                          shift and go to state 94
    assignment                     shift and go to state 96
    cycles                         shift and go to state 101
    while                          shift and go to state 102
    empty                          shift and go to state 103
    output                         shift and go to state 104
    declareLocal                   shift and go to state 105

state 285

    (71) conditionalElse -> ELSE LEFTKEY est . RIGHTKEY llenaGoto

    RIGHTKEY        shift and go to state 286


state 286

    (71) conditionalElse -> ELSE LEFTKEY est RIGHTKEY . llenaGoto
    (72) llenaGoto -> .

    IF              reduce using rule 72 (llenaGoto -> .)
    DECLARE         reduce using rule 72 (llenaGoto -> .)
    READ            reduce using rule 72 (llenaGoto -> .)
    WRITE           reduce using rule 72 (llenaGoto -> .)
    ID              reduce using rule 72 (llenaGoto -> .)
    WHILE           reduce using rule 72 (llenaGoto -> .)
    FOR             reduce using rule 72 (llenaGoto -> .)
    DO              reduce using rule 72 (llenaGoto -> .)
    RIGHTKEY        reduce using rule 72 (llenaGoto -> .)
    RETURN          reduce using rule 72 (llenaGoto -> .)

    llenaGoto                      shift and go to state 287

state 287

    (71) conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .

    IF              reduce using rule 71 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .)
    DECLARE         reduce using rule 71 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .)
    READ            reduce using rule 71 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .)
    WRITE           reduce using rule 71 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .)
    ID              reduce using rule 71 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .)
    WHILE           reduce using rule 71 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .)
    FOR             reduce using rule 71 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .)
    DO              reduce using rule 71 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .)
    RIGHTKEY        reduce using rule 71 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .)
    RETURN          reduce using rule 71 (conditionalElse -> ELSE LEFTKEY est RIGHTKEY llenaGoto .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 65 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 65 resolved as shift
WARNING: shift/reduce conflict for READ in state 65 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 65 resolved as shift
WARNING: shift/reduce conflict for ID in state 65 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 65 resolved as shift
WARNING: shift/reduce conflict for FOR in state 65 resolved as shift
WARNING: shift/reduce conflict for DO in state 65 resolved as shift
WARNING: shift/reduce conflict for IF in state 88 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 88 resolved as shift
WARNING: shift/reduce conflict for READ in state 88 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 88 resolved as shift
WARNING: shift/reduce conflict for ID in state 88 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 88 resolved as shift
WARNING: shift/reduce conflict for FOR in state 88 resolved as shift
WARNING: shift/reduce conflict for DO in state 88 resolved as shift
WARNING: shift/reduce conflict for IF in state 93 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 93 resolved as shift
WARNING: shift/reduce conflict for READ in state 93 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 93 resolved as shift
WARNING: shift/reduce conflict for ID in state 93 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 93 resolved as shift
WARNING: shift/reduce conflict for FOR in state 93 resolved as shift
WARNING: shift/reduce conflict for DO in state 93 resolved as shift
WARNING: shift/reduce conflict for IF in state 94 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 94 resolved as shift
WARNING: shift/reduce conflict for READ in state 94 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 94 resolved as shift
WARNING: shift/reduce conflict for ID in state 94 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 94 resolved as shift
WARNING: shift/reduce conflict for FOR in state 94 resolved as shift
WARNING: shift/reduce conflict for DO in state 94 resolved as shift
WARNING: shift/reduce conflict for IF in state 96 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 96 resolved as shift
WARNING: shift/reduce conflict for READ in state 96 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 96 resolved as shift
WARNING: shift/reduce conflict for ID in state 96 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 96 resolved as shift
WARNING: shift/reduce conflict for FOR in state 96 resolved as shift
WARNING: shift/reduce conflict for DO in state 96 resolved as shift
WARNING: shift/reduce conflict for IF in state 101 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 101 resolved as shift
WARNING: shift/reduce conflict for READ in state 101 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 101 resolved as shift
WARNING: shift/reduce conflict for ID in state 101 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 101 resolved as shift
WARNING: shift/reduce conflict for FOR in state 101 resolved as shift
WARNING: shift/reduce conflict for DO in state 101 resolved as shift
WARNING: shift/reduce conflict for IF in state 104 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 104 resolved as shift
WARNING: shift/reduce conflict for READ in state 104 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 104 resolved as shift
WARNING: shift/reduce conflict for ID in state 104 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 104 resolved as shift
WARNING: shift/reduce conflict for FOR in state 104 resolved as shift
WARNING: shift/reduce conflict for DO in state 104 resolved as shift
WARNING: shift/reduce conflict for IF in state 105 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 105 resolved as shift
WARNING: shift/reduce conflict for READ in state 105 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 105 resolved as shift
WARNING: shift/reduce conflict for ID in state 105 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 105 resolved as shift
WARNING: shift/reduce conflict for FOR in state 105 resolved as shift
WARNING: shift/reduce conflict for DO in state 105 resolved as shift
WARNING: shift/reduce conflict for ID in state 106 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 106 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 106 resolved as shift
WARNING: shift/reduce conflict for ID in state 107 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 107 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 107 resolved as shift
WARNING: shift/reduce conflict for ID in state 108 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 108 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 108 resolved as shift
WARNING: shift/reduce conflict for ID in state 109 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 109 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 109 resolved as shift
WARNING: shift/reduce conflict for ID in state 110 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 110 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 110 resolved as shift
WARNING: shift/reduce conflict for ID in state 111 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 111 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 111 resolved as shift
WARNING: shift/reduce conflict for ID in state 112 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 112 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 112 resolved as shift
WARNING: shift/reduce conflict for ID in state 113 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 113 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 113 resolved as shift
WARNING: shift/reduce conflict for ID in state 114 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 114 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 114 resolved as shift
WARNING: shift/reduce conflict for ID in state 115 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 115 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 115 resolved as shift
WARNING: shift/reduce conflict for IF in state 120 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 120 resolved as shift
WARNING: shift/reduce conflict for READ in state 120 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 120 resolved as shift
WARNING: shift/reduce conflict for ID in state 120 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 120 resolved as shift
WARNING: shift/reduce conflict for FOR in state 120 resolved as shift
WARNING: shift/reduce conflict for DO in state 120 resolved as shift
WARNING: shift/reduce conflict for ID in state 125 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 125 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 125 resolved as shift
WARNING: shift/reduce conflict for ID in state 137 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 137 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 137 resolved as shift
WARNING: shift/reduce conflict for IF in state 157 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 157 resolved as shift
WARNING: shift/reduce conflict for READ in state 157 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 157 resolved as shift
WARNING: shift/reduce conflict for ID in state 157 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 157 resolved as shift
WARNING: shift/reduce conflict for FOR in state 157 resolved as shift
WARNING: shift/reduce conflict for DO in state 157 resolved as shift
WARNING: shift/reduce conflict for ID in state 160 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 160 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 160 resolved as shift
WARNING: shift/reduce conflict for ID in state 175 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 175 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 175 resolved as shift
WARNING: shift/reduce conflict for IF in state 225 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 225 resolved as shift
WARNING: shift/reduce conflict for READ in state 225 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 225 resolved as shift
WARNING: shift/reduce conflict for ID in state 225 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 225 resolved as shift
WARNING: shift/reduce conflict for FOR in state 225 resolved as shift
WARNING: shift/reduce conflict for DO in state 225 resolved as shift
WARNING: shift/reduce conflict for IF in state 243 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 243 resolved as shift
WARNING: shift/reduce conflict for READ in state 243 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 243 resolved as shift
WARNING: shift/reduce conflict for ID in state 243 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 243 resolved as shift
WARNING: shift/reduce conflict for FOR in state 243 resolved as shift
WARNING: shift/reduce conflict for DO in state 243 resolved as shift
WARNING: shift/reduce conflict for ID in state 245 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 245 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 245 resolved as shift
WARNING: shift/reduce conflict for IF in state 270 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 270 resolved as shift
WARNING: shift/reduce conflict for READ in state 270 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 270 resolved as shift
WARNING: shift/reduce conflict for ID in state 270 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 270 resolved as shift
WARNING: shift/reduce conflict for FOR in state 270 resolved as shift
WARNING: shift/reduce conflict for DO in state 270 resolved as shift
WARNING: shift/reduce conflict for IF in state 284 resolved as shift
WARNING: shift/reduce conflict for DECLARE in state 284 resolved as shift
WARNING: shift/reduce conflict for READ in state 284 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 284 resolved as shift
WARNING: shift/reduce conflict for ID in state 284 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 284 resolved as shift
WARNING: shift/reduce conflict for FOR in state 284 resolved as shift
WARNING: shift/reduce conflict for DO in state 284 resolved as shift
WARNING: reduce/reduce conflict in state 9 resolved using rule (program2 -> empty)
WARNING: rejected rule (declare -> empty) in state 9
WARNING: reduce/reduce conflict in state 103 resolved using rule (est -> empty)
WARNING: rejected rule (declareLocal -> empty) in state 103
WARNING: reduce/reduce conflict in state 103 resolved using rule (declareLocal -> empty)
WARNING: rejected rule (cycles -> empty) in state 103
WARNING: reduce/reduce conflict in state 103 resolved using rule (est -> empty)
WARNING: rejected rule (cycles -> empty) in state 103
WARNING: reduce/reduce conflict in state 103 resolved using rule (declareLocal -> empty)
WARNING: rejected rule (assignment -> empty) in state 103
WARNING: reduce/reduce conflict in state 103 resolved using rule (est -> empty)
WARNING: rejected rule (assignment -> empty) in state 103
WARNING: reduce/reduce conflict in state 103 resolved using rule (llamadaAFunct -> empty)
WARNING: rejected rule (declareLocal -> empty) in state 103
WARNING: reduce/reduce conflict in state 103 resolved using rule (est -> empty)
WARNING: rejected rule (llamadaAFunct -> empty) in state 103
WARNING: reduce/reduce conflict in state 161 resolved using rule (while2 -> empty)
WARNING: rejected rule (exp -> empty) in state 161
WARNING: reduce/reduce conflict in state 173 resolved using rule (conditional2 -> empty)
WARNING: rejected rule (exp -> empty) in state 173
WARNING: reduce/reduce conflict in state 193 resolved using rule (llamadaAFunct -> empty)
WARNING: rejected rule (exp -> empty) in state 193
WARNING: reduce/reduce conflict in state 242 resolved using rule (array -> empty)
WARNING: rejected rule (declare2Local -> empty) in state 242
WARNING: Rule (declareLocal -> empty) is never reduced
WARNING: Rule (cycles -> empty) is never reduced
WARNING: Rule (assignment -> empty) is never reduced
WARNING: Rule (declare2Local -> empty) is never reduced
