Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    RETURN
    NUMBER
    CIRCLIE
    MULTP
    ARCH
    DOT
    LESSEQ
    COLON
    GRTREQ
    CYCLE
    DIVIDE
    SPACE
    newline
    PAINT
    SQUARE
    CIRCLE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON program2 cuerpo END SEMICOLON
Rule 2     program2 -> declare program3
Rule 3     program2 -> empty
Rule 4     program3 -> funct program3
Rule 5     program3 -> empty
Rule 6     declare -> DECLARE type ID declare2 declare3 SEMICOLON
Rule 7     declare2 -> array
Rule 8     declare2 -> empty
Rule 9     declare3 -> COMMA declare3
Rule 10    declare3 -> empty
Rule 11    array -> LEFTBRACK exp RIGHTBRACK array
Rule 12    array -> empty
Rule 13    type -> TYPE type2
Rule 14    type2 -> INT
Rule 15    type2 -> FLOAT
Rule 16    type2 -> STRING
Rule 17    type2 -> BOOL
Rule 18    type2 -> VOID
Rule 19    cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 RIGHTKEY
Rule 20    cuerpo2 -> est
Rule 21    cuerpo2 -> empty
Rule 22    est -> conditional
Rule 23    est -> cycles
Rule 24    est -> input
Rule 25    est -> output
Rule 26    est -> assignment
Rule 27    est -> funct
Rule 28    assignment -> ID ASSGN ID SEMICOLON
Rule 29    conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
Rule 30    conditional2 -> exp conditional2
Rule 31    conditional2 -> empty
Rule 32    cycles -> while
Rule 33    cycles -> for
Rule 34    cycles -> do-while
Rule 35    do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR
Rule 36    while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
Rule 37    while2 -> exp while2
Rule 38    while2 -> empty
Rule 39    for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
Rule 40    arithmeticOp -> SUM
Rule 41    arithmeticOp -> MINUS
Rule 42    for2 -> ID ASSGN ID for2
Rule 43    for2 -> empty
Rule 44    for3 -> exp for3
Rule 45    for3 -> empty
Rule 46    exp -> ID array exp2 SEMICOLON
Rule 47    exp2 -> LESS
Rule 48    exp2 -> GRTR
Rule 49    exp2 -> EQ
Rule 50    exp2 -> NOTEQ
Rule 51    exp2 -> AND
Rule 52    exp2 -> OR
Rule 53    exp2 -> arithmeticExp
Rule 54    arithmeticExp -> ID EQ ID arithmeticOp ID arithmeticExp
Rule 55    arithmeticExp -> empty
Rule 56    exp2 -> empty
Rule 57    output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
Rule 58    output2 -> ID output2
Rule 59    output2 -> empty
Rule 60    input -> READ LEFTPAR ID RIGHTPAR SEMICOLON
Rule 61    funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
Rule 62    funct2 -> COMMA funct type ID funct2
Rule 63    funct2 -> empty
Rule 64    empty -> <empty>

Terminals, with rules where they appear

AND                  : 51
ARCH                 : 
ASSGN                : 28 42
BOOL                 : 17
CIRCLE               : 
CIRCLIE              : 
COLON                : 
COMMA                : 9 62
CYCLE                : 
DECLARE              : 6
DIVIDE               : 
DO                   : 35
DOT                  : 
ELSE                 : 29
END                  : 1
EQ                   : 49 54
FLOAT                : 15
FOR                  : 39
FUNCTION             : 61
GRTR                 : 48
GRTREQ               : 
ID                   : 1 6 28 28 39 42 42 46 54 54 54 58 60 61 61 62
IF                   : 29
INT                  : 14
LEFTBRACK            : 11
LEFTKEY              : 19 29 35 36 39 61
LEFTPAR              : 19 29 35 36 39 57 60 61
LESS                 : 47
LESSEQ               : 
MAIN                 : 19
MINUS                : 41
MULTP                : 
NOTEQ                : 50
NUMBER               : 
OR                   : 52
PAINT                : 
PROGRAM              : 1
QUOTE                : 57 57
READ                 : 60
RETURN               : 
RIGHTBRACK           : 11
RIGHTKEY             : 19 29 29 35 36 39 61
RIGHTPAR             : 19 29 35 36 39 57 60 61
SEMICOLON            : 1 1 6 28 39 39 46 57 60
SPACE                : 
SQUARE               : 
STRING               : 16
SUM                  : 40
TYPE                 : 13
VOID                 : 18
WHILE                : 35 36 36
WRITE                : 57
error                : 
newline              : 

Nonterminals, with rules where they appear

arithmeticExp        : 53 54
arithmeticOp         : 39 39 54
array                : 7 11 46
assignment           : 26
conditional          : 22
conditional2         : 29 30
cuerpo               : 1
cuerpo2              : 19
cycles               : 23
declare              : 2
declare2             : 6
declare3             : 6 9
do-while             : 34
empty                : 3 5 8 10 12 21 31 38 43 45 55 56 59 63
est                  : 20 29 29 35 36 39 61
exp                  : 11 30 37 44 57
exp2                 : 46
for                  : 33
for2                 : 39 42
for3                 : 39 44
funct                : 4 27 62
funct2               : 61 62
input                : 24
output               : 25
output2              : 57 58
program              : 0
program2             : 1
program3             : 2 4
type                 : 6 61 61 62
type2                : 13
while                : 32
while2               : 35 36 37

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON program2 cuerpo END SEMICOLON

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON program2 cuerpo END SEMICOLON

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON program2 cuerpo END SEMICOLON

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . program2 cuerpo END SEMICOLON
    (2) program2 -> . declare program3
    (3) program2 -> . empty
    (6) declare -> . DECLARE type ID declare2 declare3 SEMICOLON
    (64) empty -> .

    DECLARE         shift and go to state 6
    MAIN            reduce using rule 64 (empty -> .)

    program2                       shift and go to state 5
    declare                        shift and go to state 7
    empty                          shift and go to state 8

state 5

    (1) program -> PROGRAM ID SEMICOLON program2 . cuerpo END SEMICOLON
    (19) cuerpo -> . MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 RIGHTKEY

    MAIN            shift and go to state 10

    cuerpo                         shift and go to state 9

state 6

    (6) declare -> DECLARE . type ID declare2 declare3 SEMICOLON
    (13) type -> . TYPE type2

    TYPE            shift and go to state 11

    type                           shift and go to state 12

state 7

    (2) program2 -> declare . program3
    (4) program3 -> . funct program3
    (5) program3 -> . empty
    (61) funct -> . FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (64) empty -> .

    FUNCTION        shift and go to state 13
    MAIN            reduce using rule 64 (empty -> .)

    funct                          shift and go to state 14
    program3                       shift and go to state 15
    empty                          shift and go to state 16

state 8

    (3) program2 -> empty .

    MAIN            reduce using rule 3 (program2 -> empty .)


state 9

    (1) program -> PROGRAM ID SEMICOLON program2 cuerpo . END SEMICOLON

    END             shift and go to state 17


state 10

    (19) cuerpo -> MAIN . LEFTPAR RIGHTPAR LEFTKEY cuerpo2 RIGHTKEY

    LEFTPAR         shift and go to state 18


state 11

    (13) type -> TYPE . type2
    (14) type2 -> . INT
    (15) type2 -> . FLOAT
    (16) type2 -> . STRING
    (17) type2 -> . BOOL
    (18) type2 -> . VOID

    INT             shift and go to state 20
    FLOAT           shift and go to state 22
    STRING          shift and go to state 19
    BOOL            shift and go to state 23
    VOID            shift and go to state 21

    type2                          shift and go to state 24

state 12

    (6) declare -> DECLARE type . ID declare2 declare3 SEMICOLON

    ID              shift and go to state 25


state 13

    (61) funct -> FUNCTION . type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (13) type -> . TYPE type2

    TYPE            shift and go to state 11

    type                           shift and go to state 26

state 14

    (4) program3 -> funct . program3
    (4) program3 -> . funct program3
    (5) program3 -> . empty
    (61) funct -> . FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (64) empty -> .

    FUNCTION        shift and go to state 13
    MAIN            reduce using rule 64 (empty -> .)

    program3                       shift and go to state 27
    funct                          shift and go to state 14
    empty                          shift and go to state 16

state 15

    (2) program2 -> declare program3 .

    MAIN            reduce using rule 2 (program2 -> declare program3 .)


state 16

    (5) program3 -> empty .

    MAIN            reduce using rule 5 (program3 -> empty .)


state 17

    (1) program -> PROGRAM ID SEMICOLON program2 cuerpo END . SEMICOLON

    SEMICOLON       shift and go to state 28


state 18

    (19) cuerpo -> MAIN LEFTPAR . RIGHTPAR LEFTKEY cuerpo2 RIGHTKEY

    RIGHTPAR        shift and go to state 29


state 19

    (16) type2 -> STRING .

    ID              reduce using rule 16 (type2 -> STRING .)


state 20

    (14) type2 -> INT .

    ID              reduce using rule 14 (type2 -> INT .)


state 21

    (18) type2 -> VOID .

    ID              reduce using rule 18 (type2 -> VOID .)


state 22

    (15) type2 -> FLOAT .

    ID              reduce using rule 15 (type2 -> FLOAT .)


state 23

    (17) type2 -> BOOL .

    ID              reduce using rule 17 (type2 -> BOOL .)


state 24

    (13) type -> TYPE type2 .

    ID              reduce using rule 13 (type -> TYPE type2 .)


state 25

    (6) declare -> DECLARE type ID . declare2 declare3 SEMICOLON
    (7) declare2 -> . array
    (8) declare2 -> . empty
    (11) array -> . LEFTBRACK exp RIGHTBRACK array
    (12) array -> . empty
    (64) empty -> .

    LEFTBRACK       shift and go to state 30
    COMMA           reduce using rule 64 (empty -> .)
    SEMICOLON       reduce using rule 64 (empty -> .)

    declare2                       shift and go to state 31
    array                          shift and go to state 32
    empty                          shift and go to state 33

state 26

    (61) funct -> FUNCTION type . ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY

    ID              shift and go to state 34


state 27

    (4) program3 -> funct program3 .

    MAIN            reduce using rule 4 (program3 -> funct program3 .)


state 28

    (1) program -> PROGRAM ID SEMICOLON program2 cuerpo END SEMICOLON .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON program2 cuerpo END SEMICOLON .)


state 29

    (19) cuerpo -> MAIN LEFTPAR RIGHTPAR . LEFTKEY cuerpo2 RIGHTKEY

    LEFTKEY         shift and go to state 35


state 30

    (11) array -> LEFTBRACK . exp RIGHTBRACK array
    (46) exp -> . ID array exp2 SEMICOLON

    ID              shift and go to state 37

    exp                            shift and go to state 36

state 31

    (6) declare -> DECLARE type ID declare2 . declare3 SEMICOLON
    (9) declare3 -> . COMMA declare3
    (10) declare3 -> . empty
    (64) empty -> .

    COMMA           shift and go to state 39
    SEMICOLON       reduce using rule 64 (empty -> .)

    declare3                       shift and go to state 38
    empty                          shift and go to state 40

state 32

    (7) declare2 -> array .

    COMMA           reduce using rule 7 (declare2 -> array .)
    SEMICOLON       reduce using rule 7 (declare2 -> array .)


state 33

    (8) declare2 -> empty .
    (12) array -> empty .

  ! reduce/reduce conflict for COMMA resolved using rule 8 (declare2 -> empty .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 8 (declare2 -> empty .)
    COMMA           reduce using rule 8 (declare2 -> empty .)
    SEMICOLON       reduce using rule 8 (declare2 -> empty .)

  ! COMMA           [ reduce using rule 12 (array -> empty .) ]
  ! SEMICOLON       [ reduce using rule 12 (array -> empty .) ]


state 34

    (61) funct -> FUNCTION type ID . LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY

    LEFTPAR         shift and go to state 41


state 35

    (19) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY . cuerpo2 RIGHTKEY
    (20) cuerpo2 -> . est
    (21) cuerpo2 -> . empty
    (22) est -> . conditional
    (23) est -> . cycles
    (24) est -> . input
    (25) est -> . output
    (26) est -> . assignment
    (27) est -> . funct
    (64) empty -> .
    (29) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (32) cycles -> . while
    (33) cycles -> . for
    (34) cycles -> . do-while
    (60) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (57) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (28) assignment -> . ID ASSGN ID SEMICOLON
    (61) funct -> . FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (36) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (39) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (35) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    RIGHTKEY        reduce using rule 64 (empty -> .)
    IF              shift and go to state 56
    READ            shift and go to state 44
    WRITE           shift and go to state 54
    ID              shift and go to state 55
    FUNCTION        shift and go to state 13
    WHILE           shift and go to state 46
    FOR             shift and go to state 52
    DO              shift and go to state 42

    est                            shift and go to state 48
    for                            shift and go to state 49
    output                         shift and go to state 60
    assignment                     shift and go to state 53
    conditional                    shift and go to state 45
    while                          shift and go to state 58
    do-while                       shift and go to state 47
    cuerpo2                        shift and go to state 50
    funct                          shift and go to state 43
    input                          shift and go to state 51
    cycles                         shift and go to state 57
    empty                          shift and go to state 59

state 36

    (11) array -> LEFTBRACK exp . RIGHTBRACK array

    RIGHTBRACK      shift and go to state 61


state 37

    (46) exp -> ID . array exp2 SEMICOLON
    (11) array -> . LEFTBRACK exp RIGHTBRACK array
    (12) array -> . empty
    (64) empty -> .

    LEFTBRACK       shift and go to state 30
    LESS            reduce using rule 64 (empty -> .)
    GRTR            reduce using rule 64 (empty -> .)
    EQ              reduce using rule 64 (empty -> .)
    NOTEQ           reduce using rule 64 (empty -> .)
    AND             reduce using rule 64 (empty -> .)
    OR              reduce using rule 64 (empty -> .)
    ID              reduce using rule 64 (empty -> .)
    SEMICOLON       reduce using rule 64 (empty -> .)

    array                          shift and go to state 62
    empty                          shift and go to state 63

state 38

    (6) declare -> DECLARE type ID declare2 declare3 . SEMICOLON

    SEMICOLON       shift and go to state 64


state 39

    (9) declare3 -> COMMA . declare3
    (9) declare3 -> . COMMA declare3
    (10) declare3 -> . empty
    (64) empty -> .

    COMMA           shift and go to state 39
    SEMICOLON       reduce using rule 64 (empty -> .)

    declare3                       shift and go to state 65
    empty                          shift and go to state 40

state 40

    (10) declare3 -> empty .

    SEMICOLON       reduce using rule 10 (declare3 -> empty .)


state 41

    (61) funct -> FUNCTION type ID LEFTPAR . type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (13) type -> . TYPE type2

    TYPE            shift and go to state 11

    type                           shift and go to state 66

state 42

    (35) do-while -> DO . LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    LEFTKEY         shift and go to state 67


state 43

    (27) est -> funct .

    RIGHTKEY        reduce using rule 27 (est -> funct .)


state 44

    (60) input -> READ . LEFTPAR ID RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 68


state 45

    (22) est -> conditional .

    RIGHTKEY        reduce using rule 22 (est -> conditional .)


state 46

    (36) while -> WHILE . LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY

    LEFTPAR         shift and go to state 69


state 47

    (34) cycles -> do-while .

    RIGHTKEY        reduce using rule 34 (cycles -> do-while .)


state 48

    (20) cuerpo2 -> est .

    RIGHTKEY        reduce using rule 20 (cuerpo2 -> est .)


state 49

    (33) cycles -> for .

    RIGHTKEY        reduce using rule 33 (cycles -> for .)


state 50

    (19) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 . RIGHTKEY

    RIGHTKEY        shift and go to state 70


state 51

    (24) est -> input .

    RIGHTKEY        reduce using rule 24 (est -> input .)


state 52

    (39) for -> FOR . LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY

    LEFTPAR         shift and go to state 71


state 53

    (26) est -> assignment .

    RIGHTKEY        reduce using rule 26 (est -> assignment .)


state 54

    (57) output -> WRITE . LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 72


state 55

    (28) assignment -> ID . ASSGN ID SEMICOLON

    ASSGN           shift and go to state 73


state 56

    (29) conditional -> IF . LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY

    LEFTPAR         shift and go to state 74


state 57

    (23) est -> cycles .

    RIGHTKEY        reduce using rule 23 (est -> cycles .)


state 58

    (32) cycles -> while .

    RIGHTKEY        reduce using rule 32 (cycles -> while .)


state 59

    (21) cuerpo2 -> empty .

    RIGHTKEY        reduce using rule 21 (cuerpo2 -> empty .)


state 60

    (25) est -> output .

    RIGHTKEY        reduce using rule 25 (est -> output .)


state 61

    (11) array -> LEFTBRACK exp RIGHTBRACK . array
    (11) array -> . LEFTBRACK exp RIGHTBRACK array
    (12) array -> . empty
    (64) empty -> .

    LEFTBRACK       shift and go to state 30
    COMMA           reduce using rule 64 (empty -> .)
    SEMICOLON       reduce using rule 64 (empty -> .)
    LESS            reduce using rule 64 (empty -> .)
    GRTR            reduce using rule 64 (empty -> .)
    EQ              reduce using rule 64 (empty -> .)
    NOTEQ           reduce using rule 64 (empty -> .)
    AND             reduce using rule 64 (empty -> .)
    OR              reduce using rule 64 (empty -> .)
    ID              reduce using rule 64 (empty -> .)

    array                          shift and go to state 75
    empty                          shift and go to state 63

state 62

    (46) exp -> ID array . exp2 SEMICOLON
    (47) exp2 -> . LESS
    (48) exp2 -> . GRTR
    (49) exp2 -> . EQ
    (50) exp2 -> . NOTEQ
    (51) exp2 -> . AND
    (52) exp2 -> . OR
    (53) exp2 -> . arithmeticExp
    (56) exp2 -> . empty
    (54) arithmeticExp -> . ID EQ ID arithmeticOp ID arithmeticExp
    (55) arithmeticExp -> . empty
    (64) empty -> .

    LESS            shift and go to state 78
    GRTR            shift and go to state 82
    EQ              shift and go to state 83
    NOTEQ           shift and go to state 79
    AND             shift and go to state 76
    OR              shift and go to state 81
    ID              shift and go to state 84
    SEMICOLON       reduce using rule 64 (empty -> .)

    exp2                           shift and go to state 80
    arithmeticExp                  shift and go to state 77
    empty                          shift and go to state 85

state 63

    (12) array -> empty .

    COMMA           reduce using rule 12 (array -> empty .)
    SEMICOLON       reduce using rule 12 (array -> empty .)
    LESS            reduce using rule 12 (array -> empty .)
    GRTR            reduce using rule 12 (array -> empty .)
    EQ              reduce using rule 12 (array -> empty .)
    NOTEQ           reduce using rule 12 (array -> empty .)
    AND             reduce using rule 12 (array -> empty .)
    OR              reduce using rule 12 (array -> empty .)
    ID              reduce using rule 12 (array -> empty .)


state 64

    (6) declare -> DECLARE type ID declare2 declare3 SEMICOLON .

    FUNCTION        reduce using rule 6 (declare -> DECLARE type ID declare2 declare3 SEMICOLON .)
    MAIN            reduce using rule 6 (declare -> DECLARE type ID declare2 declare3 SEMICOLON .)


state 65

    (9) declare3 -> COMMA declare3 .

    SEMICOLON       reduce using rule 9 (declare3 -> COMMA declare3 .)


state 66

    (61) funct -> FUNCTION type ID LEFTPAR type . ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY

    ID              shift and go to state 86


state 67

    (35) do-while -> DO LEFTKEY . est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR
    (22) est -> . conditional
    (23) est -> . cycles
    (24) est -> . input
    (25) est -> . output
    (26) est -> . assignment
    (27) est -> . funct
    (29) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (32) cycles -> . while
    (33) cycles -> . for
    (34) cycles -> . do-while
    (60) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (57) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (28) assignment -> . ID ASSGN ID SEMICOLON
    (61) funct -> . FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (36) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (39) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (35) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 56
    READ            shift and go to state 44
    WRITE           shift and go to state 54
    ID              shift and go to state 55
    FUNCTION        shift and go to state 13
    WHILE           shift and go to state 46
    FOR             shift and go to state 52
    DO              shift and go to state 42

    est                            shift and go to state 87
    for                            shift and go to state 49
    funct                          shift and go to state 43
    assignment                     shift and go to state 53
    conditional                    shift and go to state 45
    while                          shift and go to state 58
    do-while                       shift and go to state 47
    input                          shift and go to state 51
    output                         shift and go to state 60
    cycles                         shift and go to state 57

state 68

    (60) input -> READ LEFTPAR . ID RIGHTPAR SEMICOLON

    ID              shift and go to state 88


state 69

    (36) while -> WHILE LEFTPAR . while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (37) while2 -> . exp while2
    (38) while2 -> . empty
    (46) exp -> . ID array exp2 SEMICOLON
    (64) empty -> .

    ID              shift and go to state 37
    RIGHTPAR        reduce using rule 64 (empty -> .)

    while2                         shift and go to state 89
    exp                            shift and go to state 90
    empty                          shift and go to state 91

state 70

    (19) cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 RIGHTKEY .

    END             reduce using rule 19 (cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 RIGHTKEY .)


state 71

    (39) for -> FOR LEFTPAR . for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (42) for2 -> . ID ASSGN ID for2
    (43) for2 -> . empty
    (64) empty -> .

    ID              shift and go to state 93
    SEMICOLON       reduce using rule 64 (empty -> .)

    for2                           shift and go to state 92
    empty                          shift and go to state 94

state 72

    (57) output -> WRITE LEFTPAR . output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (58) output2 -> . ID output2
    (59) output2 -> . empty
    (64) empty -> .

    ID              shift and go to state 96
    QUOTE           reduce using rule 64 (empty -> .)

    output2                        shift and go to state 95
    empty                          shift and go to state 97

state 73

    (28) assignment -> ID ASSGN . ID SEMICOLON

    ID              shift and go to state 98


state 74

    (29) conditional -> IF LEFTPAR . conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (30) conditional2 -> . exp conditional2
    (31) conditional2 -> . empty
    (46) exp -> . ID array exp2 SEMICOLON
    (64) empty -> .

    ID              shift and go to state 37
    RIGHTPAR        reduce using rule 64 (empty -> .)

    conditional2                   shift and go to state 101
    exp                            shift and go to state 100
    empty                          shift and go to state 99

state 75

    (11) array -> LEFTBRACK exp RIGHTBRACK array .

    COMMA           reduce using rule 11 (array -> LEFTBRACK exp RIGHTBRACK array .)
    SEMICOLON       reduce using rule 11 (array -> LEFTBRACK exp RIGHTBRACK array .)
    LESS            reduce using rule 11 (array -> LEFTBRACK exp RIGHTBRACK array .)
    GRTR            reduce using rule 11 (array -> LEFTBRACK exp RIGHTBRACK array .)
    EQ              reduce using rule 11 (array -> LEFTBRACK exp RIGHTBRACK array .)
    NOTEQ           reduce using rule 11 (array -> LEFTBRACK exp RIGHTBRACK array .)
    AND             reduce using rule 11 (array -> LEFTBRACK exp RIGHTBRACK array .)
    OR              reduce using rule 11 (array -> LEFTBRACK exp RIGHTBRACK array .)
    ID              reduce using rule 11 (array -> LEFTBRACK exp RIGHTBRACK array .)


state 76

    (51) exp2 -> AND .

    SEMICOLON       reduce using rule 51 (exp2 -> AND .)


state 77

    (53) exp2 -> arithmeticExp .

    SEMICOLON       reduce using rule 53 (exp2 -> arithmeticExp .)


state 78

    (47) exp2 -> LESS .

    SEMICOLON       reduce using rule 47 (exp2 -> LESS .)


state 79

    (50) exp2 -> NOTEQ .

    SEMICOLON       reduce using rule 50 (exp2 -> NOTEQ .)


state 80

    (46) exp -> ID array exp2 . SEMICOLON

    SEMICOLON       shift and go to state 102


state 81

    (52) exp2 -> OR .

    SEMICOLON       reduce using rule 52 (exp2 -> OR .)


state 82

    (48) exp2 -> GRTR .

    SEMICOLON       reduce using rule 48 (exp2 -> GRTR .)


state 83

    (49) exp2 -> EQ .

    SEMICOLON       reduce using rule 49 (exp2 -> EQ .)


state 84

    (54) arithmeticExp -> ID . EQ ID arithmeticOp ID arithmeticExp

    EQ              shift and go to state 103


state 85

    (56) exp2 -> empty .
    (55) arithmeticExp -> empty .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 55 (arithmeticExp -> empty .)
    SEMICOLON       reduce using rule 55 (arithmeticExp -> empty .)

  ! SEMICOLON       [ reduce using rule 56 (exp2 -> empty .) ]


state 86

    (61) funct -> FUNCTION type ID LEFTPAR type ID . funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (62) funct2 -> . COMMA funct type ID funct2
    (63) funct2 -> . empty
    (64) empty -> .

    COMMA           shift and go to state 105
    RIGHTPAR        reduce using rule 64 (empty -> .)

    funct2                         shift and go to state 104
    empty                          shift and go to state 106

state 87

    (35) do-while -> DO LEFTKEY est . RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    RIGHTKEY        shift and go to state 107


state 88

    (60) input -> READ LEFTPAR ID . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 108


state 89

    (36) while -> WHILE LEFTPAR while2 . RIGHTPAR WHILE LEFTKEY est RIGHTKEY

    RIGHTPAR        shift and go to state 109


state 90

    (37) while2 -> exp . while2
    (37) while2 -> . exp while2
    (38) while2 -> . empty
    (46) exp -> . ID array exp2 SEMICOLON
    (64) empty -> .

    ID              shift and go to state 37
    RIGHTPAR        reduce using rule 64 (empty -> .)

    while2                         shift and go to state 110
    empty                          shift and go to state 91
    exp                            shift and go to state 90

state 91

    (38) while2 -> empty .

    RIGHTPAR        reduce using rule 38 (while2 -> empty .)


state 92

    (39) for -> FOR LEFTPAR for2 . SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY

    SEMICOLON       shift and go to state 111


state 93

    (42) for2 -> ID . ASSGN ID for2

    ASSGN           shift and go to state 112


state 94

    (43) for2 -> empty .

    SEMICOLON       reduce using rule 43 (for2 -> empty .)


state 95

    (57) output -> WRITE LEFTPAR output2 . QUOTE exp QUOTE RIGHTPAR SEMICOLON

    QUOTE           shift and go to state 113


state 96

    (58) output2 -> ID . output2
    (58) output2 -> . ID output2
    (59) output2 -> . empty
    (64) empty -> .

    ID              shift and go to state 96
    QUOTE           reduce using rule 64 (empty -> .)

    output2                        shift and go to state 114
    empty                          shift and go to state 97

state 97

    (59) output2 -> empty .

    QUOTE           reduce using rule 59 (output2 -> empty .)


state 98

    (28) assignment -> ID ASSGN ID . SEMICOLON

    SEMICOLON       shift and go to state 115


state 99

    (31) conditional2 -> empty .

    RIGHTPAR        reduce using rule 31 (conditional2 -> empty .)


state 100

    (30) conditional2 -> exp . conditional2
    (30) conditional2 -> . exp conditional2
    (31) conditional2 -> . empty
    (46) exp -> . ID array exp2 SEMICOLON
    (64) empty -> .

    ID              shift and go to state 37
    RIGHTPAR        reduce using rule 64 (empty -> .)

    empty                          shift and go to state 99
    conditional2                   shift and go to state 116
    exp                            shift and go to state 100

state 101

    (29) conditional -> IF LEFTPAR conditional2 . RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY

    RIGHTPAR        shift and go to state 117


state 102

    (46) exp -> ID array exp2 SEMICOLON .

    QUOTE           reduce using rule 46 (exp -> ID array exp2 SEMICOLON .)
    ID              reduce using rule 46 (exp -> ID array exp2 SEMICOLON .)
    SEMICOLON       reduce using rule 46 (exp -> ID array exp2 SEMICOLON .)
    RIGHTPAR        reduce using rule 46 (exp -> ID array exp2 SEMICOLON .)
    RIGHTBRACK      reduce using rule 46 (exp -> ID array exp2 SEMICOLON .)


state 103

    (54) arithmeticExp -> ID EQ . ID arithmeticOp ID arithmeticExp

    ID              shift and go to state 118


state 104

    (61) funct -> FUNCTION type ID LEFTPAR type ID funct2 . RIGHTPAR LEFTKEY est RIGHTKEY

    RIGHTPAR        shift and go to state 119


state 105

    (62) funct2 -> COMMA . funct type ID funct2
    (61) funct -> . FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY

    FUNCTION        shift and go to state 13

    funct                          shift and go to state 120

state 106

    (63) funct2 -> empty .

    RIGHTPAR        reduce using rule 63 (funct2 -> empty .)


state 107

    (35) do-while -> DO LEFTKEY est RIGHTKEY . WHILE LEFTPAR while2 RIGHTPAR

    WHILE           shift and go to state 121


state 108

    (60) input -> READ LEFTPAR ID RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 122


state 109

    (36) while -> WHILE LEFTPAR while2 RIGHTPAR . WHILE LEFTKEY est RIGHTKEY

    WHILE           shift and go to state 123


state 110

    (37) while2 -> exp while2 .

    RIGHTPAR        reduce using rule 37 (while2 -> exp while2 .)


state 111

    (39) for -> FOR LEFTPAR for2 SEMICOLON . for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (44) for3 -> . exp for3
    (45) for3 -> . empty
    (46) exp -> . ID array exp2 SEMICOLON
    (64) empty -> .

    ID              shift and go to state 37
    SEMICOLON       reduce using rule 64 (empty -> .)

    exp                            shift and go to state 124
    for3                           shift and go to state 125
    empty                          shift and go to state 126

state 112

    (42) for2 -> ID ASSGN . ID for2

    ID              shift and go to state 127


state 113

    (57) output -> WRITE LEFTPAR output2 QUOTE . exp QUOTE RIGHTPAR SEMICOLON
    (46) exp -> . ID array exp2 SEMICOLON

    ID              shift and go to state 37

    exp                            shift and go to state 128

state 114

    (58) output2 -> ID output2 .

    QUOTE           reduce using rule 58 (output2 -> ID output2 .)


state 115

    (28) assignment -> ID ASSGN ID SEMICOLON .

    RIGHTKEY        reduce using rule 28 (assignment -> ID ASSGN ID SEMICOLON .)


state 116

    (30) conditional2 -> exp conditional2 .

    RIGHTPAR        reduce using rule 30 (conditional2 -> exp conditional2 .)


state 117

    (29) conditional -> IF LEFTPAR conditional2 RIGHTPAR . LEFTKEY est RIGHTKEY ELSE est RIGHTKEY

    LEFTKEY         shift and go to state 129


state 118

    (54) arithmeticExp -> ID EQ ID . arithmeticOp ID arithmeticExp
    (40) arithmeticOp -> . SUM
    (41) arithmeticOp -> . MINUS

    SUM             shift and go to state 131
    MINUS           shift and go to state 132

    arithmeticOp                   shift and go to state 130

state 119

    (61) funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR . LEFTKEY est RIGHTKEY

    LEFTKEY         shift and go to state 133


state 120

    (62) funct2 -> COMMA funct . type ID funct2
    (13) type -> . TYPE type2

    TYPE            shift and go to state 11

    type                           shift and go to state 134

state 121

    (35) do-while -> DO LEFTKEY est RIGHTKEY WHILE . LEFTPAR while2 RIGHTPAR

    LEFTPAR         shift and go to state 135


state 122

    (60) input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .

    RIGHTKEY        reduce using rule 60 (input -> READ LEFTPAR ID RIGHTPAR SEMICOLON .)


state 123

    (36) while -> WHILE LEFTPAR while2 RIGHTPAR WHILE . LEFTKEY est RIGHTKEY

    LEFTKEY         shift and go to state 136


state 124

    (44) for3 -> exp . for3
    (44) for3 -> . exp for3
    (45) for3 -> . empty
    (46) exp -> . ID array exp2 SEMICOLON
    (64) empty -> .

    ID              shift and go to state 37
    SEMICOLON       reduce using rule 64 (empty -> .)

    for3                           shift and go to state 137
    empty                          shift and go to state 126
    exp                            shift and go to state 124

state 125

    (39) for -> FOR LEFTPAR for2 SEMICOLON for3 . SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY

    SEMICOLON       shift and go to state 138


state 126

    (45) for3 -> empty .

    SEMICOLON       reduce using rule 45 (for3 -> empty .)


state 127

    (42) for2 -> ID ASSGN ID . for2
    (42) for2 -> . ID ASSGN ID for2
    (43) for2 -> . empty
    (64) empty -> .

    ID              shift and go to state 93
    SEMICOLON       reduce using rule 64 (empty -> .)

    for2                           shift and go to state 139
    empty                          shift and go to state 94

state 128

    (57) output -> WRITE LEFTPAR output2 QUOTE exp . QUOTE RIGHTPAR SEMICOLON

    QUOTE           shift and go to state 140


state 129

    (29) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY . est RIGHTKEY ELSE est RIGHTKEY
    (22) est -> . conditional
    (23) est -> . cycles
    (24) est -> . input
    (25) est -> . output
    (26) est -> . assignment
    (27) est -> . funct
    (29) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (32) cycles -> . while
    (33) cycles -> . for
    (34) cycles -> . do-while
    (60) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (57) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (28) assignment -> . ID ASSGN ID SEMICOLON
    (61) funct -> . FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (36) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (39) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (35) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 56
    READ            shift and go to state 44
    WRITE           shift and go to state 54
    ID              shift and go to state 55
    FUNCTION        shift and go to state 13
    WHILE           shift and go to state 46
    FOR             shift and go to state 52
    DO              shift and go to state 42

    est                            shift and go to state 141
    for                            shift and go to state 49
    funct                          shift and go to state 43
    assignment                     shift and go to state 53
    conditional                    shift and go to state 45
    while                          shift and go to state 58
    do-while                       shift and go to state 47
    output                         shift and go to state 60
    input                          shift and go to state 51
    cycles                         shift and go to state 57

state 130

    (54) arithmeticExp -> ID EQ ID arithmeticOp . ID arithmeticExp

    ID              shift and go to state 142


state 131

    (40) arithmeticOp -> SUM .

    SUM             reduce using rule 40 (arithmeticOp -> SUM .)
    MINUS           reduce using rule 40 (arithmeticOp -> SUM .)
    ID              reduce using rule 40 (arithmeticOp -> SUM .)
    RIGHTPAR        reduce using rule 40 (arithmeticOp -> SUM .)


state 132

    (41) arithmeticOp -> MINUS .

    SUM             reduce using rule 41 (arithmeticOp -> MINUS .)
    MINUS           reduce using rule 41 (arithmeticOp -> MINUS .)
    ID              reduce using rule 41 (arithmeticOp -> MINUS .)
    RIGHTPAR        reduce using rule 41 (arithmeticOp -> MINUS .)


state 133

    (61) funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY . est RIGHTKEY
    (22) est -> . conditional
    (23) est -> . cycles
    (24) est -> . input
    (25) est -> . output
    (26) est -> . assignment
    (27) est -> . funct
    (29) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (32) cycles -> . while
    (33) cycles -> . for
    (34) cycles -> . do-while
    (60) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (57) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (28) assignment -> . ID ASSGN ID SEMICOLON
    (61) funct -> . FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (36) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (39) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (35) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 56
    READ            shift and go to state 44
    WRITE           shift and go to state 54
    ID              shift and go to state 55
    FUNCTION        shift and go to state 13
    WHILE           shift and go to state 46
    FOR             shift and go to state 52
    DO              shift and go to state 42

    est                            shift and go to state 143
    for                            shift and go to state 49
    funct                          shift and go to state 43
    assignment                     shift and go to state 53
    conditional                    shift and go to state 45
    while                          shift and go to state 58
    do-while                       shift and go to state 47
    output                         shift and go to state 60
    input                          shift and go to state 51
    cycles                         shift and go to state 57

state 134

    (62) funct2 -> COMMA funct type . ID funct2

    ID              shift and go to state 144


state 135

    (35) do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR . while2 RIGHTPAR
    (37) while2 -> . exp while2
    (38) while2 -> . empty
    (46) exp -> . ID array exp2 SEMICOLON
    (64) empty -> .

    ID              shift and go to state 37
    RIGHTPAR        reduce using rule 64 (empty -> .)

    while2                         shift and go to state 145
    exp                            shift and go to state 90
    empty                          shift and go to state 91

state 136

    (36) while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY . est RIGHTKEY
    (22) est -> . conditional
    (23) est -> . cycles
    (24) est -> . input
    (25) est -> . output
    (26) est -> . assignment
    (27) est -> . funct
    (29) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (32) cycles -> . while
    (33) cycles -> . for
    (34) cycles -> . do-while
    (60) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (57) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (28) assignment -> . ID ASSGN ID SEMICOLON
    (61) funct -> . FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (36) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (39) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (35) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 56
    READ            shift and go to state 44
    WRITE           shift and go to state 54
    ID              shift and go to state 55
    FUNCTION        shift and go to state 13
    WHILE           shift and go to state 46
    FOR             shift and go to state 52
    DO              shift and go to state 42

    est                            shift and go to state 146
    for                            shift and go to state 49
    funct                          shift and go to state 43
    assignment                     shift and go to state 53
    conditional                    shift and go to state 45
    while                          shift and go to state 58
    do-while                       shift and go to state 47
    input                          shift and go to state 51
    output                         shift and go to state 60
    cycles                         shift and go to state 57

state 137

    (44) for3 -> exp for3 .

    SEMICOLON       reduce using rule 44 (for3 -> exp for3 .)


state 138

    (39) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON . ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY

    ID              shift and go to state 147


state 139

    (42) for2 -> ID ASSGN ID for2 .

    SEMICOLON       reduce using rule 42 (for2 -> ID ASSGN ID for2 .)


state 140

    (57) output -> WRITE LEFTPAR output2 QUOTE exp QUOTE . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 148


state 141

    (29) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est . RIGHTKEY ELSE est RIGHTKEY

    RIGHTKEY        shift and go to state 149


state 142

    (54) arithmeticExp -> ID EQ ID arithmeticOp ID . arithmeticExp
    (54) arithmeticExp -> . ID EQ ID arithmeticOp ID arithmeticExp
    (55) arithmeticExp -> . empty
    (64) empty -> .

    ID              shift and go to state 84
    SEMICOLON       reduce using rule 64 (empty -> .)

    arithmeticExp                  shift and go to state 150
    empty                          shift and go to state 151

state 143

    (61) funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 152


state 144

    (62) funct2 -> COMMA funct type ID . funct2
    (62) funct2 -> . COMMA funct type ID funct2
    (63) funct2 -> . empty
    (64) empty -> .

    COMMA           shift and go to state 105
    RIGHTPAR        reduce using rule 64 (empty -> .)

    funct2                         shift and go to state 153
    empty                          shift and go to state 106

state 145

    (35) do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 . RIGHTPAR

    RIGHTPAR        shift and go to state 154


state 146

    (36) while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 155


state 147

    (39) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID . arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (40) arithmeticOp -> . SUM
    (41) arithmeticOp -> . MINUS

    SUM             shift and go to state 131
    MINUS           shift and go to state 132

    arithmeticOp                   shift and go to state 156

state 148

    (57) output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 157


state 149

    (29) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY . ELSE est RIGHTKEY

    ELSE            shift and go to state 158


state 150

    (54) arithmeticExp -> ID EQ ID arithmeticOp ID arithmeticExp .

    SEMICOLON       reduce using rule 54 (arithmeticExp -> ID EQ ID arithmeticOp ID arithmeticExp .)


state 151

    (55) arithmeticExp -> empty .

    SEMICOLON       reduce using rule 55 (arithmeticExp -> empty .)


state 152

    (61) funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY .

    TYPE            reduce using rule 61 (funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    RIGHTKEY        reduce using rule 61 (funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    FUNCTION        reduce using rule 61 (funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)
    MAIN            reduce using rule 61 (funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY .)


state 153

    (62) funct2 -> COMMA funct type ID funct2 .

    RIGHTPAR        reduce using rule 62 (funct2 -> COMMA funct type ID funct2 .)


state 154

    (35) do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .

    RIGHTKEY        reduce using rule 35 (do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR .)


state 155

    (36) while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY .

    RIGHTKEY        reduce using rule 36 (while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY .)


state 156

    (39) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp . arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (40) arithmeticOp -> . SUM
    (41) arithmeticOp -> . MINUS

    SUM             shift and go to state 131
    MINUS           shift and go to state 132

    arithmeticOp                   shift and go to state 159

state 157

    (57) output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON .

    RIGHTKEY        reduce using rule 57 (output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON .)


state 158

    (29) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE . est RIGHTKEY
    (22) est -> . conditional
    (23) est -> . cycles
    (24) est -> . input
    (25) est -> . output
    (26) est -> . assignment
    (27) est -> . funct
    (29) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (32) cycles -> . while
    (33) cycles -> . for
    (34) cycles -> . do-while
    (60) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (57) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (28) assignment -> . ID ASSGN ID SEMICOLON
    (61) funct -> . FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (36) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (39) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (35) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 56
    READ            shift and go to state 44
    WRITE           shift and go to state 54
    ID              shift and go to state 55
    FUNCTION        shift and go to state 13
    WHILE           shift and go to state 46
    FOR             shift and go to state 52
    DO              shift and go to state 42

    est                            shift and go to state 160
    for                            shift and go to state 49
    funct                          shift and go to state 43
    assignment                     shift and go to state 53
    conditional                    shift and go to state 45
    while                          shift and go to state 58
    do-while                       shift and go to state 47
    output                         shift and go to state 60
    input                          shift and go to state 51
    cycles                         shift and go to state 57

state 159

    (39) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp . RIGHTPAR LEFTKEY est RIGHTKEY

    RIGHTPAR        shift and go to state 161


state 160

    (29) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est . RIGHTKEY

    RIGHTKEY        shift and go to state 162


state 161

    (39) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR . LEFTKEY est RIGHTKEY

    LEFTKEY         shift and go to state 163


state 162

    (29) conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY .

    RIGHTKEY        reduce using rule 29 (conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY .)


state 163

    (39) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY . est RIGHTKEY
    (22) est -> . conditional
    (23) est -> . cycles
    (24) est -> . input
    (25) est -> . output
    (26) est -> . assignment
    (27) est -> . funct
    (29) conditional -> . IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY
    (32) cycles -> . while
    (33) cycles -> . for
    (34) cycles -> . do-while
    (60) input -> . READ LEFTPAR ID RIGHTPAR SEMICOLON
    (57) output -> . WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON
    (28) assignment -> . ID ASSGN ID SEMICOLON
    (61) funct -> . FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY
    (36) while -> . WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY
    (39) for -> . FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY
    (35) do-while -> . DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR

    IF              shift and go to state 56
    READ            shift and go to state 44
    WRITE           shift and go to state 54
    ID              shift and go to state 55
    FUNCTION        shift and go to state 13
    WHILE           shift and go to state 46
    FOR             shift and go to state 52
    DO              shift and go to state 42

    est                            shift and go to state 164
    for                            shift and go to state 49
    output                         shift and go to state 60
    assignment                     shift and go to state 53
    conditional                    shift and go to state 45
    funct                          shift and go to state 43
    while                          shift and go to state 58
    do-while                       shift and go to state 47
    input                          shift and go to state 51
    cycles                         shift and go to state 57

state 164

    (39) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est . RIGHTKEY

    RIGHTKEY        shift and go to state 165


state 165

    (39) for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY .

    RIGHTKEY        reduce using rule 39 (for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 33 resolved using rule (declare2 -> empty)
WARNING: rejected rule (array -> empty) in state 33
WARNING: reduce/reduce conflict in state 85 resolved using rule (arithmeticExp -> empty)
WARNING: rejected rule (exp2 -> empty) in state 85
WARNING: Rule (exp2 -> empty) is never reduced
