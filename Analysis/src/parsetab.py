
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSGN BOOL COLON COMMA CYCLE DECLARE DIVIDE DO DOT ELSE END EQ FLOAT FLOATNUMB FOR FUNCTION GRTR GRTREQ ID IF INT INTEGER LEFTBRACK LEFTBRACK LEFTKEY LEFTPAR LESS LESSEQ MAIN MINUS MULTP NOTEQ NUMBER OR PROGRAM QUOTE READ RIGHTBRACK RIGHTKEY RIGHTPAR SEMICOLON SPACE STRING SUM TYPE VOID WHILE WRITE newlineprogram : PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLONgoToMainQuad : altaPrograma : program2 : declare program3program2 : emptydeclare : DECLARE declareRecursivo declare : emptydeclareRecursivo : type ID altaVarGlobal declare2 declare3 SEMICOLON declareRecursivodeclare2 : arraydeclare3 : COMMA  ID altaVarGlobal declare3 program3 : funct program3funct : FUNCTION type ID altaModulo LEFTPAR funct2  RIGHTPAR LEFTKEY est RIGHTKEYaltaModulo : funct2 : type ID funct3funct3 : COMMA funct type ID funct3funct2 : emptyfunct3 : emptyprogram3 : emptyaltaVarGlobal : declareRecursivo : emptydeclare3 : emptyarray : LEFTBRACK exp RIGHTBRACK arrayarray : emptytype : type2type2 : INTtype2 : FLOATtype2 : STRINGtype2 : BOOLtype2 : VOIDcuerpo : MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain  est RIGHTKEYaltaModuloMain : est : conditional est est : declareLocal declareLocal : DECLARE declareRecursivoLocal declareRecursivoLocal : type ID assignmentDecl altaVarLocal declare2Local declare3Local SEMICOLON declareRecursivoLocalassignmentDecl : ASSGN FLOATNUMB assignmentDecl : emptydeclare2Local : arraydeclare3Local : COMMA ID assignmentDecl altaVarLocal declare3Local declareRecursivoLocal : emptydeclareLocal : emptydeclare2Local : emptydeclare3Local : emptyaltaVarLocal : est : cycles estest : input estest : output estest : assignment estest : funct estest : emptyassignment : ID ASSGN NUMBER SEMICOLONassignment : emptyconditional : IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEYconditional2 : exp conditional2conditional2 : emptycycles : whilecycles : forcycles : do-whiledo-while : DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPARwhile : WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEYwhile2 : exp while2while2 : emptyfor : FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEYarithmeticOp : SUMarithmeticOp : MINUSfor2 : ID ASSGN ID for2for2 : emptyfor3 : exp for3for3 : emptyexp : ID array exp2 SEMICOLONexp2 : LESSexp2 : GRTRexp2 : EQexp2 : NOTEQexp2 : ANDexp2 : ORexp2 : arithmeticExparithmeticExp : ID EQ ID arithmeticOp ID arithmeticExparithmeticExp : emptyoutput : WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLONoutput2 : ID output2output2 : emptyinput : READ LEFTPAR ID RIGHTPAR SEMICOLONempty :'
    
_lr_action_items = {'DO':([40,47,56,58,60,62,63,65,70,71,72,73,90,110,141,150,153,162,166,185,186,188,191,198,199,202,],[-31,55,55,55,-58,-57,55,55,55,-56,-52,55,55,55,-51,-12,-83,55,55,-59,-60,-80,55,-53,55,-63,]),'FLOAT':([7,20,46,50,68,132,150,190,],[14,14,14,14,14,14,-12,14,]),'LESS':([38,42,48,49,75,],[-23,-84,-84,78,-22,]),'NOTEQ':([38,42,48,49,75,],[-23,-84,-84,79,-22,]),'VOID':([7,20,46,50,68,132,150,190,],[13,13,13,13,13,13,-12,13,]),'NUMBER':([100,],[125,]),'WHILE':([40,47,56,58,60,62,63,65,70,71,72,73,90,110,133,135,141,150,153,162,166,185,186,188,191,198,199,202,],[-31,59,59,59,-58,-57,59,59,59,-56,-52,59,59,59,152,154,-51,-12,-83,59,59,-59,-60,-80,59,-53,59,-63,]),'PROGRAM':([0,],[2,]),'RIGHTKEY':([40,47,56,58,60,61,62,63,65,68,70,71,72,73,74,90,91,93,96,98,101,103,105,106,110,114,131,141,150,153,162,166,174,178,185,186,188,190,191,194,195,198,199,201,202,],[-31,-84,-84,-84,-58,95,-57,-84,-84,-84,-84,-56,-41,-84,-33,-84,-49,-32,-46,-48,-34,-40,-45,-47,-84,133,150,-51,-12,-83,-84,-84,184,186,-59,-60,-80,-84,-84,-35,198,-53,-84,202,-63,]),'MINUS':([130,148,149,179,187,],[149,-64,-65,149,149,]),'SEMICOLON':([3,4,26,29,31,36,37,38,42,43,45,48,49,51,75,76,77,78,79,80,81,82,83,85,87,97,107,109,119,121,125,126,134,137,143,144,155,156,157,158,160,161,163,167,169,171,172,173,175,180,182,183,189,193,197,200,],[-3,5,-19,33,-84,-84,-9,-23,-84,50,-21,-84,-84,-19,-22,-75,-77,-71,-74,107,-76,-72,-73,-79,-84,-84,-70,-10,137,-67,141,-84,153,-84,-44,-37,-84,168,-69,-84,-36,-84,-84,-68,-66,-84,-38,-23,-78,188,-43,190,-84,-44,-84,-39,]),'QUOTE':([99,107,122,123,124,140,159,],[-84,-70,139,-84,-82,-81,170,]),'RIGHTPAR':([30,46,52,54,89,94,104,107,111,113,115,116,117,118,127,128,129,136,145,148,149,164,165,170,176,177,192,],[34,-84,88,-16,-84,-84,-84,-70,-14,-17,134,135,-84,-62,-55,-84,146,-61,-54,-64,-65,-84,-84,180,-15,185,196,]),'READ':([40,47,56,58,60,62,63,65,70,71,72,73,90,110,141,150,153,162,166,185,186,188,191,198,199,202,],[-31,57,57,57,-58,-57,57,57,57,-56,-52,57,57,57,-51,-12,-83,57,57,-59,-60,-80,57,-53,57,-63,]),'COMMA':([26,31,36,37,38,48,51,75,87,89,126,143,144,160,161,164,171,172,173,189,193,197,],[-19,-84,44,-9,-23,-84,-19,-22,44,112,-84,-44,-37,-36,-84,112,181,-38,-23,-84,-44,181,]),'IF':([40,47,56,58,60,62,63,65,70,71,72,73,90,110,141,150,153,162,166,185,186,188,191,198,199,202,],[-31,69,69,69,-58,-57,69,69,69,-56,-52,69,69,69,-51,-12,-83,69,69,-59,-60,-80,69,-53,69,-63,]),'SUM':([130,148,149,179,187,],[148,-64,-65,148,148,]),'$end':([1,33,],[0,-1,]),'FUNCTION':([5,7,8,9,16,18,21,40,47,50,56,58,60,62,63,65,70,71,72,73,86,90,110,112,141,150,153,162,166,185,186,188,191,198,199,202,],[-84,-84,20,-7,-6,-20,20,-31,20,-84,20,20,-58,-57,20,20,20,-56,-52,20,-8,20,20,20,-51,-12,-83,20,20,-59,-60,-80,20,-53,20,-63,]),'RIGHTBRACK':([41,107,],[48,-70,]),'END':([24,95,],[29,-30,]),'STRING':([7,20,46,50,68,132,150,190,],[11,11,11,11,11,11,-12,11,]),'FOR':([40,47,56,58,60,62,63,65,70,71,72,73,90,110,141,150,153,162,166,185,186,188,191,198,199,202,],[-31,64,64,64,-58,-57,64,64,64,-56,-52,64,64,64,-51,-12,-83,64,64,-59,-60,-80,64,-53,64,-63,]),'ELSE':([184,],[191,]),'WRITE':([40,47,56,58,60,62,63,65,70,71,72,73,90,110,141,150,153,162,166,185,186,188,191,198,199,202,],[-31,66,66,66,-58,-57,66,66,66,-56,-52,66,66,66,-51,-12,-83,66,66,-59,-60,-80,66,-53,66,-63,]),'GRTR':([38,42,48,49,75,],[-23,-84,-84,82,-22,]),'FLOATNUMB':([142,],[160,]),'ID':([2,11,12,13,14,15,17,19,27,35,38,40,42,44,47,48,49,53,56,58,60,62,63,65,70,71,72,73,75,90,92,94,97,99,102,104,107,108,110,117,123,128,137,138,139,141,147,148,149,150,151,153,155,158,162,163,165,166,168,181,185,186,188,191,198,199,202,],[3,-27,-25,-29,-26,-28,26,-24,32,42,-23,-31,-84,51,67,-84,84,89,67,67,-58,-57,67,67,67,-56,-52,67,-22,67,115,42,120,123,126,42,-70,130,67,42,123,42,42,158,42,-51,163,-64,-65,-12,164,-83,42,120,67,84,42,67,179,189,-59,-60,-80,67,-53,67,-63,]),'EQ':([38,42,48,49,75,84,],[-23,-84,-84,83,-22,108,]),'DECLARE':([5,40,47,56,58,60,62,63,65,70,71,72,73,90,110,141,150,153,162,166,185,186,188,191,198,199,202,],[7,-31,68,68,68,-58,-57,68,68,68,-56,-52,68,68,68,-51,-12,-83,68,68,-59,-60,-80,68,-53,68,-63,]),'LEFTKEY':([34,55,88,146,154,196,],[40,90,110,162,166,199,]),'AND':([38,42,48,49,75,],[-23,-84,-84,76,-22,]),'ASSGN':([67,120,126,189,],[100,138,142,142,]),'INT':([7,20,46,50,68,132,150,190,],[12,12,12,12,12,12,-12,12,]),'LEFTBRACK':([26,31,42,48,126,143,144,160,161,],[-19,35,35,35,-84,-44,-37,-36,35,]),'LEFTPAR':([25,32,39,57,59,64,66,69,152,],[30,-13,46,92,94,97,99,104,165,]),'BOOL':([7,20,46,50,68,132,150,190,],[15,15,15,15,15,15,-12,15,]),'MAIN':([5,6,7,8,9,10,16,18,21,22,23,28,50,86,150,],[-84,-2,-84,-84,-5,25,-6,-20,-84,-4,-18,-11,-84,-8,-12,]),'OR':([38,42,48,49,75,],[-23,-84,-84,81,-22,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'funct':([8,21,47,56,58,63,65,70,73,90,110,112,162,166,191,199,],[21,21,56,56,56,56,56,56,56,56,56,132,56,56,56,56,]),'output2':([99,123,],[122,140,]),'conditional':([47,56,58,63,65,70,73,90,110,162,166,191,199,],[58,58,58,58,58,58,58,58,58,58,58,58,58,]),'for3':([137,155,],[156,167,]),'while2':([94,117,165,],[116,136,177,]),'do-while':([47,56,58,63,65,70,73,90,110,162,166,191,199,],[60,60,60,60,60,60,60,60,60,60,60,60,60,]),'declareRecursivoLocal':([68,190,],[101,194,]),'for2':([97,158,],[119,169,]),'array':([31,42,48,161,],[37,49,75,172,]),'altaVarGlobal':([26,51,],[31,87,]),'arithmeticOp':([130,179,187,],[147,187,192,]),'type2':([7,20,46,50,68,132,190,],[19,19,19,19,19,19,19,]),'est':([47,56,58,63,65,70,73,90,110,162,166,191,199,],[61,91,93,96,98,105,106,114,131,174,178,195,201,]),'arithmeticExp':([49,163,],[77,175,]),'for':([47,56,58,63,65,70,73,90,110,162,166,191,199,],[62,62,62,62,62,62,62,62,62,62,62,62,62,]),'program3':([8,21,],[22,28,]),'exp2':([49,],[80,]),'funct2':([46,],[52,]),'program':([0,],[1,]),'input':([47,56,58,63,65,70,73,90,110,162,166,191,199,],[63,63,63,63,63,63,63,63,63,63,63,63,63,]),'type':([7,20,46,50,68,132,190,],[17,27,53,17,102,151,102,]),'empty':([5,7,8,21,31,36,42,46,47,48,49,50,56,58,63,65,68,70,73,87,89,90,94,97,99,104,110,117,123,126,128,137,155,158,161,162,163,164,165,166,171,189,190,191,197,199,],[9,18,23,23,38,45,38,54,72,38,85,18,72,72,72,72,103,72,72,45,113,72,118,121,124,127,72,118,124,144,127,157,157,121,173,72,85,113,118,72,182,144,103,72,182,72,]),'funct3':([89,164,],[111,176,]),'declare2Local':([161,],[171,]),'assignment':([47,56,58,63,65,70,73,90,110,162,166,191,199,],[65,65,65,65,65,65,65,65,65,65,65,65,65,]),'assignmentDecl':([126,189,],[143,193,]),'cuerpo':([10,],[24,]),'altaVarLocal':([143,193,],[161,197,]),'declare2':([31,],[36,]),'declare3':([36,87,],[43,109,]),'declare3Local':([171,197,],[183,200,]),'cycles':([47,56,58,63,65,70,73,90,110,162,166,191,199,],[70,70,70,70,70,70,70,70,70,70,70,70,70,]),'program2':([5,],[6,]),'goToMainQuad':([6,],[10,]),'altaModuloMain':([40,],[47,]),'altaModulo':([32,],[39,]),'while':([47,56,58,63,65,70,73,90,110,162,166,191,199,],[71,71,71,71,71,71,71,71,71,71,71,71,71,]),'altaPrograma':([3,],[4,]),'declareRecursivo':([7,50,],[16,86,]),'conditional2':([104,128,],[129,145,]),'exp':([35,94,104,117,128,137,139,155,165,],[41,117,128,117,128,155,159,155,117,]),'output':([47,56,58,63,65,70,73,90,110,162,166,191,199,],[73,73,73,73,73,73,73,73,73,73,73,73,73,]),'declareLocal':([47,56,58,63,65,70,73,90,110,162,166,191,199,],[74,74,74,74,74,74,74,74,74,74,74,74,74,]),'declare':([5,],[8,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON','program',9,'p_program','parser.py',46),
  ('goToMainQuad -> <empty>','goToMainQuad',0,'p_goToMainQuad','parser.py',52),
  ('altaPrograma -> <empty>','altaPrograma',0,'p_altaPrograma','parser.py',57),
  ('program2 -> declare program3','program2',2,'p_program2','parser.py',68),
  ('program2 -> empty','program2',1,'p_program2Empty','parser.py',73),
  ('declare -> DECLARE declareRecursivo','declare',2,'p_declare','parser.py',77),
  ('declare -> empty','declare',1,'p_declareEmpty','parser.py',81),
  ('declareRecursivo -> type ID altaVarGlobal declare2 declare3 SEMICOLON declareRecursivo','declareRecursivo',7,'p_declareRecursivo','parser.py',85),
  ('declare2 -> array','declare2',1,'p_declare2','parser.py',89),
  ('declare3 -> COMMA ID altaVarGlobal declare3','declare3',4,'p_declare3','parser.py',93),
  ('program3 -> funct program3','program3',2,'p_program3','parser.py',100),
  ('funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY','funct',10,'p_funct','parser.py',104),
  ('altaModulo -> <empty>','altaModulo',0,'p_altaModulo','parser.py',108),
  ('funct2 -> type ID funct3','funct2',3,'p_funct2','parser.py',118),
  ('funct3 -> COMMA funct type ID funct3','funct3',5,'p_funct3','parser.py',122),
  ('funct2 -> empty','funct2',1,'p_funct2Empty','parser.py',126),
  ('funct3 -> empty','funct3',1,'p_funct3Empty','parser.py',130),
  ('program3 -> empty','program3',1,'p_program3Empty','parser.py',143),
  ('altaVarGlobal -> <empty>','altaVarGlobal',0,'p_altaVarGlobal','parser.py',148),
  ('declareRecursivo -> empty','declareRecursivo',1,'p_declareResursivoEmpty','parser.py',158),
  ('declare3 -> empty','declare3',1,'p_declare3Empty','parser.py',173),
  ('array -> LEFTBRACK exp RIGHTBRACK array','array',4,'p_array','parser.py',177),
  ('array -> empty','array',1,'p_arrayEmpty','parser.py',181),
  ('type -> type2','type',1,'p_type','parser.py',185),
  ('type2 -> INT','type2',1,'p_type2','parser.py',189),
  ('type2 -> FLOAT','type2',1,'p_type2Float','parser.py',195),
  ('type2 -> STRING','type2',1,'p_type2String','parser.py',201),
  ('type2 -> BOOL','type2',1,'p_type2Bool','parser.py',207),
  ('type2 -> VOID','type2',1,'p_type2Void','parser.py',213),
  ('cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY','cuerpo',7,'p_cuerpo','parser.py',219),
  ('altaModuloMain -> <empty>','altaModuloMain',0,'p_altaModuloMain','parser.py',223),
  ('est -> conditional est','est',2,'p_est','parser.py',233),
  ('est -> declareLocal','est',1,'p_estVars','parser.py',237),
  ('declareLocal -> DECLARE declareRecursivoLocal','declareLocal',2,'p_declareLocal','parser.py',241),
  ('declareRecursivoLocal -> type ID assignmentDecl altaVarLocal declare2Local declare3Local SEMICOLON declareRecursivoLocal','declareRecursivoLocal',8,'p_declareRecursivoLocal','parser.py',245),
  ('assignmentDecl -> ASSGN FLOATNUMB','assignmentDecl',2,'p_assignmentDeclareFloat','parser.py',249),
  ('assignmentDecl -> empty','assignmentDecl',1,'p_assignmentDeclareEmpty','parser.py',258),
  ('declare2Local -> array','declare2Local',1,'p_declare2Local','parser.py',261),
  ('declare3Local -> COMMA ID assignmentDecl altaVarLocal declare3Local','declare3Local',5,'p_declare3Local','parser.py',265),
  ('declareRecursivoLocal -> empty','declareRecursivoLocal',1,'p_declareResursivoEmptyLocal','parser.py',269),
  ('declareLocal -> empty','declareLocal',1,'p_declareEmptyLocal','parser.py',273),
  ('declare2Local -> empty','declare2Local',1,'p_declar2EmptyLocal','parser.py',278),
  ('declare3Local -> empty','declare3Local',1,'p_declare3EmptyLocal','parser.py',283),
  ('altaVarLocal -> <empty>','altaVarLocal',0,'p_altaVarLocal','parser.py',288),
  ('est -> cycles est','est',2,'p_estCycle','parser.py',296),
  ('est -> input est','est',2,'p_estRead','parser.py',300),
  ('est -> output est','est',2,'p_estWrite','parser.py',304),
  ('est -> assignment est','est',2,'p_estAassignment','parser.py',308),
  ('est -> funct est','est',2,'p_estFunct','parser.py',312),
  ('est -> empty','est',1,'p_estEmpty','parser.py',316),
  ('assignment -> ID ASSGN NUMBER SEMICOLON','assignment',4,'p_assignment','parser.py',320),
  ('assignment -> empty','assignment',1,'p_assignmentEmpty','parser.py',324),
  ('conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY','conditional',10,'p_conditional','parser.py',327),
  ('conditional2 -> exp conditional2','conditional2',2,'p_conditional2','parser.py',331),
  ('conditional2 -> empty','conditional2',1,'p_conditional2Empty','parser.py',335),
  ('cycles -> while','cycles',1,'p_cycles','parser.py',339),
  ('cycles -> for','cycles',1,'p_cyclesFor','parser.py',343),
  ('cycles -> do-while','cycles',1,'p_cyclesDoWhile','parser.py',347),
  ('do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR','do-while',8,'p_doWhile','parser.py',351),
  ('while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY','while',8,'p_whileClass','parser.py',355),
  ('while2 -> exp while2','while2',2,'p_while2','parser.py',359),
  ('while2 -> empty','while2',1,'p_while2Empty','parser.py',363),
  ('for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY','for',13,'p_forClass','parser.py',367),
  ('arithmeticOp -> SUM','arithmeticOp',1,'p_arithmeticOpPlus','parser.py',371),
  ('arithmeticOp -> MINUS','arithmeticOp',1,'p_arithmeticOpMinus','parser.py',375),
  ('for2 -> ID ASSGN ID for2','for2',4,'p_for2','parser.py',381),
  ('for2 -> empty','for2',1,'p_for2empty','parser.py',385),
  ('for3 -> exp for3','for3',2,'p_for3','parser.py',389),
  ('for3 -> empty','for3',1,'p_for3empty','parser.py',393),
  ('exp -> ID array exp2 SEMICOLON','exp',4,'p_exp','parser.py',397),
  ('exp2 -> LESS','exp2',1,'p_exp2','parser.py',401),
  ('exp2 -> GRTR','exp2',1,'p_expr2Grtr','parser.py',405),
  ('exp2 -> EQ','exp2',1,'p_exp2Equal','parser.py',410),
  ('exp2 -> NOTEQ','exp2',1,'p_exp2NotEq','parser.py',414),
  ('exp2 -> AND','exp2',1,'p_exp2And','parser.py',418),
  ('exp2 -> OR','exp2',1,'p_exp2OR','parser.py',422),
  ('exp2 -> arithmeticExp','exp2',1,'p_exp2Arithemti','parser.py',426),
  ('arithmeticExp -> ID EQ ID arithmeticOp ID arithmeticExp','arithmeticExp',6,'p_arithmeticExp','parser.py',430),
  ('arithmeticExp -> empty','arithmeticExp',1,'p_arithmeticExpEmpty','parser.py',434),
  ('output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON','output',8,'p_output','parser.py',442),
  ('output2 -> ID output2','output2',2,'p_output2','parser.py',446),
  ('output2 -> empty','output2',1,'p_output2Empty','parser.py',450),
  ('input -> READ LEFTPAR ID RIGHTPAR SEMICOLON','input',5,'p_input','parser.py',454),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',459),
]
