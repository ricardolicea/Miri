
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSGN BOOL COLON COMMA CYCLE DECLARE DIVIDE DO DOT ELSE END EQ FLOAT FLOATNUMB FOR FUNCTION GRTR GRTREQ ID IF INT INTEGER LEFTBRACK LEFTBRACK LEFTKEY LEFTPAR LESS LESSEQ MAIN MINUS MULTP NOTEQ NUMBER OR PROGRAM QUOTE READ RETURN RIGHTBRACK RIGHTKEY RIGHTPAR SEMICOLON SPACE STRING SUM TYPE VOID WHILE WRITE newlineprogram : PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLONgoToMainQuad : altaPrograma : program2 : declare program3program2 : emptydeclare : DECLARE declareRecursivo declare : emptydeclareRecursivo : type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivodeclare2 : arraydeclare3 : COMMA  ID altaVarGlobal declare3 program3 : funct program3funct : FUNCTION type ID altaModulo LEFTPAR funct2  RIGHTPAR LEFTKEY est functReturn RIGHTKEYfunctReturn : RETURN NUMBER SEMICOLONfunctReturn : RETURN ID SEMICOLONfunctReturn : emptyaltaModulo : funct2 : type ID altaVarLocal funct3funct3 : COMMA type ID  altaVarLocal funct3funct2 : emptyfunct3 : emptyprogram3 : emptyaltaVarGlobal : declareRecursivo : emptydeclare3 : emptyarray : LEFTBRACK exp RIGHTBRACK arrayarray : emptytype : type2type2 : INTtype2 : FLOATtype2 : STRINGtype2 : BOOLtype2 : VOIDcuerpo : MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEYaltaModuloMain : est : conditional est est : declareLocal estest : cycles estest : input estest : output estest : assignment estest : llamadaAFunct estest : emptyllamadaAFunct : ID LEFTPAR llamadaAFunct2 RIGHTPARllamadaAFunct : emptyllamadaAFunct2 : ID llamadaAFunct3llamadaAFunct3 : COMMA IDllamadaAFunct3 : emptyllamadaAFunct2 : emptydeclareLocal : DECLARE declareRecursivoLocal declareRecursivoLocal : type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocalassignmentDecl : ASSGN exp number : INTEGER number2number2 : DOT INTEGERnumber2 : emptyassignmentDecl : emptydeclare2Local : arraydeclare3Local : COMMA ID altaVarLocal assignmentDecl declare3Local declareRecursivoLocal : emptydeclareLocal : emptydeclare2Local : emptydeclare3Local : emptyaltaVarLocal : assignment : ID ASSGN meteVar exp SEMICOLONassignment : ID ASSGN meteVar llamadaAFunct SEMICOLONmeteVar : assignment : emptyconditional : IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse conditionalElse : ELSE LEFTKEY est RIGHTKEYconditionalElse : emptyconditional2 : exp conditional2conditional2 : emptycycles : whilecycles : emptycycles : forcycles : do-whiledo-while : DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR while : WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEYwhile2 : exp while2while2 : emptyfor : FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEYfor2 : ID ASSGN number for3for3 : COMMA for2for3 : emptyfor4 : expForparte3For : ID SUM SUMparte3For : ID MINUS MINUSexpFor : ID expFor2expFor : numberexpFor2 : LESS expForexpFor2 : GRTR expForexpFor2 : EQ expForexpFor2 : NOTEQ expForexpFor2 : AND expForexpFor2 : OR expForexpFor2 : emptyexp : ID meteExp exp2 generaCuadmeteExp : generaCuad : exp : number meteNum exp2meteNum : exp : emptyexp2 : LESS expexp2 : GRTR expexp2 : EQ expexp2 : NOTEQ expexp2 : AND expexp2 : OR expexp2 : SUM meteOper expmeteOper : exp2 : MINUS meteOper expexp2 : MULTP meteOper expexp2 : DIVIDE meteOper expexp2 : emptyoutput : WRITE LEFTPAR output2 RIGHTPAR SEMICOLONoutput2 : ID output2output2 : QUOTE ID QUOTE output2output2 : emptyinput : READ LEFTPAR ID RIGHTPAR SEMICOLONempty :circulo : LEFTPAR INTEGER COMMA STRING COMMA BOOL COMMA INTEGER COMMA INTEGER RIGHTPAR SEMICOLONcuadro : LEFTPAR INTEGER COMMA STRING COMMA BOOL COMMA INTEGER COMMA INTEGER RIGHTPAR SEMICOLONtriangulo : LEFTPAR INTEGER COMMA INTEGER COMMA INTEGER COMMA STRING COMMA BOOL COMMA INTEGER COMMA INTEGER COMMA INTEGER RIGHTPAR SEMICOLONlinea : LEFTPAR INTEGER COMMA STRING COMMA INTEGER COMMA INTEGER COMMA INTEGER COMMA INTEGER RIGHTPAR SEMICOLONrectangulo : LEFTPAR INTEGER COMMA INTEGER COMMA STRING COMMA BOOL COMMA INTEGER COMMA INTEGER COMMA INTEGER RIGHTPAR SEMICOLON'
    
_lr_action_items = {'ASSGN':([26,31,75,143,152,182,250,258,],[-22,35,112,170,-62,35,-62,35,]),'FLOAT':([7,20,49,76,98,163,251,],[14,14,14,14,14,14,14,]),'RETURN':([65,67,69,70,71,73,76,78,79,80,81,82,104,107,108,110,114,116,118,119,120,135,161,178,190,197,199,200,231,244,246,251,252,254,259,264,266,],[-119,-75,-74,-119,-119,-119,-119,-119,-72,-42,-119,-119,-35,-41,-38,-40,-49,-58,-37,-39,-36,-119,185,-43,-118,-114,-64,-63,-77,-119,-76,-119,-67,-69,-50,-80,-68,]),'DO':([39,50,65,67,69,70,71,73,76,78,79,80,81,82,102,114,116,135,178,190,191,197,199,200,203,231,244,246,251,252,254,255,259,260,264,266,],[-34,63,63,-75,-74,63,63,63,-119,63,-72,-44,63,63,63,-49,-58,63,-43,-118,63,-114,-64,-63,63,-77,-119,-76,-119,-67,-69,63,-50,63,-80,-68,]),'READ':([39,50,65,67,69,70,71,73,76,78,79,80,81,82,102,114,116,135,178,190,191,197,199,200,203,231,244,246,251,252,254,255,259,260,264,266,],[-34,64,64,-75,-74,64,64,64,-119,64,-72,-44,64,64,64,-49,-58,64,-43,-118,64,-114,-64,-63,64,-77,-119,-76,-119,-67,-69,64,-50,64,-80,-68,]),'VOID':([7,20,49,76,98,163,251,],[13,13,13,13,13,13,13,]),'NUMBER':([185,],[204,]),'WHILE':([39,50,65,67,69,70,71,73,76,78,79,80,81,82,102,114,116,135,165,178,190,191,197,199,200,203,231,244,246,251,252,254,255,259,260,264,266,],[-34,66,66,-75,-74,66,66,66,-119,66,-72,-44,66,66,66,-49,-58,66,189,-43,-118,66,-114,-64,-63,66,-77,-119,-76,-119,-67,-69,66,-50,66,-80,-68,]),'PROGRAM':([0,],[2,]),'RIGHTKEY':([39,50,65,67,68,69,70,71,73,76,78,79,80,81,82,102,104,107,108,110,114,116,118,119,120,135,137,161,178,186,187,190,191,197,199,200,203,209,226,227,228,231,244,246,251,252,254,255,259,260,261,263,264,266,],[-34,-119,-119,-75,106,-74,-119,-119,-119,-119,-119,-72,-42,-119,-119,-119,-35,-41,-38,-40,-49,-58,-37,-39,-36,-119,165,-119,-43,206,-15,-118,-119,-114,-64,-63,-119,231,244,-13,-14,-77,-119,-76,-119,-67,-69,-119,-50,-119,264,266,-80,-68,]),'MINUS':([40,42,43,51,52,53,55,95,176,239,249,],[-100,-119,-97,89,-52,-54,89,-53,-97,249,257,]),'DOT':([42,],[54,]),'DIVIDE':([40,42,43,51,52,53,55,95,176,],[-100,-119,-97,84,-52,-54,84,-53,-97,]),'MULTP':([40,42,43,51,52,53,55,95,176,],[-100,-119,-97,91,-52,-54,91,-53,-97,]),'SEMICOLON':([3,4,26,29,31,35,36,37,40,41,42,43,44,46,47,48,51,52,53,55,57,59,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,112,121,122,123,124,125,126,127,128,129,130,131,132,134,142,148,152,156,157,158,159,160,166,171,174,175,176,177,178,182,192,193,194,195,196,202,204,205,213,216,220,221,223,224,225,232,233,234,235,236,237,240,242,243,250,258,262,265,],[-3,5,-22,33,-119,-119,-119,-55,-100,-51,-119,-97,-101,-119,-9,-26,-119,-52,-54,-119,98,-24,-119,-109,-119,-119,-99,-109,-109,-119,-109,-119,-119,-113,-53,-98,-119,-22,-65,-106,-119,-102,-105,-119,-119,-103,-119,-104,-107,-96,-25,-119,169,-119,-62,-112,-108,-110,-111,-10,190,197,199,200,-97,-44,-43,-119,-88,-84,-119,218,-119,-119,227,228,-87,-95,-81,-83,-119,-56,-26,-93,-89,-92,-90,-91,-94,-82,-61,251,-62,-119,-119,-57,]),'QUOTE':([111,146,172,198,],[145,145,198,145,]),'LESS':([40,42,43,51,52,53,55,95,176,194,],[-100,-119,-97,85,-52,-54,85,-53,-97,211,]),'RIGHTPAR':([30,40,42,43,44,49,51,52,53,55,60,62,83,84,85,86,87,88,89,90,91,92,93,94,95,96,101,105,111,113,117,121,122,123,124,125,126,127,128,129,130,131,136,138,139,140,141,144,146,147,149,150,151,153,154,155,156,157,158,159,162,164,168,173,179,181,183,198,201,207,208,222,229,230,238,245,256,257,],[34,-100,-119,-97,-101,-119,-119,-52,-54,-119,100,-19,-119,-109,-119,-119,-99,-109,-109,-119,-109,-119,-119,-113,-53,-98,-62,-119,-119,-119,-119,-106,-119,-102,-105,-119,-119,-103,-119,-104,-107,-96,-119,166,167,-119,-79,171,-119,-117,178,-119,-48,-71,-119,184,-112,-108,-110,-111,-17,-20,-78,-115,-45,-47,-70,-119,-46,-62,-119,-116,-119,246,247,-18,-85,-86,]),'NOTEQ':([40,42,43,51,52,53,55,95,176,194,],[-100,-119,-97,86,-52,-54,86,-53,-97,212,]),'COMMA':([26,31,35,36,37,40,41,42,43,44,46,47,48,51,52,53,55,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,101,121,122,123,124,125,126,127,128,129,130,131,132,134,136,150,152,156,157,158,159,182,196,202,207,223,224,225,229,250,258,262,],[-22,-119,-119,-119,-55,-100,-51,-119,-97,-101,58,-9,-26,-119,-52,-54,-119,-119,-109,-119,-119,-99,-109,-109,-119,-109,-119,-119,-113,-53,-98,-119,-22,-62,-106,-119,-102,-105,-119,-119,-103,-119,-104,-107,-96,-25,58,163,180,-62,-112,-108,-110,-111,-119,219,-119,-62,241,-56,-26,163,-62,-119,241,]),'INTEGER':([35,40,42,43,44,45,51,52,53,54,55,83,84,85,86,87,88,89,90,91,92,93,94,95,96,105,112,117,121,122,123,124,125,126,127,128,129,130,131,140,141,148,153,154,156,157,158,159,169,170,208,210,211,212,214,215,217,],[42,-100,-119,-97,-101,42,-119,-52,-54,95,-119,42,-109,42,42,-99,-109,-109,42,-109,42,42,-113,-53,-98,42,-65,42,-106,42,-102,-105,42,42,-103,42,-104,-107,-96,42,-101,42,-101,42,-112,-108,-110,-111,42,42,42,42,42,42,42,42,42,]),'IF':([39,50,65,67,69,70,71,73,76,78,79,80,81,82,102,114,116,135,178,190,191,197,199,200,203,231,244,246,251,252,254,255,259,260,264,266,],[-34,77,77,-75,-74,77,77,77,-119,77,-72,-44,77,77,77,-49,-58,77,-43,-118,77,-114,-64,-63,77,-77,-119,-76,-119,-67,-69,77,-50,77,-80,-68,]),'SUM':([40,42,43,51,52,53,55,95,176,239,248,],[-100,-119,-97,88,-52,-54,88,-53,-97,248,256,]),'$end':([1,33,],[0,-1,]),'FUNCTION':([5,7,8,9,16,18,21,98,133,206,],[-119,-119,20,-7,-6,-23,20,-119,-8,-12,]),'RIGHTBRACK':([40,42,43,44,45,51,52,53,55,56,83,84,85,86,87,88,89,90,91,92,93,94,95,96,121,122,123,124,125,126,127,128,129,130,131,156,157,158,159,],[-100,-119,-97,-101,-119,-119,-52,-54,-119,97,-119,-109,-119,-119,-99,-109,-109,-119,-109,-119,-119,-113,-53,-98,-106,-119,-102,-105,-119,-119,-103,-119,-104,-107,-96,-112,-108,-110,-111,]),'END':([24,106,],[29,-33,]),'STRING':([7,20,49,76,98,163,251,],[11,11,11,11,11,11,11,]),'FOR':([39,50,65,67,69,70,71,73,76,78,79,80,81,82,102,114,116,135,178,190,191,197,199,200,203,231,244,246,251,252,254,255,259,260,264,266,],[-34,72,72,-75,-74,72,72,72,-119,72,-72,-44,72,72,72,-49,-58,72,-43,-118,72,-114,-64,-63,72,-77,-119,-76,-119,-67,-69,72,-50,72,-80,-68,]),'ELSE':([244,],[253,]),'WRITE':([39,50,65,67,69,70,71,73,76,78,79,80,81,82,102,114,116,135,178,190,191,197,199,200,203,231,244,246,251,252,254,255,259,260,264,266,],[-34,74,74,-75,-74,74,74,74,-119,74,-72,-44,74,74,74,-49,-58,74,-43,-118,74,-114,-64,-63,74,-77,-119,-76,-119,-67,-69,74,-50,74,-80,-68,]),'GRTR':([40,42,43,51,52,53,55,95,176,194,],[-100,-119,-97,90,-52,-54,90,-53,-97,214,]),'ID':([2,11,12,13,14,15,17,19,27,35,39,40,42,43,44,45,50,51,52,53,55,58,61,65,67,69,70,71,73,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,102,103,105,109,111,112,113,114,115,116,117,121,122,123,124,125,126,127,128,129,130,131,135,140,141,145,146,148,153,154,156,157,158,159,169,178,180,185,188,190,191,197,198,199,200,203,208,210,211,212,214,215,217,218,219,231,241,244,246,251,252,254,255,259,260,264,266,],[3,-30,-28,-32,-29,-31,26,-27,32,43,-34,-100,-119,-97,-101,43,75,-119,-52,-54,-119,99,101,75,-75,-74,75,75,75,-119,75,-72,-44,75,75,43,-109,43,43,-99,-109,-109,43,-109,43,43,-113,-53,-98,75,138,43,143,146,-65,150,-49,152,-58,43,-106,43,-102,-105,43,43,-103,43,-104,-107,-96,75,43,-101,172,146,176,-101,43,-112,-108,-110,-111,194,-43,201,205,207,-118,75,-114,146,-64,-63,75,43,194,194,194,194,194,194,239,143,-77,250,-119,-76,-119,-67,-69,75,-50,75,-80,-68,]),'EQ':([40,42,43,51,52,53,55,95,176,194,],[-100,-119,-97,92,-52,-54,92,-53,-97,215,]),'DECLARE':([5,39,50,65,67,69,70,71,73,76,78,79,80,81,82,102,114,116,135,178,190,191,197,199,200,203,231,244,246,251,252,254,255,259,260,264,266,],[7,-34,76,76,-75,-74,76,76,76,-119,76,-72,-44,76,76,76,-49,-58,76,-43,-118,76,-114,-64,-63,76,-77,-119,-76,-119,-67,-69,76,-50,76,-80,-68,]),'LEFTKEY':([34,63,100,167,184,247,253,],[39,102,135,191,203,255,260,]),'AND':([40,42,43,51,52,53,55,95,176,194,],[-100,-119,-97,83,-52,-54,83,-53,-97,210,]),'INT':([7,20,49,76,98,163,251,],[12,12,12,12,12,12,12,]),'LEFTBRACK':([26,31,35,36,37,40,41,42,43,44,51,52,53,55,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,121,122,123,124,125,126,127,128,129,130,131,152,156,157,158,159,182,202,],[-22,-119,-119,45,-55,-100,-51,-119,-97,-101,-119,-52,-54,-119,-119,-109,-119,-119,-99,-109,-109,-119,-109,-119,-119,-113,-53,-98,45,-106,-119,-102,-105,-119,-119,-103,-119,-104,-107,-96,-62,-112,-108,-110,-111,-119,45,]),'LEFTPAR':([25,32,38,64,66,72,74,75,77,176,189,],[30,-16,49,103,105,109,111,113,117,113,208,]),'BOOL':([7,20,49,76,98,163,251,],[15,15,15,15,15,15,15,]),'MAIN':([5,6,7,8,9,10,16,18,21,22,23,28,98,133,206,],[-119,-2,-119,-119,-5,25,-6,-23,-119,-4,-21,-11,-119,-8,-12,]),'OR':([40,42,43,51,52,53,55,95,176,194,],[-100,-119,-97,93,-52,-54,93,-53,-97,217,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'meteOper':([84,88,89,91,],[122,125,126,128,]),'funct':([8,21,],[21,21,]),'output2':([111,146,198,],[144,173,222,]),'llamadaAFunct2':([113,],[149,]),'conditional':([50,65,70,71,73,78,81,82,102,135,191,203,255,260,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'number':([35,45,83,85,86,90,92,93,105,117,122,125,126,128,140,148,154,169,170,208,210,211,212,214,215,217,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,192,196,40,192,192,192,192,192,192,]),'expFor':([169,210,211,212,214,215,217,],[193,232,233,234,235,236,237,]),'while2':([105,140,208,],[139,168,230,]),'meteExp':([43,176,],[55,55,]),'declareRecursivoLocal':([76,251,],[114,259,]),'for2':([109,219,],[142,240,]),'array':([36,97,202,],[47,132,224,]),'functReturn':([161,],[186,]),'altaVarGlobal':([26,99,],[31,134,]),'type2':([7,20,49,76,98,163,251,],[19,19,19,19,19,19,19,]),'est':([50,65,70,71,73,78,81,82,102,135,191,203,255,260,],[68,104,107,108,110,118,119,120,137,161,209,226,261,263,]),'conditionalElse':([244,],[252,]),'program2':([5,],[6,]),'program3':([8,21,],[22,28,]),'exp2':([51,55,],[87,96,]),'llamadaAFunct':([50,65,70,71,73,78,81,82,102,135,148,191,203,255,260,],[70,70,70,70,70,70,70,70,70,70,174,70,70,70,70,]),'do-while':([50,65,70,71,73,78,81,82,102,135,191,203,255,260,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'llamadaAFunct3':([150,],[179,]),'funct2':([49,],[60,]),'program':([0,],[1,]),'input':([50,65,70,71,73,78,81,82,102,135,191,203,255,260,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'for4':([169,],[195,]),'type':([7,20,49,76,98,163,251,],[17,27,61,115,17,188,115,]),'empty':([5,7,8,21,31,35,36,42,45,46,49,50,51,55,65,70,71,73,76,78,81,82,83,85,86,90,92,93,97,98,102,105,111,113,117,122,125,126,128,134,135,136,140,146,148,150,154,161,182,191,194,196,198,202,203,208,223,229,244,251,255,258,260,262,],[9,18,23,23,37,44,48,53,44,59,62,80,94,94,80,80,80,80,116,80,80,80,44,44,44,44,44,44,48,18,80,141,147,151,153,44,44,44,44,59,80,164,141,147,177,181,153,187,37,80,216,221,147,225,80,141,242,164,254,116,80,37,80,242,]),'funct3':([136,229,],[162,245,]),'declare2Local':([202,],[223,]),'assignment':([50,65,70,71,73,78,81,82,102,135,191,203,255,260,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'assignmentDecl':([31,182,258,],[36,202,262,]),'generaCuad':([96,],[131,]),'cuerpo':([10,],[24,]),'altaVarLocal':([101,152,207,250,],[136,182,229,258,]),'number2':([42,],[52,]),'declare3':([46,134,],[57,160,]),'output':([50,65,70,71,73,78,81,82,102,135,191,203,255,260,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'meteNum':([40,],[51,]),'declare3Local':([223,262,],[243,265,]),'cycles':([50,65,70,71,73,78,81,82,102,135,191,203,255,260,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'parte3For':([218,],[238,]),'for':([50,65,70,71,73,78,81,82,102,135,191,203,255,260,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'goToMainQuad':([6,],[10,]),'altaModuloMain':([39,],[50,]),'altaModulo':([32,],[38,]),'expFor2':([194,],[213,]),'meteVar':([112,],[148,]),'while':([50,65,70,71,73,78,81,82,102,135,191,203,255,260,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'altaPrograma':([3,],[4,]),'declareRecursivo':([7,98,],[16,133,]),'conditional2':([117,154,],[155,183,]),'exp':([35,45,83,85,86,90,92,93,105,117,122,125,126,128,140,148,154,208,],[41,56,121,123,124,127,129,130,140,154,156,157,158,159,140,175,154,140,]),'for3':([196,],[220,]),'declare2':([36,],[46,]),'declareLocal':([50,65,70,71,73,78,81,82,102,135,191,203,255,260,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'declare':([5,],[8,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON','program',9,'p_program','parser.py',48),
  ('goToMainQuad -> <empty>','goToMainQuad',0,'p_goToMainQuad','parser.py',51),
  ('altaPrograma -> <empty>','altaPrograma',0,'p_altaPrograma','parser.py',56),
  ('program2 -> declare program3','program2',2,'p_program2','parser.py',66),
  ('program2 -> empty','program2',1,'p_program2Empty','parser.py',69),
  ('declare -> DECLARE declareRecursivo','declare',2,'p_declare','parser.py',72),
  ('declare -> empty','declare',1,'p_declareEmpty','parser.py',76),
  ('declareRecursivo -> type ID altaVarGlobal assignmentDecl declare2 declare3 SEMICOLON declareRecursivo','declareRecursivo',8,'p_declareRecursivo','parser.py',79),
  ('declare2 -> array','declare2',1,'p_declare2','parser.py',83),
  ('declare3 -> COMMA ID altaVarGlobal declare3','declare3',4,'p_declare3','parser.py',86),
  ('program3 -> funct program3','program3',2,'p_program3','parser.py',90),
  ('funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est functReturn RIGHTKEY','funct',11,'p_funct','parser.py',93),
  ('functReturn -> RETURN NUMBER SEMICOLON','functReturn',3,'p_functReturn','parser.py',97),
  ('functReturn -> RETURN ID SEMICOLON','functReturn',3,'p_functReturnID','parser.py',101),
  ('functReturn -> empty','functReturn',1,'p_functReturnEmpty','parser.py',105),
  ('altaModulo -> <empty>','altaModulo',0,'p_altaModulo','parser.py',108),
  ('funct2 -> type ID altaVarLocal funct3','funct2',4,'p_funct2','parser.py',120),
  ('funct3 -> COMMA type ID altaVarLocal funct3','funct3',5,'p_funct3','parser.py',124),
  ('funct2 -> empty','funct2',1,'p_funct2Empty','parser.py',128),
  ('funct3 -> empty','funct3',1,'p_funct3Empty','parser.py',131),
  ('program3 -> empty','program3',1,'p_program3Empty','parser.py',134),
  ('altaVarGlobal -> <empty>','altaVarGlobal',0,'p_altaVarGlobal','parser.py',137),
  ('declareRecursivo -> empty','declareRecursivo',1,'p_declareResursivoEmpty','parser.py',147),
  ('declare3 -> empty','declare3',1,'p_declare3Empty','parser.py',150),
  ('array -> LEFTBRACK exp RIGHTBRACK array','array',4,'p_array','parser.py',153),
  ('array -> empty','array',1,'p_arrayEmpty','parser.py',157),
  ('type -> type2','type',1,'p_type','parser.py',160),
  ('type2 -> INT','type2',1,'p_type2','parser.py',163),
  ('type2 -> FLOAT','type2',1,'p_type2Float','parser.py',169),
  ('type2 -> STRING','type2',1,'p_type2String','parser.py',175),
  ('type2 -> BOOL','type2',1,'p_type2Bool','parser.py',181),
  ('type2 -> VOID','type2',1,'p_type2Void','parser.py',187),
  ('cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY','cuerpo',7,'p_cuerpo','parser.py',193),
  ('altaModuloMain -> <empty>','altaModuloMain',0,'p_altaModuloMain','parser.py',197),
  ('est -> conditional est','est',2,'p_est','parser.py',207),
  ('est -> declareLocal est','est',2,'p_estVars','parser.py',210),
  ('est -> cycles est','est',2,'p_estCycle','parser.py',213),
  ('est -> input est','est',2,'p_estRead','parser.py',216),
  ('est -> output est','est',2,'p_estWrite','parser.py',219),
  ('est -> assignment est','est',2,'p_estAassignment','parser.py',222),
  ('est -> llamadaAFunct est','est',2,'p_estFunct','parser.py',225),
  ('est -> empty','est',1,'p_estEmpty','parser.py',228),
  ('llamadaAFunct -> ID LEFTPAR llamadaAFunct2 RIGHTPAR','llamadaAFunct',4,'p_llamadaAFunct','parser.py',231),
  ('llamadaAFunct -> empty','llamadaAFunct',1,'p_llamadaAFunctEmpty','parser.py',235),
  ('llamadaAFunct2 -> ID llamadaAFunct3','llamadaAFunct2',2,'p_llamadaAFunct2','parser.py',238),
  ('llamadaAFunct3 -> COMMA ID','llamadaAFunct3',2,'p_llamadaAFunct3','parser.py',242),
  ('llamadaAFunct3 -> empty','llamadaAFunct3',1,'p_llamadaAFunct3Empty','parser.py',246),
  ('llamadaAFunct2 -> empty','llamadaAFunct2',1,'p_llamadaAFunct2Empty','parser.py',249),
  ('declareLocal -> DECLARE declareRecursivoLocal','declareLocal',2,'p_declareLocal','parser.py',252),
  ('declareRecursivoLocal -> type ID altaVarLocal assignmentDecl declare2Local declare3Local SEMICOLON declareRecursivoLocal','declareRecursivoLocal',8,'p_declareRecursivoLocal','parser.py',256),
  ('assignmentDecl -> ASSGN exp','assignmentDecl',2,'p_assignmentDeclare','parser.py',260),
  ('number -> INTEGER number2','number',2,'p_number','parser.py',264),
  ('number2 -> DOT INTEGER','number2',2,'p_number2','parser.py',268),
  ('number2 -> empty','number2',1,'p_number2Empty','parser.py',272),
  ('assignmentDecl -> empty','assignmentDecl',1,'p_assignmentDeclareEmpty','parser.py',275),
  ('declare2Local -> array','declare2Local',1,'p_declare2Local','parser.py',278),
  ('declare3Local -> COMMA ID altaVarLocal assignmentDecl declare3Local','declare3Local',5,'p_declare3Local','parser.py',281),
  ('declareRecursivoLocal -> empty','declareRecursivoLocal',1,'p_declareResursivoEmptyLocal','parser.py',284),
  ('declareLocal -> empty','declareLocal',1,'p_declareEmptyLocal','parser.py',287),
  ('declare2Local -> empty','declare2Local',1,'p_declar2EmptyLocal','parser.py',290),
  ('declare3Local -> empty','declare3Local',1,'p_declare3EmptyLocal','parser.py',293),
  ('altaVarLocal -> <empty>','altaVarLocal',0,'p_altaVarLocal','parser.py',296),
  ('assignment -> ID ASSGN meteVar exp SEMICOLON','assignment',5,'p_assignment','parser.py',307),
  ('assignment -> ID ASSGN meteVar llamadaAFunct SEMICOLON','assignment',5,'p_assignmentFUNCT','parser.py',313),
  ('meteVar -> <empty>','meteVar',0,'p_meteVar','parser.py',319),
  ('assignment -> empty','assignment',1,'p_assignmentEmpty','parser.py',340),
  ('conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY conditionalElse','conditional',8,'p_conditional','parser.py',343),
  ('conditionalElse -> ELSE LEFTKEY est RIGHTKEY','conditionalElse',4,'p_conditionalElse','parser.py',347),
  ('conditionalElse -> empty','conditionalElse',1,'p_conditionalElseEmpty','parser.py',351),
  ('conditional2 -> exp conditional2','conditional2',2,'p_conditional2','parser.py',354),
  ('conditional2 -> empty','conditional2',1,'p_conditional2Empty','parser.py',357),
  ('cycles -> while','cycles',1,'p_cycles','parser.py',360),
  ('cycles -> empty','cycles',1,'p_cyclesEmpty','parser.py',363),
  ('cycles -> for','cycles',1,'p_cyclesFor','parser.py',366),
  ('cycles -> do-while','cycles',1,'p_cyclesDoWhile','parser.py',369),
  ('do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR','do-while',8,'p_doWhile','parser.py',372),
  ('while -> WHILE LEFTPAR while2 RIGHTPAR LEFTKEY est RIGHTKEY','while',7,'p_whileClass','parser.py',375),
  ('while2 -> exp while2','while2',2,'p_while2','parser.py',378),
  ('while2 -> empty','while2',1,'p_while2Empty','parser.py',381),
  ('for -> FOR LEFTPAR for2 SEMICOLON for4 SEMICOLON parte3For RIGHTPAR LEFTKEY est RIGHTKEY','for',11,'p_forClass','parser.py',384),
  ('for2 -> ID ASSGN number for3','for2',4,'p_for2','parser.py',388),
  ('for3 -> COMMA for2','for3',2,'p_for3','parser.py',392),
  ('for3 -> empty','for3',1,'p_for3Empty','parser.py',396),
  ('for4 -> expFor','for4',1,'p_for4','parser.py',399),
  ('parte3For -> ID SUM SUM','parte3For',3,'p_parte3ForSUM','parser.py',402),
  ('parte3For -> ID MINUS MINUS','parte3For',3,'p_parte3ForMINUS','parser.py',406),
  ('expFor -> ID expFor2','expFor',2,'p_expFor','parser.py',410),
  ('expFor -> number','expFor',1,'p_expForNumber','parser.py',413),
  ('expFor2 -> LESS expFor','expFor2',2,'p_expFor2','parser.py',416),
  ('expFor2 -> GRTR expFor','expFor2',2,'p_exprFor2Grtr','parser.py',420),
  ('expFor2 -> EQ expFor','expFor2',2,'p_expFor2Equal','parser.py',424),
  ('expFor2 -> NOTEQ expFor','expFor2',2,'p_expFor2NotEq','parser.py',428),
  ('expFor2 -> AND expFor','expFor2',2,'p_expFor2And','parser.py',432),
  ('expFor2 -> OR expFor','expFor2',2,'p_expFor2OR','parser.py',436),
  ('expFor2 -> empty','expFor2',1,'p_expFor2Empty','parser.py',440),
  ('exp -> ID meteExp exp2 generaCuad','exp',4,'p_exp','parser.py',443),
  ('meteExp -> <empty>','meteExp',0,'p_meteExp','parser.py',447),
  ('generaCuad -> <empty>','generaCuad',0,'p_generaCuad','parser.py',469),
  ('exp -> number meteNum exp2','exp',3,'p_expNUMERO','parser.py',473),
  ('meteNum -> <empty>','meteNum',0,'p_meteNum','parser.py',476),
  ('exp -> empty','exp',1,'p_expVACIA','parser.py',482),
  ('exp2 -> LESS exp','exp2',2,'p_exp2','parser.py',485),
  ('exp2 -> GRTR exp','exp2',2,'p_expr2Grtr','parser.py',489),
  ('exp2 -> EQ exp','exp2',2,'p_exp2Equal','parser.py',493),
  ('exp2 -> NOTEQ exp','exp2',2,'p_exp2NotEq','parser.py',497),
  ('exp2 -> AND exp','exp2',2,'p_exp2And','parser.py',501),
  ('exp2 -> OR exp','exp2',2,'p_exp2OR','parser.py',505),
  ('exp2 -> SUM meteOper exp','exp2',3,'p_exp2SUM','parser.py',509),
  ('meteOper -> <empty>','meteOper',0,'p_meteOper','parser.py',514),
  ('exp2 -> MINUS meteOper exp','exp2',3,'p_exp2MINUS','parser.py',518),
  ('exp2 -> MULTP meteOper exp','exp2',3,'p_exp2MULTP','parser.py',522),
  ('exp2 -> DIVIDE meteOper exp','exp2',3,'p_exp2DIVIDE','parser.py',526),
  ('exp2 -> empty','exp2',1,'p_exp2Empty','parser.py',530),
  ('output -> WRITE LEFTPAR output2 RIGHTPAR SEMICOLON','output',5,'p_output','parser.py',535),
  ('output2 -> ID output2','output2',2,'p_output2','parser.py',539),
  ('output2 -> QUOTE ID QUOTE output2','output2',4,'p_output2Quotes','parser.py',543),
  ('output2 -> empty','output2',1,'p_output2Empty','parser.py',546),
  ('input -> READ LEFTPAR ID RIGHTPAR SEMICOLON','input',5,'p_input','parser.py',549),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',553),
  ('circulo -> LEFTPAR INTEGER COMMA STRING COMMA BOOL COMMA INTEGER COMMA INTEGER RIGHTPAR SEMICOLON','circulo',12,'p_circle','parser.py',558),
  ('cuadro -> LEFTPAR INTEGER COMMA STRING COMMA BOOL COMMA INTEGER COMMA INTEGER RIGHTPAR SEMICOLON','cuadro',12,'p_square','parser.py',561),
  ('triangulo -> LEFTPAR INTEGER COMMA INTEGER COMMA INTEGER COMMA STRING COMMA BOOL COMMA INTEGER COMMA INTEGER COMMA INTEGER RIGHTPAR SEMICOLON','triangulo',18,'p_triangle','parser.py',564),
  ('linea -> LEFTPAR INTEGER COMMA STRING COMMA INTEGER COMMA INTEGER COMMA INTEGER COMMA INTEGER RIGHTPAR SEMICOLON','linea',14,'p_line','parser.py',567),
  ('rectangulo -> LEFTPAR INTEGER COMMA INTEGER COMMA STRING COMMA BOOL COMMA INTEGER COMMA INTEGER COMMA INTEGER RIGHTPAR SEMICOLON','rectangulo',16,'p_rectangle','parser.py',570),
]
