
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSGN BOOL COLON COMMA CYCLE DECLARE DIVIDE DO DOT ELSE END EQ FLOAT FOR FUNCTION GRTR GRTREQ ID IF INT LEFTBRACK LEFTBRACK LEFTKEY LEFTPAR LESS LESSEQ MAIN MINUS MULTP NOTEQ NUMBER OR PROGRAM QUOTE READ RIGHTBRACK RIGHTKEY RIGHTPAR SEMICOLON SPACE STRING SUM TYPE VOID WHILE WRITE newlineprogram : PROGRAM createDirProc ID altaPrograma SEMICOLON program2  goToMainQuad cuerpo END SEMICOLONcreateDirProc : goToMainQuad : altaPrograma : emptyprogram2 : declare program3declare : DECLARE declareRecursivo declareRecursivo : type ID altaVarGlobal declare2 declare3 SEMICOLON declareRecursivodeclare2 : arraydeclare3 : COMMA  ID altaVarGlobal declare3 program3 : funct program3funct : FUNCTION type ID altaModulo LEFTPAR funct2  RIGHTPAR LEFTKEY est RIGHTKEYaltaModulo : funct2 : type ID funct3funct3 : COMMA funct type ID funct3funct2 : emptyfunct3 : emptyprogram3 : emptyaltaVarGlobal : declareRecursivo : emptydeclare : emptydeclare3 : emptyarray : LEFTBRACK exp RIGHTBRACK arrayarray : emptytype : type2type2 : INTtype2 : FLOATtype2 : STRINGtype2 : BOOLtype2 : VOIDcuerpo : MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain  est RIGHTKEYaltaModuloMain : est : conditionalest : declareLocaldeclareLocal : DECLARE declareRecursivoLocal declareRecursivoLocal : type ID altaVarLocal declare2Local declare3Local SEMICOLON declareRecursivoLocaldeclare2Local : arraydeclare3Local : COMMA  ID altaVarLocal declare3Local declareRecursivoLocal : emptydeclareLocal : emptydeclare2Local : emptydeclare3Local : emptyaltaVarLocal : est : cyclesest : inputest : outputest : assignmentest : functest : emptyassignment : ID ASSGN ID SEMICOLONconditional : IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEYconditional2 : exp conditional2conditional2 : emptycycles : whilecycles : forcycles : do-whiledo-while : DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPARwhile : WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEYwhile2 : exp while2while2 : emptyfor : FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEYarithmeticOp : SUMarithmeticOp : MINUSfor2 : ID ASSGN ID for2for2 : emptyfor3 : exp for3for3 : emptyexp : ID array exp2 SEMICOLONexp2 : LESSexp2 : GRTRexp2 : EQexp2 : NOTEQexp2 : ANDexp2 : ORexp2 : arithmeticExparithmeticExp : ID EQ ID arithmeticOp ID arithmeticExparithmeticExp : emptyoutput : WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLONoutput2 : ID output2output2 : emptyinput : READ LEFTPAR ID RIGHTPAR SEMICOLONempty :'
    
_lr_action_items = {'DO':([42,49,92,106,157,161,185,191,],[-31,57,57,57,57,57,57,57,]),'FLOAT':([9,22,48,52,70,128,144,177,],[16,16,16,16,16,16,-11,16,]),'LESS':([40,44,50,51,77,],[-23,-81,-81,80,-22,]),'NOTEQ':([40,44,50,51,77,],[-23,-81,-81,81,-22,]),'VOID':([9,22,48,52,70,128,144,177,],[15,15,15,15,15,15,-11,15,]),'WHILE':([42,49,92,106,129,131,157,161,185,191,],[-31,61,61,61,146,148,61,61,61,61,]),'PROGRAM':([0,],[2,]),'RIGHTKEY':([42,49,58,60,62,63,64,65,67,70,72,73,74,75,76,92,99,101,106,110,127,137,144,147,157,161,169,173,177,179,180,182,184,185,188,190,191,192,193,],[-31,-81,-47,-32,-55,95,-54,-44,-46,-81,-43,-53,-39,-45,-33,-81,-34,-38,-81,129,144,-49,-11,-80,-81,-81,178,180,-81,-56,-57,-77,-35,-81,190,-50,-81,193,-60,]),'MINUS':([126,142,143,174,181,],[143,-61,-62,143,143,]),'SEMICOLON':([4,5,6,28,31,33,38,39,40,44,45,47,50,51,53,77,78,79,80,81,82,83,84,85,87,89,96,103,105,115,117,121,122,130,133,138,149,150,151,152,154,155,156,158,162,164,167,168,170,175,176,183,187,],[-81,7,-4,-18,35,-81,-81,-8,-23,-81,52,-21,-81,-81,-18,-22,-72,-74,-68,-71,103,-73,-69,-70,-76,-81,-81,-67,-9,133,-64,137,-42,147,-81,-81,-81,163,-66,-81,-81,-36,-23,-81,-65,-63,-41,177,-75,182,-42,-81,-37,]),'QUOTE':([97,103,118,119,120,136,153,],[-81,-67,135,-81,-79,-78,165,]),'RIGHTPAR':([32,48,54,56,91,94,102,103,107,109,111,112,113,114,123,124,125,132,139,142,143,159,160,165,171,172,186,],[36,-81,90,-15,-81,-81,-81,-67,-13,-16,130,131,-81,-59,-52,-81,140,-58,-51,-61,-62,-81,-81,175,-14,179,189,]),'READ':([42,49,92,106,157,161,185,191,],[-31,59,59,59,59,59,59,59,]),'COMMA':([28,33,38,39,40,50,53,77,89,91,122,138,154,155,156,159,176,183,],[-18,-81,46,-8,-23,-81,-18,-22,46,108,-42,-81,166,-36,-23,108,-42,166,]),'IF':([42,49,92,106,157,161,185,191,],[-31,71,71,71,71,71,71,71,]),'SUM':([126,142,143,174,181,],[142,-61,-62,142,142,]),'$end':([1,35,],[0,-1,]),'FUNCTION':([7,9,10,11,18,20,23,42,49,52,88,92,106,108,144,157,161,185,191,],[-81,-81,22,-20,-6,-19,22,-31,22,-81,-7,22,22,22,-11,22,22,22,22,]),'RIGHTBRACK':([43,103,],[50,-67,]),'END':([26,95,],[31,-30,]),'STRING':([9,22,48,52,70,128,144,177,],[13,13,13,13,13,13,-11,13,]),'FOR':([42,49,92,106,157,161,185,191,],[-31,66,66,66,66,66,66,66,]),'ELSE':([178,],[185,]),'WRITE':([42,49,92,106,157,161,185,191,],[-31,68,68,68,68,68,68,68,]),'GRTR':([40,44,50,51,77,],[-23,-81,-81,84,-22,]),'ID':([2,3,13,14,15,16,17,19,21,29,37,40,42,44,46,49,50,51,55,77,92,93,94,96,97,98,100,102,103,104,106,113,119,124,133,134,135,141,142,143,145,149,152,157,158,160,161,163,166,185,191,],[-2,4,-27,-25,-29,-26,-28,28,-24,34,44,-23,-31,-81,53,69,-81,86,91,-22,69,111,44,116,119,121,122,44,-67,126,69,44,119,44,44,152,44,158,-61,-62,159,44,116,69,86,44,69,174,176,69,69,]),'EQ':([40,44,50,51,77,86,],[-23,-81,-81,85,-22,104,]),'DECLARE':([7,42,49,92,106,157,161,185,191,],[9,-31,70,70,70,70,70,70,70,]),'LEFTKEY':([36,57,90,140,148,189,],[42,92,106,157,161,191,]),'AND':([40,44,50,51,77,],[-23,-81,-81,78,-22,]),'ASSGN':([69,116,],[98,134,]),'INT':([9,22,48,52,70,128,144,177,],[14,14,14,14,14,14,-11,14,]),'LEFTBRACK':([28,33,44,50,122,138,],[-18,37,37,37,-42,37,]),'LEFTPAR':([27,34,41,59,61,66,68,71,146,],[32,-12,48,93,94,96,97,102,160,]),'BOOL':([9,22,48,52,70,128,144,177,],[17,17,17,17,17,17,-11,17,]),'MAIN':([7,8,9,10,11,12,18,20,23,24,25,30,52,88,144,],[-81,-3,-81,-81,-20,27,-6,-19,-81,-5,-17,-10,-81,-7,-11,]),'OR':([40,44,50,51,77,],[-23,-81,-81,83,-22,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'funct':([10,23,49,92,106,108,157,161,185,191,],[23,23,58,58,58,128,58,58,58,58,]),'output2':([97,119,],[118,136,]),'conditional':([49,92,106,157,161,185,191,],[60,60,60,60,60,60,60,]),'for3':([133,149,],[150,162,]),'while2':([94,113,160,],[112,132,172,]),'do-while':([49,92,106,157,161,185,191,],[62,62,62,62,62,62,62,]),'declareRecursivoLocal':([70,177,],[99,184,]),'for2':([96,152,],[115,164,]),'array':([33,44,50,138,],[39,51,77,155,]),'altaVarGlobal':([28,53,],[33,89,]),'arithmeticOp':([126,174,181,],[141,181,186,]),'type2':([9,22,48,52,70,128,177,],[21,21,21,21,21,21,21,]),'est':([49,92,106,157,161,185,191,],[63,110,127,169,173,188,192,]),'arithmeticExp':([51,158,],[79,170,]),'program2':([7,],[8,]),'program3':([10,23,],[24,30,]),'exp2':([51,],[82,]),'funct2':([48,],[54,]),'program':([0,],[1,]),'input':([49,92,106,157,161,185,191,],[65,65,65,65,65,65,65,]),'type':([9,22,48,52,70,128,177,],[19,29,55,19,100,145,100,]),'empty':([4,7,9,10,23,33,38,44,48,49,50,51,52,70,89,91,92,94,96,97,102,106,113,119,124,133,138,149,152,154,157,158,159,160,161,177,183,185,191,],[6,11,20,25,25,40,47,40,56,74,40,87,20,101,47,109,74,114,117,120,123,74,114,120,123,151,156,151,117,167,74,87,109,114,74,101,167,74,74,]),'funct3':([91,159,],[107,171,]),'declare2Local':([138,],[154,]),'assignment':([49,92,106,157,161,185,191,],[67,67,67,67,67,67,67,]),'cuerpo':([12,],[26,]),'altaVarLocal':([122,176,],[138,183,]),'declare2':([33,],[38,]),'declare3':([38,89,],[45,105,]),'declare3Local':([154,183,],[168,187,]),'cycles':([49,92,106,157,161,185,191,],[72,72,72,72,72,72,72,]),'for':([49,92,106,157,161,185,191,],[64,64,64,64,64,64,64,]),'goToMainQuad':([8,],[12,]),'createDirProc':([2,],[3,]),'altaModuloMain':([42,],[49,]),'altaModulo':([34,],[41,]),'while':([49,92,106,157,161,185,191,],[73,73,73,73,73,73,73,]),'altaPrograma':([4,],[5,]),'declareRecursivo':([9,52,],[18,88,]),'conditional2':([102,124,],[125,139,]),'exp':([37,94,102,113,124,133,135,149,160,],[43,113,124,113,124,149,153,149,113,]),'output':([49,92,106,157,161,185,191,],[75,75,75,75,75,75,75,]),'declareLocal':([49,92,106,157,161,185,191,],[76,76,76,76,76,76,76,]),'declare':([7,],[10,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM createDirProc ID altaPrograma SEMICOLON program2 goToMainQuad cuerpo END SEMICOLON','program',10,'p_program','parser.py',46),
  ('createDirProc -> <empty>','createDirProc',0,'p_createDirProc','parser.py',50),
  ('goToMainQuad -> <empty>','goToMainQuad',0,'p_goToMainQuad','parser.py',53),
  ('altaPrograma -> empty','altaPrograma',1,'p_altaPrograma','parser.py',57),
  ('program2 -> declare program3','program2',2,'p_program2','parser.py',68),
  ('declare -> DECLARE declareRecursivo','declare',2,'p_declare','parser.py',78),
  ('declareRecursivo -> type ID altaVarGlobal declare2 declare3 SEMICOLON declareRecursivo','declareRecursivo',7,'p_declareRecursivo','parser.py',82),
  ('declare2 -> array','declare2',1,'p_declare2','parser.py',86),
  ('declare3 -> COMMA ID altaVarGlobal declare3','declare3',4,'p_declare3','parser.py',90),
  ('program3 -> funct program3','program3',2,'p_program3','parser.py',97),
  ('funct -> FUNCTION type ID altaModulo LEFTPAR funct2 RIGHTPAR LEFTKEY est RIGHTKEY','funct',10,'p_funct','parser.py',101),
  ('altaModulo -> <empty>','altaModulo',0,'p_altaModulo','parser.py',105),
  ('funct2 -> type ID funct3','funct2',3,'p_funct2','parser.py',115),
  ('funct3 -> COMMA funct type ID funct3','funct3',5,'p_funct3','parser.py',119),
  ('funct2 -> empty','funct2',1,'p_funct2Empty','parser.py',123),
  ('funct3 -> empty','funct3',1,'p_funct3Empty','parser.py',127),
  ('program3 -> empty','program3',1,'p_program3Empty','parser.py',140),
  ('altaVarGlobal -> <empty>','altaVarGlobal',0,'p_altaVarGlobal','parser.py',145),
  ('declareRecursivo -> empty','declareRecursivo',1,'p_declareResursivoEmpty','parser.py',155),
  ('declare -> empty','declare',1,'p_declareEmpty','parser.py',159),
  ('declare3 -> empty','declare3',1,'p_declare3Empty','parser.py',172),
  ('array -> LEFTBRACK exp RIGHTBRACK array','array',4,'p_array','parser.py',176),
  ('array -> empty','array',1,'p_arrayEmpty','parser.py',180),
  ('type -> type2','type',1,'p_type','parser.py',184),
  ('type2 -> INT','type2',1,'p_type2','parser.py',188),
  ('type2 -> FLOAT','type2',1,'p_type2Float','parser.py',194),
  ('type2 -> STRING','type2',1,'p_type2String','parser.py',200),
  ('type2 -> BOOL','type2',1,'p_type2Bool','parser.py',206),
  ('type2 -> VOID','type2',1,'p_type2Void','parser.py',212),
  ('cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY altaModuloMain est RIGHTKEY','cuerpo',7,'p_cuerpo','parser.py',218),
  ('altaModuloMain -> <empty>','altaModuloMain',0,'p_altaModuloMain','parser.py',222),
  ('est -> conditional','est',1,'p_est','parser.py',232),
  ('est -> declareLocal','est',1,'p_estVars','parser.py',236),
  ('declareLocal -> DECLARE declareRecursivoLocal','declareLocal',2,'p_declareLocal','parser.py',240),
  ('declareRecursivoLocal -> type ID altaVarLocal declare2Local declare3Local SEMICOLON declareRecursivoLocal','declareRecursivoLocal',7,'p_declareRecursivoLocal','parser.py',244),
  ('declare2Local -> array','declare2Local',1,'p_declare2Local','parser.py',248),
  ('declare3Local -> COMMA ID altaVarLocal declare3Local','declare3Local',4,'p_declare3Local','parser.py',252),
  ('declareRecursivoLocal -> empty','declareRecursivoLocal',1,'p_declareResursivoEmptyLocal','parser.py',256),
  ('declareLocal -> empty','declareLocal',1,'p_declareEmptyLocal','parser.py',260),
  ('declare2Local -> empty','declare2Local',1,'p_declar2EmptyLocal','parser.py',265),
  ('declare3Local -> empty','declare3Local',1,'p_declare3EmptyLocal','parser.py',270),
  ('altaVarLocal -> <empty>','altaVarLocal',0,'p_altaVarLocal','parser.py',275),
  ('est -> cycles','est',1,'p_estCycle','parser.py',283),
  ('est -> input','est',1,'p_estRead','parser.py',287),
  ('est -> output','est',1,'p_estWrite','parser.py',291),
  ('est -> assignment','est',1,'p_estAassignment','parser.py',295),
  ('est -> funct','est',1,'p_estFunct','parser.py',299),
  ('est -> empty','est',1,'p_estEmpty','parser.py',303),
  ('assignment -> ID ASSGN ID SEMICOLON','assignment',4,'p_assignment','parser.py',307),
  ('conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY','conditional',10,'p_conditional','parser.py',311),
  ('conditional2 -> exp conditional2','conditional2',2,'p_conditional2','parser.py',315),
  ('conditional2 -> empty','conditional2',1,'p_conditional2Empty','parser.py',319),
  ('cycles -> while','cycles',1,'p_cycles','parser.py',323),
  ('cycles -> for','cycles',1,'p_cyclesFor','parser.py',327),
  ('cycles -> do-while','cycles',1,'p_cyclesDoWhile','parser.py',331),
  ('do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR','do-while',8,'p_doWhile','parser.py',335),
  ('while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY','while',8,'p_whileClass','parser.py',339),
  ('while2 -> exp while2','while2',2,'p_while2','parser.py',343),
  ('while2 -> empty','while2',1,'p_while2Empty','parser.py',347),
  ('for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY','for',13,'p_forClass','parser.py',351),
  ('arithmeticOp -> SUM','arithmeticOp',1,'p_arithmeticOpPlus','parser.py',355),
  ('arithmeticOp -> MINUS','arithmeticOp',1,'p_arithmeticOpMinus','parser.py',359),
  ('for2 -> ID ASSGN ID for2','for2',4,'p_for2','parser.py',365),
  ('for2 -> empty','for2',1,'p_for2empty','parser.py',369),
  ('for3 -> exp for3','for3',2,'p_for3','parser.py',373),
  ('for3 -> empty','for3',1,'p_for3empty','parser.py',377),
  ('exp -> ID array exp2 SEMICOLON','exp',4,'p_exp','parser.py',381),
  ('exp2 -> LESS','exp2',1,'p_exp2','parser.py',385),
  ('exp2 -> GRTR','exp2',1,'p_expr2Grtr','parser.py',389),
  ('exp2 -> EQ','exp2',1,'p_exp2Equal','parser.py',394),
  ('exp2 -> NOTEQ','exp2',1,'p_exp2NotEq','parser.py',398),
  ('exp2 -> AND','exp2',1,'p_exp2And','parser.py',402),
  ('exp2 -> OR','exp2',1,'p_exp2OR','parser.py',406),
  ('exp2 -> arithmeticExp','exp2',1,'p_exp2Arithemti','parser.py',410),
  ('arithmeticExp -> ID EQ ID arithmeticOp ID arithmeticExp','arithmeticExp',6,'p_arithmeticExp','parser.py',414),
  ('arithmeticExp -> empty','arithmeticExp',1,'p_arithmeticExpEmpty','parser.py',418),
  ('output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON','output',8,'p_output','parser.py',426),
  ('output2 -> ID output2','output2',2,'p_output2','parser.py',430),
  ('output2 -> empty','output2',1,'p_output2Empty','parser.py',434),
  ('input -> READ LEFTPAR ID RIGHTPAR SEMICOLON','input',5,'p_input','parser.py',438),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',443),
]
