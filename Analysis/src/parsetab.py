
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

<<<<<<< HEAD
_lr_signature = 'rightASSGNleftANDleftORleftNOTEQleftEQleftGRTRGRTREQLESSLESSEQleftSUMMINUSleftMULTPDIVIDEleftLEFTPARRIGHTPARAND ASSGN BOOL COLON COMMA CYCLE DECLARE DIVIDE DO DOT ELSE END EQ FLOAT FOR FUNCTION GRTR GRTREQ ID IF INT LEFTBRACK LEFTBRACK LEFTKEY LEFTPAR LESS LESSEQ MAIN MINUS MULTP NOTEQ NUMBER OR PROGRAM QUOTE READ RIGHTBRACK RIGHTKEY RIGHTPAR SEMICOLON SPACE STRING SUM TYPE VOID WHILE WRITE newlineprogram : PROGRAM ID  SEMICOLON program2 cuerpo END SEMICOLONprogram2 : declare program3program2 : emptyprogram3 : funct program3program3 : emptydeclare : DECLARE declareRecursivo declareRecursivo : type ID declare2 declare3 SEMICOLON declareRecursivodeclareRecursivo : emptydeclare : emptydeclare2 : arraydeclare2 : emptydeclare3 : COMMA  ID declare3 declare3 : emptyarray : LEFTBRACK exp RIGHTBRACK arrayarray : emptytype : type2type2 : INTtype2 : FLOATtype2 : STRINGtype2 : BOOLtype2 : VOIDcuerpo : MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 est RIGHTKEYcuerpo2 : cuerpocuerpo2 : emptyest : conditionalest : cyclesest : inputest : outputest : assignmentest : functest : emptyassignment : ID ASSGN ID SEMICOLONconditional : IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEYconditional2 : exp conditional2conditional2 : emptycycles : whilecycles : forcycles : do-whiledo-while : DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPARwhile : WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEYwhile2 : exp while2while2 : emptyfor : FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEYarithmeticOp : SUMarithmeticOp : MINUSfor2 : ID ASSGN ID for2for2 : emptyfor3 : exp for3for3 : emptyexp : ID array exp2 SEMICOLONexp2 : LESSexp2 : GRTRexp2 : EQexp2 : NOTEQexp2 : ANDexp2 : ORexp2 : arithmeticExparithmeticExp : ID EQ ID arithmeticOp ID arithmeticExparithmeticExp : emptyexp2 : emptyoutput : WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLONoutput2 : ID output2output2 : emptyinput : READ LEFTPAR ID RIGHTPAR SEMICOLONfunct : FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEYfunct2 : COMMA funct type ID funct2funct2 : emptyempty :'
    
_lr_action_items = {'DO':([36,43,44,45,84,87,129,139,144,163,168,],[-68,-23,52,-24,52,-22,52,52,52,52,52,]),'FLOAT':([6,20,42,49,114,152,],[14,14,14,14,14,-65,]),'LESS':([38,46,47,48,70,],[-68,-68,73,-15,-14,]),'READ':([36,43,44,45,84,87,129,139,144,163,168,],[-68,-23,54,-24,54,-22,54,54,54,54,54,]),'VOID':([6,20,42,49,114,152,],[13,13,13,13,13,-65,]),'WHILE':([36,43,44,45,84,87,115,117,129,139,144,163,168,],[-68,-23,56,-24,56,-22,131,133,56,56,56,56,56,]),'PROGRAM':([0,],[2,]),'RIGHTKEY':([36,43,44,45,53,55,57,58,59,60,62,66,67,68,69,84,87,97,123,129,132,139,141,144,149,152,155,159,160,162,163,165,167,168,169,170,],[-68,-23,-68,-24,-30,-25,-38,87,-37,-27,-29,-36,-31,-28,-26,-68,-22,115,-32,-68,-64,-68,152,-68,158,-65,160,-39,-40,-61,-68,167,-33,-68,170,-43,]),'MINUS':([112,127,128,156,161,],[128,-44,-45,128,128,]),'SEMICOLON':([3,24,26,32,33,34,38,39,41,46,47,48,50,70,71,72,73,74,75,76,77,78,80,82,88,92,102,104,108,116,119,134,135,136,137,140,145,147,150,151,157,],[4,29,-68,-68,-10,-11,-68,49,-13,-68,-68,-15,-68,-14,-55,-57,-51,-54,92,-56,-52,-53,-59,-12,-68,-50,119,-47,123,132,-68,-68,146,-49,-68,-68,-48,-46,-58,-59,162,]),'QUOTE':([89,92,105,106,107,122,138,],[-68,-50,121,-68,-63,-62,148,]),'RIGHTPAR':([25,83,86,91,92,94,96,98,99,100,101,109,110,111,118,124,127,128,142,143,148,153,154,164,],[30,-68,-68,-68,-50,113,-67,116,117,-68,-42,-35,-68,125,-41,-34,-44,-45,-68,-68,157,-66,159,166,]),'NOTEQ':([38,46,47,48,70,],[-68,-68,74,-15,-14,]),'COMMA':([26,32,33,34,46,48,50,70,83,142,],[-68,40,-10,-11,-68,-15,40,-14,95,95,]),'IF':([36,43,44,45,84,87,129,139,144,163,168,],[-68,-23,65,-24,65,-22,65,65,65,65,65,]),'SUM':([112,127,128,156,161,],[127,-44,-45,127,127,]),'$end':([1,29,],[0,-1,]),'FUNCTION':([4,6,7,8,16,18,21,36,43,44,45,49,81,84,87,95,129,139,144,152,163,168,],[-68,-68,20,-9,-6,-8,20,-68,-23,20,-24,-68,-7,20,-22,20,20,20,20,-65,20,20,]),'RIGHTBRACK':([37,92,],[46,-50,]),'END':([9,87,],[24,-22,]),'STRING':([6,20,42,49,114,152,],[11,11,11,11,11,-65,]),'FOR':([36,43,44,45,84,87,129,139,144,163,168,],[-68,-23,61,-24,61,-22,61,61,61,61,61,]),'ELSE':([158,],[163,]),'WRITE':([36,43,44,45,84,87,129,139,144,163,168,],[-68,-23,63,-24,63,-22,63,63,63,63,63,]),'GRTR':([38,46,47,48,70,],[-68,-68,77,-15,-14,]),'ID':([2,11,12,13,14,15,17,19,27,31,36,38,40,43,44,45,46,47,48,51,70,84,85,86,87,88,89,90,91,92,93,100,106,110,119,120,121,126,127,128,129,130,134,137,139,140,143,144,146,163,168,],[3,-19,-17,-21,-18,-20,26,-16,35,38,-68,-68,50,-23,64,-24,-68,79,-15,83,-14,64,98,38,-22,103,106,108,38,-50,112,38,106,38,38,137,38,140,-44,-45,64,142,38,103,64,79,38,64,156,64,64,]),'EQ':([38,46,47,48,70,79,],[-68,-68,78,-15,-14,93,]),'DECLARE':([4,],[6,]),'LEFTKEY':([30,52,113,125,133,166,],[36,84,129,139,144,168,]),'AND':([38,46,47,48,70,],[-68,-68,71,-15,-14,]),'ASSGN':([64,103,],[90,120,]),'INT':([6,20,42,49,114,152,],[12,12,12,12,12,-65,]),'LEFTBRACK':([26,38,46,],[31,31,31,]),'LEFTPAR':([10,35,54,56,61,63,65,131,],[25,42,85,86,88,89,91,143,]),'BOOL':([6,20,42,49,114,152,],[15,15,15,15,15,-65,]),'MAIN':([4,5,6,7,8,16,18,21,22,23,28,36,49,81,152,],[-68,10,-68,-68,-3,-6,-8,-68,-2,-5,-4,10,-68,-7,-65,]),'OR':([38,46,47,48,70,],[-68,-68,76,-15,-14,]),}
=======
_lr_signature = 'AND AND ARCH ARCH ASSGN BOOL BOOL CIRCLE CIRCLIE COLON COMMA CYCLE DECLARE DECLARE DIVIDE DO DO DOT ELSE ELSE END END EQ FLOAT FLOAT FOR FOR FUNCTION FUNCTION GRTR GRTREQ ID IF IF INT INT LEFTBRACK LEFTKEY LEFTPAR LESS LESSEQ MAIN MAIN MINUS MULTP NOTEQ NUMBER OR OR PAINT PAINT PROGRAM PROGRAM QUOTE READ READ RETURN RETURN RIGHTBRACK RIGHTKEY RIGHTPAR SEMICOLON SPACE SQUARE SQUARE STRING STRING SUM TYPE VOID VOID WHILE WHILE WRITE WRITE newlineprogram : PROGRAM ID SEMICOLON program2 cuerpo END SEMICOLONprogram2 : declare program3program2 : emptyprogram3 : funct program3program3 : emptydeclare : DECLARE type ID declare2 declare3 SEMICOLONdeclare2 : arraydeclare2 : emptydeclare3 : COMMA declare3declare3 : emptyarray : LEFTBRACK exp RIGHTBRACK arrayarray : emptytype : TYPE type2type2 : INTtype2 : FLOATtype2 : STRINGtype2 : BOOLtype2 : VOIDcuerpo : MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 RIGHTKEYcuerpo2 : estcuerpo2 : emptyest : conditionalest : cyclesest : inputest : outputest : assignmentest : functassignment : ID ASSGN ID SEMICOLONconditional : IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEYconditional2 : exp conditional2conditional2 : emptycycles : whilecycles : forcycles : do-whiledo-while : DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPARwhile : WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEYwhile2 : exp while2while2 : emptyfor : FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEYarithmeticOp : SUMarithmeticOp : MINUSfor2 : ID ASSGN ID for2for2 : emptyfor3 : exp for3for3 : emptyexp : ID array exp2 SEMICOLONexp2 : LESSexp2 : GRTRexp2 : EQexp2 : NOTEQexp2 : ANDexp2 : ORexp2 : arithmeticExparithmeticExp : ID EQ ID arithmeticOp ID arithmeticExparithmeticExp : emptyexp2 : emptyoutput : WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLONoutput2 : ID output2output2 : emptyinput : READ LEFTPAR ID RIGHTPAR SEMICOLONfunct : FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEYfunct2 : COMMA funct type ID funct2funct2 : emptyempty :'
    
_lr_action_items = {'DO':([35,67,129,133,136,158,163,],[42,42,42,42,42,42,42,]),'LEFTBRACK':([25,37,61,],[30,30,30,]),'LESS':([37,61,62,63,75,],[-64,-64,78,-12,-11,]),'READ':([35,67,129,133,136,158,163,],[44,44,44,44,44,44,44,]),'VOID':([11,],[21,]),'DECLARE':([4,],[6,]),'WHILE':([35,67,107,109,129,133,136,158,163,],[46,46,121,123,46,46,46,46,46,]),'PROGRAM':([0,],[2,]),'RIGHTKEY':([35,43,45,47,48,49,50,51,53,57,58,59,60,87,115,122,141,143,146,152,154,155,157,160,162,164,165,],[-64,-27,-22,-34,-20,-33,70,-24,-26,-23,-32,-21,-25,107,-28,-60,149,152,155,-61,-35,-36,-57,162,-29,165,-39,]),'MINUS':([118,131,132,147,156,],[132,-40,-41,132,132,]),'SEMICOLON':([3,17,25,31,32,33,37,38,39,40,61,62,63,65,71,75,76,77,78,79,80,81,82,83,85,92,94,98,102,108,111,124,125,126,127,137,139,142,148,150,151,],[4,28,-64,-64,-7,-8,-64,64,-64,-10,-64,-64,-12,-9,-64,-11,-51,-53,-47,-50,102,-52,-48,-49,-55,111,-43,115,-46,122,-64,-64,138,-45,-64,-44,-42,-64,157,-54,-55,]),'QUOTE':([72,95,96,97,102,114,128,],[-64,113,-64,-59,-46,-58,140,]),'RIGHTPAR':([18,69,74,86,88,89,90,91,99,100,101,102,104,106,110,116,131,132,135,140,144,145,153,159,],[29,-64,-64,-64,108,109,-64,-38,-31,-64,117,-46,119,-63,-37,-30,-40,-41,-64,148,-64,154,-62,161,]),'NOTEQ':([37,61,62,63,75,],[-64,-64,79,-12,-11,]),'COMMA':([25,31,32,33,39,61,63,75,86,144,],[-64,39,-7,-8,39,-64,-12,-11,105,105,]),'IF':([35,67,129,133,136,158,163,],[56,56,56,56,56,56,56,]),'SUM':([118,131,132,147,156,],[131,-40,-41,131,131,]),'$end':([1,28,],[0,-1,]),'FUNCTION':([7,14,35,64,67,105,129,133,136,152,158,163,],[13,13,13,-6,13,13,13,13,13,-61,13,13,]),'RIGHTBRACK':([36,102,],[61,-46,]),'END':([9,70,],[17,-19,]),'STRING':([11,],[19,]),'FOR':([35,67,129,133,136,158,163,],[52,52,52,52,52,52,52,]),'ELSE':([149,],[158,]),'WRITE':([35,67,129,133,136,158,163,],[54,54,54,54,54,54,54,]),'GRTR':([37,61,62,63,75,],[-64,-64,82,-12,-11,]),'EQ':([37,61,62,63,75,84,],[-64,-64,83,-12,-11,103,]),'ID':([2,12,19,20,21,22,23,24,26,30,35,37,61,62,63,66,67,68,69,71,72,73,74,75,90,96,100,102,103,111,112,113,124,127,129,130,131,132,133,134,135,136,138,142,158,163,],[3,25,-16,-14,-18,-15,-17,-13,34,37,55,-64,-64,84,-12,86,55,88,37,93,96,98,37,-11,37,96,37,-46,118,37,127,37,37,93,55,142,-40,-41,55,144,37,55,147,84,55,55,]),'LEFTKEY':([29,42,117,119,123,161,],[35,67,129,133,136,163,]),'AND':([37,61,62,63,75,],[-64,-64,76,-12,-11,]),'ASSGN':([55,93,],[73,112,]),'INT':([11,],[20,]),'FLOAT':([11,],[22,]),'LEFTPAR':([10,34,44,46,52,54,56,121,],[18,41,68,69,71,72,74,135,]),'BOOL':([11,],[23,]),'MAIN':([4,5,7,8,14,15,16,27,64,152,],[-64,10,-64,-3,-64,-2,-5,-4,-6,-61,]),'TYPE':([6,13,41,120,152,],[11,11,11,11,-61,]),'OR':([37,61,62,63,75,],[-64,-64,81,-12,-11,]),}
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

<<<<<<< HEAD
_lr_goto_items = {'funct':([7,21,44,84,95,129,139,144,163,168,],[21,21,53,53,114,53,53,53,53,53,]),'output2':([89,106,],[105,122,]),'conditional':([44,84,129,139,144,163,168,],[55,55,55,55,55,55,55,]),'while2':([86,100,143,],[99,118,154,]),'do-while':([44,84,129,139,144,163,168,],[57,57,57,57,57,57,57,]),'for3':([119,134,],[135,145,]),'for2':([88,137,],[102,147,]),'array':([26,38,46,],[33,47,70,]),'type2':([6,20,42,49,114,],[19,19,19,19,19,]),'est':([44,84,129,139,144,163,168,],[58,97,141,149,155,165,169,]),'arithmeticExp':([47,140,],[72,150,]),'for':([44,84,129,139,144,163,168,],[59,59,59,59,59,59,59,]),'program3':([7,21,],[22,28,]),'exp2':([47,],[75,]),'funct2':([83,142,],[94,153,]),'program':([0,],[1,]),'cuerpo2':([36,],[44,]),'input':([44,84,129,139,144,163,168,],[60,60,60,60,60,60,60,]),'type':([6,20,42,49,114,],[17,27,51,17,130,]),'empty':([4,6,7,21,26,32,36,38,44,46,47,49,50,83,84,86,88,89,91,100,106,110,119,129,134,137,139,140,142,143,144,163,168,],[8,18,23,23,34,41,45,48,67,48,80,18,41,96,67,101,104,107,109,101,107,109,136,67,136,104,67,151,96,101,67,67,67,]),'arithmeticOp':([112,156,161,],[126,161,164,]),'assignment':([44,84,129,139,144,163,168,],[62,62,62,62,62,62,62,]),'cuerpo':([5,36,],[9,43,]),'declare2':([26,],[32,]),'declare3':([32,50,],[39,82,]),'program2':([4,],[5,]),'while':([44,84,129,139,144,163,168,],[66,66,66,66,66,66,66,]),'declareRecursivo':([6,49,],[16,81,]),'conditional2':([91,110,],[111,124,]),'exp':([31,86,91,100,110,119,121,134,143,],[37,100,110,100,110,134,138,134,100,]),'output':([44,84,129,139,144,163,168,],[68,68,68,68,68,68,68,]),'cycles':([44,84,129,139,144,163,168,],[69,69,69,69,69,69,69,]),'declare':([4,],[7,]),}
=======
_lr_goto_items = {'funct':([7,14,35,67,105,129,133,136,158,163,],[14,14,43,43,120,43,43,43,43,43,]),'output2':([72,96,],[95,114,]),'conditional':([35,67,129,133,136,158,163,],[45,45,45,45,45,45,45,]),'while2':([69,90,135,],[89,110,145,]),'do-while':([35,67,129,133,136,158,163,],[47,47,47,47,47,47,47,]),'for3':([111,124,],[125,137,]),'for2':([71,127,],[92,139,]),'array':([25,37,61,],[32,62,75,]),'type2':([11,],[24,]),'est':([35,67,129,133,136,158,163,],[48,87,141,143,146,160,164,]),'arithmeticExp':([62,142,],[77,150,]),'for':([35,67,129,133,136,158,163,],[49,49,49,49,49,49,49,]),'program3':([7,14,],[15,27,]),'exp2':([62,],[80,]),'funct2':([86,144,],[104,153,]),'program':([0,],[1,]),'cuerpo2':([35,],[50,]),'input':([35,67,129,133,136,158,163,],[51,51,51,51,51,51,51,]),'type':([6,13,41,120,],[12,26,66,134,]),'empty':([4,7,14,25,31,35,37,39,61,62,69,71,72,74,86,90,96,100,111,124,127,135,142,144,],[8,16,16,33,40,59,63,40,63,85,91,94,97,99,106,91,97,99,126,126,94,91,151,106,]),'arithmeticOp':([118,147,156,],[130,156,159,]),'assignment':([35,67,129,133,136,158,163,],[53,53,53,53,53,53,53,]),'cuerpo':([5,],[9,]),'declare2':([25,],[31,]),'declare3':([31,39,],[38,65,]),'program2':([4,],[5,]),'while':([35,67,129,133,136,158,163,],[58,58,58,58,58,58,58,]),'conditional2':([74,100,],[101,116,]),'exp':([30,69,74,90,100,111,113,124,135,],[36,90,100,90,100,124,128,124,90,]),'output':([35,67,129,133,136,158,163,],[60,60,60,60,60,60,60,]),'cycles':([35,67,129,133,136,158,163,],[57,57,57,57,57,57,57,]),'declare':([4,],[7,]),}
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON program2 cuerpo END SEMICOLON','program',7,'p_program','parser.py',23),
  ('program2 -> declare program3','program2',2,'p_program2','parser.py',27),
  ('program2 -> empty','program2',1,'p_program2Empty','parser.py',31),
  ('program3 -> funct program3','program3',2,'p_program3','parser.py',35),
  ('program3 -> empty','program3',1,'p_program3Empty','parser.py',39),
<<<<<<< HEAD
  ('declare -> DECLARE declareRecursivo','declare',2,'p_declare','parser.py',43),
  ('declareRecursivo -> type ID declare2 declare3 SEMICOLON declareRecursivo','declareRecursivo',6,'p_declareRecursivo','parser.py',47),
  ('declareRecursivo -> empty','declareRecursivo',1,'p_declareResursivoEmpty','parser.py',51),
  ('declare -> empty','declare',1,'p_declareEmpty','parser.py',55),
  ('declare2 -> array','declare2',1,'p_declare2','parser.py',59),
  ('declare2 -> empty','declare2',1,'p_declar2Empty','parser.py',63),
  ('declare3 -> COMMA ID declare3','declare3',3,'p_declare3','parser.py',67),
  ('declare3 -> empty','declare3',1,'p_declare3Empty','parser.py',71),
  ('array -> LEFTBRACK exp RIGHTBRACK array','array',4,'p_array','parser.py',75),
  ('array -> empty','array',1,'p_arrayEmpty','parser.py',79),
  ('type -> type2','type',1,'p_type','parser.py',83),
  ('type2 -> INT','type2',1,'p_type2','parser.py',87),
  ('type2 -> FLOAT','type2',1,'p_type2Float','parser.py',91),
  ('type2 -> STRING','type2',1,'p_type2String','parser.py',95),
  ('type2 -> BOOL','type2',1,'p_type2Bool','parser.py',99),
  ('type2 -> VOID','type2',1,'p_type2Void','parser.py',103),
  ('cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 est RIGHTKEY','cuerpo',7,'p_cuerpo','parser.py',107),
  ('cuerpo2 -> cuerpo','cuerpo2',1,'p_cuerpo2','parser.py',111),
  ('cuerpo2 -> empty','cuerpo2',1,'p_cuerpo2Empty','parser.py',115),
  ('est -> conditional','est',1,'p_est','parser.py',119),
  ('est -> cycles','est',1,'p_estCycle','parser.py',123),
  ('est -> input','est',1,'p_estRead','parser.py',127),
  ('est -> output','est',1,'p_estWrite','parser.py',131),
  ('est -> assignment','est',1,'p_estAassignment','parser.py',135),
  ('est -> funct','est',1,'p_estFunct','parser.py',139),
  ('est -> empty','est',1,'p_estEmpty','parser.py',142),
  ('assignment -> ID ASSGN ID SEMICOLON','assignment',4,'p_assignment','parser.py',146),
  ('conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY','conditional',10,'p_conditional','parser.py',150),
  ('conditional2 -> exp conditional2','conditional2',2,'p_conditional2','parser.py',154),
  ('conditional2 -> empty','conditional2',1,'p_conditional2Empty','parser.py',158),
  ('cycles -> while','cycles',1,'p_cycles','parser.py',162),
  ('cycles -> for','cycles',1,'p_cyclesFor','parser.py',166),
  ('cycles -> do-while','cycles',1,'p_cyclesDoWhile','parser.py',170),
  ('do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR','do-while',8,'p_doWhile','parser.py',174),
  ('while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY','while',8,'p_while','parser.py',177),
  ('while2 -> exp while2','while2',2,'p_while2','parser.py',181),
  ('while2 -> empty','while2',1,'p_while2Empty','parser.py',185),
  ('for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY','for',13,'p_for','parser.py',189),
  ('arithmeticOp -> SUM','arithmeticOp',1,'p_arithmeticOpPlus','parser.py',193),
  ('arithmeticOp -> MINUS','arithmeticOp',1,'p_arithmeticOpMinus','parser.py',197),
  ('for2 -> ID ASSGN ID for2','for2',4,'p_for2','parser.py',203),
  ('for2 -> empty','for2',1,'p_for2empty','parser.py',207),
  ('for3 -> exp for3','for3',2,'p_for3','parser.py',211),
  ('for3 -> empty','for3',1,'p_for3empty','parser.py',215),
  ('exp -> ID array exp2 SEMICOLON','exp',4,'p_exp','parser.py',219),
  ('exp2 -> LESS','exp2',1,'p_exp2','parser.py',223),
  ('exp2 -> GRTR','exp2',1,'p_expr2Grtr','parser.py',227),
  ('exp2 -> EQ','exp2',1,'p_exp2Equal','parser.py',232),
  ('exp2 -> NOTEQ','exp2',1,'p_exp2NotEq','parser.py',236),
  ('exp2 -> AND','exp2',1,'p_exp2And','parser.py',240),
  ('exp2 -> OR','exp2',1,'p_exp2OR','parser.py',244),
  ('exp2 -> arithmeticExp','exp2',1,'p_exp2Arithemti','parser.py',248),
  ('arithmeticExp -> ID EQ ID arithmeticOp ID arithmeticExp','arithmeticExp',6,'p_arithmeticExp','parser.py',252),
  ('arithmeticExp -> empty','arithmeticExp',1,'p_arithmeticExpEmpty','parser.py',256),
  ('exp2 -> empty','exp2',1,'p_exp2Empty','parser.py',260),
  ('output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON','output',8,'p_output','parser.py',264),
  ('output2 -> ID output2','output2',2,'p_output2','parser.py',268),
  ('output2 -> empty','output2',1,'p_output2Empty','parser.py',272),
  ('input -> READ LEFTPAR ID RIGHTPAR SEMICOLON','input',5,'p_input','parser.py',276),
  ('funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY','funct',11,'p_funct','parser.py',280),
  ('funct2 -> COMMA funct type ID funct2','funct2',5,'p_funct2','parser.py',284),
  ('funct2 -> empty','funct2',1,'p_funct2Empty','parser.py',288),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',292),
=======
  ('declare -> DECLARE type ID declare2 declare3 SEMICOLON','declare',6,'p_declare','parser.py',43),
  ('declare2 -> array','declare2',1,'p_declare2','parser.py',47),
  ('declare2 -> empty','declare2',1,'p_declar2Empty','parser.py',51),
  ('declare3 -> COMMA declare3','declare3',2,'p_declare3','parser.py',55),
  ('declare3 -> empty','declare3',1,'p_declare3Empty','parser.py',59),
  ('array -> LEFTBRACK exp RIGHTBRACK array','array',4,'p_array','parser.py',63),
  ('array -> empty','array',1,'p_arrayEmpty','parser.py',67),
  ('type -> TYPE type2','type',2,'p_type','parser.py',71),
  ('type2 -> INT','type2',1,'p_type2','parser.py',75),
  ('type2 -> FLOAT','type2',1,'p_type2Float','parser.py',79),
  ('type2 -> STRING','type2',1,'p_type2String','parser.py',83),
  ('type2 -> BOOL','type2',1,'p_type2Bool','parser.py',87),
  ('type2 -> VOID','type2',1,'p_type2Void','parser.py',91),
  ('cuerpo -> MAIN LEFTPAR RIGHTPAR LEFTKEY cuerpo2 RIGHTKEY','cuerpo',6,'p_cuerpo','parser.py',95),
  ('cuerpo2 -> est','cuerpo2',1,'p_cuerpo2','parser.py',99),
  ('cuerpo2 -> empty','cuerpo2',1,'p_cuerpo2Empty','parser.py',103),
  ('est -> conditional','est',1,'p_est','parser.py',107),
  ('est -> cycles','est',1,'p_estCycle','parser.py',111),
  ('est -> input','est',1,'p_estRead','parser.py',115),
  ('est -> output','est',1,'p_estWrite','parser.py',119),
  ('est -> assignment','est',1,'p_estAassignment','parser.py',123),
  ('est -> funct','est',1,'p_estFunct','parser.py',127),
  ('assignment -> ID ASSGN ID SEMICOLON','assignment',4,'p_assignment','parser.py',131),
  ('conditional -> IF LEFTPAR conditional2 RIGHTPAR LEFTKEY est RIGHTKEY ELSE est RIGHTKEY','conditional',10,'p_conditional','parser.py',135),
  ('conditional2 -> exp conditional2','conditional2',2,'p_conditional2','parser.py',139),
  ('conditional2 -> empty','conditional2',1,'p_conditional2Empty','parser.py',143),
  ('cycles -> while','cycles',1,'p_cycles','parser.py',147),
  ('cycles -> for','cycles',1,'p_cyclesFor','parser.py',151),
  ('cycles -> do-while','cycles',1,'p_cyclesDoWhile','parser.py',155),
  ('do-while -> DO LEFTKEY est RIGHTKEY WHILE LEFTPAR while2 RIGHTPAR','do-while',8,'p_doWhile','parser.py',159),
  ('while -> WHILE LEFTPAR while2 RIGHTPAR WHILE LEFTKEY est RIGHTKEY','while',8,'p_while','parser.py',162),
  ('while2 -> exp while2','while2',2,'p_while2','parser.py',166),
  ('while2 -> empty','while2',1,'p_while2Empty','parser.py',170),
  ('for -> FOR LEFTPAR for2 SEMICOLON for3 SEMICOLON ID arithmeticOp arithmeticOp RIGHTPAR LEFTKEY est RIGHTKEY','for',13,'p_for','parser.py',174),
  ('arithmeticOp -> SUM','arithmeticOp',1,'p_arithmeticOpPlus','parser.py',178),
  ('arithmeticOp -> MINUS','arithmeticOp',1,'p_arithmeticOpMinus','parser.py',182),
  ('for2 -> ID ASSGN ID for2','for2',4,'p_for2','parser.py',188),
  ('for2 -> empty','for2',1,'p_for2empty','parser.py',192),
  ('for3 -> exp for3','for3',2,'p_for3','parser.py',196),
  ('for3 -> empty','for3',1,'p_for3empty','parser.py',200),
  ('exp -> ID array exp2 SEMICOLON','exp',4,'p_exp','parser.py',204),
  ('exp2 -> LESS','exp2',1,'p_exp2','parser.py',208),
  ('exp2 -> GRTR','exp2',1,'p_expr2Grtr','parser.py',212),
  ('exp2 -> EQ','exp2',1,'p_exp2Equal','parser.py',217),
  ('exp2 -> NOTEQ','exp2',1,'p_exp2NotEq','parser.py',221),
  ('exp2 -> AND','exp2',1,'p_exp2And','parser.py',225),
  ('exp2 -> OR','exp2',1,'p_exp2OR','parser.py',229),
  ('exp2 -> arithmeticExp','exp2',1,'p_exp2Arithemti','parser.py',233),
  ('arithmeticExp -> ID EQ ID arithmeticOp ID arithmeticExp','arithmeticExp',6,'p_arithmeticExp','parser.py',237),
  ('arithmeticExp -> empty','arithmeticExp',1,'p_arithmeticExpEmpty','parser.py',241),
  ('exp2 -> empty','exp2',1,'p_exp2Empty','parser.py',245),
  ('output -> WRITE LEFTPAR output2 QUOTE exp QUOTE RIGHTPAR SEMICOLON','output',8,'p_output','parser.py',249),
  ('output2 -> ID output2','output2',2,'p_output2','parser.py',253),
  ('output2 -> empty','output2',1,'p_output2Empty','parser.py',257),
  ('input -> READ LEFTPAR ID RIGHTPAR SEMICOLON','input',5,'p_input','parser.py',261),
  ('funct -> FUNCTION type ID LEFTPAR type ID funct2 RIGHTPAR LEFTKEY est RIGHTKEY','funct',11,'p_funct','parser.py',265),
  ('funct2 -> COMMA funct type ID funct2','funct2',5,'p_funct2','parser.py',269),
  ('funct2 -> empty','funct2',1,'p_funct2Empty','parser.py',273),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',277),
>>>>>>> babe6c19f439195c89234016fb93339865a3aa20
]
